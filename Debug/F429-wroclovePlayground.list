
F429-wroclovePlayground.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ab40  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003650  0801acf0  0801acf0  0002acf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e340  0801e340  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  0801e340  0801e340  0002e340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e348  0801e348  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e348  0801e348  0002e348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e34c  0801e34c  0002e34c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0801e350  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301f0  2**0
                  CONTENTS
 10 .bss          00009340  200001f0  200001f0  000301f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20009530  20009530  000301f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00047181  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000804a  00000000  00000000  000773a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002278  00000000  00000000  0007f3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002110  00000000  00000000  00081668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00036e49  00000000  00000000  00083778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003a7dd  00000000  00000000  000ba5c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001009a9  00000000  00000000  000f4d9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001f5747  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a284  00000000  00000000  001f579c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801acd8 	.word	0x0801acd8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	0801acd8 	.word	0x0801acd8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2uiz>:
 8000b78:	004a      	lsls	r2, r1, #1
 8000b7a:	d211      	bcs.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d211      	bcs.n	8000ba6 <__aeabi_d2uiz+0x2e>
 8000b82:	d50d      	bpl.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d40e      	bmi.n	8000bac <__aeabi_d2uiz+0x34>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_d2uiz+0x3a>
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b9a4 	b.w	8000f18 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f83c 	bl	8000c54 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2lz>:
 8000be8:	b538      	push	{r3, r4, r5, lr}
 8000bea:	2200      	movs	r2, #0
 8000bec:	2300      	movs	r3, #0
 8000bee:	4604      	mov	r4, r0
 8000bf0:	460d      	mov	r5, r1
 8000bf2:	f7ff ff83 	bl	8000afc <__aeabi_dcmplt>
 8000bf6:	b928      	cbnz	r0, 8000c04 <__aeabi_d2lz+0x1c>
 8000bf8:	4620      	mov	r0, r4
 8000bfa:	4629      	mov	r1, r5
 8000bfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c00:	f000 b80a 	b.w	8000c18 <__aeabi_d2ulz>
 8000c04:	4620      	mov	r0, r4
 8000c06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c0a:	f000 f805 	bl	8000c18 <__aeabi_d2ulz>
 8000c0e:	4240      	negs	r0, r0
 8000c10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c14:	bd38      	pop	{r3, r4, r5, pc}
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2ulz>:
 8000c18:	b5d0      	push	{r4, r6, r7, lr}
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <__aeabi_d2ulz+0x34>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	4606      	mov	r6, r0
 8000c20:	460f      	mov	r7, r1
 8000c22:	f7ff fcf9 	bl	8000618 <__aeabi_dmul>
 8000c26:	f7ff ffa7 	bl	8000b78 <__aeabi_d2uiz>
 8000c2a:	4604      	mov	r4, r0
 8000c2c:	f7ff fc7a 	bl	8000524 <__aeabi_ui2d>
 8000c30:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <__aeabi_d2ulz+0x38>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	f7ff fcf0 	bl	8000618 <__aeabi_dmul>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	4630      	mov	r0, r6
 8000c3e:	4639      	mov	r1, r7
 8000c40:	f7ff fb32 	bl	80002a8 <__aeabi_dsub>
 8000c44:	f7ff ff98 	bl	8000b78 <__aeabi_d2uiz>
 8000c48:	4621      	mov	r1, r4
 8000c4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c4c:	3df00000 	.word	0x3df00000
 8000c50:	41f00000 	.word	0x41f00000

08000c54 <__udivmoddi4>:
 8000c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c58:	9d08      	ldr	r5, [sp, #32]
 8000c5a:	4604      	mov	r4, r0
 8000c5c:	468c      	mov	ip, r1
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	f040 8083 	bne.w	8000d6a <__udivmoddi4+0x116>
 8000c64:	428a      	cmp	r2, r1
 8000c66:	4617      	mov	r7, r2
 8000c68:	d947      	bls.n	8000cfa <__udivmoddi4+0xa6>
 8000c6a:	fab2 f282 	clz	r2, r2
 8000c6e:	b142      	cbz	r2, 8000c82 <__udivmoddi4+0x2e>
 8000c70:	f1c2 0020 	rsb	r0, r2, #32
 8000c74:	fa24 f000 	lsr.w	r0, r4, r0
 8000c78:	4091      	lsls	r1, r2
 8000c7a:	4097      	lsls	r7, r2
 8000c7c:	ea40 0c01 	orr.w	ip, r0, r1
 8000c80:	4094      	lsls	r4, r2
 8000c82:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c86:	0c23      	lsrs	r3, r4, #16
 8000c88:	fbbc f6f8 	udiv	r6, ip, r8
 8000c8c:	fa1f fe87 	uxth.w	lr, r7
 8000c90:	fb08 c116 	mls	r1, r8, r6, ip
 8000c94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c98:	fb06 f10e 	mul.w	r1, r6, lr
 8000c9c:	4299      	cmp	r1, r3
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x60>
 8000ca0:	18fb      	adds	r3, r7, r3
 8000ca2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ca6:	f080 8119 	bcs.w	8000edc <__udivmoddi4+0x288>
 8000caa:	4299      	cmp	r1, r3
 8000cac:	f240 8116 	bls.w	8000edc <__udivmoddi4+0x288>
 8000cb0:	3e02      	subs	r6, #2
 8000cb2:	443b      	add	r3, r7
 8000cb4:	1a5b      	subs	r3, r3, r1
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cc8:	45a6      	cmp	lr, r4
 8000cca:	d909      	bls.n	8000ce0 <__udivmoddi4+0x8c>
 8000ccc:	193c      	adds	r4, r7, r4
 8000cce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd2:	f080 8105 	bcs.w	8000ee0 <__udivmoddi4+0x28c>
 8000cd6:	45a6      	cmp	lr, r4
 8000cd8:	f240 8102 	bls.w	8000ee0 <__udivmoddi4+0x28c>
 8000cdc:	3802      	subs	r0, #2
 8000cde:	443c      	add	r4, r7
 8000ce0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ce4:	eba4 040e 	sub.w	r4, r4, lr
 8000ce8:	2600      	movs	r6, #0
 8000cea:	b11d      	cbz	r5, 8000cf4 <__udivmoddi4+0xa0>
 8000cec:	40d4      	lsrs	r4, r2
 8000cee:	2300      	movs	r3, #0
 8000cf0:	e9c5 4300 	strd	r4, r3, [r5]
 8000cf4:	4631      	mov	r1, r6
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	b902      	cbnz	r2, 8000cfe <__udivmoddi4+0xaa>
 8000cfc:	deff      	udf	#255	; 0xff
 8000cfe:	fab2 f282 	clz	r2, r2
 8000d02:	2a00      	cmp	r2, #0
 8000d04:	d150      	bne.n	8000da8 <__udivmoddi4+0x154>
 8000d06:	1bcb      	subs	r3, r1, r7
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	fa1f f887 	uxth.w	r8, r7
 8000d10:	2601      	movs	r6, #1
 8000d12:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d16:	0c21      	lsrs	r1, r4, #16
 8000d18:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d20:	fb08 f30c 	mul.w	r3, r8, ip
 8000d24:	428b      	cmp	r3, r1
 8000d26:	d907      	bls.n	8000d38 <__udivmoddi4+0xe4>
 8000d28:	1879      	adds	r1, r7, r1
 8000d2a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d2e:	d202      	bcs.n	8000d36 <__udivmoddi4+0xe2>
 8000d30:	428b      	cmp	r3, r1
 8000d32:	f200 80e9 	bhi.w	8000f08 <__udivmoddi4+0x2b4>
 8000d36:	4684      	mov	ip, r0
 8000d38:	1ac9      	subs	r1, r1, r3
 8000d3a:	b2a3      	uxth	r3, r4
 8000d3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d40:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d44:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d48:	fb08 f800 	mul.w	r8, r8, r0
 8000d4c:	45a0      	cmp	r8, r4
 8000d4e:	d907      	bls.n	8000d60 <__udivmoddi4+0x10c>
 8000d50:	193c      	adds	r4, r7, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x10a>
 8000d58:	45a0      	cmp	r8, r4
 8000d5a:	f200 80d9 	bhi.w	8000f10 <__udivmoddi4+0x2bc>
 8000d5e:	4618      	mov	r0, r3
 8000d60:	eba4 0408 	sub.w	r4, r4, r8
 8000d64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d68:	e7bf      	b.n	8000cea <__udivmoddi4+0x96>
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	d909      	bls.n	8000d82 <__udivmoddi4+0x12e>
 8000d6e:	2d00      	cmp	r5, #0
 8000d70:	f000 80b1 	beq.w	8000ed6 <__udivmoddi4+0x282>
 8000d74:	2600      	movs	r6, #0
 8000d76:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7a:	4630      	mov	r0, r6
 8000d7c:	4631      	mov	r1, r6
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	fab3 f683 	clz	r6, r3
 8000d86:	2e00      	cmp	r6, #0
 8000d88:	d14a      	bne.n	8000e20 <__udivmoddi4+0x1cc>
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0x140>
 8000d8e:	4282      	cmp	r2, r0
 8000d90:	f200 80b8 	bhi.w	8000f04 <__udivmoddi4+0x2b0>
 8000d94:	1a84      	subs	r4, r0, r2
 8000d96:	eb61 0103 	sbc.w	r1, r1, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	468c      	mov	ip, r1
 8000d9e:	2d00      	cmp	r5, #0
 8000da0:	d0a8      	beq.n	8000cf4 <__udivmoddi4+0xa0>
 8000da2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000da6:	e7a5      	b.n	8000cf4 <__udivmoddi4+0xa0>
 8000da8:	f1c2 0320 	rsb	r3, r2, #32
 8000dac:	fa20 f603 	lsr.w	r6, r0, r3
 8000db0:	4097      	lsls	r7, r2
 8000db2:	fa01 f002 	lsl.w	r0, r1, r2
 8000db6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dba:	40d9      	lsrs	r1, r3
 8000dbc:	4330      	orrs	r0, r6
 8000dbe:	0c03      	lsrs	r3, r0, #16
 8000dc0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dc4:	fa1f f887 	uxth.w	r8, r7
 8000dc8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000dcc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd0:	fb06 f108 	mul.w	r1, r6, r8
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	fa04 f402 	lsl.w	r4, r4, r2
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x19c>
 8000ddc:	18fb      	adds	r3, r7, r3
 8000dde:	f106 3cff 	add.w	ip, r6, #4294967295
 8000de2:	f080 808d 	bcs.w	8000f00 <__udivmoddi4+0x2ac>
 8000de6:	4299      	cmp	r1, r3
 8000de8:	f240 808a 	bls.w	8000f00 <__udivmoddi4+0x2ac>
 8000dec:	3e02      	subs	r6, #2
 8000dee:	443b      	add	r3, r7
 8000df0:	1a5b      	subs	r3, r3, r1
 8000df2:	b281      	uxth	r1, r0
 8000df4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000df8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb00 f308 	mul.w	r3, r0, r8
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0x1c4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e0e:	d273      	bcs.n	8000ef8 <__udivmoddi4+0x2a4>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	d971      	bls.n	8000ef8 <__udivmoddi4+0x2a4>
 8000e14:	3802      	subs	r0, #2
 8000e16:	4439      	add	r1, r7
 8000e18:	1acb      	subs	r3, r1, r3
 8000e1a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e1e:	e778      	b.n	8000d12 <__udivmoddi4+0xbe>
 8000e20:	f1c6 0c20 	rsb	ip, r6, #32
 8000e24:	fa03 f406 	lsl.w	r4, r3, r6
 8000e28:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e2c:	431c      	orrs	r4, r3
 8000e2e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e32:	fa01 f306 	lsl.w	r3, r1, r6
 8000e36:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e3a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e3e:	431f      	orrs	r7, r3
 8000e40:	0c3b      	lsrs	r3, r7, #16
 8000e42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e46:	fa1f f884 	uxth.w	r8, r4
 8000e4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e4e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e52:	fb09 fa08 	mul.w	sl, r9, r8
 8000e56:	458a      	cmp	sl, r1
 8000e58:	fa02 f206 	lsl.w	r2, r2, r6
 8000e5c:	fa00 f306 	lsl.w	r3, r0, r6
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x220>
 8000e62:	1861      	adds	r1, r4, r1
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	d248      	bcs.n	8000efc <__udivmoddi4+0x2a8>
 8000e6a:	458a      	cmp	sl, r1
 8000e6c:	d946      	bls.n	8000efc <__udivmoddi4+0x2a8>
 8000e6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e72:	4421      	add	r1, r4
 8000e74:	eba1 010a 	sub.w	r1, r1, sl
 8000e78:	b2bf      	uxth	r7, r7
 8000e7a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e7e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e82:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e86:	fb00 f808 	mul.w	r8, r0, r8
 8000e8a:	45b8      	cmp	r8, r7
 8000e8c:	d907      	bls.n	8000e9e <__udivmoddi4+0x24a>
 8000e8e:	19e7      	adds	r7, r4, r7
 8000e90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e94:	d22e      	bcs.n	8000ef4 <__udivmoddi4+0x2a0>
 8000e96:	45b8      	cmp	r8, r7
 8000e98:	d92c      	bls.n	8000ef4 <__udivmoddi4+0x2a0>
 8000e9a:	3802      	subs	r0, #2
 8000e9c:	4427      	add	r7, r4
 8000e9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea2:	eba7 0708 	sub.w	r7, r7, r8
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	454f      	cmp	r7, r9
 8000eac:	46c6      	mov	lr, r8
 8000eae:	4649      	mov	r1, r9
 8000eb0:	d31a      	bcc.n	8000ee8 <__udivmoddi4+0x294>
 8000eb2:	d017      	beq.n	8000ee4 <__udivmoddi4+0x290>
 8000eb4:	b15d      	cbz	r5, 8000ece <__udivmoddi4+0x27a>
 8000eb6:	ebb3 020e 	subs.w	r2, r3, lr
 8000eba:	eb67 0701 	sbc.w	r7, r7, r1
 8000ebe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ec2:	40f2      	lsrs	r2, r6
 8000ec4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ec8:	40f7      	lsrs	r7, r6
 8000eca:	e9c5 2700 	strd	r2, r7, [r5]
 8000ece:	2600      	movs	r6, #0
 8000ed0:	4631      	mov	r1, r6
 8000ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed6:	462e      	mov	r6, r5
 8000ed8:	4628      	mov	r0, r5
 8000eda:	e70b      	b.n	8000cf4 <__udivmoddi4+0xa0>
 8000edc:	4606      	mov	r6, r0
 8000ede:	e6e9      	b.n	8000cb4 <__udivmoddi4+0x60>
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	e6fd      	b.n	8000ce0 <__udivmoddi4+0x8c>
 8000ee4:	4543      	cmp	r3, r8
 8000ee6:	d2e5      	bcs.n	8000eb4 <__udivmoddi4+0x260>
 8000ee8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eec:	eb69 0104 	sbc.w	r1, r9, r4
 8000ef0:	3801      	subs	r0, #1
 8000ef2:	e7df      	b.n	8000eb4 <__udivmoddi4+0x260>
 8000ef4:	4608      	mov	r0, r1
 8000ef6:	e7d2      	b.n	8000e9e <__udivmoddi4+0x24a>
 8000ef8:	4660      	mov	r0, ip
 8000efa:	e78d      	b.n	8000e18 <__udivmoddi4+0x1c4>
 8000efc:	4681      	mov	r9, r0
 8000efe:	e7b9      	b.n	8000e74 <__udivmoddi4+0x220>
 8000f00:	4666      	mov	r6, ip
 8000f02:	e775      	b.n	8000df0 <__udivmoddi4+0x19c>
 8000f04:	4630      	mov	r0, r6
 8000f06:	e74a      	b.n	8000d9e <__udivmoddi4+0x14a>
 8000f08:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f0c:	4439      	add	r1, r7
 8000f0e:	e713      	b.n	8000d38 <__udivmoddi4+0xe4>
 8000f10:	3802      	subs	r0, #2
 8000f12:	443c      	add	r4, r7
 8000f14:	e724      	b.n	8000d60 <__udivmoddi4+0x10c>
 8000f16:	bf00      	nop

08000f18 <__aeabi_idiv0>:
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	0000      	movs	r0, r0
	...

08000f20 <HAL_TIM_IC_CaptureCallback>:
volatile uint32_t first_value = 0;
volatile uint32_t second_value = 0;
volatile uint8_t is_first_captured = 0;
volatile uint8_t distance  = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	7f1b      	ldrb	r3, [r3, #28]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d17f      	bne.n	8001030 <HAL_TIM_IC_CaptureCallback+0x110>
		if (is_first_captured == 0) {
 8000f30:	4b43      	ldr	r3, [pc, #268]	; (8001040 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	bf0c      	ite	eq
 8000f3a:	2301      	moveq	r3, #1
 8000f3c:	2300      	movne	r3, #0
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d01a      	beq.n	8000f7a <HAL_TIM_IC_CaptureCallback+0x5a>
			first_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000f44:	2100      	movs	r1, #0
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f009 ffe4 	bl	800af14 <HAL_TIM_ReadCapturedValue>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	4a3d      	ldr	r2, [pc, #244]	; (8001044 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000f50:	6013      	str	r3, [r2, #0]
			is_first_captured = 1;
 8000f52:	4b3b      	ldr	r3, [pc, #236]	; (8001040 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	6a1a      	ldr	r2, [r3, #32]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f022 020a 	bic.w	r2, r2, #10
 8000f66:	621a      	str	r2, [r3, #32]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	6a1a      	ldr	r2, [r3, #32]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f042 0202 	orr.w	r2, r2, #2
 8000f76:	621a      	str	r2, [r3, #32]
			is_first_captured = 0;
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8000f78:	e05a      	b.n	8001030 <HAL_TIM_IC_CaptureCallback+0x110>
			second_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f009 ffc9 	bl	800af14 <HAL_TIM_ReadCapturedValue>
 8000f82:	4603      	mov	r3, r0
 8000f84:	4a30      	ldr	r2, [pc, #192]	; (8001048 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f86:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	625a      	str	r2, [r3, #36]	; 0x24
			if (second_value > first_value) {
 8000f90:	4b2d      	ldr	r3, [pc, #180]	; (8001048 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	4b2b      	ldr	r3, [pc, #172]	; (8001044 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	bf8c      	ite	hi
 8000f9c:	2301      	movhi	r3, #1
 8000f9e:	2300      	movls	r3, #0
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d006      	beq.n	8000fb4 <HAL_TIM_IC_CaptureCallback+0x94>
				difference = second_value-first_value;
 8000fa6:	4b28      	ldr	r3, [pc, #160]	; (8001048 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	4b26      	ldr	r3, [pc, #152]	; (8001044 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	e008      	b.n	8000fc6 <HAL_TIM_IC_CaptureCallback+0xa6>
				difference = 0xffff - first_value + second_value;
 8000fb4:	4b24      	ldr	r3, [pc, #144]	; (8001048 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b22      	ldr	r3, [pc, #136]	; (8001044 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000fc2:	33ff      	adds	r3, #255	; 0xff
 8000fc4:	60fb      	str	r3, [r7, #12]
			distance = difference * .034/2;
 8000fc6:	68f8      	ldr	r0, [r7, #12]
 8000fc8:	f7ff faac 	bl	8000524 <__aeabi_ui2d>
 8000fcc:	a31a      	add	r3, pc, #104	; (adr r3, 8001038 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd2:	f7ff fb21 	bl	8000618 <__aeabi_dmul>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	4610      	mov	r0, r2
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f04f 0200 	mov.w	r2, #0
 8000fe2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fe6:	f7ff fc41 	bl	800086c <__aeabi_ddiv>
 8000fea:	4602      	mov	r2, r0
 8000fec:	460b      	mov	r3, r1
 8000fee:	4610      	mov	r0, r2
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f7ff fdc1 	bl	8000b78 <__aeabi_d2uiz>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	4b14      	ldr	r3, [pc, #80]	; (800104c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000ffc:	701a      	strb	r2, [r3, #0]
			is_first_captured = 0;
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6a1a      	ldr	r2, [r3, #32]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f022 020a 	bic.w	r2, r2, #10
 8001012:	621a      	str	r2, [r3, #32]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	6a12      	ldr	r2, [r2, #32]
 800101e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8001020:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	68da      	ldr	r2, [r3, #12]
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f022 0202 	bic.w	r2, r2, #2
 800102e:	60da      	str	r2, [r3, #12]
}
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	b020c49c 	.word	0xb020c49c
 800103c:	3fa16872 	.word	0x3fa16872
 8001040:	20000214 	.word	0x20000214
 8001044:	2000020c 	.word	0x2000020c
 8001048:	20000210 	.word	0x20000210
 800104c:	20000215 	.word	0x20000215
 8001050:	20000c70 	.word	0x20000c70

08001054 <_ZN7HC_SR044readEv>:

uint8_t HC_SR04::read(void) {
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(HC_SR04_TRIG_GPIO_Port, HC_SR04_TRIG_Pin, GPIO_PIN_SET);
 800105c:	2201      	movs	r2, #1
 800105e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001062:	481a      	ldr	r0, [pc, #104]	; (80010cc <_ZN7HC_SR044readEv+0x78>)
 8001064:	f005 fe58 	bl	8006d18 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001068:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <_ZN7HC_SR044readEv+0x7c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2200      	movs	r2, #0
 800106e:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < 10);
 8001070:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <_ZN7HC_SR044readEv+0x7c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001076:	2b09      	cmp	r3, #9
 8001078:	bf94      	ite	ls
 800107a:	2301      	movls	r3, #1
 800107c:	2300      	movhi	r3, #0
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2b00      	cmp	r3, #0
 8001082:	d000      	beq.n	8001086 <_ZN7HC_SR044readEv+0x32>
 8001084:	e7f4      	b.n	8001070 <_ZN7HC_SR044readEv+0x1c>
	HAL_GPIO_WritePin(HC_SR04_TRIG_GPIO_Port, HC_SR04_TRIG_Pin, GPIO_PIN_RESET);
 8001086:	2200      	movs	r2, #0
 8001088:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800108c:	480f      	ldr	r0, [pc, #60]	; (80010cc <_ZN7HC_SR044readEv+0x78>)
 800108e:	f005 fe43 	bl	8006d18 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8001092:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <_ZN7HC_SR044readEv+0x7c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	68da      	ldr	r2, [r3, #12]
 8001098:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <_ZN7HC_SR044readEv+0x7c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f042 0202 	orr.w	r2, r2, #2
 80010a0:	60da      	str	r2, [r3, #12]
	distance = 0;
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <_ZN7HC_SR044readEv+0x80>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]
	while (distance == 0);
 80010a8:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <_ZN7HC_SR044readEv+0x80>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	bf0c      	ite	eq
 80010b2:	2301      	moveq	r3, #1
 80010b4:	2300      	movne	r3, #0
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d000      	beq.n	80010be <_ZN7HC_SR044readEv+0x6a>
 80010bc:	e7f4      	b.n	80010a8 <_ZN7HC_SR044readEv+0x54>
	return distance;
 80010be:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <_ZN7HC_SR044readEv+0x80>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	b2db      	uxtb	r3, r3
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40021400 	.word	0x40021400
 80010d0:	20000c70 	.word	0x20000c70
 80010d4:	20000215 	.word	0x20000215

080010d8 <_ZN7HD4478011write_upperEh>:
#include "HD44780.h"

void HD44780::write_upper(uint8_t cmd) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	460b      	mov	r3, r1
 80010e2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(config.D4_GPIO_Port, config.D4_GPIO_Pin, (GPIO_PinState)(cmd & 0x10));
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6918      	ldr	r0, [r3, #16]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	8a99      	ldrh	r1, [r3, #20]
 80010ec:	78fb      	ldrb	r3, [r7, #3]
 80010ee:	f003 0310 	and.w	r3, r3, #16
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	461a      	mov	r2, r3
 80010f6:	f005 fe0f 	bl	8006d18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(config.D5_GPIO_Port, config.D5_GPIO_Pin, (GPIO_PinState)(cmd & 0x20));
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6998      	ldr	r0, [r3, #24]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	8b99      	ldrh	r1, [r3, #28]
 8001102:	78fb      	ldrb	r3, [r7, #3]
 8001104:	f003 0320 	and.w	r3, r3, #32
 8001108:	b2db      	uxtb	r3, r3
 800110a:	461a      	mov	r2, r3
 800110c:	f005 fe04 	bl	8006d18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(config.D6_GPIO_Port, config.D6_GPIO_Pin, (GPIO_PinState)(cmd & 0x40));
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a18      	ldr	r0, [r3, #32]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8001118:	78fb      	ldrb	r3, [r7, #3]
 800111a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800111e:	b2db      	uxtb	r3, r3
 8001120:	461a      	mov	r2, r3
 8001122:	f005 fdf9 	bl	8006d18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(config.D7_GPIO_Port, config.D7_GPIO_Pin, (GPIO_PinState)(cmd & 0x80));
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 800112e:	78fb      	ldrb	r3, [r7, #3]
 8001130:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001134:	b2db      	uxtb	r3, r3
 8001136:	461a      	mov	r2, r3
 8001138:	f005 fdee 	bl	8006d18 <HAL_GPIO_WritePin>
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <_ZN7HD4478011write_lowerEh>:

void HD44780::write_lower(uint8_t cmd) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(config.D4_GPIO_Port, config.D4_GPIO_Pin, (GPIO_PinState)(cmd & 0x01));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6918      	ldr	r0, [r3, #16]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	8a99      	ldrh	r1, [r3, #20]
 8001158:	78fb      	ldrb	r3, [r7, #3]
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	b2db      	uxtb	r3, r3
 8001160:	461a      	mov	r2, r3
 8001162:	f005 fdd9 	bl	8006d18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(config.D5_GPIO_Port, config.D5_GPIO_Pin, (GPIO_PinState)(cmd & 0x02));
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6998      	ldr	r0, [r3, #24]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	8b99      	ldrh	r1, [r3, #28]
 800116e:	78fb      	ldrb	r3, [r7, #3]
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	b2db      	uxtb	r3, r3
 8001176:	461a      	mov	r2, r3
 8001178:	f005 fdce 	bl	8006d18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(config.D6_GPIO_Port, config.D6_GPIO_Pin, (GPIO_PinState)(cmd & 0x04));
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a18      	ldr	r0, [r3, #32]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8001184:	78fb      	ldrb	r3, [r7, #3]
 8001186:	f003 0304 	and.w	r3, r3, #4
 800118a:	b2db      	uxtb	r3, r3
 800118c:	461a      	mov	r2, r3
 800118e:	f005 fdc3 	bl	8006d18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(config.D7_GPIO_Port, config.D7_GPIO_Pin, (GPIO_PinState)(cmd & 0x08));
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 800119a:	78fb      	ldrb	r3, [r7, #3]
 800119c:	f003 0308 	and.w	r3, r3, #8
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	461a      	mov	r2, r3
 80011a4:	f005 fdb8 	bl	8006d18 <HAL_GPIO_WritePin>
}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <_ZN7HD447804initEv>:

void HD44780::init(void) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	config.RS_GPIO_Port = LCD_TEXT_RS_GPIO_Port;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4a21      	ldr	r2, [pc, #132]	; (8001240 <_ZN7HD447804initEv+0x90>)
 80011bc:	601a      	str	r2, [r3, #0]
	config.RS_GPIO_Pin = LCD_TEXT_RS_Pin;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2201      	movs	r2, #1
 80011c2:	809a      	strh	r2, [r3, #4]
	config.E_GPIO_Port = LCD_TEXT_E_GPIO_Port;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a1e      	ldr	r2, [pc, #120]	; (8001240 <_ZN7HD447804initEv+0x90>)
 80011c8:	609a      	str	r2, [r3, #8]
	config.E_GPIO_Pin = LCD_TEXT_E_Pin;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2202      	movs	r2, #2
 80011ce:	819a      	strh	r2, [r3, #12]
	config.D4_GPIO_Port = LCD_TEXT_D4_GPIO_Port;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a1c      	ldr	r2, [pc, #112]	; (8001244 <_ZN7HD447804initEv+0x94>)
 80011d4:	611a      	str	r2, [r3, #16]
	config.D4_GPIO_Pin = LCD_TEXT_D4_Pin;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2201      	movs	r2, #1
 80011da:	829a      	strh	r2, [r3, #20]
	config.D5_GPIO_Port = LCD_TEXT_D5_GPIO_Port;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a19      	ldr	r2, [pc, #100]	; (8001244 <_ZN7HD447804initEv+0x94>)
 80011e0:	619a      	str	r2, [r3, #24]
	config.D5_GPIO_Pin = LCD_TEXT_D5_Pin;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2202      	movs	r2, #2
 80011e6:	839a      	strh	r2, [r3, #28]
	config.D6_GPIO_Port = LCD_TEXT_D6_GPIO_Port;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a17      	ldr	r2, [pc, #92]	; (8001248 <_ZN7HD447804initEv+0x98>)
 80011ec:	621a      	str	r2, [r3, #32]
	config.D6_GPIO_Pin = LCD_TEXT_D6_Pin;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011f4:	849a      	strh	r2, [r3, #36]	; 0x24
	config.D7_GPIO_Port = LCD_TEXT_D7_GPIO_Port;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a13      	ldr	r2, [pc, #76]	; (8001248 <_ZN7HD447804initEv+0x98>)
 80011fa:	629a      	str	r2, [r3, #40]	; 0x28
	config.D7_GPIO_Pin = LCD_TEXT_D7_Pin;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2280      	movs	r2, #128	; 0x80
 8001200:	859a      	strh	r2, [r3, #44]	; 0x2c

	HAL_Delay(20);		/* LCD Power ON delay always >15ms */
 8001202:	2014      	movs	r0, #20
 8001204:	f003 fcee 	bl	8004be4 <HAL_Delay>

	command(0x33);
 8001208:	2133      	movs	r1, #51	; 0x33
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f000 f81e 	bl	800124c <_ZN7HD447807commandEh>
	command(0x32);	/* Send for 4 bit initialization of LCD  */
 8001210:	2132      	movs	r1, #50	; 0x32
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f000 f81a 	bl	800124c <_ZN7HD447807commandEh>
	command(0x28);	/* 2 line, 5*7 matrix in 4-bit mode */
 8001218:	2128      	movs	r1, #40	; 0x28
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f000 f816 	bl	800124c <_ZN7HD447807commandEh>
	command(0x0c);	/* Display on cursor off */
 8001220:	210c      	movs	r1, #12
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f000 f812 	bl	800124c <_ZN7HD447807commandEh>
	command(0x06);	/* Increment cursor (shift cursor to right) */
 8001228:	2106      	movs	r1, #6
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f000 f80e 	bl	800124c <_ZN7HD447807commandEh>
	command(0x01);	/* Clear display screen */
 8001230:	2101      	movs	r1, #1
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f000 f80a 	bl	800124c <_ZN7HD447807commandEh>
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40020c00 	.word	0x40020c00
 8001244:	40021800 	.word	0x40021800
 8001248:	40021400 	.word	0x40021400

0800124c <_ZN7HD447807commandEh>:

void HD44780::command(uint8_t cmnd) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	70fb      	strb	r3, [r7, #3]
	write_upper(cmnd);
 8001258:	78fb      	ldrb	r3, [r7, #3]
 800125a:	4619      	mov	r1, r3
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff ff3b 	bl	80010d8 <_ZN7HD4478011write_upperEh>
	HAL_GPIO_WritePin(config.RS_GPIO_Port, config.RS_GPIO_Pin, GPIO_PIN_RESET);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6818      	ldr	r0, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	889b      	ldrh	r3, [r3, #4]
 800126a:	2200      	movs	r2, #0
 800126c:	4619      	mov	r1, r3
 800126e:	f005 fd53 	bl	8006d18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(config.E_GPIO_Port, config.E_GPIO_Pin, GPIO_PIN_SET);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6898      	ldr	r0, [r3, #8]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	899b      	ldrh	r3, [r3, #12]
 800127a:	2201      	movs	r2, #1
 800127c:	4619      	mov	r1, r3
 800127e:	f005 fd4b 	bl	8006d18 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001282:	2001      	movs	r0, #1
 8001284:	f003 fcae 	bl	8004be4 <HAL_Delay>
	HAL_GPIO_WritePin(config.E_GPIO_Port, config.E_GPIO_Pin, GPIO_PIN_RESET);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6898      	ldr	r0, [r3, #8]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	899b      	ldrh	r3, [r3, #12]
 8001290:	2200      	movs	r2, #0
 8001292:	4619      	mov	r1, r3
 8001294:	f005 fd40 	bl	8006d18 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001298:	2001      	movs	r0, #1
 800129a:	f003 fca3 	bl	8004be4 <HAL_Delay>
	write_lower(cmnd);
 800129e:	78fb      	ldrb	r3, [r7, #3]
 80012a0:	4619      	mov	r1, r3
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ff4e 	bl	8001144 <_ZN7HD4478011write_lowerEh>
	HAL_GPIO_WritePin(config.E_GPIO_Port, config.E_GPIO_Pin, GPIO_PIN_SET);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6898      	ldr	r0, [r3, #8]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	899b      	ldrh	r3, [r3, #12]
 80012b0:	2201      	movs	r2, #1
 80012b2:	4619      	mov	r1, r3
 80012b4:	f005 fd30 	bl	8006d18 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80012b8:	2001      	movs	r0, #1
 80012ba:	f003 fc93 	bl	8004be4 <HAL_Delay>
	HAL_GPIO_WritePin(config.E_GPIO_Port, config.E_GPIO_Pin, GPIO_PIN_RESET);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6898      	ldr	r0, [r3, #8]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	899b      	ldrh	r3, [r3, #12]
 80012c6:	2200      	movs	r2, #0
 80012c8:	4619      	mov	r1, r3
 80012ca:	f005 fd25 	bl	8006d18 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80012ce:	2002      	movs	r0, #2
 80012d0:	f003 fc88 	bl	8004be4 <HAL_Delay>
}
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <_ZN7HD447806charXYEhhh>:

void HD44780::charXY(uint8_t row, uint8_t pos, uint8_t data) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	4608      	mov	r0, r1
 80012e6:	4611      	mov	r1, r2
 80012e8:	461a      	mov	r2, r3
 80012ea:	4603      	mov	r3, r0
 80012ec:	70fb      	strb	r3, [r7, #3]
 80012ee:	460b      	mov	r3, r1
 80012f0:	70bb      	strb	r3, [r7, #2]
 80012f2:	4613      	mov	r3, r2
 80012f4:	707b      	strb	r3, [r7, #1]
    if (row == 0 && pos < 16)
 80012f6:	78fb      	ldrb	r3, [r7, #3]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d10e      	bne.n	800131a <_ZN7HD447806charXYEhhh+0x3e>
 80012fc:	78bb      	ldrb	r3, [r7, #2]
 80012fe:	2b0f      	cmp	r3, #15
 8001300:	d80b      	bhi.n	800131a <_ZN7HD447806charXYEhhh+0x3e>
    	command((pos & 0x0F) | 0x80);	/* Command of first row and required position<16 */
 8001302:	78bb      	ldrb	r3, [r7, #2]
 8001304:	f003 030f 	and.w	r3, r3, #15
 8001308:	b2db      	uxtb	r3, r3
 800130a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800130e:	b2db      	uxtb	r3, r3
 8001310:	4619      	mov	r1, r3
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff ff9a 	bl	800124c <_ZN7HD447807commandEh>
 8001318:	e010      	b.n	800133c <_ZN7HD447806charXYEhhh+0x60>
	else if (row == 1 && pos < 16)
 800131a:	78fb      	ldrb	r3, [r7, #3]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d10d      	bne.n	800133c <_ZN7HD447806charXYEhhh+0x60>
 8001320:	78bb      	ldrb	r3, [r7, #2]
 8001322:	2b0f      	cmp	r3, #15
 8001324:	d80a      	bhi.n	800133c <_ZN7HD447806charXYEhhh+0x60>
		command((pos & 0x0F) | 0xC0);	/* Command of first row and required position<16 */
 8001326:	78bb      	ldrb	r3, [r7, #2]
 8001328:	f003 030f 	and.w	r3, r3, #15
 800132c:	b2db      	uxtb	r3, r3
 800132e:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001332:	b2db      	uxtb	r3, r3
 8001334:	4619      	mov	r1, r3
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff ff88 	bl	800124c <_ZN7HD447807commandEh>
    writeChar(data);
 800133c:	787b      	ldrb	r3, [r7, #1]
 800133e:	4619      	mov	r1, r3
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f000 f804 	bl	800134e <_ZN7HD447809writeCharEc>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <_ZN7HD447809writeCharEc>:

void HD44780::writeChar(char data) {
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	460b      	mov	r3, r1
 8001358:	70fb      	strb	r3, [r7, #3]
	write_upper(data);
 800135a:	78fb      	ldrb	r3, [r7, #3]
 800135c:	4619      	mov	r1, r3
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff feba 	bl	80010d8 <_ZN7HD4478011write_upperEh>
	HAL_GPIO_WritePin(config.RS_GPIO_Port, config.RS_GPIO_Pin, GPIO_PIN_SET);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6818      	ldr	r0, [r3, #0]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	889b      	ldrh	r3, [r3, #4]
 800136c:	2201      	movs	r2, #1
 800136e:	4619      	mov	r1, r3
 8001370:	f005 fcd2 	bl	8006d18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(config.E_GPIO_Port, config.E_GPIO_Pin, GPIO_PIN_SET);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6898      	ldr	r0, [r3, #8]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	899b      	ldrh	r3, [r3, #12]
 800137c:	2201      	movs	r2, #1
 800137e:	4619      	mov	r1, r3
 8001380:	f005 fcca 	bl	8006d18 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001384:	2001      	movs	r0, #1
 8001386:	f003 fc2d 	bl	8004be4 <HAL_Delay>
	HAL_GPIO_WritePin(config.E_GPIO_Port, config.E_GPIO_Pin, GPIO_PIN_RESET);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6898      	ldr	r0, [r3, #8]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	899b      	ldrh	r3, [r3, #12]
 8001392:	2200      	movs	r2, #0
 8001394:	4619      	mov	r1, r3
 8001396:	f005 fcbf 	bl	8006d18 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800139a:	2001      	movs	r0, #1
 800139c:	f003 fc22 	bl	8004be4 <HAL_Delay>
	write_lower(data);
 80013a0:	78fb      	ldrb	r3, [r7, #3]
 80013a2:	4619      	mov	r1, r3
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff fecd 	bl	8001144 <_ZN7HD4478011write_lowerEh>
	HAL_GPIO_WritePin(config.E_GPIO_Port, config.E_GPIO_Pin, GPIO_PIN_SET);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6898      	ldr	r0, [r3, #8]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	899b      	ldrh	r3, [r3, #12]
 80013b2:	2201      	movs	r2, #1
 80013b4:	4619      	mov	r1, r3
 80013b6:	f005 fcaf 	bl	8006d18 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80013ba:	2001      	movs	r0, #1
 80013bc:	f003 fc12 	bl	8004be4 <HAL_Delay>
	HAL_GPIO_WritePin(config.E_GPIO_Port, config.E_GPIO_Pin, GPIO_PIN_RESET);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6898      	ldr	r0, [r3, #8]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	899b      	ldrh	r3, [r3, #12]
 80013c8:	2200      	movs	r2, #0
 80013ca:	4619      	mov	r1, r3
 80013cc:	f005 fca4 	bl	8006d18 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80013d0:	2002      	movs	r0, #2
 80013d2:	f003 fc07 	bl	8004be4 <HAL_Delay>
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <_ZN7HD447806stringEPc>:

void HD44780::string(char *str) {
 80013de:	b580      	push	{r7, lr}
 80013e0:	b084      	sub	sp, #16
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
 80013e6:	6039      	str	r1, [r7, #0]
	for (int i=0; str[i] != 0; i++) {
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	683a      	ldr	r2, [r7, #0]
 80013f0:	4413      	add	r3, r2
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d00b      	beq.n	8001410 <_ZN7HD447806stringEPc+0x32>
		writeChar(str[i]);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	683a      	ldr	r2, [r7, #0]
 80013fc:	4413      	add	r3, r2
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	4619      	mov	r1, r3
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff ffa3 	bl	800134e <_ZN7HD447809writeCharEc>
	for (int i=0; str[i] != 0; i++) {
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	3301      	adds	r3, #1
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	e7ed      	b.n	80013ec <_ZN7HD447806stringEPc+0xe>
	}
}
 8001410:	bf00      	nop
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <_ZN7HD447808stringXYEhhPc>:

void HD44780::stringXY(uint8_t row, uint8_t pos, char *str) {
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	460b      	mov	r3, r1
 8001424:	72fb      	strb	r3, [r7, #11]
 8001426:	4613      	mov	r3, r2
 8001428:	72bb      	strb	r3, [r7, #10]
	if (row == 0 && pos < 16)
 800142a:	7afb      	ldrb	r3, [r7, #11]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d10e      	bne.n	800144e <_ZN7HD447808stringXYEhhPc+0x36>
 8001430:	7abb      	ldrb	r3, [r7, #10]
 8001432:	2b0f      	cmp	r3, #15
 8001434:	d80b      	bhi.n	800144e <_ZN7HD447808stringXYEhhPc+0x36>
		command((pos & 0x0F) | 0x80);	/* Command of first row and required position<16 */
 8001436:	7abb      	ldrb	r3, [r7, #10]
 8001438:	f003 030f 	and.w	r3, r3, #15
 800143c:	b2db      	uxtb	r3, r3
 800143e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001442:	b2db      	uxtb	r3, r3
 8001444:	4619      	mov	r1, r3
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f7ff ff00 	bl	800124c <_ZN7HD447807commandEh>
 800144c:	e010      	b.n	8001470 <_ZN7HD447808stringXYEhhPc+0x58>
	else if (row == 1 && pos < 16)
 800144e:	7afb      	ldrb	r3, [r7, #11]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d10d      	bne.n	8001470 <_ZN7HD447808stringXYEhhPc+0x58>
 8001454:	7abb      	ldrb	r3, [r7, #10]
 8001456:	2b0f      	cmp	r3, #15
 8001458:	d80a      	bhi.n	8001470 <_ZN7HD447808stringXYEhhPc+0x58>
		command((pos & 0x0F) | 0xC0);	/* Command of first row and required position<16 */
 800145a:	7abb      	ldrb	r3, [r7, #10]
 800145c:	f003 030f 	and.w	r3, r3, #15
 8001460:	b2db      	uxtb	r3, r3
 8001462:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001466:	b2db      	uxtb	r3, r3
 8001468:	4619      	mov	r1, r3
 800146a:	68f8      	ldr	r0, [r7, #12]
 800146c:	f7ff feee 	bl	800124c <_ZN7HD447807commandEh>
	string(str);		/* Call LCD string function */
 8001470:	6879      	ldr	r1, [r7, #4]
 8001472:	68f8      	ldr	r0, [r7, #12]
 8001474:	f7ff ffb3 	bl	80013de <_ZN7HD447806stringEPc>
}
 8001478:	bf00      	nop
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <_ZN6Keypad7get_keyEv>:
const uint16_t pins[2][4] = {
	{KEYPAD_IN_0_Pin, KEYPAD_IN_1_Pin, KEYPAD_IN_2_Pin, KEYPAD_IN_3_Pin},
	{KEYPAD_OUT_0_Pin, KEYPAD_OUT_1_Pin, KEYPAD_OUT_2_Pin, KEYPAD_OUT_3_Pin}
};

char Keypad::get_key(void) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	char c = 'x';
 8001488:	2378      	movs	r3, #120	; 0x78
 800148a:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i=0; i<4; i++) {
 800148c:	2300      	movs	r3, #0
 800148e:	73bb      	strb	r3, [r7, #14]
 8001490:	7bbb      	ldrb	r3, [r7, #14]
 8001492:	2b03      	cmp	r3, #3
 8001494:	d868      	bhi.n	8001568 <_ZN6Keypad7get_keyEv+0xe8>
		for(uint8_t j=0; j<4; j++) {
 8001496:	2300      	movs	r3, #0
 8001498:	737b      	strb	r3, [r7, #13]
 800149a:	7b7b      	ldrb	r3, [r7, #13]
 800149c:	2b03      	cmp	r3, #3
 800149e:	d842      	bhi.n	8001526 <_ZN6Keypad7get_keyEv+0xa6>
			if (HAL_GPIO_ReadPin(ports[0][i], pins[0][i]) == GPIO_PIN_SET) {
 80014a0:	7bbb      	ldrb	r3, [r7, #14]
 80014a2:	4a34      	ldr	r2, [pc, #208]	; (8001574 <_ZN6Keypad7get_keyEv+0xf4>)
 80014a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014a8:	7bbb      	ldrb	r3, [r7, #14]
 80014aa:	4933      	ldr	r1, [pc, #204]	; (8001578 <_ZN6Keypad7get_keyEv+0xf8>)
 80014ac:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014b0:	4619      	mov	r1, r3
 80014b2:	4610      	mov	r0, r2
 80014b4:	f005 fc0a 	bl	8006ccc <HAL_GPIO_ReadPin>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	bf0c      	ite	eq
 80014be:	2301      	moveq	r3, #1
 80014c0:	2300      	movne	r3, #0
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d02a      	beq.n	800151e <_ZN6Keypad7get_keyEv+0x9e>
				HAL_GPIO_WritePin(ports[1][j], pins[1][j], GPIO_PIN_RESET);
 80014c8:	7b7b      	ldrb	r3, [r7, #13]
 80014ca:	4a2a      	ldr	r2, [pc, #168]	; (8001574 <_ZN6Keypad7get_keyEv+0xf4>)
 80014cc:	3304      	adds	r3, #4
 80014ce:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80014d2:	7b7b      	ldrb	r3, [r7, #13]
 80014d4:	4a28      	ldr	r2, [pc, #160]	; (8001578 <_ZN6Keypad7get_keyEv+0xf8>)
 80014d6:	3304      	adds	r3, #4
 80014d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014dc:	2200      	movs	r2, #0
 80014de:	4619      	mov	r1, r3
 80014e0:	f005 fc1a 	bl	8006d18 <HAL_GPIO_WritePin>
				if (HAL_GPIO_ReadPin(ports[0][i], pins[0][i]) == GPIO_PIN_RESET) {
 80014e4:	7bbb      	ldrb	r3, [r7, #14]
 80014e6:	4a23      	ldr	r2, [pc, #140]	; (8001574 <_ZN6Keypad7get_keyEv+0xf4>)
 80014e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014ec:	7bbb      	ldrb	r3, [r7, #14]
 80014ee:	4922      	ldr	r1, [pc, #136]	; (8001578 <_ZN6Keypad7get_keyEv+0xf8>)
 80014f0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014f4:	4619      	mov	r1, r3
 80014f6:	4610      	mov	r0, r2
 80014f8:	f005 fbe8 	bl	8006ccc <HAL_GPIO_ReadPin>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	bf0c      	ite	eq
 8001502:	2301      	moveq	r3, #1
 8001504:	2300      	movne	r3, #0
 8001506:	b2db      	uxtb	r3, r3
 8001508:	2b00      	cmp	r3, #0
 800150a:	d008      	beq.n	800151e <_ZN6Keypad7get_keyEv+0x9e>
					c = keys[i][j];
 800150c:	7bba      	ldrb	r2, [r7, #14]
 800150e:	7b7b      	ldrb	r3, [r7, #13]
 8001510:	491a      	ldr	r1, [pc, #104]	; (800157c <_ZN6Keypad7get_keyEv+0xfc>)
 8001512:	0092      	lsls	r2, r2, #2
 8001514:	440a      	add	r2, r1
 8001516:	4413      	add	r3, r2
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	73fb      	strb	r3, [r7, #15]
					break;
 800151c:	e003      	b.n	8001526 <_ZN6Keypad7get_keyEv+0xa6>
		for(uint8_t j=0; j<4; j++) {
 800151e:	7b7b      	ldrb	r3, [r7, #13]
 8001520:	3301      	adds	r3, #1
 8001522:	737b      	strb	r3, [r7, #13]
 8001524:	e7b9      	b.n	800149a <_ZN6Keypad7get_keyEv+0x1a>
				}
			}
		}
		HAL_GPIO_WritePin(KEYPAD_OUT_0_GPIO_Port, KEYPAD_OUT_0_Pin, GPIO_PIN_SET);
 8001526:	2201      	movs	r2, #1
 8001528:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800152c:	4814      	ldr	r0, [pc, #80]	; (8001580 <_ZN6Keypad7get_keyEv+0x100>)
 800152e:	f005 fbf3 	bl	8006d18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KEYPAD_OUT_1_GPIO_Port, KEYPAD_OUT_1_Pin, GPIO_PIN_SET);
 8001532:	2201      	movs	r2, #1
 8001534:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001538:	4811      	ldr	r0, [pc, #68]	; (8001580 <_ZN6Keypad7get_keyEv+0x100>)
 800153a:	f005 fbed 	bl	8006d18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KEYPAD_OUT_2_GPIO_Port, KEYPAD_OUT_2_Pin, GPIO_PIN_SET);
 800153e:	2201      	movs	r2, #1
 8001540:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001544:	480f      	ldr	r0, [pc, #60]	; (8001584 <_ZN6Keypad7get_keyEv+0x104>)
 8001546:	f005 fbe7 	bl	8006d18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(KEYPAD_OUT_3_GPIO_Port, KEYPAD_OUT_3_Pin, GPIO_PIN_SET);
 800154a:	2201      	movs	r2, #1
 800154c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001550:	480c      	ldr	r0, [pc, #48]	; (8001584 <_ZN6Keypad7get_keyEv+0x104>)
 8001552:	f005 fbe1 	bl	8006d18 <HAL_GPIO_WritePin>
		if (c != 'x') return c;
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	2b78      	cmp	r3, #120	; 0x78
 800155a:	d001      	beq.n	8001560 <_ZN6Keypad7get_keyEv+0xe0>
 800155c:	7bfb      	ldrb	r3, [r7, #15]
 800155e:	e004      	b.n	800156a <_ZN6Keypad7get_keyEv+0xea>
	for (uint8_t i=0; i<4; i++) {
 8001560:	7bbb      	ldrb	r3, [r7, #14]
 8001562:	3301      	adds	r3, #1
 8001564:	73bb      	strb	r3, [r7, #14]
 8001566:	e793      	b.n	8001490 <_ZN6Keypad7get_keyEv+0x10>
	}
	return c;
 8001568:	7bfb      	ldrb	r3, [r7, #15]
}
 800156a:	4618      	mov	r0, r3
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	0801db78 	.word	0x0801db78
 8001578:	0801db98 	.word	0x0801db98
 800157c:	0801db68 	.word	0x0801db68
 8001580:	40021000 	.word	0x40021000
 8001584:	40020400 	.word	0x40020400

08001588 <_ZN7ST7735sC1ER19__SPI_HandleTypeDef>:

ST7735s::ST7735s() {

}

ST7735s::ST7735s(SPI_HandleTypeDef& hspi) {
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
	this->hspi = hspi;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	3304      	adds	r3, #4
 8001598:	4611      	mov	r1, r2
 800159a:	2258      	movs	r2, #88	; 0x58
 800159c:	4618      	mov	r0, r3
 800159e:	f016 fc2b 	bl	8017df8 <memcpy>
}
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4618      	mov	r0, r3
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <_ZN7ST7735s8writeCmdEh>:
		}
	}
	return retVal;
}

void ST7735s::writeCmd(uint8_t cmd) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	460b      	mov	r3, r1
 80015b6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(ST7735S_DC_GPIO_Port, ST7735S_DC_Pin, GPIO_PIN_RESET);
 80015b8:	2200      	movs	r2, #0
 80015ba:	2108      	movs	r1, #8
 80015bc:	4809      	ldr	r0, [pc, #36]	; (80015e4 <_ZN7ST7735s8writeCmdEh+0x38>)
 80015be:	f005 fbab 	bl	8006d18 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi, &cmd, 1, 1000);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	1d18      	adds	r0, r3, #4
 80015c6:	1cf9      	adds	r1, r7, #3
 80015c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015cc:	2201      	movs	r2, #1
 80015ce:	f007 fc23 	bl	8008e18 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ST7735S_DC_GPIO_Port, ST7735S_DC_Pin, GPIO_PIN_SET);
 80015d2:	2201      	movs	r2, #1
 80015d4:	2108      	movs	r1, #8
 80015d6:	4803      	ldr	r0, [pc, #12]	; (80015e4 <_ZN7ST7735s8writeCmdEh+0x38>)
 80015d8:	f005 fb9e 	bl	8006d18 <HAL_GPIO_WritePin>
}
 80015dc:	bf00      	nop
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40020c00 	.word	0x40020c00

080015e8 <_ZN7ST7735s9writeByteEh>:
void ST7735s::writeByte(uint8_t b) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	460b      	mov	r3, r1
 80015f2:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(&hspi, &b, 1, 1000);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	1d18      	adds	r0, r3, #4
 80015f8:	1cf9      	adds	r1, r7, #3
 80015fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015fe:	2201      	movs	r2, #1
 8001600:	f007 fc0a 	bl	8008e18 <HAL_SPI_Transmit>
}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <_ZN7ST7735s9writeWordEt>:

void ST7735s::writeWord(uint16_t w) {
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	460b      	mov	r3, r1
 8001616:	807b      	strh	r3, [r7, #2]
	uint8_t first = w>>8, second = w&0xFF;
 8001618:	887b      	ldrh	r3, [r7, #2]
 800161a:	121b      	asrs	r3, r3, #8
 800161c:	b2db      	uxtb	r3, r3
 800161e:	73fb      	strb	r3, [r7, #15]
 8001620:	887b      	ldrh	r3, [r7, #2]
 8001622:	b2db      	uxtb	r3, r3
 8001624:	73bb      	strb	r3, [r7, #14]

	HAL_SPI_Transmit(&hspi, &first, 1, 1000);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	1d18      	adds	r0, r3, #4
 800162a:	f107 010f 	add.w	r1, r7, #15
 800162e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001632:	2201      	movs	r2, #1
 8001634:	f007 fbf0 	bl	8008e18 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi, &second, 1, 1000);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	1d18      	adds	r0, r3, #4
 800163c:	f107 010e 	add.w	r1, r7, #14
 8001640:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001644:	2201      	movs	r2, #1
 8001646:	f007 fbe7 	bl	8008e18 <HAL_SPI_Transmit>
}
 800164a:	bf00      	nop
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <_ZN7ST7735s8write565Etj>:

void ST7735s::write565(uint16_t data, unsigned int count) {
 8001652:	b580      	push	{r7, lr}
 8001654:	b084      	sub	sp, #16
 8001656:	af00      	add	r7, sp, #0
 8001658:	60f8      	str	r0, [r7, #12]
 800165a:	460b      	mov	r3, r1
 800165c:	607a      	str	r2, [r7, #4]
 800165e:	817b      	strh	r3, [r7, #10]
	writeCmd(RAMWR);
 8001660:	212c      	movs	r1, #44	; 0x2c
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f7ff ffa2 	bl	80015ac <_ZN7ST7735s8writeCmdEh>
	for (; count > 0; count--) {
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d008      	beq.n	8001680 <_ZN7ST7735s8write565Etj+0x2e>
		writeWord(data);
 800166e:	897b      	ldrh	r3, [r7, #10]
 8001670:	4619      	mov	r1, r3
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	f7ff ffca 	bl	800160c <_ZN7ST7735s9writeWordEt>
	for (; count > 0; count--) {
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3b01      	subs	r3, #1
 800167c:	607b      	str	r3, [r7, #4]
 800167e:	e7f3      	b.n	8001668 <_ZN7ST7735s8write565Etj+0x16>
	}
}
 8001680:	bf00      	nop
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <_ZN7ST7735s4initEv>:

void ST7735s::init() {
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ST7735S_RST_GPIO_Port, ST7735S_RST_Pin, GPIO_PIN_SET);
 8001690:	2201      	movs	r2, #1
 8001692:	2108      	movs	r1, #8
 8001694:	4814      	ldr	r0, [pc, #80]	; (80016e8 <_ZN7ST7735s4initEv+0x60>)
 8001696:	f005 fb3f 	bl	8006d18 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(ST7735S_RST_GPIO_Port, ST7735S_RST_Pin, GPIO_PIN_RESET);  // hardware reset
 800169a:	2200      	movs	r2, #0
 800169c:	2108      	movs	r1, #8
 800169e:	4812      	ldr	r0, [pc, #72]	; (80016e8 <_ZN7ST7735s4initEv+0x60>)
 80016a0:	f005 fb3a 	bl	8006d18 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80016a4:	2001      	movs	r0, #1
 80016a6:	f003 fa9d 	bl	8004be4 <HAL_Delay>
	HAL_GPIO_WritePin(ST7735S_RST_GPIO_Port, ST7735S_RST_Pin, GPIO_PIN_SET);
 80016aa:	2201      	movs	r2, #1
 80016ac:	2108      	movs	r1, #8
 80016ae:	480e      	ldr	r0, [pc, #56]	; (80016e8 <_ZN7ST7735s4initEv+0x60>)
 80016b0:	f005 fb32 	bl	8006d18 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 80016b4:	2096      	movs	r0, #150	; 0x96
 80016b6:	f003 fa95 	bl	8004be4 <HAL_Delay>

	writeCmd(SLPOUT);
 80016ba:	2111      	movs	r1, #17
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff ff75 	bl	80015ac <_ZN7ST7735s8writeCmdEh>
	HAL_Delay(150);
 80016c2:	2096      	movs	r0, #150	; 0x96
 80016c4:	f003 fa8e 	bl	8004be4 <HAL_Delay>
	writeCmd(COLMOD);
 80016c8:	213a      	movs	r1, #58	; 0x3a
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7ff ff6e 	bl	80015ac <_ZN7ST7735s8writeCmdEh>
	writeByte(0x05); // select color mode 5 = 16bit pixels (RGB565)
 80016d0:	2105      	movs	r1, #5
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff ff88 	bl	80015e8 <_ZN7ST7735s9writeByteEh>
	writeCmd(DISPON);
 80016d8:	2129      	movs	r1, #41	; 0x29
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff ff66 	bl	80015ac <_ZN7ST7735s8writeCmdEh>
}
 80016e0:	bf00      	nop
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40021000 	.word	0x40021000

080016ec <_ZN7ST7735s13setAddrWindowEtttt>:

void ST7735s::setAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	4608      	mov	r0, r1
 80016f6:	4611      	mov	r1, r2
 80016f8:	461a      	mov	r2, r3
 80016fa:	4603      	mov	r3, r0
 80016fc:	817b      	strh	r3, [r7, #10]
 80016fe:	460b      	mov	r3, r1
 8001700:	813b      	strh	r3, [r7, #8]
 8001702:	4613      	mov	r3, r2
 8001704:	80fb      	strh	r3, [r7, #6]
	writeCmd(CASET); // set column range (x0,x1)
 8001706:	212a      	movs	r1, #42	; 0x2a
 8001708:	68f8      	ldr	r0, [r7, #12]
 800170a:	f7ff ff4f 	bl	80015ac <_ZN7ST7735s8writeCmdEh>
	writeWord(x0+1);
 800170e:	897b      	ldrh	r3, [r7, #10]
 8001710:	3301      	adds	r3, #1
 8001712:	b29b      	uxth	r3, r3
 8001714:	4619      	mov	r1, r3
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	f7ff ff78 	bl	800160c <_ZN7ST7735s9writeWordEt>
	writeWord(x1+1);
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	3301      	adds	r3, #1
 8001720:	b29b      	uxth	r3, r3
 8001722:	4619      	mov	r1, r3
 8001724:	68f8      	ldr	r0, [r7, #12]
 8001726:	f7ff ff71 	bl	800160c <_ZN7ST7735s9writeWordEt>
	writeCmd(RASET); // set row range (y0,y1)
 800172a:	212b      	movs	r1, #43	; 0x2b
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f7ff ff3d 	bl	80015ac <_ZN7ST7735s8writeCmdEh>
	writeWord(y0);
 8001732:	893b      	ldrh	r3, [r7, #8]
 8001734:	4619      	mov	r1, r3
 8001736:	68f8      	ldr	r0, [r7, #12]
 8001738:	f7ff ff68 	bl	800160c <_ZN7ST7735s9writeWordEt>
	writeWord(y1);
 800173c:	8b3b      	ldrh	r3, [r7, #24]
 800173e:	4619      	mov	r1, r3
 8001740:	68f8      	ldr	r0, [r7, #12]
 8001742:	f7ff ff63 	bl	800160c <_ZN7ST7735s9writeWordEt>
}
 8001746:	bf00      	nop
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <_ZN7ST7735s8fillRectEhhhhi>:
	horizontalLine(x0, x1, y1, color);
	verticalLine(x0, y0, y1, color);
	verticalLine(x1, y0, y1, color);
}

void ST7735s::fillRect(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, int color) {
 800174e:	b580      	push	{r7, lr}
 8001750:	b086      	sub	sp, #24
 8001752:	af02      	add	r7, sp, #8
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	4608      	mov	r0, r1
 8001758:	4611      	mov	r1, r2
 800175a:	461a      	mov	r2, r3
 800175c:	4603      	mov	r3, r0
 800175e:	70fb      	strb	r3, [r7, #3]
 8001760:	460b      	mov	r3, r1
 8001762:	70bb      	strb	r3, [r7, #2]
 8001764:	4613      	mov	r3, r2
 8001766:	707b      	strb	r3, [r7, #1]
	uint8_t width = x1 - x0 + 1;
 8001768:	787a      	ldrb	r2, [r7, #1]
 800176a:	78fb      	ldrb	r3, [r7, #3]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	b2db      	uxtb	r3, r3
 8001770:	3301      	adds	r3, #1
 8001772:	73fb      	strb	r3, [r7, #15]
	uint8_t height = y1 - y0 + 1;
 8001774:	7e3a      	ldrb	r2, [r7, #24]
 8001776:	78bb      	ldrb	r3, [r7, #2]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	b2db      	uxtb	r3, r3
 800177c:	3301      	adds	r3, #1
 800177e:	73bb      	strb	r3, [r7, #14]
	setAddrWindow(x0, y0, x1, y1);
 8001780:	78fb      	ldrb	r3, [r7, #3]
 8001782:	b299      	uxth	r1, r3
 8001784:	78bb      	ldrb	r3, [r7, #2]
 8001786:	b29a      	uxth	r2, r3
 8001788:	787b      	ldrb	r3, [r7, #1]
 800178a:	b298      	uxth	r0, r3
 800178c:	7e3b      	ldrb	r3, [r7, #24]
 800178e:	b29b      	uxth	r3, r3
 8001790:	9300      	str	r3, [sp, #0]
 8001792:	4603      	mov	r3, r0
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff ffa9 	bl	80016ec <_ZN7ST7735s13setAddrWindowEtttt>
	write565(color, width*height);
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	b299      	uxth	r1, r3
 800179e:	7bfb      	ldrb	r3, [r7, #15]
 80017a0:	7bba      	ldrb	r2, [r7, #14]
 80017a2:	fb02 f303 	mul.w	r3, r2, r3
 80017a6:	461a      	mov	r2, r3
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff ff52 	bl	8001652 <_ZN7ST7735s8write565Etj>
}
 80017ae:	bf00      	nop
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <_ZN7ST7735s11clearScreenEv>:

void ST7735s::clearScreen() {
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b084      	sub	sp, #16
 80017ba:	af02      	add	r7, sp, #8
 80017bc:	6078      	str	r0, [r7, #4]
	fillRect(0, 0, 129, 160, BLACK);
 80017be:	2300      	movs	r3, #0
 80017c0:	9301      	str	r3, [sp, #4]
 80017c2:	23a0      	movs	r3, #160	; 0xa0
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	2381      	movs	r3, #129	; 0x81
 80017c8:	2200      	movs	r2, #0
 80017ca:	2100      	movs	r1, #0
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff ffbe 	bl	800174e <_ZN7ST7735s8fillRectEhhhhi>
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <_ZN7ST7735s8gotoLineEh>:
// Total number of characters in landscape mode = 26x16 = 416.
void ST7735s::gotoXY(uint8_t x, uint8_t y) { // position cursor on character x,y grid, where 0<x<20, 0<y<19.
	curX = x;
	curY = y;
}
void ST7735s::gotoLine(uint8_t y) { // position character cursor to start of line y, where 0<y<19.
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
 80017e2:	460b      	mov	r3, r1
 80017e4:	70fb      	strb	r3, [r7, #3]
	curX = 0;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	701a      	strb	r2, [r3, #0]
	curY = y;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	78fa      	ldrb	r2, [r7, #3]
 80017f0:	705a      	strb	r2, [r3, #1]
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <_ZN7ST7735s13advanceCursorEv>:

void ST7735s::advanceCursor() { // moves character cursor to next position, assuming portrait orientation
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
	curX++;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	3301      	adds	r3, #1
 800180c:	b2da      	uxtb	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	701a      	strb	r2, [r3, #0]
	if (curX > 20) {
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b14      	cmp	r3, #20
 8001818:	d908      	bls.n	800182c <_ZN7ST7735s13advanceCursorEv+0x2e>
		curY++;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	785b      	ldrb	r3, [r3, #1]
 800181e:	3301      	adds	r3, #1
 8001820:	b2da      	uxtb	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	705a      	strb	r2, [r3, #1]
		curX = 1;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2201      	movs	r2, #1
 800182a:	701a      	strb	r2, [r3, #0]
	}
	if (curY>19)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	785b      	ldrb	r3, [r3, #1]
 8001830:	2b13      	cmp	r3, #19
 8001832:	d902      	bls.n	800183a <_ZN7ST7735s13advanceCursorEv+0x3c>
		curY = 1;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	705a      	strb	r2, [r3, #1]
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <_ZN7ST7735s14setOrientationEi>:

void ST7735s::setOrientation(int degrees) {
 8001846:	b580      	push	{r7, lr}
 8001848:	b084      	sub	sp, #16
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
 800184e:	6039      	str	r1, [r7, #0]
	uint8_t arg;
	switch (degrees) {
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001856:	d010      	beq.n	800187a <_ZN7ST7735s14setOrientationEi+0x34>
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800185e:	dc0f      	bgt.n	8001880 <_ZN7ST7735s14setOrientationEi+0x3a>
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	2b5a      	cmp	r3, #90	; 0x5a
 8001864:	d003      	beq.n	800186e <_ZN7ST7735s14setOrientationEi+0x28>
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	2bb4      	cmp	r3, #180	; 0xb4
 800186a:	d003      	beq.n	8001874 <_ZN7ST7735s14setOrientationEi+0x2e>
 800186c:	e008      	b.n	8001880 <_ZN7ST7735s14setOrientationEi+0x3a>
		case 90: arg = 0x60; break;
 800186e:	2360      	movs	r3, #96	; 0x60
 8001870:	73fb      	strb	r3, [r7, #15]
 8001872:	e007      	b.n	8001884 <_ZN7ST7735s14setOrientationEi+0x3e>
		case 180: arg = 0xC0; break;
 8001874:	23c0      	movs	r3, #192	; 0xc0
 8001876:	73fb      	strb	r3, [r7, #15]
 8001878:	e004      	b.n	8001884 <_ZN7ST7735s14setOrientationEi+0x3e>
		case 270: arg = 0xA0; break;
 800187a:	23a0      	movs	r3, #160	; 0xa0
 800187c:	73fb      	strb	r3, [r7, #15]
 800187e:	e001      	b.n	8001884 <_ZN7ST7735s14setOrientationEi+0x3e>
		default: arg = 0x00;
 8001880:	2300      	movs	r3, #0
 8001882:	73fb      	strb	r3, [r7, #15]
	}
	writeCmd(MADCTL);
 8001884:	2136      	movs	r1, #54	; 0x36
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff fe90 	bl	80015ac <_ZN7ST7735s8writeCmdEh>
	writeByte(arg);
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	4619      	mov	r1, r3
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff fea9 	bl	80015e8 <_ZN7ST7735s9writeByteEh>
}
 8001896:	bf00      	nop
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <_ZN7ST7735s5putChEchhi>:

void ST7735s::putCh(char ch, uint8_t x, uint8_t y, int color) { // write ch to display X,Y coordinates using ASCII 5x7 font
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b088      	sub	sp, #32
 80018a4:	af02      	add	r7, sp, #8
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	4608      	mov	r0, r1
 80018aa:	4611      	mov	r1, r2
 80018ac:	461a      	mov	r2, r3
 80018ae:	4603      	mov	r3, r0
 80018b0:	70fb      	strb	r3, [r7, #3]
 80018b2:	460b      	mov	r3, r1
 80018b4:	70bb      	strb	r3, [r7, #2]
 80018b6:	4613      	mov	r3, r2
 80018b8:	707b      	strb	r3, [r7, #1]
	int pixel;
	uint8_t row, col, bit, data, mask = 0x01;
 80018ba:	2301      	movs	r3, #1
 80018bc:	747b      	strb	r3, [r7, #17]
	setAddrWindow(x, y, x+4, y+6);
 80018be:	78bb      	ldrb	r3, [r7, #2]
 80018c0:	b299      	uxth	r1, r3
 80018c2:	787b      	ldrb	r3, [r7, #1]
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	78bb      	ldrb	r3, [r7, #2]
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	3304      	adds	r3, #4
 80018cc:	b298      	uxth	r0, r3
 80018ce:	787b      	ldrb	r3, [r7, #1]
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	3306      	adds	r3, #6
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	4603      	mov	r3, r0
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff ff06 	bl	80016ec <_ZN7ST7735s13setAddrWindowEtttt>
	writeCmd(RAMWR);
 80018e0:	212c      	movs	r1, #44	; 0x2c
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7ff fe62 	bl	80015ac <_ZN7ST7735s8writeCmdEh>
	for (row=0; row<7;row++) {
 80018e8:	2300      	movs	r3, #0
 80018ea:	74fb      	strb	r3, [r7, #19]
 80018ec:	7cfb      	ldrb	r3, [r7, #19]
 80018ee:	2b06      	cmp	r3, #6
 80018f0:	d82d      	bhi.n	800194e <_ZN7ST7735s5putChEchhi+0xae>
		for (col=0; col<5;col++) {
 80018f2:	2300      	movs	r3, #0
 80018f4:	74bb      	strb	r3, [r7, #18]
 80018f6:	7cbb      	ldrb	r3, [r7, #18]
 80018f8:	2b04      	cmp	r3, #4
 80018fa:	d821      	bhi.n	8001940 <_ZN7ST7735s5putChEchhi+0xa0>
			data = FONT_CHARS[ch-32][col];
 80018fc:	78fb      	ldrb	r3, [r7, #3]
 80018fe:	f1a3 0220 	sub.w	r2, r3, #32
 8001902:	7cb9      	ldrb	r1, [r7, #18]
 8001904:	4814      	ldr	r0, [pc, #80]	; (8001958 <_ZN7ST7735s5putChEchhi+0xb8>)
 8001906:	4613      	mov	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	4403      	add	r3, r0
 800190e:	440b      	add	r3, r1
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	743b      	strb	r3, [r7, #16]
			bit = data & mask;
 8001914:	7c3a      	ldrb	r2, [r7, #16]
 8001916:	7c7b      	ldrb	r3, [r7, #17]
 8001918:	4013      	ands	r3, r2
 800191a:	73fb      	strb	r3, [r7, #15]
			if (bit == 0) pixel = BLACK;
 800191c:	7bfb      	ldrb	r3, [r7, #15]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d102      	bne.n	8001928 <_ZN7ST7735s5putChEchhi+0x88>
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
 8001926:	e001      	b.n	800192c <_ZN7ST7735s5putChEchhi+0x8c>
			else pixel = color;
 8001928:	6a3b      	ldr	r3, [r7, #32]
 800192a:	617b      	str	r3, [r7, #20]
			writeWord(pixel);
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	b29b      	uxth	r3, r3
 8001930:	4619      	mov	r1, r3
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7ff fe6a 	bl	800160c <_ZN7ST7735s9writeWordEt>
		for (col=0; col<5;col++) {
 8001938:	7cbb      	ldrb	r3, [r7, #18]
 800193a:	3301      	adds	r3, #1
 800193c:	74bb      	strb	r3, [r7, #18]
 800193e:	e7da      	b.n	80018f6 <_ZN7ST7735s5putChEchhi+0x56>
		}
		mask <<= 1;
 8001940:	7c7b      	ldrb	r3, [r7, #17]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	747b      	strb	r3, [r7, #17]
	for (row=0; row<7;row++) {
 8001946:	7cfb      	ldrb	r3, [r7, #19]
 8001948:	3301      	adds	r3, #1
 800194a:	74fb      	strb	r3, [r7, #19]
 800194c:	e7ce      	b.n	80018ec <_ZN7ST7735s5putChEchhi+0x4c>
	}
}
 800194e:	bf00      	nop
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	0801dba8 	.word	0x0801dba8

0800195c <_ZN7ST7735s9writeCharEci>:

void ST7735s::writeChar(char ch, int color) {
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af02      	add	r7, sp, #8
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	460b      	mov	r3, r1
 8001966:	607a      	str	r2, [r7, #4]
 8001968:	72fb      	strb	r3, [r7, #11]
	putCh(ch, curX*6, curY*8, color);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	461a      	mov	r2, r3
 8001970:	0052      	lsls	r2, r2, #1
 8001972:	4413      	add	r3, r2
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	b2da      	uxtb	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	785b      	ldrb	r3, [r3, #1]
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	b2d8      	uxtb	r0, r3
 8001980:	7af9      	ldrb	r1, [r7, #11]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	4603      	mov	r3, r0
 8001988:	68f8      	ldr	r0, [r7, #12]
 800198a:	f7ff ff89 	bl	80018a0 <_ZN7ST7735s5putChEchhi>
	advanceCursor();
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f7ff ff35 	bl	80017fe <_ZN7ST7735s13advanceCursorEv>
}
 8001994:	bf00      	nop
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <_ZN7ST7735s11writeStringEPci>:

void ST7735s::writeString(char *text, int color) {
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
	for (; *text; text++)
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d00a      	beq.n	80019c6 <_ZN7ST7735s11writeStringEPci+0x2a>
	writeChar(*text, color);
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	4619      	mov	r1, r3
 80019b8:	68f8      	ldr	r0, [r7, #12]
 80019ba:	f7ff ffcf 	bl	800195c <_ZN7ST7735s9writeCharEci>
	for (; *text; text++)
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	3301      	adds	r3, #1
 80019c2:	60bb      	str	r3, [r7, #8]
 80019c4:	e7f0      	b.n	80019a8 <_ZN7ST7735s11writeStringEPci+0xc>
}
 80019c6:	bf00      	nop
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <_ZN7ST7735s8writeIntEi>:

void ST7735s::writeInt(int i) {
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b084      	sub	sp, #16
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
 80019d6:	6039      	str	r1, [r7, #0]
	char str[8];
	itoa(i, str, 10);
 80019d8:	f107 0308 	add.w	r3, r7, #8
 80019dc:	220a      	movs	r2, #10
 80019de:	4619      	mov	r1, r3
 80019e0:	6838      	ldr	r0, [r7, #0]
 80019e2:	f016 f981 	bl	8017ce8 <itoa>
	writeString(str, WHITE);
 80019e6:	f107 0308 	add.w	r3, r7, #8
 80019ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019ee:	4619      	mov	r1, r3
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7ff ffd3 	bl	800199c <_ZN7ST7735s11writeStringEPci>
}
 80019f6:	bf00      	nop
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
	...

08001a00 <_ZN9TcpClient4initEv>:
#include "string.h"
#include "parson.h"

extern RTC_HandleTypeDef hrtc;

void TcpClient::init() {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
	struct tcp_pcb *control_block = tcp_new();
 8001a06:	f00e fc57 	bl	80102b8 <tcp_new>
 8001a0a:	6078      	str	r0, [r7, #4]
	ip_addr_t destIp;
	IP_ADDR4(&destIp, 213, 188, 196, 246);  // 213.188.196.246
 8001a0c:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <_ZN9TcpClient4initEv+0x24>)
 8001a0e:	603b      	str	r3, [r7, #0]
	tcp_connect(control_block, &destIp, 80, connectedCallback);
 8001a10:	4639      	mov	r1, r7
 8001a12:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <_ZN9TcpClient4initEv+0x28>)
 8001a14:	2250      	movs	r2, #80	; 0x50
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f00d fcf6 	bl	800f408 <tcp_connect>
}
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	f6c4bcd5 	.word	0xf6c4bcd5
 8001a28:	08001a2d 	.word	0x08001a2d

08001a2c <_ZN9TcpClient17connectedCallbackEPvP7tcp_pcba>:

err_t TcpClient::connectedCallback(void* arg, tcp_pcb *controlBlock, err_t err) {
 8001a2c:	b5b0      	push	{r4, r5, r7, lr}
 8001a2e:	b096      	sub	sp, #88	; 0x58
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	4613      	mov	r3, r2
 8001a38:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcpClientDetails* clientDetails = (tcpClientDetails*)mem_malloc(sizeof(tcpClientDetails));
 8001a3a:	200c      	movs	r0, #12
 8001a3c:	f00b fc7e 	bl	800d33c <mem_malloc>
 8001a40:	6578      	str	r0, [r7, #84]	; 0x54
  if (clientDetails != NULL) {
 8001a42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d04f      	beq.n	8001ae8 <_ZN9TcpClient17connectedCallbackEPvP7tcp_pcba+0xbc>
    clientDetails->state = CONNECTED;
 8001a48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	701a      	strb	r2, [r3, #0]
    clientDetails->controlBlock = controlBlock;
 8001a4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a50:	68ba      	ldr	r2, [r7, #8]
 8001a52:	605a      	str	r2, [r3, #4]
    clientDetails->retries = 0;
 8001a54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a56:	2200      	movs	r2, #0
 8001a58:	705a      	strb	r2, [r3, #1]
    clientDetails->buffer = NULL;
 8001a5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]

    tcp_arg(controlBlock, clientDetails);
 8001a60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001a62:	68b8      	ldr	r0, [r7, #8]
 8001a64:	f00e fc30 	bl	80102c8 <tcp_arg>

    tcp_recv(controlBlock, recvCallback);  // attach callbacks
 8001a68:	4924      	ldr	r1, [pc, #144]	; (8001afc <_ZN9TcpClient17connectedCallbackEPvP7tcp_pcba+0xd0>)
 8001a6a:	68b8      	ldr	r0, [r7, #8]
 8001a6c:	f00e fc3e 	bl	80102ec <tcp_recv>
    tcp_poll(controlBlock, pollCallback, 0);
 8001a70:	2200      	movs	r2, #0
 8001a72:	4923      	ldr	r1, [pc, #140]	; (8001b00 <_ZN9TcpClient17connectedCallbackEPvP7tcp_pcba+0xd4>)
 8001a74:	68b8      	ldr	r0, [r7, #8]
 8001a76:	f00e fcb7 	bl	80103e8 <tcp_poll>
    tcp_sent(controlBlock, ackCallback);
 8001a7a:	4922      	ldr	r1, [pc, #136]	; (8001b04 <_ZN9TcpClient17connectedCallbackEPvP7tcp_pcba+0xd8>)
 8001a7c:	68b8      	ldr	r0, [r7, #8]
 8001a7e:	f00e fc57 	bl	8010330 <tcp_sent>

    char request[] = "GET /api/timezone/Europe/Warsaw HTTP/1.1\nConnection: Close\n\n";
 8001a82:	4b21      	ldr	r3, [pc, #132]	; (8001b08 <_ZN9TcpClient17connectedCallbackEPvP7tcp_pcba+0xdc>)
 8001a84:	f107 0410 	add.w	r4, r7, #16
 8001a88:	461d      	mov	r5, r3
 8001a8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a96:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001a9a:	c407      	stmia	r4!, {r0, r1, r2}
 8001a9c:	7023      	strb	r3, [r4, #0]
	int request_len = strlen(request);
 8001a9e:	f107 0310 	add.w	r3, r7, #16
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7fe fba4 	bl	80001f0 <strlen>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	653b      	str	r3, [r7, #80]	; 0x50
	clientDetails->buffer = pbuf_alloc(PBUF_TRANSPORT, request_len, PBUF_POOL);
 8001aac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	2036      	movs	r0, #54	; 0x36
 8001ab8:	f00c f928 	bl	800dd0c <pbuf_alloc>
 8001abc:	4602      	mov	r2, r0
 8001abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ac0:	609a      	str	r2, [r3, #8]
	pbuf_take(clientDetails->buffer, request, request_len);
 8001ac2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001ac8:	b292      	uxth	r2, r2
 8001aca:	f107 0110 	add.w	r1, r7, #16
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f00c fe6c 	bl	800e7ac <pbuf_take>
	send(clientDetails);
 8001ad4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001ad6:	f000 f8a3 	bl	8001c20 <_ZN9TcpClient4sendEP16tcpClientDetails>
	pbuf_free(clientDetails->buffer);
 8001ada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f00c fbf8 	bl	800e2d4 <pbuf_free>

    return ERR_OK;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	e005      	b.n	8001af4 <_ZN9TcpClient17connectedCallbackEPvP7tcp_pcba+0xc8>
  } else {
    disconnect(controlBlock, clientDetails);
 8001ae8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001aea:	68b8      	ldr	r0, [r7, #8]
 8001aec:	f000 f8e4 	bl	8001cb8 <_ZN9TcpClient10disconnectEP7tcp_pcbP16tcpClientDetails>
    return ERR_MEM;
 8001af0:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3758      	adds	r7, #88	; 0x58
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bdb0      	pop	{r4, r5, r7, pc}
 8001afc:	08001b0d 	.word	0x08001b0d
 8001b00:	08001ba5 	.word	0x08001ba5
 8001b04:	08001be7 	.word	0x08001be7
 8001b08:	0801acf0 	.word	0x0801acf0

08001b0c <_ZN9TcpClient12recvCallbackEPvP7tcp_pcbP4pbufa>:

err_t TcpClient::recvCallback(void *arg, tcp_pcb *controlBlock, pbuf *buffer, err_t err) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
 8001b18:	70fb      	strb	r3, [r7, #3]
  tcpClientDetails* clientDetails = (tcpClientDetails*) arg;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	617b      	str	r3, [r7, #20]

  if (buffer == NULL) {  // empty datagram = disconnect
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d108      	bne.n	8001b36 <_ZN9TcpClient12recvCallbackEPvP7tcp_pcbP4pbufa+0x2a>
    clientDetails->state = DISCONNECTING;
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	2203      	movs	r2, #3
 8001b28:	701a      	strb	r2, [r3, #0]
    disconnect(controlBlock, clientDetails);
 8001b2a:	6979      	ldr	r1, [r7, #20]
 8001b2c:	68b8      	ldr	r0, [r7, #8]
 8001b2e:	f000 f8c3 	bl	8001cb8 <_ZN9TcpClient10disconnectEP7tcp_pcbP16tcpClientDetails>
    return ERR_OK;
 8001b32:	2300      	movs	r3, #0
 8001b34:	e032      	b.n	8001b9c <_ZN9TcpClient12recvCallbackEPvP7tcp_pcbP4pbufa+0x90>
  } else if (err != ERR_OK) { // non empty datagram received but error occured
 8001b36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00b      	beq.n	8001b56 <_ZN9TcpClient12recvCallbackEPvP7tcp_pcbP4pbufa+0x4a>
    if (buffer != NULL) {
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d005      	beq.n	8001b50 <_ZN9TcpClient12recvCallbackEPvP7tcp_pcbP4pbufa+0x44>
      clientDetails->buffer = NULL;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
      pbuf_free(buffer);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f00c fbc2 	bl	800e2d4 <pbuf_free>
    }
    return err;
 8001b50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b54:	e022      	b.n	8001b9c <_ZN9TcpClient12recvCallbackEPvP7tcp_pcbP4pbufa+0x90>
  } else if (clientDetails->state == CONNECTED) {
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d111      	bne.n	8001b82 <_ZN9TcpClient12recvCallbackEPvP7tcp_pcbP4pbufa+0x76>
    clientDetails->buffer = buffer;
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	609a      	str	r2, [r3, #8]
    tcp_recved(controlBlock, buffer->tot_len);  // send ack for received data
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	891b      	ldrh	r3, [r3, #8]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	68b8      	ldr	r0, [r7, #8]
 8001b6c:	f00d fbb6 	bl	800f2dc <tcp_recved>
    handle(controlBlock, clientDetails);
 8001b70:	6979      	ldr	r1, [r7, #20]
 8001b72:	68b8      	ldr	r0, [r7, #8]
 8001b74:	f000 f8c8 	bl	8001d08 <_ZN9TcpClient6handleEP7tcp_pcbP16tcpClientDetails>
    pbuf_free(buffer);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f00c fbab 	bl	800e2d4 <pbuf_free>
    return ERR_OK;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	e00c      	b.n	8001b9c <_ZN9TcpClient12recvCallbackEPvP7tcp_pcbP4pbufa+0x90>
  } else {  // something strange happened
    tcp_recved(controlBlock, buffer->tot_len);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	891b      	ldrh	r3, [r3, #8]
 8001b86:	4619      	mov	r1, r3
 8001b88:	68b8      	ldr	r0, [r7, #8]
 8001b8a:	f00d fba7 	bl	800f2dc <tcp_recved>
    clientDetails->buffer = NULL;
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	2200      	movs	r2, #0
 8001b92:	609a      	str	r2, [r3, #8]
    pbuf_free(buffer);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f00c fb9d 	bl	800e2d4 <pbuf_free>
    return ERR_OK;
 8001b9a:	2300      	movs	r3, #0
  }
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <_ZN9TcpClient12pollCallbackEPvP7tcp_pcb>:

err_t TcpClient::pollCallback(void* arg, struct tcp_pcb *controlBlock) {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  tcpClientDetails* clientDetails = (tcpClientDetails*) arg;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	60fb      	str	r3, [r7, #12]
  if (clientDetails != NULL) {
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d00d      	beq.n	8001bd4 <_ZN9TcpClient12pollCallbackEPvP7tcp_pcb+0x30>
    if (clientDetails->buffer == NULL && clientDetails->state == DISCONNECTING) {
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d107      	bne.n	8001bd0 <_ZN9TcpClient12pollCallbackEPvP7tcp_pcb+0x2c>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b03      	cmp	r3, #3
 8001bc6:	d103      	bne.n	8001bd0 <_ZN9TcpClient12pollCallbackEPvP7tcp_pcb+0x2c>
        disconnect(controlBlock, clientDetails);
 8001bc8:	68f9      	ldr	r1, [r7, #12]
 8001bca:	6838      	ldr	r0, [r7, #0]
 8001bcc:	f000 f874 	bl	8001cb8 <_ZN9TcpClient10disconnectEP7tcp_pcbP16tcpClientDetails>
    }
    return ERR_OK;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	e004      	b.n	8001bde <_ZN9TcpClient12pollCallbackEPvP7tcp_pcb+0x3a>
  } else {
    tcp_abort(controlBlock);
 8001bd4:	6838      	ldr	r0, [r7, #0]
 8001bd6:	f00d f9a7 	bl	800ef28 <tcp_abort>
    return ERR_ABRT;
 8001bda:	f06f 030c 	mvn.w	r3, #12
  }
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <_ZN9TcpClient11ackCallbackEPvP7tcp_pcbt>:

err_t TcpClient::ackCallback(void* arg, tcp_pcb *controlBlock, u16_t len) {
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b086      	sub	sp, #24
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	60f8      	str	r0, [r7, #12]
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	80fb      	strh	r3, [r7, #6]
  LWIP_UNUSED_ARG(len);

  tcpClientDetails* clientDetails = (tcpClientDetails*) arg;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	617b      	str	r3, [r7, #20]
  clientDetails->retries = 0;
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	705a      	strb	r2, [r3, #1]

  if (clientDetails->buffer == NULL && clientDetails->state == DISCONNECTING) {
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d107      	bne.n	8001c16 <_ZN9TcpClient11ackCallbackEPvP7tcp_pcbt+0x30>
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b03      	cmp	r3, #3
 8001c0c:	d103      	bne.n	8001c16 <_ZN9TcpClient11ackCallbackEPvP7tcp_pcbt+0x30>
      disconnect(controlBlock, clientDetails);
 8001c0e:	6979      	ldr	r1, [r7, #20]
 8001c10:	68b8      	ldr	r0, [r7, #8]
 8001c12:	f000 f851 	bl	8001cb8 <_ZN9TcpClient10disconnectEP7tcp_pcbP16tcpClientDetails>
  }
  return ERR_OK;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <_ZN9TcpClient4sendEP16tcpClientDetails>:

void TcpClient::send(tcpClientDetails* clientDetails) {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  struct pbuf *buffer;
  err_t err = ERR_OK;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	75fb      	strb	r3, [r7, #23]

  while (err == ERR_OK && clientDetails->buffer != NULL && clientDetails->buffer->len <= tcp_sndbuf(clientDetails->controlBlock)) {
 8001c2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d13d      	bne.n	8001cb0 <_ZN9TcpClient4sendEP16tcpClientDetails+0x90>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d039      	beq.n	8001cb0 <_ZN9TcpClient4sendEP16tcpClientDetails+0x90>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	895a      	ldrh	r2, [r3, #10]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d830      	bhi.n	8001cb0 <_ZN9TcpClient4sendEP16tcpClientDetails+0x90>
    buffer = clientDetails->buffer;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	613b      	str	r3, [r7, #16]
    err = tcp_write(clientDetails->controlBlock, buffer->payload, buffer->len, 1);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6858      	ldr	r0, [r3, #4]
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	6859      	ldr	r1, [r3, #4]
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	895a      	ldrh	r2, [r3, #10]
 8001c60:	2301      	movs	r3, #1
 8001c62:	f011 fa6f 	bl	8013144 <tcp_write>
 8001c66:	4603      	mov	r3, r0
 8001c68:	75fb      	strb	r3, [r7, #23]

    if (err == ERR_OK) {
 8001c6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d115      	bne.n	8001c9e <_ZN9TcpClient4sendEP16tcpClientDetails+0x7e>
      clientDetails->buffer = buffer->next;
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	609a      	str	r2, [r3, #8]

      if (clientDetails->buffer != NULL) {
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d004      	beq.n	8001c8c <_ZN9TcpClient4sendEP16tcpClientDetails+0x6c>
        pbuf_ref(clientDetails->buffer);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f00c fbc4 	bl	800e414 <pbuf_ref>
      }

      u8_t freed;
      do {
        freed = pbuf_free(buffer);
 8001c8c:	6938      	ldr	r0, [r7, #16]
 8001c8e:	f00c fb21 	bl	800e2d4 <pbuf_free>
 8001c92:	4603      	mov	r3, r0
 8001c94:	73fb      	strb	r3, [r7, #15]
      } while(freed == 0);
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1c7      	bne.n	8001c2c <_ZN9TcpClient4sendEP16tcpClientDetails+0xc>
      do {
 8001c9c:	e7f6      	b.n	8001c8c <_ZN9TcpClient4sendEP16tcpClientDetails+0x6c>
   } else if (err == ERR_MEM) {
 8001c9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca6:	d1c1      	bne.n	8001c2c <_ZN9TcpClient4sendEP16tcpClientDetails+0xc>
     clientDetails->buffer = buffer;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	609a      	str	r2, [r3, #8]
  while (err == ERR_OK && clientDetails->buffer != NULL && clientDetails->buffer->len <= tcp_sndbuf(clientDetails->controlBlock)) {
 8001cae:	e7bd      	b.n	8001c2c <_ZN9TcpClient4sendEP16tcpClientDetails+0xc>
   }
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	3718      	adds	r7, #24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <_ZN9TcpClient10disconnectEP7tcp_pcbP16tcpClientDetails>:

void TcpClient::disconnect(tcp_pcb* controlBlock, tcpClientDetails* clientDetails) {
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  tcp_arg(controlBlock, NULL);  // remove callbacks
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f00e faff 	bl	80102c8 <tcp_arg>
  tcp_sent(controlBlock, NULL);
 8001cca:	2100      	movs	r1, #0
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f00e fb2f 	bl	8010330 <tcp_sent>
  tcp_recv(controlBlock, NULL);
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f00e fb09 	bl	80102ec <tcp_recv>
  tcp_err(controlBlock, NULL);
 8001cda:	2100      	movs	r1, #0
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f00e fb49 	bl	8010374 <tcp_err>
  tcp_poll(controlBlock, NULL, 0);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f00e fb7e 	bl	80103e8 <tcp_poll>

  if (clientDetails != NULL) {
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d002      	beq.n	8001cf8 <_ZN9TcpClient10disconnectEP7tcp_pcbP16tcpClientDetails+0x40>
    mem_free(clientDetails);
 8001cf2:	6838      	ldr	r0, [r7, #0]
 8001cf4:	f00b f9bc 	bl	800d070 <mem_free>
  }

  tcp_close(controlBlock);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f00d f82b 	bl	800ed54 <tcp_close>
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
	...

08001d08 <_ZN9TcpClient6handleEP7tcp_pcbP16tcpClientDetails>:

void TcpClient::handle(tcp_pcb* controlBlock, tcpClientDetails* clientDetails) {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	f5ad 6d88 	sub.w	sp, sp, #1088	; 0x440
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	1d3b      	adds	r3, r7, #4
 8001d12:	6018      	str	r0, [r3, #0]
 8001d14:	463b      	mov	r3, r7
 8001d16:	6019      	str	r1, [r3, #0]
	static char res[2000];
	static int res_length = 0;

	char b[1000];
	sprintf(b, "%s", (char*)(clientDetails->buffer->payload));
 8001d18:	463b      	mov	r3, r7
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d24:	49a3      	ldr	r1, [pc, #652]	; (8001fb4 <_ZN9TcpClient6handleEP7tcp_pcbP16tcpClientDetails+0x2ac>)
 8001d26:	4618      	mov	r0, r3
 8001d28:	f016 f9ec 	bl	8018104 <siprintf>
	if (strncmp(b, "HTTP", (unsigned int)4) == 0) {
 8001d2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d30:	2204      	movs	r2, #4
 8001d32:	49a1      	ldr	r1, [pc, #644]	; (8001fb8 <_ZN9TcpClient6handleEP7tcp_pcbP16tcpClientDetails+0x2b0>)
 8001d34:	4618      	mov	r0, r3
 8001d36:	f016 fa5d 	bl	80181f4 <strncmp>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d10d      	bne.n	8001d5c <_ZN9TcpClient6handleEP7tcp_pcbP16tcpClientDetails+0x54>
		strcpy(res, b);
 8001d40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d44:	4619      	mov	r1, r3
 8001d46:	489d      	ldr	r0, [pc, #628]	; (8001fbc <_ZN9TcpClient6handleEP7tcp_pcbP16tcpClientDetails+0x2b4>)
 8001d48:	f016 fa4c 	bl	80181e4 <strcpy>
		res_length = clientDetails->buffer->len;
 8001d4c:	463b      	mov	r3, r7
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	895b      	ldrh	r3, [r3, #10]
 8001d54:	461a      	mov	r2, r3
 8001d56:	4b9a      	ldr	r3, [pc, #616]	; (8001fc0 <_ZN9TcpClient6handleEP7tcp_pcbP16tcpClientDetails+0x2b8>)
 8001d58:	601a      	str	r2, [r3, #0]
		sDate.Year = year-2000;
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
			Error_Handler();
		}
	}
}
 8001d5a:	e126      	b.n	8001faa <_ZN9TcpClient6handleEP7tcp_pcbP16tcpClientDetails+0x2a2>
		for (int i=0; i<clientDetails->buffer->len; i++) {
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 8001d62:	463b      	mov	r3, r7
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	895b      	ldrh	r3, [r3, #10]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8001d70:	4293      	cmp	r3, r2
 8001d72:	da12      	bge.n	8001d9a <_ZN9TcpClient6handleEP7tcp_pcbP16tcpClientDetails+0x92>
			res[res_length+i] = b[i];
 8001d74:	4b92      	ldr	r3, [pc, #584]	; (8001fc0 <_ZN9TcpClient6handleEP7tcp_pcbP16tcpClientDetails+0x2b8>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8001d7c:	4413      	add	r3, r2
 8001d7e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001d82:	f8d7 243c 	ldr.w	r2, [r7, #1084]	; 0x43c
 8001d86:	440a      	add	r2, r1
 8001d88:	7811      	ldrb	r1, [r2, #0]
 8001d8a:	4a8c      	ldr	r2, [pc, #560]	; (8001fbc <_ZN9TcpClient6handleEP7tcp_pcbP16tcpClientDetails+0x2b4>)
 8001d8c:	54d1      	strb	r1, [r2, r3]
		for (int i=0; i<clientDetails->buffer->len; i++) {
 8001d8e:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8001d92:	3301      	adds	r3, #1
 8001d94:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 8001d98:	e7e3      	b.n	8001d62 <_ZN9TcpClient6handleEP7tcp_pcbP16tcpClientDetails+0x5a>
		res_length += clientDetails->buffer->len;
 8001d9a:	463b      	mov	r3, r7
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	895b      	ldrh	r3, [r3, #10]
 8001da2:	461a      	mov	r2, r3
 8001da4:	4b86      	ldr	r3, [pc, #536]	; (8001fc0 <_ZN9TcpClient6handleEP7tcp_pcbP16tcpClientDetails+0x2b8>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4413      	add	r3, r2
 8001daa:	4a85      	ldr	r2, [pc, #532]	; (8001fc0 <_ZN9TcpClient6handleEP7tcp_pcbP16tcpClientDetails+0x2b8>)
 8001dac:	6013      	str	r3, [r2, #0]
		char* json = strstr(res, "\r\n\r\n") + 4;
 8001dae:	4985      	ldr	r1, [pc, #532]	; (8001fc4 <_ZN9TcpClient6handleEP7tcp_pcbP16tcpClientDetails+0x2bc>)
 8001db0:	4882      	ldr	r0, [pc, #520]	; (8001fbc <_ZN9TcpClient6handleEP7tcp_pcbP16tcpClientDetails+0x2b4>)
 8001db2:	f016 fa31 	bl	8018218 <strstr>
 8001db6:	4603      	mov	r3, r0
 8001db8:	3304      	adds	r3, #4
 8001dba:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
		JSON_Value *data = json_parse_string(json);
 8001dbe:	f8d7 0438 	ldr.w	r0, [r7, #1080]	; 0x438
 8001dc2:	f001 fe4d 	bl	8003a60 <json_parse_string>
 8001dc6:	f8c7 0434 	str.w	r0, [r7, #1076]	; 0x434
		const char* datetime = json_object_get_string(json_object(data), "datetime");
 8001dca:	f8d7 0434 	ldr.w	r0, [r7, #1076]	; 0x434
 8001dce:	f002 f83d 	bl	8003e4c <json_object>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	497c      	ldr	r1, [pc, #496]	; (8001fc8 <_ZN9TcpClient6handleEP7tcp_pcbP16tcpClientDetails+0x2c0>)
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f001 fe81 	bl	8003ade <json_object_get_string>
 8001ddc:	f8c7 0430 	str.w	r0, [r7, #1072]	; 0x430
		const char* day_of_week = json_object_get_string(json_object(data), "day_of_week");
 8001de0:	f8d7 0434 	ldr.w	r0, [r7, #1076]	; 0x434
 8001de4:	f002 f832 	bl	8003e4c <json_object>
 8001de8:	4603      	mov	r3, r0
 8001dea:	4978      	ldr	r1, [pc, #480]	; (8001fcc <_ZN9TcpClient6handleEP7tcp_pcbP16tcpClientDetails+0x2c4>)
 8001dec:	4618      	mov	r0, r3
 8001dee:	f001 fe76 	bl	8003ade <json_object_get_string>
 8001df2:	f8c7 042c 	str.w	r0, [r7, #1068]	; 0x42c
 8001df6:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	461a      	mov	r2, r3
		memcpy(val, datetime, 4);
 8001dfe:	f107 0320 	add.w	r3, r7, #32
 8001e02:	601a      	str	r2, [r3, #0]
		val[4] = '\0';
 8001e04:	f107 0320 	add.w	r3, r7, #32
 8001e08:	2200      	movs	r2, #0
 8001e0a:	711a      	strb	r2, [r3, #4]
		int year = atoi(val);
 8001e0c:	f107 0320 	add.w	r3, r7, #32
 8001e10:	4618      	mov	r0, r3
 8001e12:	f015 fd70 	bl	80178f6 <atoi>
 8001e16:	f8c7 0428 	str.w	r0, [r7, #1064]	; 0x428
		memcpy(val, &datetime[5], 2);
 8001e1a:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8001e1e:	3305      	adds	r3, #5
 8001e20:	881b      	ldrh	r3, [r3, #0]
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	f107 0320 	add.w	r3, r7, #32
 8001e28:	801a      	strh	r2, [r3, #0]
		val[2] = '\0';
 8001e2a:	f107 0320 	add.w	r3, r7, #32
 8001e2e:	2200      	movs	r2, #0
 8001e30:	709a      	strb	r2, [r3, #2]
		int month = atoi(val);
 8001e32:	f107 0320 	add.w	r3, r7, #32
 8001e36:	4618      	mov	r0, r3
 8001e38:	f015 fd5d 	bl	80178f6 <atoi>
 8001e3c:	f8c7 0424 	str.w	r0, [r7, #1060]	; 0x424
		memcpy(val, &datetime[8], 2);
 8001e40:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8001e44:	3308      	adds	r3, #8
 8001e46:	881b      	ldrh	r3, [r3, #0]
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	f107 0320 	add.w	r3, r7, #32
 8001e4e:	801a      	strh	r2, [r3, #0]
		val[2] = '\0';
 8001e50:	f107 0320 	add.w	r3, r7, #32
 8001e54:	2200      	movs	r2, #0
 8001e56:	709a      	strb	r2, [r3, #2]
		int day = atoi(val);
 8001e58:	f107 0320 	add.w	r3, r7, #32
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f015 fd4a 	bl	80178f6 <atoi>
 8001e62:	f8c7 0420 	str.w	r0, [r7, #1056]	; 0x420
		memcpy(val, &datetime[11], 2);
 8001e66:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8001e6a:	330b      	adds	r3, #11
 8001e6c:	881b      	ldrh	r3, [r3, #0]
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	f107 0320 	add.w	r3, r7, #32
 8001e74:	801a      	strh	r2, [r3, #0]
		val[2] = '\0';
 8001e76:	f107 0320 	add.w	r3, r7, #32
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	709a      	strb	r2, [r3, #2]
		int hour = atoi(val);
 8001e7e:	f107 0320 	add.w	r3, r7, #32
 8001e82:	4618      	mov	r0, r3
 8001e84:	f015 fd37 	bl	80178f6 <atoi>
 8001e88:	f8c7 041c 	str.w	r0, [r7, #1052]	; 0x41c
		memcpy(val, &datetime[14], 2);
 8001e8c:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8001e90:	330e      	adds	r3, #14
 8001e92:	881b      	ldrh	r3, [r3, #0]
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	f107 0320 	add.w	r3, r7, #32
 8001e9a:	801a      	strh	r2, [r3, #0]
		val[2] = '\0';
 8001e9c:	f107 0320 	add.w	r3, r7, #32
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	709a      	strb	r2, [r3, #2]
		int minute = atoi(val);
 8001ea4:	f107 0320 	add.w	r3, r7, #32
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f015 fd24 	bl	80178f6 <atoi>
 8001eae:	f8c7 0418 	str.w	r0, [r7, #1048]	; 0x418
		memcpy(val, &datetime[17], 2);
 8001eb2:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8001eb6:	3311      	adds	r3, #17
 8001eb8:	881b      	ldrh	r3, [r3, #0]
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	f107 0320 	add.w	r3, r7, #32
 8001ec0:	801a      	strh	r2, [r3, #0]
		val[2] = '\0';
 8001ec2:	f107 0320 	add.w	r3, r7, #32
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	709a      	strb	r2, [r3, #2]
		int second = atoi(val);
 8001eca:	f107 0320 	add.w	r3, r7, #32
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f015 fd11 	bl	80178f6 <atoi>
 8001ed4:	f8c7 0414 	str.w	r0, [r7, #1044]	; 0x414
		int i_day_of_week = atoi(day_of_week);
 8001ed8:	f8d7 042c 	ldr.w	r0, [r7, #1068]	; 0x42c
 8001edc:	f015 fd0b 	bl	80178f6 <atoi>
 8001ee0:	f8c7 0410 	str.w	r0, [r7, #1040]	; 0x410
		RTC_TimeTypeDef sTime = {0};
 8001ee4:	f107 030c 	add.w	r3, r7, #12
 8001ee8:	461a      	mov	r2, r3
 8001eea:	2300      	movs	r3, #0
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	6053      	str	r3, [r2, #4]
 8001ef0:	6093      	str	r3, [r2, #8]
 8001ef2:	60d3      	str	r3, [r2, #12]
 8001ef4:	6113      	str	r3, [r2, #16]
		RTC_DateTypeDef sDate = {0};
 8001ef6:	f107 0308 	add.w	r3, r7, #8
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
		sTime.Hours = hour;
 8001efe:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	f107 030c 	add.w	r3, r7, #12
 8001f08:	701a      	strb	r2, [r3, #0]
		sTime.Minutes = minute;
 8001f0a:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	f107 030c 	add.w	r3, r7, #12
 8001f14:	705a      	strb	r2, [r3, #1]
		sTime.Seconds = second;
 8001f16:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	f107 030c 	add.w	r3, r7, #12
 8001f20:	709a      	strb	r2, [r3, #2]
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001f22:	f107 030c 	add.w	r3, r7, #12
 8001f26:	2200      	movs	r2, #0
 8001f28:	60da      	str	r2, [r3, #12]
		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001f2a:	f107 030c 	add.w	r3, r7, #12
 8001f2e:	2200      	movs	r2, #0
 8001f30:	611a      	str	r2, [r3, #16]
		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8001f32:	f107 030c 	add.w	r3, r7, #12
 8001f36:	2200      	movs	r2, #0
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4825      	ldr	r0, [pc, #148]	; (8001fd0 <_ZN9TcpClient6handleEP7tcp_pcbP16tcpClientDetails+0x2c8>)
 8001f3c:	f006 f9d6 	bl	80082ec <HAL_RTC_SetTime>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	bf14      	ite	ne
 8001f46:	2301      	movne	r3, #1
 8001f48:	2300      	moveq	r3, #0
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <_ZN9TcpClient6handleEP7tcp_pcbP16tcpClientDetails+0x24c>
			Error_Handler();
 8001f50:	f000 fb0e 	bl	8002570 <Error_Handler>
		sDate.WeekDay = i_day_of_week;
 8001f54:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	f107 0308 	add.w	r3, r7, #8
 8001f5e:	701a      	strb	r2, [r3, #0]
		sDate.Month = month;
 8001f60:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	f107 0308 	add.w	r3, r7, #8
 8001f6a:	705a      	strb	r2, [r3, #1]
		sDate.Date = day;
 8001f6c:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	f107 0308 	add.w	r3, r7, #8
 8001f76:	709a      	strb	r2, [r3, #2]
		sDate.Year = year-2000;
 8001f78:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	3330      	adds	r3, #48	; 0x30
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	f107 0308 	add.w	r3, r7, #8
 8001f86:	70da      	strb	r2, [r3, #3]
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8001f88:	f107 0308 	add.w	r3, r7, #8
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	4619      	mov	r1, r3
 8001f90:	480f      	ldr	r0, [pc, #60]	; (8001fd0 <_ZN9TcpClient6handleEP7tcp_pcbP16tcpClientDetails+0x2c8>)
 8001f92:	f006 fb83 	bl	800869c <HAL_RTC_SetDate>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	bf14      	ite	ne
 8001f9c:	2301      	movne	r3, #1
 8001f9e:	2300      	moveq	r3, #0
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <_ZN9TcpClient6handleEP7tcp_pcbP16tcpClientDetails+0x2a2>
			Error_Handler();
 8001fa6:	f000 fae3 	bl	8002570 <Error_Handler>
}
 8001faa:	bf00      	nop
 8001fac:	f507 6788 	add.w	r7, r7, #1088	; 0x440
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	0801ad30 	.word	0x0801ad30
 8001fb8:	0801ad34 	.word	0x0801ad34
 8001fbc:	20000218 	.word	0x20000218
 8001fc0:	200009e8 	.word	0x200009e8
 8001fc4:	0801ad3c 	.word	0x0801ad3c
 8001fc8:	0801ad44 	.word	0x0801ad44
 8001fcc:	0801ad50 	.word	0x0801ad50
 8001fd0:	20000bb0 	.word	0x20000bb0

08001fd4 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08e      	sub	sp, #56	; 0x38
 8001fd8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	605a      	str	r2, [r3, #4]
 8001fe4:	609a      	str	r2, [r3, #8]
 8001fe6:	60da      	str	r2, [r3, #12]
 8001fe8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	623b      	str	r3, [r7, #32]
 8001fee:	4b92      	ldr	r3, [pc, #584]	; (8002238 <MX_GPIO_Init+0x264>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	4a91      	ldr	r2, [pc, #580]	; (8002238 <MX_GPIO_Init+0x264>)
 8001ff4:	f043 0310 	orr.w	r3, r3, #16
 8001ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffa:	4b8f      	ldr	r3, [pc, #572]	; (8002238 <MX_GPIO_Init+0x264>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	f003 0310 	and.w	r3, r3, #16
 8002002:	623b      	str	r3, [r7, #32]
 8002004:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	61fb      	str	r3, [r7, #28]
 800200a:	4b8b      	ldr	r3, [pc, #556]	; (8002238 <MX_GPIO_Init+0x264>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	4a8a      	ldr	r2, [pc, #552]	; (8002238 <MX_GPIO_Init+0x264>)
 8002010:	f043 0304 	orr.w	r3, r3, #4
 8002014:	6313      	str	r3, [r2, #48]	; 0x30
 8002016:	4b88      	ldr	r3, [pc, #544]	; (8002238 <MX_GPIO_Init+0x264>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	f003 0304 	and.w	r3, r3, #4
 800201e:	61fb      	str	r3, [r7, #28]
 8002020:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	61bb      	str	r3, [r7, #24]
 8002026:	4b84      	ldr	r3, [pc, #528]	; (8002238 <MX_GPIO_Init+0x264>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	4a83      	ldr	r2, [pc, #524]	; (8002238 <MX_GPIO_Init+0x264>)
 800202c:	f043 0320 	orr.w	r3, r3, #32
 8002030:	6313      	str	r3, [r2, #48]	; 0x30
 8002032:	4b81      	ldr	r3, [pc, #516]	; (8002238 <MX_GPIO_Init+0x264>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	f003 0320 	and.w	r3, r3, #32
 800203a:	61bb      	str	r3, [r7, #24]
 800203c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]
 8002042:	4b7d      	ldr	r3, [pc, #500]	; (8002238 <MX_GPIO_Init+0x264>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	4a7c      	ldr	r2, [pc, #496]	; (8002238 <MX_GPIO_Init+0x264>)
 8002048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800204c:	6313      	str	r3, [r2, #48]	; 0x30
 800204e:	4b7a      	ldr	r3, [pc, #488]	; (8002238 <MX_GPIO_Init+0x264>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002056:	617b      	str	r3, [r7, #20]
 8002058:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	613b      	str	r3, [r7, #16]
 800205e:	4b76      	ldr	r3, [pc, #472]	; (8002238 <MX_GPIO_Init+0x264>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	4a75      	ldr	r2, [pc, #468]	; (8002238 <MX_GPIO_Init+0x264>)
 8002064:	f043 0301 	orr.w	r3, r3, #1
 8002068:	6313      	str	r3, [r2, #48]	; 0x30
 800206a:	4b73      	ldr	r3, [pc, #460]	; (8002238 <MX_GPIO_Init+0x264>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	4b6f      	ldr	r3, [pc, #444]	; (8002238 <MX_GPIO_Init+0x264>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	4a6e      	ldr	r2, [pc, #440]	; (8002238 <MX_GPIO_Init+0x264>)
 8002080:	f043 0302 	orr.w	r3, r3, #2
 8002084:	6313      	str	r3, [r2, #48]	; 0x30
 8002086:	4b6c      	ldr	r3, [pc, #432]	; (8002238 <MX_GPIO_Init+0x264>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	60bb      	str	r3, [r7, #8]
 8002096:	4b68      	ldr	r3, [pc, #416]	; (8002238 <MX_GPIO_Init+0x264>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	4a67      	ldr	r2, [pc, #412]	; (8002238 <MX_GPIO_Init+0x264>)
 800209c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020a0:	6313      	str	r3, [r2, #48]	; 0x30
 80020a2:	4b65      	ldr	r3, [pc, #404]	; (8002238 <MX_GPIO_Init+0x264>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020aa:	60bb      	str	r3, [r7, #8]
 80020ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	607b      	str	r3, [r7, #4]
 80020b2:	4b61      	ldr	r3, [pc, #388]	; (8002238 <MX_GPIO_Init+0x264>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	4a60      	ldr	r2, [pc, #384]	; (8002238 <MX_GPIO_Init+0x264>)
 80020b8:	f043 0308 	orr.w	r3, r3, #8
 80020bc:	6313      	str	r3, [r2, #48]	; 0x30
 80020be:	4b5e      	ldr	r3, [pc, #376]	; (8002238 <MX_GPIO_Init+0x264>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	607b      	str	r3, [r7, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST7735S_RST_Pin|KEYPAD_OUT_0_Pin|KEYPAD_OUT_1_Pin, GPIO_PIN_RESET);
 80020ca:	2200      	movs	r2, #0
 80020cc:	f24c 0108 	movw	r1, #49160	; 0xc008
 80020d0:	485a      	ldr	r0, [pc, #360]	; (800223c <MX_GPIO_Init+0x268>)
 80020d2:	f004 fe21 	bl	8006d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, BUZZER_Pin|LCD_TEXT_D7_Pin|LCD_TEXT_D6_Pin|HC_SR04_TRIG_Pin, GPIO_PIN_RESET);
 80020d6:	2200      	movs	r2, #0
 80020d8:	f242 2184 	movw	r1, #8836	; 0x2284
 80020dc:	4858      	ldr	r0, [pc, #352]	; (8002240 <MX_GPIO_Init+0x26c>)
 80020de:	f004 fe1b 	bl	8006d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|KEYPAD_OUT_2_Pin|KEYPAD_OUT_3_Pin|LD3_Pin
 80020e2:	2200      	movs	r2, #0
 80020e4:	f644 4181 	movw	r1, #19585	; 0x4c81
 80020e8:	4856      	ldr	r0, [pc, #344]	; (8002244 <MX_GPIO_Init+0x270>)
 80020ea:	f004 fe15 	bl	8006d18 <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LCD_TEXT_D4_Pin|LCD_TEXT_D5_Pin|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80020ee:	2200      	movs	r2, #0
 80020f0:	2143      	movs	r1, #67	; 0x43
 80020f2:	4855      	ldr	r0, [pc, #340]	; (8002248 <MX_GPIO_Init+0x274>)
 80020f4:	f004 fe10 	bl	8006d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_TEXT_RS_Pin|LCD_TEXT_E_Pin|ST7735S_DC_Pin, GPIO_PIN_RESET);
 80020f8:	2200      	movs	r2, #0
 80020fa:	210b      	movs	r1, #11
 80020fc:	4853      	ldr	r0, [pc, #332]	; (800224c <MX_GPIO_Init+0x278>)
 80020fe:	f004 fe0b 	bl	8006d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ST7735S_RST_Pin|KEYPAD_OUT_0_Pin|KEYPAD_OUT_1_Pin;
 8002102:	f24c 0308 	movw	r3, #49160	; 0xc008
 8002106:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002108:	2301      	movs	r3, #1
 800210a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002110:	2300      	movs	r3, #0
 8002112:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002114:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002118:	4619      	mov	r1, r3
 800211a:	4848      	ldr	r0, [pc, #288]	; (800223c <MX_GPIO_Init+0x268>)
 800211c:	f004 fab6 	bl	800668c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002120:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002124:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002126:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800212a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002134:	4619      	mov	r1, r3
 8002136:	4846      	ldr	r0, [pc, #280]	; (8002250 <MX_GPIO_Init+0x27c>)
 8002138:	f004 faa8 	bl	800668c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|LCD_TEXT_D7_Pin|LCD_TEXT_D6_Pin|HC_SR04_TRIG_Pin;
 800213c:	f242 2384 	movw	r3, #8836	; 0x2284
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002142:	2301      	movs	r3, #1
 8002144:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214a:	2300      	movs	r3, #0
 800214c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800214e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002152:	4619      	mov	r1, r3
 8002154:	483a      	ldr	r0, [pc, #232]	; (8002240 <MX_GPIO_Init+0x26c>)
 8002156:	f004 fa99 	bl	800668c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|KEYPAD_OUT_2_Pin|KEYPAD_OUT_3_Pin|LD3_Pin
 800215a:	f644 4381 	movw	r3, #19585	; 0x4c81
 800215e:	627b      	str	r3, [r7, #36]	; 0x24
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002160:	2301      	movs	r3, #1
 8002162:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002168:	2300      	movs	r3, #0
 800216a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800216c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002170:	4619      	mov	r1, r3
 8002172:	4834      	ldr	r0, [pc, #208]	; (8002244 <MX_GPIO_Init+0x270>)
 8002174:	f004 fa8a 	bl	800668c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LCD_TEXT_D4_Pin|LCD_TEXT_D5_Pin|USB_PowerSwitchOn_Pin;
 8002178:	2343      	movs	r3, #67	; 0x43
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800217c:	2301      	movs	r3, #1
 800217e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002184:	2300      	movs	r3, #0
 8002186:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002188:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800218c:	4619      	mov	r1, r3
 800218e:	482e      	ldr	r0, [pc, #184]	; (8002248 <MX_GPIO_Init+0x274>)
 8002190:	f004 fa7c 	bl	800668c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = KEYPAD_IN_1_Pin|KEYPAD_IN_0_Pin|KEYPAD_IN_2_Pin|KEYPAD_IN_3_Pin;
 8002194:	f44f 53ac 	mov.w	r3, #5504	; 0x1580
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800219a:	2300      	movs	r3, #0
 800219c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800219e:	2302      	movs	r3, #2
 80021a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a6:	4619      	mov	r1, r3
 80021a8:	4824      	ldr	r0, [pc, #144]	; (800223c <MX_GPIO_Init+0x268>)
 80021aa:	f004 fa6f 	bl	800668c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80021ae:	2380      	movs	r3, #128	; 0x80
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021b2:	2300      	movs	r3, #0
 80021b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80021ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021be:	4619      	mov	r1, r3
 80021c0:	4821      	ldr	r0, [pc, #132]	; (8002248 <MX_GPIO_Init+0x274>)
 80021c2:	f004 fa63 	bl	800668c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80021c6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80021ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021cc:	2302      	movs	r3, #2
 80021ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d4:	2303      	movs	r3, #3
 80021d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80021d8:	230a      	movs	r3, #10
 80021da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021e0:	4619      	mov	r1, r3
 80021e2:	481c      	ldr	r0, [pc, #112]	; (8002254 <MX_GPIO_Init+0x280>)
 80021e4:	f004 fa52 	bl	800668c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80021e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ee:	2300      	movs	r3, #0
 80021f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80021f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021fa:	4619      	mov	r1, r3
 80021fc:	4815      	ldr	r0, [pc, #84]	; (8002254 <MX_GPIO_Init+0x280>)
 80021fe:	f004 fa45 	bl	800668c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_TEXT_RS_Pin|LCD_TEXT_E_Pin|ST7735S_DC_Pin;
 8002202:	230b      	movs	r3, #11
 8002204:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002206:	2301      	movs	r3, #1
 8002208:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220a:	2300      	movs	r3, #0
 800220c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220e:	2300      	movs	r3, #0
 8002210:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002216:	4619      	mov	r1, r3
 8002218:	480c      	ldr	r0, [pc, #48]	; (800224c <MX_GPIO_Init+0x278>)
 800221a:	f004 fa37 	bl	800668c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800221e:	2200      	movs	r2, #0
 8002220:	2100      	movs	r1, #0
 8002222:	2028      	movs	r0, #40	; 0x28
 8002224:	f002 fdf2 	bl	8004e0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002228:	2028      	movs	r0, #40	; 0x28
 800222a:	f002 fe1b 	bl	8004e64 <HAL_NVIC_EnableIRQ>

}
 800222e:	bf00      	nop
 8002230:	3738      	adds	r7, #56	; 0x38
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40023800 	.word	0x40023800
 800223c:	40021000 	.word	0x40021000
 8002240:	40021400 	.word	0x40021400
 8002244:	40020400 	.word	0x40020400
 8002248:	40021800 	.word	0x40021800
 800224c:	40020c00 	.word	0x40020c00
 8002250:	40020800 	.word	0x40020800
 8002254:	40020000 	.word	0x40020000

08002258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b0b2      	sub	sp, #200	; 0xc8
 800225c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800225e:	f002 fc4f 	bl	8004b00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002262:	f000 f8f3 	bl	800244c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002266:	f7ff feb5 	bl	8001fd4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800226a:	f002 fbad 	bl	80049c8 <MX_USART3_UART_Init>
  MX_RTC_Init();
 800226e:	f001 fdf9 	bl	8003e64 <MX_RTC_Init>
  MX_LWIP_Init();
 8002272:	f00a f881 	bl	800c378 <MX_LWIP_Init>
  MX_TIM13_Init();
 8002276:	f002 fabb 	bl	80047f0 <MX_TIM13_Init>
  MX_SPI4_Init();
 800227a:	f001 fe4d 	bl	8003f18 <MX_SPI4_Init>
  MX_TIM1_Init();
 800227e:	f002 fa43 	bl	8004708 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8002282:	2100      	movs	r1, #0
 8002284:	4869      	ldr	r0, [pc, #420]	; (800242c <main+0x1d4>)
 8002286:	f007 fc49 	bl	8009b1c <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 800228a:	2100      	movs	r1, #0
 800228c:	4868      	ldr	r0, [pc, #416]	; (8002430 <main+0x1d8>)
 800228e:	f007 f9c3 	bl	8009618 <HAL_TIM_PWM_Start>
  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8002292:	2101      	movs	r1, #1
 8002294:	4867      	ldr	r0, [pc, #412]	; (8002434 <main+0x1dc>)
 8002296:	f004 fd71 	bl	8006d7c <HAL_GPIO_TogglePin>
  HD44780 textDisplay;
  textDisplay.init();
 800229a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800229e:	4618      	mov	r0, r3
 80022a0:	f7fe ff86 	bl	80011b0 <_ZN7HD447804initEv>

  ST7735s graphicDisplay(hspi4);
 80022a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022a8:	4963      	ldr	r1, [pc, #396]	; (8002438 <main+0x1e0>)
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff f96c 	bl	8001588 <_ZN7ST7735sC1ER19__SPI_HandleTypeDef>
  graphicDisplay.init();
 80022b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff f9e7 	bl	8001688 <_ZN7ST7735s4initEv>
  graphicDisplay.clearScreen();
 80022ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff fa79 	bl	80017b6 <_ZN7ST7735s11clearScreenEv>
  graphicDisplay.setOrientation(180);
 80022c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022c8:	21b4      	movs	r1, #180	; 0xb4
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff fabb 	bl	8001846 <_ZN7ST7735s14setOrientationEi>
  graphicDisplay.fillRect(0, 128, 128, 160, BLUE);
 80022d0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80022d4:	231f      	movs	r3, #31
 80022d6:	9301      	str	r3, [sp, #4]
 80022d8:	23a0      	movs	r3, #160	; 0xa0
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	2380      	movs	r3, #128	; 0x80
 80022de:	2280      	movs	r2, #128	; 0x80
 80022e0:	2100      	movs	r1, #0
 80022e2:	f7ff fa34 	bl	800174e <_ZN7ST7735s8fillRectEhhhhi>

  graphicDisplay.gotoLine(2);
 80022e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022ea:	2102      	movs	r1, #2
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff fa74 	bl	80017da <_ZN7ST7735s8gotoLineEh>
  HC_SR04 distanceSensor;
  uint8_t res = distanceSensor.read();
 80022f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7fe feac 	bl	8001054 <_ZN7HC_SR044readEv>
 80022fc:	4603      	mov	r3, r0
 80022fe:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd
  graphicDisplay.writeInt(res);
 8002302:	f897 20bd 	ldrb.w	r2, [r7, #189]	; 0xbd
 8002306:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800230a:	4611      	mov	r1, r2
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff fb5e 	bl	80019ce <_ZN7ST7735s8writeIntEi>

  TcpClient tcpClient;
  tcpClient.init();
 8002312:	f7ff fb75 	bl	8001a00 <_ZN9TcpClient4initEv>

  tcp_server_init();
 8002316:	f001 ffc9 	bl	80042ac <_Z15tcp_server_initv>

  RTC_DateTypeDef rtcDate;
  RTC_TimeTypeDef rtcTime;

  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800231a:	2180      	movs	r1, #128	; 0x80
 800231c:	4845      	ldr	r0, [pc, #276]	; (8002434 <main+0x1dc>)
 800231e:	f004 fd2d 	bl	8006d7c <HAL_GPIO_TogglePin>

  char* text = new char[16];
 8002322:	2010      	movs	r0, #16
 8002324:	f015 fac4 	bl	80178b0 <_Znaj>
 8002328:	4603      	mov	r3, r0
 800232a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint8_t old_seconds = 0;
 800232e:	2300      	movs	r3, #0
 8002330:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
  char old_c = 'y';
 8002334:	2379      	movs	r3, #121	; 0x79
 8002336:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  char c = pad.get_key();
 800233a:	1d3b      	adds	r3, r7, #4
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff f89f 	bl	8001480 <_ZN6Keypad7get_keyEv>
 8002342:	4603      	mov	r3, r0
 8002344:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	  if (old_c != c) {
 8002348:	f897 20be 	ldrb.w	r2, [r7, #190]	; 0xbe
 800234c:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8002350:	429a      	cmp	r2, r3
 8002352:	d021      	beq.n	8002398 <main+0x140>
		  old_c = c;
 8002354:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8002358:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
		  textDisplay.charXY(1, 13, c);
 800235c:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8002360:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8002364:	220d      	movs	r2, #13
 8002366:	2101      	movs	r1, #1
 8002368:	f7fe ffb8 	bl	80012dc <_ZN7HD447806charXYEhhh>
		  graphicDisplay.gotoLine(2);
 800236c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002370:	2102      	movs	r1, #2
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff fa31 	bl	80017da <_ZN7ST7735s8gotoLineEh>
		  uint8_t res = distanceSensor.read();
 8002378:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe fe69 	bl	8001054 <_ZN7HC_SR044readEv>
 8002382:	4603      	mov	r3, r0
 8002384:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
		  graphicDisplay.writeInt(res);
 8002388:	f897 20b6 	ldrb.w	r2, [r7, #182]	; 0xb6
 800238c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002390:	4611      	mov	r1, r2
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff fb1b 	bl	80019ce <_ZN7ST7735s8writeIntEi>
	  }
	  HAL_RTC_GetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
 8002398:	f107 0308 	add.w	r3, r7, #8
 800239c:	2200      	movs	r2, #0
 800239e:	4619      	mov	r1, r3
 80023a0:	4826      	ldr	r0, [pc, #152]	; (800243c <main+0x1e4>)
 80023a2:	f006 f90f 	bl	80085c4 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);
 80023a6:	f107 031c 	add.w	r3, r7, #28
 80023aa:	2200      	movs	r2, #0
 80023ac:	4619      	mov	r1, r3
 80023ae:	4823      	ldr	r0, [pc, #140]	; (800243c <main+0x1e4>)
 80023b0:	f006 faa4 	bl	80088fc <HAL_RTC_GetDate>
	  if (old_seconds != rtcTime.Seconds) {
 80023b4:	7abb      	ldrb	r3, [r7, #10]
 80023b6:	f897 20bf 	ldrb.w	r2, [r7, #191]	; 0xbf
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d02f      	beq.n	800241e <main+0x1c6>
		  old_seconds = rtcTime.Seconds;
 80023be:	7abb      	ldrb	r3, [r7, #10]
 80023c0:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
		  sprintf(text, "20%02d-%02d-%02d", rtcDate.Year, rtcDate.Month, rtcDate.Date);
 80023c4:	7ffb      	ldrb	r3, [r7, #31]
 80023c6:	461a      	mov	r2, r3
 80023c8:	7f7b      	ldrb	r3, [r7, #29]
 80023ca:	4619      	mov	r1, r3
 80023cc:	7fbb      	ldrb	r3, [r7, #30]
 80023ce:	9300      	str	r3, [sp, #0]
 80023d0:	460b      	mov	r3, r1
 80023d2:	491b      	ldr	r1, [pc, #108]	; (8002440 <main+0x1e8>)
 80023d4:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80023d8:	f015 fe94 	bl	8018104 <siprintf>
		  textDisplay.stringXY(0, 0, text);
 80023dc:	f107 0084 	add.w	r0, r7, #132	; 0x84
 80023e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80023e4:	2200      	movs	r2, #0
 80023e6:	2100      	movs	r1, #0
 80023e8:	f7ff f816 	bl	8001418 <_ZN7HD447808stringXYEhhPc>
		  sprintf(text, "%02d:%02d:%02d", rtcTime.Hours, rtcTime.Minutes, rtcTime.Seconds);
 80023ec:	7a3b      	ldrb	r3, [r7, #8]
 80023ee:	461a      	mov	r2, r3
 80023f0:	7a7b      	ldrb	r3, [r7, #9]
 80023f2:	4619      	mov	r1, r3
 80023f4:	7abb      	ldrb	r3, [r7, #10]
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	460b      	mov	r3, r1
 80023fa:	4912      	ldr	r1, [pc, #72]	; (8002444 <main+0x1ec>)
 80023fc:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8002400:	f015 fe80 	bl	8018104 <siprintf>
		  textDisplay.stringXY(1, 0, text);
 8002404:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8002408:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800240c:	2200      	movs	r2, #0
 800240e:	2101      	movs	r1, #1
 8002410:	f7ff f802 	bl	8001418 <_ZN7HD447808stringXYEhhPc>
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8002414:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002418:	4806      	ldr	r0, [pc, #24]	; (8002434 <main+0x1dc>)
 800241a:	f004 fcaf 	bl	8006d7c <HAL_GPIO_TogglePin>
	  }
	  ethernetif_input(&gnetif);
 800241e:	480a      	ldr	r0, [pc, #40]	; (8002448 <main+0x1f0>)
 8002420:	f00a fbaa 	bl	800cb78 <ethernetif_input>
	  sys_check_timeouts();
 8002424:	f012 fcf6 	bl	8014e14 <sys_check_timeouts>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8002428:	e787      	b.n	800233a <main+0xe2>
 800242a:	bf00      	nop
 800242c:	20000c70 	.word	0x20000c70
 8002430:	20000c28 	.word	0x20000c28
 8002434:	40020400 	.word	0x40020400
 8002438:	20000bd0 	.word	0x20000bd0
 800243c:	20000bb0 	.word	0x20000bb0
 8002440:	0801ad5c 	.word	0x0801ad5c
 8002444:	0801ad70 	.word	0x0801ad70
 8002448:	200009ec 	.word	0x200009ec

0800244c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b094      	sub	sp, #80	; 0x50
 8002450:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002452:	f107 0320 	add.w	r3, r7, #32
 8002456:	2230      	movs	r2, #48	; 0x30
 8002458:	2100      	movs	r1, #0
 800245a:	4618      	mov	r0, r3
 800245c:	f015 fcf4 	bl	8017e48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002460:	f107 030c 	add.w	r3, r7, #12
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	605a      	str	r2, [r3, #4]
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	60da      	str	r2, [r3, #12]
 800246e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002470:	2300      	movs	r3, #0
 8002472:	60bb      	str	r3, [r7, #8]
 8002474:	4b34      	ldr	r3, [pc, #208]	; (8002548 <_Z18SystemClock_Configv+0xfc>)
 8002476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002478:	4a33      	ldr	r2, [pc, #204]	; (8002548 <_Z18SystemClock_Configv+0xfc>)
 800247a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800247e:	6413      	str	r3, [r2, #64]	; 0x40
 8002480:	4b31      	ldr	r3, [pc, #196]	; (8002548 <_Z18SystemClock_Configv+0xfc>)
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800248c:	2300      	movs	r3, #0
 800248e:	607b      	str	r3, [r7, #4]
 8002490:	4b2e      	ldr	r3, [pc, #184]	; (800254c <_Z18SystemClock_Configv+0x100>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a2d      	ldr	r2, [pc, #180]	; (800254c <_Z18SystemClock_Configv+0x100>)
 8002496:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	4b2b      	ldr	r3, [pc, #172]	; (800254c <_Z18SystemClock_Configv+0x100>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80024a4:	607b      	str	r3, [r7, #4]
 80024a6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80024a8:	2305      	movs	r3, #5
 80024aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80024ac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80024b2:	2301      	movs	r3, #1
 80024b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024b6:	2302      	movs	r3, #2
 80024b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80024c0:	2304      	movs	r3, #4
 80024c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80024c4:	23b4      	movs	r3, #180	; 0xb4
 80024c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024c8:	2302      	movs	r3, #2
 80024ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80024cc:	2307      	movs	r3, #7
 80024ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024d0:	f107 0320 	add.w	r3, r7, #32
 80024d4:	4618      	mov	r0, r3
 80024d6:	f004 fce1 	bl	8006e9c <HAL_RCC_OscConfig>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	bf14      	ite	ne
 80024e0:	2301      	movne	r3, #1
 80024e2:	2300      	moveq	r3, #0
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 80024ea:	f000 f841 	bl	8002570 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80024ee:	f004 fc85 	bl	8006dfc <HAL_PWREx_EnableOverDrive>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	bf14      	ite	ne
 80024f8:	2301      	movne	r3, #1
 80024fa:	2300      	moveq	r3, #0
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 8002502:	f000 f835 	bl	8002570 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002506:	230f      	movs	r3, #15
 8002508:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800250a:	2302      	movs	r3, #2
 800250c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800250e:	2300      	movs	r3, #0
 8002510:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002512:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002516:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800251c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800251e:	f107 030c 	add.w	r3, r7, #12
 8002522:	2105      	movs	r1, #5
 8002524:	4618      	mov	r0, r3
 8002526:	f004 ffe1 	bl	80074ec <HAL_RCC_ClockConfig>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	bf14      	ite	ne
 8002530:	2301      	movne	r3, #1
 8002532:	2300      	moveq	r3, #0
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <_Z18SystemClock_Configv+0xf2>
  {
    Error_Handler();
 800253a:	f000 f819 	bl	8002570 <Error_Handler>
  }
}
 800253e:	bf00      	nop
 8002540:	3750      	adds	r7, #80	; 0x50
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40023800 	.word	0x40023800
 800254c:	40007000 	.word	0x40007000

08002550 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800255a:	2101      	movs	r1, #1
 800255c:	4803      	ldr	r0, [pc, #12]	; (800256c <HAL_GPIO_EXTI_Callback+0x1c>)
 800255e:	f004 fc0d 	bl	8006d7c <HAL_GPIO_TogglePin>
}
 8002562:	bf00      	nop
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40020400 	.word	0x40020400

08002570 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002574:	b672      	cpsid	i
}
 8002576:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002578:	e7fe      	b.n	8002578 <Error_Handler+0x8>

0800257a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
 8002582:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <hex_char_to_int>:

static char * parson_strdup(const char *string) {
    return parson_strndup(string, strlen(string));
}

static int hex_char_to_int(char c) {
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9') {
 800259a:	79fb      	ldrb	r3, [r7, #7]
 800259c:	2b2f      	cmp	r3, #47	; 0x2f
 800259e:	d905      	bls.n	80025ac <hex_char_to_int+0x1c>
 80025a0:	79fb      	ldrb	r3, [r7, #7]
 80025a2:	2b39      	cmp	r3, #57	; 0x39
 80025a4:	d802      	bhi.n	80025ac <hex_char_to_int+0x1c>
        return c - '0';
 80025a6:	79fb      	ldrb	r3, [r7, #7]
 80025a8:	3b30      	subs	r3, #48	; 0x30
 80025aa:	e013      	b.n	80025d4 <hex_char_to_int+0x44>
    } else if (c >= 'a' && c <= 'f') {
 80025ac:	79fb      	ldrb	r3, [r7, #7]
 80025ae:	2b60      	cmp	r3, #96	; 0x60
 80025b0:	d905      	bls.n	80025be <hex_char_to_int+0x2e>
 80025b2:	79fb      	ldrb	r3, [r7, #7]
 80025b4:	2b66      	cmp	r3, #102	; 0x66
 80025b6:	d802      	bhi.n	80025be <hex_char_to_int+0x2e>
        return c - 'a' + 10;
 80025b8:	79fb      	ldrb	r3, [r7, #7]
 80025ba:	3b57      	subs	r3, #87	; 0x57
 80025bc:	e00a      	b.n	80025d4 <hex_char_to_int+0x44>
    } else if (c >= 'A' && c <= 'F') {
 80025be:	79fb      	ldrb	r3, [r7, #7]
 80025c0:	2b40      	cmp	r3, #64	; 0x40
 80025c2:	d905      	bls.n	80025d0 <hex_char_to_int+0x40>
 80025c4:	79fb      	ldrb	r3, [r7, #7]
 80025c6:	2b46      	cmp	r3, #70	; 0x46
 80025c8:	d802      	bhi.n	80025d0 <hex_char_to_int+0x40>
        return c - 'A' + 10;
 80025ca:	79fb      	ldrb	r3, [r7, #7]
 80025cc:	3b37      	subs	r3, #55	; 0x37
 80025ce:	e001      	b.n	80025d4 <hex_char_to_int+0x44>
    }
    return -1;
 80025d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <parse_utf16_hex>:

static JSON_Status parse_utf16_hex(const char *s, unsigned int *result) {
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
    int x1, x2, x3, x4;
    if (s[0] == '\0' || s[1] == '\0' || s[2] == '\0' || s[3] == '\0') {
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00e      	beq.n	8002610 <parse_utf16_hex+0x30>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	3301      	adds	r3, #1
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d009      	beq.n	8002610 <parse_utf16_hex+0x30>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3302      	adds	r3, #2
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d004      	beq.n	8002610 <parse_utf16_hex+0x30>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	3303      	adds	r3, #3
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d102      	bne.n	8002616 <parse_utf16_hex+0x36>
        return JSONFailure;
 8002610:	f04f 33ff 	mov.w	r3, #4294967295
 8002614:	e03b      	b.n	800268e <parse_utf16_hex+0xae>
    }
    x1 = hex_char_to_int(s[0]);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff ffb8 	bl	8002590 <hex_char_to_int>
 8002620:	6178      	str	r0, [r7, #20]
    x2 = hex_char_to_int(s[1]);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3301      	adds	r3, #1
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff ffb1 	bl	8002590 <hex_char_to_int>
 800262e:	6138      	str	r0, [r7, #16]
    x3 = hex_char_to_int(s[2]);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3302      	adds	r3, #2
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff ffaa 	bl	8002590 <hex_char_to_int>
 800263c:	60f8      	str	r0, [r7, #12]
    x4 = hex_char_to_int(s[3]);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	3303      	adds	r3, #3
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff ffa3 	bl	8002590 <hex_char_to_int>
 800264a:	60b8      	str	r0, [r7, #8]
    if (x1 == -1 || x2 == -1 || x3 == -1 || x4 == -1) {
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002652:	d00b      	beq.n	800266c <parse_utf16_hex+0x8c>
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800265a:	d007      	beq.n	800266c <parse_utf16_hex+0x8c>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002662:	d003      	beq.n	800266c <parse_utf16_hex+0x8c>
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800266a:	d102      	bne.n	8002672 <parse_utf16_hex+0x92>
        return JSONFailure;
 800266c:	f04f 33ff 	mov.w	r3, #4294967295
 8002670:	e00d      	b.n	800268e <parse_utf16_hex+0xae>
    }
    *result = (unsigned int)((x1 << 12) | (x2 << 8) | (x3 << 4) | x4);
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	031a      	lsls	r2, r3, #12
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	021b      	lsls	r3, r3, #8
 800267a:	431a      	orrs	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	011b      	lsls	r3, r3, #4
 8002680:	431a      	orrs	r2, r3
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	4313      	orrs	r3, r2
 8002686:	461a      	mov	r2, r3
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	601a      	str	r2, [r3, #0]
    return JSONSuccess;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3718      	adds	r7, #24
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
	...

08002698 <is_decimal>:
        string += len;
    }
    return PARSON_TRUE;
}

static parson_bool_t is_decimal(const char *string, size_t length) {
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
    if (length > 1 && string[0] == '0' && string[1] != '.') {
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d90a      	bls.n	80026be <is_decimal+0x26>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2b30      	cmp	r3, #48	; 0x30
 80026ae:	d106      	bne.n	80026be <is_decimal+0x26>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3301      	adds	r3, #1
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b2e      	cmp	r3, #46	; 0x2e
 80026b8:	d001      	beq.n	80026be <is_decimal+0x26>
        return PARSON_FALSE;
 80026ba:	2300      	movs	r3, #0
 80026bc:	e024      	b.n	8002708 <is_decimal+0x70>
    }
    if (length > 2 && !strncmp(string, "-0", 2) && string[2] != '.') {
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d91b      	bls.n	80026fc <is_decimal+0x64>
 80026c4:	2202      	movs	r2, #2
 80026c6:	4912      	ldr	r1, [pc, #72]	; (8002710 <is_decimal+0x78>)
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f015 fd93 	bl	80181f4 <strncmp>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d113      	bne.n	80026fc <is_decimal+0x64>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3302      	adds	r3, #2
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b2e      	cmp	r3, #46	; 0x2e
 80026dc:	d00e      	beq.n	80026fc <is_decimal+0x64>
        return PARSON_FALSE;
 80026de:	2300      	movs	r3, #0
 80026e0:	e012      	b.n	8002708 <is_decimal+0x70>
    }
    while (length--) {
        if (strchr("xX", string[length])) {
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	4413      	add	r3, r2
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	4619      	mov	r1, r3
 80026ec:	4809      	ldr	r0, [pc, #36]	; (8002714 <is_decimal+0x7c>)
 80026ee:	f015 fd6c 	bl	80181ca <strchr>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <is_decimal+0x64>
            return PARSON_FALSE;
 80026f8:	2300      	movs	r3, #0
 80026fa:	e005      	b.n	8002708 <is_decimal+0x70>
    while (length--) {
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	1e5a      	subs	r2, r3, #1
 8002700:	603a      	str	r2, [r7, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1ed      	bne.n	80026e2 <is_decimal+0x4a>
        }
    }
    return PARSON_TRUE;
 8002706:	2301      	movs	r3, #1
}
 8002708:	4618      	mov	r0, r3
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	0801ad84 	.word	0x0801ad84
 8002714:	0801ad88 	.word	0x0801ad88

08002718 <hash_string>:

static unsigned long hash_string(const char *string, size_t n) {
 8002718:	b480      	push	{r7}
 800271a:	b087      	sub	sp, #28
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
#ifdef PARSON_FORCE_HASH_COLLISIONS
    (void)string;
    (void)n;
    return 0;
#else
    unsigned long hash = 5381;
 8002722:	f241 5305 	movw	r3, #5381	; 0x1505
 8002726:	617b      	str	r3, [r7, #20]
    unsigned char c;
    size_t i = 0;
 8002728:	2300      	movs	r3, #0
 800272a:	613b      	str	r3, [r7, #16]
    for (i = 0; i < n; i++) {
 800272c:	2300      	movs	r3, #0
 800272e:	613b      	str	r3, [r7, #16]
 8002730:	e011      	b.n	8002756 <hash_string+0x3e>
        c = string[i];
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	4413      	add	r3, r2
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	73fb      	strb	r3, [r7, #15]
        if (c == '\0') {
 800273c:	7bfb      	ldrb	r3, [r7, #15]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00e      	beq.n	8002760 <hash_string+0x48>
            break;
        }
        hash = ((hash << 5) + hash) + c; /* hash * 33 + c */
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	015a      	lsls	r2, r3, #5
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	441a      	add	r2, r3
 800274a:	7bfb      	ldrb	r3, [r7, #15]
 800274c:	4413      	add	r3, r2
 800274e:	617b      	str	r3, [r7, #20]
    for (i = 0; i < n; i++) {
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	3301      	adds	r3, #1
 8002754:	613b      	str	r3, [r7, #16]
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	429a      	cmp	r2, r3
 800275c:	d3e9      	bcc.n	8002732 <hash_string+0x1a>
 800275e:	e000      	b.n	8002762 <hash_string+0x4a>
            break;
 8002760:	bf00      	nop
    }
    return hash;
 8002762:	697b      	ldr	r3, [r7, #20]
#endif
}
 8002764:	4618      	mov	r0, r3
 8002766:	371c      	adds	r7, #28
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <json_object_make>:

/* JSON Object */
static JSON_Object * json_object_make(JSON_Value *wrapping_value) {
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
    JSON_Status res = JSONFailure;
 8002778:	f04f 33ff 	mov.w	r3, #4294967295
 800277c:	60fb      	str	r3, [r7, #12]
    JSON_Object *new_obj = (JSON_Object*)parson_malloc(sizeof(JSON_Object));
 800277e:	4b10      	ldr	r3, [pc, #64]	; (80027c0 <json_object_make+0x50>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2024      	movs	r0, #36	; 0x24
 8002784:	4798      	blx	r3
 8002786:	60b8      	str	r0, [r7, #8]
    if (new_obj == NULL) {
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <json_object_make+0x22>
        return NULL;
 800278e:	2300      	movs	r3, #0
 8002790:	e011      	b.n	80027b6 <json_object_make+0x46>
    }
    new_obj->wrapping_value = wrapping_value;
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	601a      	str	r2, [r3, #0]
    res = json_object_init(new_obj, 0);
 8002798:	2100      	movs	r1, #0
 800279a:	68b8      	ldr	r0, [r7, #8]
 800279c:	f000 f814 	bl	80027c8 <json_object_init>
 80027a0:	60f8      	str	r0, [r7, #12]
    if (res != JSONSuccess) {
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d005      	beq.n	80027b4 <json_object_make+0x44>
        parson_free(new_obj);
 80027a8:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <json_object_make+0x54>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68b8      	ldr	r0, [r7, #8]
 80027ae:	4798      	blx	r3
        return NULL;
 80027b0:	2300      	movs	r3, #0
 80027b2:	e000      	b.n	80027b6 <json_object_make+0x46>
    }
    return new_obj;
 80027b4:	68bb      	ldr	r3, [r7, #8]
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	20000000 	.word	0x20000000
 80027c4:	20000004 	.word	0x20000004

080027c8 <json_object_init>:

static JSON_Status json_object_init(JSON_Object *object, size_t capacity) {
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
    unsigned int i = 0;
 80027d2:	2300      	movs	r3, #0
 80027d4:	60fb      	str	r3, [r7, #12]

    object->cells = NULL;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	605a      	str	r2, [r3, #4]
    object->names = NULL;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	60da      	str	r2, [r3, #12]
    object->values = NULL;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	611a      	str	r2, [r3, #16]
    object->cell_ixs = NULL;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	615a      	str	r2, [r3, #20]
    object->hashes = NULL;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	609a      	str	r2, [r3, #8]

    object->count = 0;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	619a      	str	r2, [r3, #24]
    object->cell_capacity = capacity;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	621a      	str	r2, [r3, #32]
    object->item_capacity = (unsigned int)(capacity * 0.7f);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	ee07 3a90 	vmov	s15, r3
 8002806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800280a:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002928 <json_object_init+0x160>
 800280e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002812:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002816:	ee17 2a90 	vmov	r2, s15
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	61da      	str	r2, [r3, #28]

    if (capacity == 0) {
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <json_object_init+0x60>
        return JSONSuccess;
 8002824:	2300      	movs	r3, #0
 8002826:	e07b      	b.n	8002920 <json_object_init+0x158>
    }

    object->cells = (size_t*)parson_malloc(object->cell_capacity * sizeof(*object->cells));
 8002828:	4b40      	ldr	r3, [pc, #256]	; (800292c <json_object_init+0x164>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6a12      	ldr	r2, [r2, #32]
 8002830:	0092      	lsls	r2, r2, #2
 8002832:	4610      	mov	r0, r2
 8002834:	4798      	blx	r3
 8002836:	4602      	mov	r2, r0
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	605a      	str	r2, [r3, #4]
    object->names = (char**)parson_malloc(object->item_capacity * sizeof(*object->names));
 800283c:	4b3b      	ldr	r3, [pc, #236]	; (800292c <json_object_init+0x164>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	69d2      	ldr	r2, [r2, #28]
 8002844:	0092      	lsls	r2, r2, #2
 8002846:	4610      	mov	r0, r2
 8002848:	4798      	blx	r3
 800284a:	4602      	mov	r2, r0
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	60da      	str	r2, [r3, #12]
    object->values = (JSON_Value**)parson_malloc(object->item_capacity * sizeof(*object->values));
 8002850:	4b36      	ldr	r3, [pc, #216]	; (800292c <json_object_init+0x164>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	69d2      	ldr	r2, [r2, #28]
 8002858:	0092      	lsls	r2, r2, #2
 800285a:	4610      	mov	r0, r2
 800285c:	4798      	blx	r3
 800285e:	4602      	mov	r2, r0
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	611a      	str	r2, [r3, #16]
    object->cell_ixs = (size_t*)parson_malloc(object->item_capacity * sizeof(*object->cell_ixs));
 8002864:	4b31      	ldr	r3, [pc, #196]	; (800292c <json_object_init+0x164>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	69d2      	ldr	r2, [r2, #28]
 800286c:	0092      	lsls	r2, r2, #2
 800286e:	4610      	mov	r0, r2
 8002870:	4798      	blx	r3
 8002872:	4602      	mov	r2, r0
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	615a      	str	r2, [r3, #20]
    object->hashes = (unsigned long*)parson_malloc(object->item_capacity * sizeof(*object->hashes));
 8002878:	4b2c      	ldr	r3, [pc, #176]	; (800292c <json_object_init+0x164>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	69d2      	ldr	r2, [r2, #28]
 8002880:	0092      	lsls	r2, r2, #2
 8002882:	4610      	mov	r0, r2
 8002884:	4798      	blx	r3
 8002886:	4602      	mov	r2, r0
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	609a      	str	r2, [r3, #8]
    if (object->cells == NULL
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d024      	beq.n	80028de <json_object_init+0x116>
        || object->names == NULL
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d020      	beq.n	80028de <json_object_init+0x116>
        || object->values == NULL
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d01c      	beq.n	80028de <json_object_init+0x116>
        || object->cell_ixs == NULL
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d018      	beq.n	80028de <json_object_init+0x116>
        || object->hashes == NULL) {
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d014      	beq.n	80028de <json_object_init+0x116>
        goto error;
    }
    for (i = 0; i < object->cell_capacity; i++) {
 80028b4:	2300      	movs	r3, #0
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	e00a      	b.n	80028d0 <json_object_init+0x108>
        object->cells[i] = OBJECT_INVALID_IX;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	f04f 32ff 	mov.w	r2, #4294967295
 80028c8:	601a      	str	r2, [r3, #0]
    for (i = 0; i < object->cell_capacity; i++) {
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	3301      	adds	r3, #1
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d3ef      	bcc.n	80028ba <json_object_init+0xf2>
    }
    return JSONSuccess;
 80028da:	2300      	movs	r3, #0
 80028dc:	e020      	b.n	8002920 <json_object_init+0x158>
        goto error;
 80028de:	bf00      	nop
error:
    parson_free(object->cells);
 80028e0:	4b13      	ldr	r3, [pc, #76]	; (8002930 <json_object_init+0x168>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6852      	ldr	r2, [r2, #4]
 80028e8:	4610      	mov	r0, r2
 80028ea:	4798      	blx	r3
    parson_free(object->names);
 80028ec:	4b10      	ldr	r3, [pc, #64]	; (8002930 <json_object_init+0x168>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	68d2      	ldr	r2, [r2, #12]
 80028f4:	4610      	mov	r0, r2
 80028f6:	4798      	blx	r3
    parson_free(object->values);
 80028f8:	4b0d      	ldr	r3, [pc, #52]	; (8002930 <json_object_init+0x168>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6912      	ldr	r2, [r2, #16]
 8002900:	4610      	mov	r0, r2
 8002902:	4798      	blx	r3
    parson_free(object->cell_ixs);
 8002904:	4b0a      	ldr	r3, [pc, #40]	; (8002930 <json_object_init+0x168>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	6952      	ldr	r2, [r2, #20]
 800290c:	4610      	mov	r0, r2
 800290e:	4798      	blx	r3
    parson_free(object->hashes);
 8002910:	4b07      	ldr	r3, [pc, #28]	; (8002930 <json_object_init+0x168>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6892      	ldr	r2, [r2, #8]
 8002918:	4610      	mov	r0, r2
 800291a:	4798      	blx	r3
    return JSONFailure;
 800291c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	3f333333 	.word	0x3f333333
 800292c:	20000000 	.word	0x20000000
 8002930:	20000004 	.word	0x20000004

08002934 <json_object_deinit>:

static void json_object_deinit(JSON_Object *object, parson_bool_t free_keys, parson_bool_t free_values) {
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
    unsigned int i = 0;
 8002940:	2300      	movs	r3, #0
 8002942:	617b      	str	r3, [r7, #20]
    for (i = 0; i < object->count; i++) {
 8002944:	2300      	movs	r3, #0
 8002946:	617b      	str	r3, [r7, #20]
 8002948:	e01b      	b.n	8002982 <json_object_deinit+0x4e>
        if (free_keys) {
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d009      	beq.n	8002964 <json_object_deinit+0x30>
            parson_free(object->names[i]);
 8002950:	4b2b      	ldr	r3, [pc, #172]	; (8002a00 <json_object_deinit+0xcc>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	68d1      	ldr	r1, [r2, #12]
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	0092      	lsls	r2, r2, #2
 800295c:	440a      	add	r2, r1
 800295e:	6812      	ldr	r2, [r2, #0]
 8002960:	4610      	mov	r0, r2
 8002962:	4798      	blx	r3
        }
        if (free_values) {
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d008      	beq.n	800297c <json_object_deinit+0x48>
            json_value_free(object->values[i]);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	691a      	ldr	r2, [r3, #16]
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f001 f952 	bl	8003c20 <json_value_free>
    for (i = 0; i < object->count; i++) {
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	3301      	adds	r3, #1
 8002980:	617b      	str	r3, [r7, #20]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	429a      	cmp	r2, r3
 800298a:	d3de      	bcc.n	800294a <json_object_deinit+0x16>
        }
    }

    object->count = 0;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	619a      	str	r2, [r3, #24]
    object->item_capacity = 0;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	61da      	str	r2, [r3, #28]
    object->cell_capacity = 0;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	621a      	str	r2, [r3, #32]

    parson_free(object->cells);
 800299e:	4b18      	ldr	r3, [pc, #96]	; (8002a00 <json_object_deinit+0xcc>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	6852      	ldr	r2, [r2, #4]
 80029a6:	4610      	mov	r0, r2
 80029a8:	4798      	blx	r3
    parson_free(object->names);
 80029aa:	4b15      	ldr	r3, [pc, #84]	; (8002a00 <json_object_deinit+0xcc>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	68d2      	ldr	r2, [r2, #12]
 80029b2:	4610      	mov	r0, r2
 80029b4:	4798      	blx	r3
    parson_free(object->values);
 80029b6:	4b12      	ldr	r3, [pc, #72]	; (8002a00 <json_object_deinit+0xcc>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	6912      	ldr	r2, [r2, #16]
 80029be:	4610      	mov	r0, r2
 80029c0:	4798      	blx	r3
    parson_free(object->cell_ixs);
 80029c2:	4b0f      	ldr	r3, [pc, #60]	; (8002a00 <json_object_deinit+0xcc>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	6952      	ldr	r2, [r2, #20]
 80029ca:	4610      	mov	r0, r2
 80029cc:	4798      	blx	r3
    parson_free(object->hashes);
 80029ce:	4b0c      	ldr	r3, [pc, #48]	; (8002a00 <json_object_deinit+0xcc>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	6892      	ldr	r2, [r2, #8]
 80029d6:	4610      	mov	r0, r2
 80029d8:	4798      	blx	r3

    object->cells = NULL;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	605a      	str	r2, [r3, #4]
    object->names = NULL;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	60da      	str	r2, [r3, #12]
    object->values = NULL;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	611a      	str	r2, [r3, #16]
    object->cell_ixs = NULL;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	615a      	str	r2, [r3, #20]
    object->hashes = NULL;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	609a      	str	r2, [r3, #8]
}
 80029f8:	bf00      	nop
 80029fa:	3718      	adds	r7, #24
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	20000004 	.word	0x20000004

08002a04 <json_object_grow_and_rehash>:

static JSON_Status json_object_grow_and_rehash(JSON_Object *object) {
 8002a04:	b5b0      	push	{r4, r5, r7, lr}
 8002a06:	b092      	sub	sp, #72	; 0x48
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
    JSON_Value *wrapping_value = NULL;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	643b      	str	r3, [r7, #64]	; 0x40
    JSON_Object new_object;
    char *key = NULL;
 8002a10:	2300      	movs	r3, #0
 8002a12:	63fb      	str	r3, [r7, #60]	; 0x3c
    JSON_Value *value = NULL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	63bb      	str	r3, [r7, #56]	; 0x38
    unsigned int i = 0;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	647b      	str	r3, [r7, #68]	; 0x44
    size_t new_capacity = MAX(object->cell_capacity * 2, STARTING_CAPACITY);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	2b10      	cmp	r3, #16
 8002a24:	bf38      	it	cc
 8002a26:	2310      	movcc	r3, #16
 8002a28:	637b      	str	r3, [r7, #52]	; 0x34
    JSON_Status res = json_object_init(&new_object, new_capacity);
 8002a2a:	f107 030c 	add.w	r3, r7, #12
 8002a2e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff fec9 	bl	80027c8 <json_object_init>
 8002a36:	6338      	str	r0, [r7, #48]	; 0x30
    if (res != JSONSuccess) {
 8002a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d002      	beq.n	8002a44 <json_object_grow_and_rehash+0x40>
        return JSONFailure;
 8002a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a42:	e046      	b.n	8002ad2 <json_object_grow_and_rehash+0xce>
    }

    wrapping_value = json_object_get_wrapping_value(object);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f001 f85c 	bl	8003b02 <json_object_get_wrapping_value>
 8002a4a:	6438      	str	r0, [r7, #64]	; 0x40
    new_object.wrapping_value = wrapping_value;
 8002a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a4e:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < object->count; i++) {
 8002a50:	2300      	movs	r3, #0
 8002a52:	647b      	str	r3, [r7, #68]	; 0x44
 8002a54:	e028      	b.n	8002aa8 <json_object_grow_and_rehash+0xa4>
        key = object->names[i];
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68da      	ldr	r2, [r3, #12]
 8002a5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	63fb      	str	r3, [r7, #60]	; 0x3c
        value = object->values[i];
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	691a      	ldr	r2, [r3, #16]
 8002a68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	63bb      	str	r3, [r7, #56]	; 0x38
        res = json_object_add(&new_object, key, value);
 8002a72:	f107 030c 	add.w	r3, r7, #12
 8002a76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a78:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 f897 	bl	8002bae <json_object_add>
 8002a80:	6338      	str	r0, [r7, #48]	; 0x30
        if (res != JSONSuccess) {
 8002a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d009      	beq.n	8002a9c <json_object_grow_and_rehash+0x98>
            json_object_deinit(&new_object, PARSON_FALSE, PARSON_FALSE);
 8002a88:	f107 030c 	add.w	r3, r7, #12
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	2100      	movs	r1, #0
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff ff4f 	bl	8002934 <json_object_deinit>
            return JSONFailure;
 8002a96:	f04f 33ff 	mov.w	r3, #4294967295
 8002a9a:	e01a      	b.n	8002ad2 <json_object_grow_and_rehash+0xce>
        }
        value->parent = wrapping_value;
 8002a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002aa0:	601a      	str	r2, [r3, #0]
    for (i = 0; i < object->count; i++) {
 8002aa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	647b      	str	r3, [r7, #68]	; 0x44
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d3d1      	bcc.n	8002a56 <json_object_grow_and_rehash+0x52>
    }
    json_object_deinit(object, PARSON_FALSE, PARSON_FALSE);
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff ff3c 	bl	8002934 <json_object_deinit>
    *object = new_object;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	461d      	mov	r5, r3
 8002ac0:	f107 040c 	add.w	r4, r7, #12
 8002ac4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ac6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ac8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002acc:	6823      	ldr	r3, [r4, #0]
 8002ace:	602b      	str	r3, [r5, #0]
    return JSONSuccess;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3748      	adds	r7, #72	; 0x48
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bdb0      	pop	{r4, r5, r7, pc}

08002ada <json_object_get_cell_ix>:

static size_t json_object_get_cell_ix(const JSON_Object *object, const char *key, size_t key_len, unsigned long hash, parson_bool_t *out_found) {
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b08c      	sub	sp, #48	; 0x30
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	60f8      	str	r0, [r7, #12]
 8002ae2:	60b9      	str	r1, [r7, #8]
 8002ae4:	607a      	str	r2, [r7, #4]
 8002ae6:	603b      	str	r3, [r7, #0]
    size_t cell_ix = hash & (object->cell_capacity - 1);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	3b01      	subs	r3, #1
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	4013      	ands	r3, r2
 8002af2:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t cell = 0;
 8002af4:	2300      	movs	r3, #0
 8002af6:	627b      	str	r3, [r7, #36]	; 0x24
    size_t ix = 0;
 8002af8:	2300      	movs	r3, #0
 8002afa:	623b      	str	r3, [r7, #32]
    unsigned int i = 0;
 8002afc:	2300      	movs	r3, #0
 8002afe:	62fb      	str	r3, [r7, #44]	; 0x2c
    unsigned long hash_to_check = 0;
 8002b00:	2300      	movs	r3, #0
 8002b02:	61fb      	str	r3, [r7, #28]
    const char *key_to_check = NULL;
 8002b04:	2300      	movs	r3, #0
 8002b06:	61bb      	str	r3, [r7, #24]
    size_t key_to_check_len = 0;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	617b      	str	r3, [r7, #20]

    *out_found = PARSON_FALSE;
 8002b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b0e:	2200      	movs	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]

    for (i = 0; i < object->cell_capacity; i++) {
 8002b12:	2300      	movs	r3, #0
 8002b14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b16:	e03f      	b.n	8002b98 <json_object_get_cell_ix+0xbe>
        ix = (cell_ix + i) & (object->cell_capacity - 1);
 8002b18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1c:	441a      	add	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	3b01      	subs	r3, #1
 8002b24:	4013      	ands	r3, r2
 8002b26:	623b      	str	r3, [r7, #32]
        cell = object->cells[ix];
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	6a3b      	ldr	r3, [r7, #32]
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4413      	add	r3, r2
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	627b      	str	r3, [r7, #36]	; 0x24
        if (cell == OBJECT_INVALID_IX) {
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3c:	d101      	bne.n	8002b42 <json_object_get_cell_ix+0x68>
            return ix;
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
 8002b40:	e031      	b.n	8002ba6 <json_object_get_cell_ix+0xcc>
        }
        hash_to_check = object->hashes[cell];
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	61fb      	str	r3, [r7, #28]
        if (hash != hash_to_check) {
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d11b      	bne.n	8002b90 <json_object_get_cell_ix+0xb6>
            continue;
        }
        key_to_check = object->names[cell];
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	68da      	ldr	r2, [r3, #12]
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	61bb      	str	r3, [r7, #24]
        key_to_check_len = strlen(key_to_check);
 8002b66:	69b8      	ldr	r0, [r7, #24]
 8002b68:	f7fd fb42 	bl	80001f0 <strlen>
 8002b6c:	6178      	str	r0, [r7, #20]
        if (key_to_check_len == key_len && strncmp(key, key_to_check, key_len) == 0) {
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d10d      	bne.n	8002b92 <json_object_get_cell_ix+0xb8>
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	69b9      	ldr	r1, [r7, #24]
 8002b7a:	68b8      	ldr	r0, [r7, #8]
 8002b7c:	f015 fb3a 	bl	80181f4 <strncmp>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d105      	bne.n	8002b92 <json_object_get_cell_ix+0xb8>
            *out_found = PARSON_TRUE;
 8002b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b88:	2201      	movs	r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]
            return ix;
 8002b8c:	6a3b      	ldr	r3, [r7, #32]
 8002b8e:	e00a      	b.n	8002ba6 <json_object_get_cell_ix+0xcc>
            continue;
 8002b90:	bf00      	nop
    for (i = 0; i < object->cell_capacity; i++) {
 8002b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b94:	3301      	adds	r3, #1
 8002b96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d3ba      	bcc.n	8002b18 <json_object_get_cell_ix+0x3e>
        }
    }
    return OBJECT_INVALID_IX;
 8002ba2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3730      	adds	r7, #48	; 0x30
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <json_object_add>:

static JSON_Status json_object_add(JSON_Object *object, char *name, JSON_Value *value) {
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b08a      	sub	sp, #40	; 0x28
 8002bb2:	af02      	add	r7, sp, #8
 8002bb4:	60f8      	str	r0, [r7, #12]
 8002bb6:	60b9      	str	r1, [r7, #8]
 8002bb8:	607a      	str	r2, [r7, #4]
    unsigned long hash = 0;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61bb      	str	r3, [r7, #24]
    parson_bool_t found = PARSON_FALSE;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	613b      	str	r3, [r7, #16]
    size_t cell_ix = 0;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	61fb      	str	r3, [r7, #28]
    JSON_Status res = JSONFailure;
 8002bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bca:	617b      	str	r3, [r7, #20]

    if (!object || !name || !value) {
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d005      	beq.n	8002bde <json_object_add+0x30>
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d002      	beq.n	8002bde <json_object_add+0x30>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d102      	bne.n	8002be4 <json_object_add+0x36>
        return JSONFailure;
 8002bde:	f04f 33ff 	mov.w	r3, #4294967295
 8002be2:	e06e      	b.n	8002cc2 <json_object_add+0x114>
    }

    hash = hash_string(name, strlen(name));
 8002be4:	68b8      	ldr	r0, [r7, #8]
 8002be6:	f7fd fb03 	bl	80001f0 <strlen>
 8002bea:	4603      	mov	r3, r0
 8002bec:	4619      	mov	r1, r3
 8002bee:	68b8      	ldr	r0, [r7, #8]
 8002bf0:	f7ff fd92 	bl	8002718 <hash_string>
 8002bf4:	61b8      	str	r0, [r7, #24]
    found = PARSON_FALSE;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	613b      	str	r3, [r7, #16]
    cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 8002bfa:	68b8      	ldr	r0, [r7, #8]
 8002bfc:	f7fd faf8 	bl	80001f0 <strlen>
 8002c00:	4602      	mov	r2, r0
 8002c02:	f107 0310 	add.w	r3, r7, #16
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	68b9      	ldr	r1, [r7, #8]
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f7ff ff64 	bl	8002ada <json_object_get_cell_ix>
 8002c12:	61f8      	str	r0, [r7, #28]
    if (found) {
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d002      	beq.n	8002c20 <json_object_add+0x72>
        return JSONFailure;
 8002c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c1e:	e050      	b.n	8002cc2 <json_object_add+0x114>
    }

    if (object->count >= object->item_capacity) {
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	699a      	ldr	r2, [r3, #24]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	69db      	ldr	r3, [r3, #28]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d316      	bcc.n	8002c5a <json_object_add+0xac>
        res = json_object_grow_and_rehash(object);
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f7ff fee9 	bl	8002a04 <json_object_grow_and_rehash>
 8002c32:	6178      	str	r0, [r7, #20]
        if (res != JSONSuccess) {
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d002      	beq.n	8002c40 <json_object_add+0x92>
            return JSONFailure;
 8002c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c3e:	e040      	b.n	8002cc2 <json_object_add+0x114>
        }
        cell_ix = json_object_get_cell_ix(object, name, strlen(name), hash, &found);
 8002c40:	68b8      	ldr	r0, [r7, #8]
 8002c42:	f7fd fad5 	bl	80001f0 <strlen>
 8002c46:	4602      	mov	r2, r0
 8002c48:	f107 0310 	add.w	r3, r7, #16
 8002c4c:	9300      	str	r3, [sp, #0]
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	68b9      	ldr	r1, [r7, #8]
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f7ff ff41 	bl	8002ada <json_object_get_cell_ix>
 8002c58:	61f8      	str	r0, [r7, #28]
    }

    object->names[object->count] = name;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	68ba      	ldr	r2, [r7, #8]
 8002c68:	601a      	str	r2, [r3, #0]
    object->cells[cell_ix] = object->count;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	685a      	ldr	r2, [r3, #4]
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	6992      	ldr	r2, [r2, #24]
 8002c78:	601a      	str	r2, [r3, #0]
    object->values[object->count] = value;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	691a      	ldr	r2, [r3, #16]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	601a      	str	r2, [r3, #0]
    object->cell_ixs[object->count] = cell_ix;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	695a      	ldr	r2, [r3, #20]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	69fa      	ldr	r2, [r7, #28]
 8002c98:	601a      	str	r2, [r3, #0]
    object->hashes[object->count] = hash;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4413      	add	r3, r2
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	601a      	str	r2, [r3, #0]
    object->count++;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	1c5a      	adds	r2, r3, #1
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	619a      	str	r2, [r3, #24]
    value->parent = json_object_get_wrapping_value(object);
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f000 ff24 	bl	8003b02 <json_object_get_wrapping_value>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	601a      	str	r2, [r3, #0]

    return JSONSuccess;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3720      	adds	r7, #32
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <json_object_getn_value>:

static JSON_Value * json_object_getn_value(const JSON_Object *object, const char *name, size_t name_len) {
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b08a      	sub	sp, #40	; 0x28
 8002cce:	af02      	add	r7, sp, #8
 8002cd0:	60f8      	str	r0, [r7, #12]
 8002cd2:	60b9      	str	r1, [r7, #8]
 8002cd4:	607a      	str	r2, [r7, #4]
    unsigned long hash = 0;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61fb      	str	r3, [r7, #28]
    parson_bool_t found = PARSON_FALSE;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	613b      	str	r3, [r7, #16]
    unsigned long cell_ix = 0;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61bb      	str	r3, [r7, #24]
    size_t item_ix = 0;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	617b      	str	r3, [r7, #20]
    if (!object || !name) {
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d002      	beq.n	8002cf2 <json_object_getn_value+0x28>
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <json_object_getn_value+0x2c>
        return NULL;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	e022      	b.n	8002d3c <json_object_getn_value+0x72>
    }
    hash = hash_string(name, name_len);
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	68b8      	ldr	r0, [r7, #8]
 8002cfa:	f7ff fd0d 	bl	8002718 <hash_string>
 8002cfe:	61f8      	str	r0, [r7, #28]
    found = PARSON_FALSE;
 8002d00:	2300      	movs	r3, #0
 8002d02:	613b      	str	r3, [r7, #16]
    cell_ix = json_object_get_cell_ix(object, name, name_len, hash, &found);
 8002d04:	f107 0310 	add.w	r3, r7, #16
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	68b9      	ldr	r1, [r7, #8]
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f7ff fee2 	bl	8002ada <json_object_get_cell_ix>
 8002d16:	61b8      	str	r0, [r7, #24]
    if (!found) {
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <json_object_getn_value+0x58>
        return NULL;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	e00c      	b.n	8002d3c <json_object_getn_value+0x72>
    }
    item_ix = object->cells[cell_ix];
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4413      	add	r3, r2
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	617b      	str	r3, [r7, #20]
    return object->values[item_ix];
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	691a      	ldr	r2, [r3, #16]
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4413      	add	r3, r2
 8002d3a:	681b      	ldr	r3, [r3, #0]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3720      	adds	r7, #32
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <json_object_free>:
    }
    temp_object = json_value_get_object(temp_value);
    return json_object_dotremove_internal(temp_object, dot_pos + 1, free_value);
}

static void json_object_free(JSON_Object *object) {
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
    json_object_deinit(object, PARSON_TRUE, PARSON_TRUE);
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	2101      	movs	r1, #1
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f7ff fdef 	bl	8002934 <json_object_deinit>
    parson_free(object);
 8002d56:	4b04      	ldr	r3, [pc, #16]	; (8002d68 <json_object_free+0x24>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	4798      	blx	r3
}
 8002d5e:	bf00      	nop
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	20000004 	.word	0x20000004

08002d6c <json_array_make>:

/* JSON Array */
static JSON_Array * json_array_make(JSON_Value *wrapping_value) {
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
    JSON_Array *new_array = (JSON_Array*)parson_malloc(sizeof(JSON_Array));
 8002d74:	4b0d      	ldr	r3, [pc, #52]	; (8002dac <json_array_make+0x40>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2010      	movs	r0, #16
 8002d7a:	4798      	blx	r3
 8002d7c:	60f8      	str	r0, [r7, #12]
    if (new_array == NULL) {
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <json_array_make+0x1c>
        return NULL;
 8002d84:	2300      	movs	r3, #0
 8002d86:	e00c      	b.n	8002da2 <json_array_make+0x36>
    }
    new_array->wrapping_value = wrapping_value;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	601a      	str	r2, [r3, #0]
    new_array->items = (JSON_Value**)NULL;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	605a      	str	r2, [r3, #4]
    new_array->capacity = 0;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	60da      	str	r2, [r3, #12]
    new_array->count = 0;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	609a      	str	r2, [r3, #8]
    return new_array;
 8002da0:	68fb      	ldr	r3, [r7, #12]
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	20000000 	.word	0x20000000

08002db0 <json_array_add>:

static JSON_Status json_array_add(JSON_Array *array, JSON_Value *value) {
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
    if (array->count >= array->capacity) {
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d310      	bcc.n	8002de8 <json_array_add+0x38>
        size_t new_capacity = MAX(array->capacity * 2, STARTING_CAPACITY);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	2b10      	cmp	r3, #16
 8002dce:	bf38      	it	cc
 8002dd0:	2310      	movcc	r3, #16
 8002dd2:	60fb      	str	r3, [r7, #12]
        if (json_array_resize(array, new_capacity) != JSONSuccess) {
 8002dd4:	68f9      	ldr	r1, [r7, #12]
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f81e 	bl	8002e18 <json_array_resize>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d002      	beq.n	8002de8 <json_array_add+0x38>
            return JSONFailure;
 8002de2:	f04f 33ff 	mov.w	r3, #4294967295
 8002de6:	e013      	b.n	8002e10 <json_array_add+0x60>
        }
    }
    value->parent = json_array_get_wrapping_value(array);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 feac 	bl	8003b46 <json_array_get_wrapping_value>
 8002dee:	4602      	mov	r2, r0
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	601a      	str	r2, [r3, #0]
    array->items[array->count] = value;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	601a      	str	r2, [r3, #0]
    array->count++;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	1c5a      	adds	r2, r3, #1
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	609a      	str	r2, [r3, #8]
    return JSONSuccess;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <json_array_resize>:

static JSON_Status json_array_resize(JSON_Array *array, size_t new_capacity) {
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
    JSON_Value **new_items = NULL;
 8002e22:	2300      	movs	r3, #0
 8002e24:	60fb      	str	r3, [r7, #12]
    if (new_capacity == 0) {
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d102      	bne.n	8002e32 <json_array_resize+0x1a>
        return JSONFailure;
 8002e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e30:	e02a      	b.n	8002e88 <json_array_resize+0x70>
    }
    new_items = (JSON_Value**)parson_malloc(new_capacity * sizeof(JSON_Value*));
 8002e32:	4b17      	ldr	r3, [pc, #92]	; (8002e90 <json_array_resize+0x78>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	0092      	lsls	r2, r2, #2
 8002e3a:	4610      	mov	r0, r2
 8002e3c:	4798      	blx	r3
 8002e3e:	60f8      	str	r0, [r7, #12]
    if (new_items == NULL) {
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d102      	bne.n	8002e4c <json_array_resize+0x34>
        return JSONFailure;
 8002e46:	f04f 33ff 	mov.w	r3, #4294967295
 8002e4a:	e01d      	b.n	8002e88 <json_array_resize+0x70>
    }
    if (array->items != NULL && array->count > 0) {
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00c      	beq.n	8002e6e <json_array_resize+0x56>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d008      	beq.n	8002e6e <json_array_resize+0x56>
        memcpy(new_items, array->items, array->count * sizeof(JSON_Value*));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6859      	ldr	r1, [r3, #4]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	461a      	mov	r2, r3
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f014 ffc5 	bl	8017df8 <memcpy>
    }
    parson_free(array->items);
 8002e6e:	4b09      	ldr	r3, [pc, #36]	; (8002e94 <json_array_resize+0x7c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	6852      	ldr	r2, [r2, #4]
 8002e76:	4610      	mov	r0, r2
 8002e78:	4798      	blx	r3
    array->items = new_items;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	605a      	str	r2, [r3, #4]
    array->capacity = new_capacity;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	60da      	str	r2, [r3, #12]
    return JSONSuccess;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	20000000 	.word	0x20000000
 8002e94:	20000004 	.word	0x20000004

08002e98 <json_array_free>:

static void json_array_free(JSON_Array *array) {
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
    size_t i;
    for (i = 0; i < array->count; i++) {
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	e00b      	b.n	8002ebe <json_array_free+0x26>
        json_value_free(array->items[i]);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4413      	add	r3, r2
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 feb4 	bl	8003c20 <json_value_free>
    for (i = 0; i < array->count; i++) {
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d3ee      	bcc.n	8002ea6 <json_array_free+0xe>
    }
    parson_free(array->items);
 8002ec8:	4b06      	ldr	r3, [pc, #24]	; (8002ee4 <json_array_free+0x4c>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	6852      	ldr	r2, [r2, #4]
 8002ed0:	4610      	mov	r0, r2
 8002ed2:	4798      	blx	r3
    parson_free(array);
 8002ed4:	4b03      	ldr	r3, [pc, #12]	; (8002ee4 <json_array_free+0x4c>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	4798      	blx	r3
}
 8002edc:	bf00      	nop
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	20000004 	.word	0x20000004

08002ee8 <json_value_init_string_no_copy>:

/* JSON Value */
static JSON_Value * json_value_init_string_no_copy(char *string, size_t length) {
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8002ef2:	4b0d      	ldr	r3, [pc, #52]	; (8002f28 <json_value_init_string_no_copy+0x40>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2010      	movs	r0, #16
 8002ef8:	4798      	blx	r3
 8002efa:	60f8      	str	r0, [r7, #12]
    if (!new_value) {
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <json_value_init_string_no_copy+0x1e>
        return NULL;
 8002f02:	2300      	movs	r3, #0
 8002f04:	e00c      	b.n	8002f20 <json_value_init_string_no_copy+0x38>
    }
    new_value->parent = NULL;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
    new_value->type = JSONString;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	605a      	str	r2, [r3, #4]
    new_value->value.string.chars = string;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	609a      	str	r2, [r3, #8]
    new_value->value.string.length = length;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	60da      	str	r2, [r3, #12]
    return new_value;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	20000000 	.word	0x20000000

08002f2c <skip_quotes>:

/* Parser */
static JSON_Status skip_quotes(const char **string) {
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
    if (**string != '\"') {
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	2b22      	cmp	r3, #34	; 0x22
 8002f3c:	d002      	beq.n	8002f44 <skip_quotes+0x18>
        return JSONFailure;
 8002f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f42:	e02f      	b.n	8002fa4 <skip_quotes+0x78>
    }
    SKIP_CHAR(string);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	1c5a      	adds	r2, r3, #1
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	601a      	str	r2, [r3, #0]
    while (**string != '\"') {
 8002f4e:	e01e      	b.n	8002f8e <skip_quotes+0x62>
        if (**string == '\0') {
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d102      	bne.n	8002f60 <skip_quotes+0x34>
            return JSONFailure;
 8002f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f5e:	e021      	b.n	8002fa4 <skip_quotes+0x78>
        } else if (**string == '\\') {
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	2b5c      	cmp	r3, #92	; 0x5c
 8002f68:	d10c      	bne.n	8002f84 <skip_quotes+0x58>
            SKIP_CHAR(string);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	1c5a      	adds	r2, r3, #1
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	601a      	str	r2, [r3, #0]
            if (**string == '\0') {
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d102      	bne.n	8002f84 <skip_quotes+0x58>
                return JSONFailure;
 8002f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f82:	e00f      	b.n	8002fa4 <skip_quotes+0x78>
            }
        }
        SKIP_CHAR(string);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	1c5a      	adds	r2, r3, #1
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	601a      	str	r2, [r3, #0]
    while (**string != '\"') {
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	2b22      	cmp	r3, #34	; 0x22
 8002f96:	d1db      	bne.n	8002f50 <skip_quotes+0x24>
    }
    SKIP_CHAR(string);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	1c5a      	adds	r2, r3, #1
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	601a      	str	r2, [r3, #0]
    return JSONSuccess;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <parse_utf16>:

static JSON_Status parse_utf16(const char **unprocessed, char **processed) {
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b088      	sub	sp, #32
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
    unsigned int cp, lead, trail;
    char *processed_ptr = *processed;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	61fb      	str	r3, [r7, #28]
    const char *unprocessed_ptr = *unprocessed;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	61bb      	str	r3, [r7, #24]
    JSON_Status status = JSONFailure;
 8002fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fca:	617b      	str	r3, [r7, #20]
    unprocessed_ptr++; /* skips u */
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	61bb      	str	r3, [r7, #24]
    status = parse_utf16_hex(unprocessed_ptr, &cp);
 8002fd2:	f107 030c 	add.w	r3, r7, #12
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	69b8      	ldr	r0, [r7, #24]
 8002fda:	f7ff fb01 	bl	80025e0 <parse_utf16_hex>
 8002fde:	6178      	str	r0, [r7, #20]
    if (status != JSONSuccess) {
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d002      	beq.n	8002fec <parse_utf16+0x3c>
        return JSONFailure;
 8002fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fea:	e0ce      	b.n	800318a <parse_utf16+0x1da>
    }
    if (cp < 0x80) {
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2b7f      	cmp	r3, #127	; 0x7f
 8002ff0:	d804      	bhi.n	8002ffc <parse_utf16+0x4c>
        processed_ptr[0] = (char)cp; /* 0xxxxxxx */
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	701a      	strb	r2, [r3, #0]
 8002ffa:	e0bc      	b.n	8003176 <parse_utf16+0x1c6>
    } else if (cp < 0x800) {
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003002:	d219      	bcs.n	8003038 <parse_utf16+0x88>
        processed_ptr[0] = ((cp >> 6) & 0x1F) | 0xC0; /* 110xxxxx */
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	099b      	lsrs	r3, r3, #6
 8003008:	b2db      	uxtb	r3, r3
 800300a:	f003 031f 	and.w	r3, r3, #31
 800300e:	b2db      	uxtb	r3, r3
 8003010:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8003014:	b2da      	uxtb	r2, r3
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	701a      	strb	r2, [r3, #0]
        processed_ptr[1] = ((cp)      & 0x3F) | 0x80; /* 10xxxxxx */
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	b2db      	uxtb	r3, r3
 800301e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003022:	b2da      	uxtb	r2, r3
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	3301      	adds	r3, #1
 8003028:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800302c:	b2d2      	uxtb	r2, r2
 800302e:	701a      	strb	r2, [r3, #0]
        processed_ptr += 1;
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	3301      	adds	r3, #1
 8003034:	61fb      	str	r3, [r7, #28]
 8003036:	e09e      	b.n	8003176 <parse_utf16+0x1c6>
    } else if (cp < 0xD800 || cp > 0xDFFF) {
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 800303e:	d303      	bcc.n	8003048 <parse_utf16+0x98>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8003046:	d325      	bcc.n	8003094 <parse_utf16+0xe4>
        processed_ptr[0] = ((cp >> 12) & 0x0F) | 0xE0; /* 1110xxxx */
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	0b1b      	lsrs	r3, r3, #12
 800304c:	b2db      	uxtb	r3, r3
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	b2db      	uxtb	r3, r3
 8003054:	f063 031f 	orn	r3, r3, #31
 8003058:	b2da      	uxtb	r2, r3
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	701a      	strb	r2, [r3, #0]
        processed_ptr[1] = ((cp >> 6)  & 0x3F) | 0x80; /* 10xxxxxx */
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	099b      	lsrs	r3, r3, #6
 8003062:	b2db      	uxtb	r3, r3
 8003064:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003068:	b2da      	uxtb	r2, r3
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	3301      	adds	r3, #1
 800306e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	701a      	strb	r2, [r3, #0]
        processed_ptr[2] = ((cp)       & 0x3F) | 0x80; /* 10xxxxxx */
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	b2db      	uxtb	r3, r3
 800307a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800307e:	b2da      	uxtb	r2, r3
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	3302      	adds	r3, #2
 8003084:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	701a      	strb	r2, [r3, #0]
        processed_ptr += 2;
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	3302      	adds	r3, #2
 8003090:	61fb      	str	r3, [r7, #28]
 8003092:	e070      	b.n	8003176 <parse_utf16+0x1c6>
    } else if (cp >= 0xD800 && cp <= 0xDBFF) { /* lead surrogate (0xD800..0xDBFF) */
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 800309a:	d369      	bcc.n	8003170 <parse_utf16+0x1c0>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80030a2:	d265      	bcs.n	8003170 <parse_utf16+0x1c0>
        lead = cp;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	613b      	str	r3, [r7, #16]
        unprocessed_ptr += 4; /* should always be within the buffer, otherwise previous sscanf would fail */
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	3304      	adds	r3, #4
 80030ac:	61bb      	str	r3, [r7, #24]
        if (*unprocessed_ptr++ != '\\' || *unprocessed_ptr++ != 'u') {
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	1c5a      	adds	r2, r3, #1
 80030b2:	61ba      	str	r2, [r7, #24]
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	2b5c      	cmp	r3, #92	; 0x5c
 80030b8:	d105      	bne.n	80030c6 <parse_utf16+0x116>
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	1c5a      	adds	r2, r3, #1
 80030be:	61ba      	str	r2, [r7, #24]
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	2b75      	cmp	r3, #117	; 0x75
 80030c4:	d002      	beq.n	80030cc <parse_utf16+0x11c>
            return JSONFailure;
 80030c6:	f04f 33ff 	mov.w	r3, #4294967295
 80030ca:	e05e      	b.n	800318a <parse_utf16+0x1da>
        }
        status = parse_utf16_hex(unprocessed_ptr, &trail);
 80030cc:	f107 0308 	add.w	r3, r7, #8
 80030d0:	4619      	mov	r1, r3
 80030d2:	69b8      	ldr	r0, [r7, #24]
 80030d4:	f7ff fa84 	bl	80025e0 <parse_utf16_hex>
 80030d8:	6178      	str	r0, [r7, #20]
        if (status != JSONSuccess || trail < 0xDC00 || trail > 0xDFFF) { /* valid trail surrogate? (0xDC00..0xDFFF) */
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d107      	bne.n	80030f0 <parse_utf16+0x140>
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80030e6:	d303      	bcc.n	80030f0 <parse_utf16+0x140>
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80030ee:	d302      	bcc.n	80030f6 <parse_utf16+0x146>
            return JSONFailure;
 80030f0:	f04f 33ff 	mov.w	r3, #4294967295
 80030f4:	e049      	b.n	800318a <parse_utf16+0x1da>
        }
        cp = ((((lead - 0xD800) & 0x3FF) << 10) | ((trail - 0xDC00) & 0x3FF)) + 0x010000;
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	029a      	lsls	r2, r3, #10
 80030fa:	4b26      	ldr	r3, [pc, #152]	; (8003194 <parse_utf16+0x1e4>)
 80030fc:	4013      	ands	r3, r2
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003104:	4313      	orrs	r3, r2
 8003106:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800310a:	60fb      	str	r3, [r7, #12]
        processed_ptr[0] = (((cp >> 18) & 0x07) | 0xF0); /* 11110xxx */
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	0c9b      	lsrs	r3, r3, #18
 8003110:	b2db      	uxtb	r3, r3
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	b2db      	uxtb	r3, r3
 8003118:	f063 030f 	orn	r3, r3, #15
 800311c:	b2da      	uxtb	r2, r3
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	701a      	strb	r2, [r3, #0]
        processed_ptr[1] = (((cp >> 12) & 0x3F) | 0x80); /* 10xxxxxx */
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	0b1b      	lsrs	r3, r3, #12
 8003126:	b2db      	uxtb	r3, r3
 8003128:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800312c:	b2da      	uxtb	r2, r3
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	3301      	adds	r3, #1
 8003132:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003136:	b2d2      	uxtb	r2, r2
 8003138:	701a      	strb	r2, [r3, #0]
        processed_ptr[2] = (((cp >> 6)  & 0x3F) | 0x80); /* 10xxxxxx */
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	099b      	lsrs	r3, r3, #6
 800313e:	b2db      	uxtb	r3, r3
 8003140:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003144:	b2da      	uxtb	r2, r3
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	3302      	adds	r3, #2
 800314a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800314e:	b2d2      	uxtb	r2, r2
 8003150:	701a      	strb	r2, [r3, #0]
        processed_ptr[3] = (((cp)       & 0x3F) | 0x80); /* 10xxxxxx */
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	b2db      	uxtb	r3, r3
 8003156:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800315a:	b2da      	uxtb	r2, r3
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	3303      	adds	r3, #3
 8003160:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003164:	b2d2      	uxtb	r2, r2
 8003166:	701a      	strb	r2, [r3, #0]
        processed_ptr += 3;
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	3303      	adds	r3, #3
 800316c:	61fb      	str	r3, [r7, #28]
 800316e:	e002      	b.n	8003176 <parse_utf16+0x1c6>
    } else { /* trail surrogate before lead surrogate */
        return JSONFailure;
 8003170:	f04f 33ff 	mov.w	r3, #4294967295
 8003174:	e009      	b.n	800318a <parse_utf16+0x1da>
    }
    unprocessed_ptr += 3;
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	3303      	adds	r3, #3
 800317a:	61bb      	str	r3, [r7, #24]
    *processed = processed_ptr;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	69fa      	ldr	r2, [r7, #28]
 8003180:	601a      	str	r2, [r3, #0]
    *unprocessed = unprocessed_ptr;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	601a      	str	r2, [r3, #0]
    return JSONSuccess;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3720      	adds	r7, #32
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	000ffc00 	.word	0x000ffc00

08003198 <process_string>:


/* Copies and processes passed string up to supplied length.
Example: "\u006Corem ipsum" -> lorem ipsum */
static char* process_string(const char *input, size_t input_len, size_t *output_len) {
 8003198:	b580      	push	{r7, lr}
 800319a:	b08a      	sub	sp, #40	; 0x28
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
    const char *input_ptr = input;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	617b      	str	r3, [r7, #20]
    size_t initial_size = (input_len + 1) * sizeof(char);
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	3301      	adds	r3, #1
 80031ac:	627b      	str	r3, [r7, #36]	; 0x24
    size_t final_size = 0;
 80031ae:	2300      	movs	r3, #0
 80031b0:	623b      	str	r3, [r7, #32]
    char *output = NULL, *output_ptr = NULL, *resized_output = NULL;
 80031b2:	2300      	movs	r3, #0
 80031b4:	61fb      	str	r3, [r7, #28]
 80031b6:	2300      	movs	r3, #0
 80031b8:	613b      	str	r3, [r7, #16]
 80031ba:	2300      	movs	r3, #0
 80031bc:	61bb      	str	r3, [r7, #24]
    output = (char*)parson_malloc(initial_size);
 80031be:	4b69      	ldr	r3, [pc, #420]	; (8003364 <process_string+0x1cc>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80031c4:	4798      	blx	r3
 80031c6:	61f8      	str	r0, [r7, #28]
    if (output == NULL) {
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f000 80b9 	beq.w	8003342 <process_string+0x1aa>
        goto error;
    }
    output_ptr = output;
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	613b      	str	r3, [r7, #16]
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < input_len) {
 80031d4:	e08a      	b.n	80032ec <process_string+0x154>
        if (*input_ptr == '\\') {
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	2b5c      	cmp	r3, #92	; 0x5c
 80031dc:	d176      	bne.n	80032cc <process_string+0x134>
            input_ptr++;
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	3301      	adds	r3, #1
 80031e2:	617b      	str	r3, [r7, #20]
            switch (*input_ptr) {
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	2b75      	cmp	r3, #117	; 0x75
 80031ea:	f300 80ac 	bgt.w	8003346 <process_string+0x1ae>
 80031ee:	2b5c      	cmp	r3, #92	; 0x5c
 80031f0:	da04      	bge.n	80031fc <process_string+0x64>
 80031f2:	2b22      	cmp	r3, #34	; 0x22
 80031f4:	d03e      	beq.n	8003274 <process_string+0xdc>
 80031f6:	2b2f      	cmp	r3, #47	; 0x2f
 80031f8:	d044      	beq.n	8003284 <process_string+0xec>
                    if (parse_utf16(&input_ptr, &output_ptr) != JSONSuccess) {
                        goto error;
                    }
                    break;
                default:
                    goto error;
 80031fa:	e0a4      	b.n	8003346 <process_string+0x1ae>
 80031fc:	3b5c      	subs	r3, #92	; 0x5c
 80031fe:	2b19      	cmp	r3, #25
 8003200:	f200 80a1 	bhi.w	8003346 <process_string+0x1ae>
 8003204:	a201      	add	r2, pc, #4	; (adr r2, 800320c <process_string+0x74>)
 8003206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800320a:	bf00      	nop
 800320c:	0800327d 	.word	0x0800327d
 8003210:	08003347 	.word	0x08003347
 8003214:	08003347 	.word	0x08003347
 8003218:	08003347 	.word	0x08003347
 800321c:	08003347 	.word	0x08003347
 8003220:	08003347 	.word	0x08003347
 8003224:	0800328d 	.word	0x0800328d
 8003228:	08003347 	.word	0x08003347
 800322c:	08003347 	.word	0x08003347
 8003230:	08003347 	.word	0x08003347
 8003234:	08003295 	.word	0x08003295
 8003238:	08003347 	.word	0x08003347
 800323c:	08003347 	.word	0x08003347
 8003240:	08003347 	.word	0x08003347
 8003244:	08003347 	.word	0x08003347
 8003248:	08003347 	.word	0x08003347
 800324c:	08003347 	.word	0x08003347
 8003250:	08003347 	.word	0x08003347
 8003254:	0800329d 	.word	0x0800329d
 8003258:	08003347 	.word	0x08003347
 800325c:	08003347 	.word	0x08003347
 8003260:	08003347 	.word	0x08003347
 8003264:	080032a5 	.word	0x080032a5
 8003268:	08003347 	.word	0x08003347
 800326c:	080032ad 	.word	0x080032ad
 8003270:	080032b5 	.word	0x080032b5
                case '\"': *output_ptr = '\"'; break;
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	2222      	movs	r2, #34	; 0x22
 8003278:	701a      	strb	r2, [r3, #0]
 800327a:	e031      	b.n	80032e0 <process_string+0x148>
                case '\\': *output_ptr = '\\'; break;
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	225c      	movs	r2, #92	; 0x5c
 8003280:	701a      	strb	r2, [r3, #0]
 8003282:	e02d      	b.n	80032e0 <process_string+0x148>
                case '/':  *output_ptr = '/';  break;
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	222f      	movs	r2, #47	; 0x2f
 8003288:	701a      	strb	r2, [r3, #0]
 800328a:	e029      	b.n	80032e0 <process_string+0x148>
                case 'b':  *output_ptr = '\b'; break;
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	2208      	movs	r2, #8
 8003290:	701a      	strb	r2, [r3, #0]
 8003292:	e025      	b.n	80032e0 <process_string+0x148>
                case 'f':  *output_ptr = '\f'; break;
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	220c      	movs	r2, #12
 8003298:	701a      	strb	r2, [r3, #0]
 800329a:	e021      	b.n	80032e0 <process_string+0x148>
                case 'n':  *output_ptr = '\n'; break;
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	220a      	movs	r2, #10
 80032a0:	701a      	strb	r2, [r3, #0]
 80032a2:	e01d      	b.n	80032e0 <process_string+0x148>
                case 'r':  *output_ptr = '\r'; break;
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	220d      	movs	r2, #13
 80032a8:	701a      	strb	r2, [r3, #0]
 80032aa:	e019      	b.n	80032e0 <process_string+0x148>
                case 't':  *output_ptr = '\t'; break;
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	2209      	movs	r2, #9
 80032b0:	701a      	strb	r2, [r3, #0]
 80032b2:	e015      	b.n	80032e0 <process_string+0x148>
                    if (parse_utf16(&input_ptr, &output_ptr) != JSONSuccess) {
 80032b4:	f107 0210 	add.w	r2, r7, #16
 80032b8:	f107 0314 	add.w	r3, r7, #20
 80032bc:	4611      	mov	r1, r2
 80032be:	4618      	mov	r0, r3
 80032c0:	f7ff fe76 	bl	8002fb0 <parse_utf16>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d009      	beq.n	80032de <process_string+0x146>
                        goto error;
 80032ca:	e041      	b.n	8003350 <process_string+0x1b8>
            }
        } else if ((unsigned char)*input_ptr < 0x20) {
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b1f      	cmp	r3, #31
 80032d2:	d93a      	bls.n	800334a <process_string+0x1b2>
            goto error; /* 0x00-0x19 are invalid characters for json string (http://www.ietf.org/rfc/rfc4627.txt) */
        } else {
            *output_ptr = *input_ptr;
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	7812      	ldrb	r2, [r2, #0]
 80032da:	701a      	strb	r2, [r3, #0]
 80032dc:	e000      	b.n	80032e0 <process_string+0x148>
                    break;
 80032de:	bf00      	nop
        }
        output_ptr++;
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	3301      	adds	r3, #1
 80032e4:	613b      	str	r3, [r7, #16]
        input_ptr++;
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	3301      	adds	r3, #1
 80032ea:	617b      	str	r3, [r7, #20]
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < input_len) {
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d007      	beq.n	8003304 <process_string+0x16c>
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	461a      	mov	r2, r3
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	4293      	cmp	r3, r2
 8003300:	f63f af69 	bhi.w	80031d6 <process_string+0x3e>
    }
    *output_ptr = '\0';
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	2200      	movs	r2, #0
 8003308:	701a      	strb	r2, [r3, #0]
    /* resize to new length */
    final_size = (size_t)(output_ptr-output) + 1;
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	3301      	adds	r3, #1
 8003312:	623b      	str	r3, [r7, #32]
    /* todo: don't resize if final_size == initial_size */
    resized_output = (char*)parson_malloc(final_size);
 8003314:	4b13      	ldr	r3, [pc, #76]	; (8003364 <process_string+0x1cc>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6a38      	ldr	r0, [r7, #32]
 800331a:	4798      	blx	r3
 800331c:	61b8      	str	r0, [r7, #24]
    if (resized_output == NULL) {
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d014      	beq.n	800334e <process_string+0x1b6>
        goto error;
    }
    memcpy(resized_output, output, final_size);
 8003324:	6a3a      	ldr	r2, [r7, #32]
 8003326:	69f9      	ldr	r1, [r7, #28]
 8003328:	69b8      	ldr	r0, [r7, #24]
 800332a:	f014 fd65 	bl	8017df8 <memcpy>
    *output_len = final_size - 1;
 800332e:	6a3b      	ldr	r3, [r7, #32]
 8003330:	1e5a      	subs	r2, r3, #1
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	601a      	str	r2, [r3, #0]
    parson_free(output);
 8003336:	4b0c      	ldr	r3, [pc, #48]	; (8003368 <process_string+0x1d0>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	69f8      	ldr	r0, [r7, #28]
 800333c:	4798      	blx	r3
    return resized_output;
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	e00b      	b.n	800335a <process_string+0x1c2>
        goto error;
 8003342:	bf00      	nop
 8003344:	e004      	b.n	8003350 <process_string+0x1b8>
                    goto error;
 8003346:	bf00      	nop
 8003348:	e002      	b.n	8003350 <process_string+0x1b8>
            goto error; /* 0x00-0x19 are invalid characters for json string (http://www.ietf.org/rfc/rfc4627.txt) */
 800334a:	bf00      	nop
 800334c:	e000      	b.n	8003350 <process_string+0x1b8>
        goto error;
 800334e:	bf00      	nop
error:
    parson_free(output);
 8003350:	4b05      	ldr	r3, [pc, #20]	; (8003368 <process_string+0x1d0>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	69f8      	ldr	r0, [r7, #28]
 8003356:	4798      	blx	r3
    return NULL;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3728      	adds	r7, #40	; 0x28
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	20000000 	.word	0x20000000
 8003368:	20000004 	.word	0x20000004

0800336c <get_quoted_string>:

/* Return processed contents of a string between quotes and
   skips passed argument to a matching quote. */
static char * get_quoted_string(const char **string, size_t *output_string_len) {
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
    const char *string_start = *string;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	617b      	str	r3, [r7, #20]
    size_t input_string_len = 0;
 800337c:	2300      	movs	r3, #0
 800337e:	613b      	str	r3, [r7, #16]
    JSON_Status status = skip_quotes(string);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f7ff fdd3 	bl	8002f2c <skip_quotes>
 8003386:	60f8      	str	r0, [r7, #12]
    if (status != JSONSuccess) {
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <get_quoted_string+0x26>
        return NULL;
 800338e:	2300      	movs	r3, #0
 8003390:	e00d      	b.n	80033ae <get_quoted_string+0x42>
    }
    input_string_len = *string - string_start - 2; /* length without quotes */
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	3b02      	subs	r3, #2
 800339c:	613b      	str	r3, [r7, #16]
    return process_string(string_start + 1, input_string_len, output_string_len);
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	3301      	adds	r3, #1
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	6939      	ldr	r1, [r7, #16]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7ff fef6 	bl	8003198 <process_string>
 80033ac:	4603      	mov	r3, r0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3718      	adds	r7, #24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
	...

080033b8 <parse_value>:

static JSON_Value * parse_value(const char **string, size_t nesting) {
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
    if (nesting > MAX_NESTING) {
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033c8:	d906      	bls.n	80033d8 <parse_value+0x20>
        return NULL;
 80033ca:	2300      	movs	r3, #0
 80033cc:	e08d      	b.n	80034ea <parse_value+0x132>
    }
    SKIP_WHITESPACES(string);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	1c5a      	adds	r2, r3, #1
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	3301      	adds	r3, #1
 80033e0:	4a44      	ldr	r2, [pc, #272]	; (80034f4 <parse_value+0x13c>)
 80033e2:	4413      	add	r3, r2
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	f003 0308 	and.w	r3, r3, #8
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1ef      	bne.n	80033ce <parse_value+0x16>
    switch (**string) {
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	2b7b      	cmp	r3, #123	; 0x7b
 80033f6:	dc77      	bgt.n	80034e8 <parse_value+0x130>
 80033f8:	2b5b      	cmp	r3, #91	; 0x5b
 80033fa:	da08      	bge.n	800340e <parse_value+0x56>
 80033fc:	2b39      	cmp	r3, #57	; 0x39
 80033fe:	dc73      	bgt.n	80034e8 <parse_value+0x130>
 8003400:	2b30      	cmp	r3, #48	; 0x30
 8003402:	da67      	bge.n	80034d4 <parse_value+0x11c>
 8003404:	2b22      	cmp	r3, #34	; 0x22
 8003406:	d05b      	beq.n	80034c0 <parse_value+0x108>
 8003408:	2b2d      	cmp	r3, #45	; 0x2d
 800340a:	d063      	beq.n	80034d4 <parse_value+0x11c>
 800340c:	e06c      	b.n	80034e8 <parse_value+0x130>
 800340e:	3b5b      	subs	r3, #91	; 0x5b
 8003410:	2b20      	cmp	r3, #32
 8003412:	d869      	bhi.n	80034e8 <parse_value+0x130>
 8003414:	a201      	add	r2, pc, #4	; (adr r2, 800341c <parse_value+0x64>)
 8003416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341a:	bf00      	nop
 800341c:	080034b1 	.word	0x080034b1
 8003420:	080034e9 	.word	0x080034e9
 8003424:	080034e9 	.word	0x080034e9
 8003428:	080034e9 	.word	0x080034e9
 800342c:	080034e9 	.word	0x080034e9
 8003430:	080034e9 	.word	0x080034e9
 8003434:	080034e9 	.word	0x080034e9
 8003438:	080034e9 	.word	0x080034e9
 800343c:	080034e9 	.word	0x080034e9
 8003440:	080034e9 	.word	0x080034e9
 8003444:	080034e9 	.word	0x080034e9
 8003448:	080034cb 	.word	0x080034cb
 800344c:	080034e9 	.word	0x080034e9
 8003450:	080034e9 	.word	0x080034e9
 8003454:	080034e9 	.word	0x080034e9
 8003458:	080034e9 	.word	0x080034e9
 800345c:	080034e9 	.word	0x080034e9
 8003460:	080034e9 	.word	0x080034e9
 8003464:	080034e9 	.word	0x080034e9
 8003468:	080034df 	.word	0x080034df
 800346c:	080034e9 	.word	0x080034e9
 8003470:	080034e9 	.word	0x080034e9
 8003474:	080034e9 	.word	0x080034e9
 8003478:	080034e9 	.word	0x080034e9
 800347c:	080034e9 	.word	0x080034e9
 8003480:	080034cb 	.word	0x080034cb
 8003484:	080034e9 	.word	0x080034e9
 8003488:	080034e9 	.word	0x080034e9
 800348c:	080034e9 	.word	0x080034e9
 8003490:	080034e9 	.word	0x080034e9
 8003494:	080034e9 	.word	0x080034e9
 8003498:	080034e9 	.word	0x080034e9
 800349c:	080034a1 	.word	0x080034a1
        case '{':
            return parse_object_value(string, nesting + 1);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	3301      	adds	r3, #1
 80034a4:	4619      	mov	r1, r3
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f826 	bl	80034f8 <parse_object_value>
 80034ac:	4603      	mov	r3, r0
 80034ae:	e01c      	b.n	80034ea <parse_value+0x132>
        case '[':
            return parse_array_value(string, nesting + 1);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	3301      	adds	r3, #1
 80034b4:	4619      	mov	r1, r3
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f92e 	bl	8003718 <parse_array_value>
 80034bc:	4603      	mov	r3, r0
 80034be:	e014      	b.n	80034ea <parse_value+0x132>
        case '\"':
            return parse_string_value(string);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 f9ed 	bl	80038a0 <parse_string_value>
 80034c6:	4603      	mov	r3, r0
 80034c8:	e00f      	b.n	80034ea <parse_value+0x132>
        case 'f': case 't':
            return parse_boolean_value(string);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 fa12 	bl	80038f4 <parse_boolean_value>
 80034d0:	4603      	mov	r3, r0
 80034d2:	e00a      	b.n	80034ea <parse_value+0x132>
        case '-':
        case '0': case '1': case '2': case '3': case '4':
        case '5': case '6': case '7': case '8': case '9':
            return parse_number_value(string);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 fa49 	bl	800396c <parse_number_value>
 80034da:	4603      	mov	r3, r0
 80034dc:	e005      	b.n	80034ea <parse_value+0x132>
        case 'n':
            return parse_null_value(string);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 fa9c 	bl	8003a1c <parse_null_value>
 80034e4:	4603      	mov	r3, r0
 80034e6:	e000      	b.n	80034ea <parse_value+0x132>
        default:
            return NULL;
 80034e8:	2300      	movs	r3, #0
    }
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	0801de82 	.word	0x0801de82

080034f8 <parse_object_value>:

static JSON_Value * parse_object_value(const char **string, size_t nesting) {
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b088      	sub	sp, #32
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
    JSON_Status status = JSONFailure;
 8003502:	f04f 33ff 	mov.w	r3, #4294967295
 8003506:	61fb      	str	r3, [r7, #28]
    JSON_Value *output_value = NULL, *new_value = NULL;
 8003508:	2300      	movs	r3, #0
 800350a:	61bb      	str	r3, [r7, #24]
 800350c:	2300      	movs	r3, #0
 800350e:	617b      	str	r3, [r7, #20]
    JSON_Object *output_object = NULL;
 8003510:	2300      	movs	r3, #0
 8003512:	613b      	str	r3, [r7, #16]
    char *new_key = NULL;
 8003514:	2300      	movs	r3, #0
 8003516:	60fb      	str	r3, [r7, #12]

    output_value = json_value_init_object();
 8003518:	f000 fbb0 	bl	8003c7c <json_value_init_object>
 800351c:	61b8      	str	r0, [r7, #24]
    if (output_value == NULL) {
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <parse_object_value+0x30>
        return NULL;
 8003524:	2300      	movs	r3, #0
 8003526:	e0ee      	b.n	8003706 <parse_object_value+0x20e>
    }
    if (**string != '{') {
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	2b7b      	cmp	r3, #123	; 0x7b
 8003530:	d004      	beq.n	800353c <parse_object_value+0x44>
        json_value_free(output_value);
 8003532:	69b8      	ldr	r0, [r7, #24]
 8003534:	f000 fb74 	bl	8003c20 <json_value_free>
        return NULL;
 8003538:	2300      	movs	r3, #0
 800353a:	e0e4      	b.n	8003706 <parse_object_value+0x20e>
    }
    output_object = json_value_get_object(output_value);
 800353c:	69b8      	ldr	r0, [r7, #24]
 800353e:	f000 fb25 	bl	8003b8c <json_value_get_object>
 8003542:	6138      	str	r0, [r7, #16]
    SKIP_CHAR(string);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	1c5a      	adds	r2, r3, #1
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	601a      	str	r2, [r3, #0]
    SKIP_WHITESPACES(string);
 800354e:	e004      	b.n	800355a <parse_object_value+0x62>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	1c5a      	adds	r2, r3, #1
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	601a      	str	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	3301      	adds	r3, #1
 8003562:	4a6b      	ldr	r2, [pc, #428]	; (8003710 <parse_object_value+0x218>)
 8003564:	4413      	add	r3, r2
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	f003 0308 	and.w	r3, r3, #8
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1ef      	bne.n	8003550 <parse_object_value+0x58>
    if (**string == '}') { /* empty object */
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	2b7d      	cmp	r3, #125	; 0x7d
 8003578:	f040 809c 	bne.w	80036b4 <parse_object_value+0x1bc>
        SKIP_CHAR(string);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	1c5a      	adds	r2, r3, #1
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	601a      	str	r2, [r3, #0]
        return output_value;
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	e0bd      	b.n	8003706 <parse_object_value+0x20e>
    }
    while (**string != '\0') {
        size_t key_len = 0;
 800358a:	2300      	movs	r3, #0
 800358c:	60bb      	str	r3, [r7, #8]
        new_key = get_quoted_string(string, &key_len);
 800358e:	f107 0308 	add.w	r3, r7, #8
 8003592:	4619      	mov	r1, r3
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7ff fee9 	bl	800336c <get_quoted_string>
 800359a:	60f8      	str	r0, [r7, #12]
        /* We do not support key names with embedded \0 chars */
        if (!new_key) {
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d104      	bne.n	80035ac <parse_object_value+0xb4>
            json_value_free(output_value);
 80035a2:	69b8      	ldr	r0, [r7, #24]
 80035a4:	f000 fb3c 	bl	8003c20 <json_value_free>
            return NULL;
 80035a8:	2300      	movs	r3, #0
 80035aa:	e0ac      	b.n	8003706 <parse_object_value+0x20e>
        }
        if (key_len != strlen(new_key)) {
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f7fc fe1f 	bl	80001f0 <strlen>
 80035b2:	4602      	mov	r2, r0
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d00d      	beq.n	80035d6 <parse_object_value+0xde>
            parson_free(new_key);
 80035ba:	4b56      	ldr	r3, [pc, #344]	; (8003714 <parse_object_value+0x21c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	4798      	blx	r3
            json_value_free(output_value);
 80035c2:	69b8      	ldr	r0, [r7, #24]
 80035c4:	f000 fb2c 	bl	8003c20 <json_value_free>
            return NULL;
 80035c8:	2300      	movs	r3, #0
 80035ca:	e09c      	b.n	8003706 <parse_object_value+0x20e>
        }
        SKIP_WHITESPACES(string);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	1c5a      	adds	r2, r3, #1
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	3301      	adds	r3, #1
 80035de:	4a4c      	ldr	r2, [pc, #304]	; (8003710 <parse_object_value+0x218>)
 80035e0:	4413      	add	r3, r2
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	f003 0308 	and.w	r3, r3, #8
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1ef      	bne.n	80035cc <parse_object_value+0xd4>
        if (**string != ':') {
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	2b3a      	cmp	r3, #58	; 0x3a
 80035f4:	d008      	beq.n	8003608 <parse_object_value+0x110>
            parson_free(new_key);
 80035f6:	4b47      	ldr	r3, [pc, #284]	; (8003714 <parse_object_value+0x21c>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	4798      	blx	r3
            json_value_free(output_value);
 80035fe:	69b8      	ldr	r0, [r7, #24]
 8003600:	f000 fb0e 	bl	8003c20 <json_value_free>
            return NULL;
 8003604:	2300      	movs	r3, #0
 8003606:	e07e      	b.n	8003706 <parse_object_value+0x20e>
        }
        SKIP_CHAR(string);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	601a      	str	r2, [r3, #0]
        new_value = parse_value(string, nesting);
 8003612:	6839      	ldr	r1, [r7, #0]
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f7ff fecf 	bl	80033b8 <parse_value>
 800361a:	6178      	str	r0, [r7, #20]
        if (new_value == NULL) {
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d108      	bne.n	8003634 <parse_object_value+0x13c>
            parson_free(new_key);
 8003622:	4b3c      	ldr	r3, [pc, #240]	; (8003714 <parse_object_value+0x21c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	4798      	blx	r3
            json_value_free(output_value);
 800362a:	69b8      	ldr	r0, [r7, #24]
 800362c:	f000 faf8 	bl	8003c20 <json_value_free>
            return NULL;
 8003630:	2300      	movs	r3, #0
 8003632:	e068      	b.n	8003706 <parse_object_value+0x20e>
        }
        status = json_object_add(output_object, new_key, new_value);
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	68f9      	ldr	r1, [r7, #12]
 8003638:	6938      	ldr	r0, [r7, #16]
 800363a:	f7ff fab8 	bl	8002bae <json_object_add>
 800363e:	61f8      	str	r0, [r7, #28]
        if (status != JSONSuccess) {
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d010      	beq.n	8003668 <parse_object_value+0x170>
            parson_free(new_key);
 8003646:	4b33      	ldr	r3, [pc, #204]	; (8003714 <parse_object_value+0x21c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	4798      	blx	r3
            json_value_free(new_value);
 800364e:	6978      	ldr	r0, [r7, #20]
 8003650:	f000 fae6 	bl	8003c20 <json_value_free>
            json_value_free(output_value);
 8003654:	69b8      	ldr	r0, [r7, #24]
 8003656:	f000 fae3 	bl	8003c20 <json_value_free>
            return NULL;
 800365a:	2300      	movs	r3, #0
 800365c:	e053      	b.n	8003706 <parse_object_value+0x20e>
        }
        SKIP_WHITESPACES(string);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	1c5a      	adds	r2, r3, #1
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	3301      	adds	r3, #1
 8003670:	4a27      	ldr	r2, [pc, #156]	; (8003710 <parse_object_value+0x218>)
 8003672:	4413      	add	r3, r2
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	f003 0308 	and.w	r3, r3, #8
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1ef      	bne.n	800365e <parse_object_value+0x166>
        if (**string != ',') {
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	2b2c      	cmp	r3, #44	; 0x2c
 8003686:	d11c      	bne.n	80036c2 <parse_object_value+0x1ca>
            break;
        }
        SKIP_CHAR(string);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	1c5a      	adds	r2, r3, #1
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	601a      	str	r2, [r3, #0]
        SKIP_WHITESPACES(string);
 8003692:	e004      	b.n	800369e <parse_object_value+0x1a6>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	1c5a      	adds	r2, r3, #1
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	601a      	str	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	3301      	adds	r3, #1
 80036a6:	4a1a      	ldr	r2, [pc, #104]	; (8003710 <parse_object_value+0x218>)
 80036a8:	4413      	add	r3, r2
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	f003 0308 	and.w	r3, r3, #8
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1ef      	bne.n	8003694 <parse_object_value+0x19c>
    while (**string != '\0') {
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f47f af65 	bne.w	800358a <parse_object_value+0x92>
 80036c0:	e006      	b.n	80036d0 <parse_object_value+0x1d8>
            break;
 80036c2:	bf00      	nop
    }
    SKIP_WHITESPACES(string);
 80036c4:	e004      	b.n	80036d0 <parse_object_value+0x1d8>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	1c5a      	adds	r2, r3, #1
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	3301      	adds	r3, #1
 80036d8:	4a0d      	ldr	r2, [pc, #52]	; (8003710 <parse_object_value+0x218>)
 80036da:	4413      	add	r3, r2
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	f003 0308 	and.w	r3, r3, #8
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1ef      	bne.n	80036c6 <parse_object_value+0x1ce>
    if (**string != '}') {
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b7d      	cmp	r3, #125	; 0x7d
 80036ee:	d004      	beq.n	80036fa <parse_object_value+0x202>
        json_value_free(output_value);
 80036f0:	69b8      	ldr	r0, [r7, #24]
 80036f2:	f000 fa95 	bl	8003c20 <json_value_free>
        return NULL;
 80036f6:	2300      	movs	r3, #0
 80036f8:	e005      	b.n	8003706 <parse_object_value+0x20e>
    }
    SKIP_CHAR(string);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	1c5a      	adds	r2, r3, #1
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	601a      	str	r2, [r3, #0]
    return output_value;
 8003704:	69bb      	ldr	r3, [r7, #24]
}
 8003706:	4618      	mov	r0, r3
 8003708:	3720      	adds	r7, #32
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	0801de82 	.word	0x0801de82
 8003714:	20000004 	.word	0x20000004

08003718 <parse_array_value>:

static JSON_Value * parse_array_value(const char **string, size_t nesting) {
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
    JSON_Value *output_value = NULL, *new_array_value = NULL;
 8003722:	2300      	movs	r3, #0
 8003724:	617b      	str	r3, [r7, #20]
 8003726:	2300      	movs	r3, #0
 8003728:	613b      	str	r3, [r7, #16]
    JSON_Array *output_array = NULL;
 800372a:	2300      	movs	r3, #0
 800372c:	60fb      	str	r3, [r7, #12]
    output_value = json_value_init_array();
 800372e:	f000 fad1 	bl	8003cd4 <json_value_init_array>
 8003732:	6178      	str	r0, [r7, #20]
    if (output_value == NULL) {
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <parse_array_value+0x26>
        return NULL;
 800373a:	2300      	movs	r3, #0
 800373c:	e0a9      	b.n	8003892 <parse_array_value+0x17a>
    }
    if (**string != '[') {
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	2b5b      	cmp	r3, #91	; 0x5b
 8003746:	d004      	beq.n	8003752 <parse_array_value+0x3a>
        json_value_free(output_value);
 8003748:	6978      	ldr	r0, [r7, #20]
 800374a:	f000 fa69 	bl	8003c20 <json_value_free>
        return NULL;
 800374e:	2300      	movs	r3, #0
 8003750:	e09f      	b.n	8003892 <parse_array_value+0x17a>
    }
    output_array = json_value_get_array(output_value);
 8003752:	6978      	ldr	r0, [r7, #20]
 8003754:	f000 fa2c 	bl	8003bb0 <json_value_get_array>
 8003758:	60f8      	str	r0, [r7, #12]
    SKIP_CHAR(string);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	1c5a      	adds	r2, r3, #1
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	601a      	str	r2, [r3, #0]
    SKIP_WHITESPACES(string);
 8003764:	e004      	b.n	8003770 <parse_array_value+0x58>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	1c5a      	adds	r2, r3, #1
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	3301      	adds	r3, #1
 8003778:	4a48      	ldr	r2, [pc, #288]	; (800389c <parse_array_value+0x184>)
 800377a:	4413      	add	r3, r2
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	f003 0308 	and.w	r3, r3, #8
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1ef      	bne.n	8003766 <parse_array_value+0x4e>
    if (**string == ']') { /* empty array */
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	2b5d      	cmp	r3, #93	; 0x5d
 800378e:	d14d      	bne.n	800382c <parse_array_value+0x114>
        SKIP_CHAR(string);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	1c5a      	adds	r2, r3, #1
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	601a      	str	r2, [r3, #0]
        return output_value;
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	e079      	b.n	8003892 <parse_array_value+0x17a>
    }
    while (**string != '\0') {
        new_array_value = parse_value(string, nesting);
 800379e:	6839      	ldr	r1, [r7, #0]
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f7ff fe09 	bl	80033b8 <parse_value>
 80037a6:	6138      	str	r0, [r7, #16]
        if (new_array_value == NULL) {
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d104      	bne.n	80037b8 <parse_array_value+0xa0>
            json_value_free(output_value);
 80037ae:	6978      	ldr	r0, [r7, #20]
 80037b0:	f000 fa36 	bl	8003c20 <json_value_free>
            return NULL;
 80037b4:	2300      	movs	r3, #0
 80037b6:	e06c      	b.n	8003892 <parse_array_value+0x17a>
        }
        if (json_array_add(output_array, new_array_value) != JSONSuccess) {
 80037b8:	6939      	ldr	r1, [r7, #16]
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f7ff faf8 	bl	8002db0 <json_array_add>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00c      	beq.n	80037e0 <parse_array_value+0xc8>
            json_value_free(new_array_value);
 80037c6:	6938      	ldr	r0, [r7, #16]
 80037c8:	f000 fa2a 	bl	8003c20 <json_value_free>
            json_value_free(output_value);
 80037cc:	6978      	ldr	r0, [r7, #20]
 80037ce:	f000 fa27 	bl	8003c20 <json_value_free>
            return NULL;
 80037d2:	2300      	movs	r3, #0
 80037d4:	e05d      	b.n	8003892 <parse_array_value+0x17a>
        }
        SKIP_WHITESPACES(string);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	1c5a      	adds	r2, r3, #1
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	3301      	adds	r3, #1
 80037e8:	4a2c      	ldr	r2, [pc, #176]	; (800389c <parse_array_value+0x184>)
 80037ea:	4413      	add	r3, r2
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1ef      	bne.n	80037d6 <parse_array_value+0xbe>
        if (**string != ',') {
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	2b2c      	cmp	r3, #44	; 0x2c
 80037fe:	d11b      	bne.n	8003838 <parse_array_value+0x120>
            break;
        }
        SKIP_CHAR(string);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	1c5a      	adds	r2, r3, #1
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	601a      	str	r2, [r3, #0]
        SKIP_WHITESPACES(string);
 800380a:	e004      	b.n	8003816 <parse_array_value+0xfe>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	1c5a      	adds	r2, r3, #1
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	3301      	adds	r3, #1
 800381e:	4a1f      	ldr	r2, [pc, #124]	; (800389c <parse_array_value+0x184>)
 8003820:	4413      	add	r3, r2
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	f003 0308 	and.w	r3, r3, #8
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1ef      	bne.n	800380c <parse_array_value+0xf4>
    while (**string != '\0') {
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1b3      	bne.n	800379e <parse_array_value+0x86>
 8003836:	e006      	b.n	8003846 <parse_array_value+0x12e>
            break;
 8003838:	bf00      	nop
    }
    SKIP_WHITESPACES(string);
 800383a:	e004      	b.n	8003846 <parse_array_value+0x12e>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	1c5a      	adds	r2, r3, #1
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	3301      	adds	r3, #1
 800384e:	4a13      	ldr	r2, [pc, #76]	; (800389c <parse_array_value+0x184>)
 8003850:	4413      	add	r3, r2
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	f003 0308 	and.w	r3, r3, #8
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1ef      	bne.n	800383c <parse_array_value+0x124>
    if (**string != ']' || /* Trim array after parsing is over */
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	2b5d      	cmp	r3, #93	; 0x5d
 8003864:	d10a      	bne.n	800387c <parse_array_value+0x164>
        json_array_resize(output_array, json_array_get_count(output_array)) != JSONSuccess) {
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f000 f95c 	bl	8003b24 <json_array_get_count>
 800386c:	4603      	mov	r3, r0
 800386e:	4619      	mov	r1, r3
 8003870:	68f8      	ldr	r0, [r7, #12]
 8003872:	f7ff fad1 	bl	8002e18 <json_array_resize>
 8003876:	4603      	mov	r3, r0
    if (**string != ']' || /* Trim array after parsing is over */
 8003878:	2b00      	cmp	r3, #0
 800387a:	d004      	beq.n	8003886 <parse_array_value+0x16e>
            json_value_free(output_value);
 800387c:	6978      	ldr	r0, [r7, #20]
 800387e:	f000 f9cf 	bl	8003c20 <json_value_free>
            return NULL;
 8003882:	2300      	movs	r3, #0
 8003884:	e005      	b.n	8003892 <parse_array_value+0x17a>
    }
    SKIP_CHAR(string);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	1c5a      	adds	r2, r3, #1
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	601a      	str	r2, [r3, #0]
    return output_value;
 8003890:	697b      	ldr	r3, [r7, #20]
}
 8003892:	4618      	mov	r0, r3
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	0801de82 	.word	0x0801de82

080038a0 <parse_string_value>:

static JSON_Value * parse_string_value(const char **string) {
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
    JSON_Value *value = NULL;
 80038a8:	2300      	movs	r3, #0
 80038aa:	617b      	str	r3, [r7, #20]
    size_t new_string_len = 0;
 80038ac:	2300      	movs	r3, #0
 80038ae:	60fb      	str	r3, [r7, #12]
    char *new_string = get_quoted_string(string, &new_string_len);
 80038b0:	f107 030c 	add.w	r3, r7, #12
 80038b4:	4619      	mov	r1, r3
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7ff fd58 	bl	800336c <get_quoted_string>
 80038bc:	6138      	str	r0, [r7, #16]
    if (new_string == NULL) {
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <parse_string_value+0x28>
        return NULL;
 80038c4:	2300      	movs	r3, #0
 80038c6:	e00f      	b.n	80038e8 <parse_string_value+0x48>
    }
    value = json_value_init_string_no_copy(new_string, new_string_len);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4619      	mov	r1, r3
 80038cc:	6938      	ldr	r0, [r7, #16]
 80038ce:	f7ff fb0b 	bl	8002ee8 <json_value_init_string_no_copy>
 80038d2:	6178      	str	r0, [r7, #20]
    if (value == NULL) {
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d105      	bne.n	80038e6 <parse_string_value+0x46>
        parson_free(new_string);
 80038da:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <parse_string_value+0x50>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6938      	ldr	r0, [r7, #16]
 80038e0:	4798      	blx	r3
        return NULL;
 80038e2:	2300      	movs	r3, #0
 80038e4:	e000      	b.n	80038e8 <parse_string_value+0x48>
    }
    return value;
 80038e6:	697b      	ldr	r3, [r7, #20]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3718      	adds	r7, #24
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	20000004 	.word	0x20000004

080038f4 <parse_boolean_value>:

static JSON_Value * parse_boolean_value(const char **string) {
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
    size_t true_token_size = SIZEOF_TOKEN("true");
 80038fc:	2304      	movs	r3, #4
 80038fe:	60fb      	str	r3, [r7, #12]
    size_t false_token_size = SIZEOF_TOKEN("false");
 8003900:	2305      	movs	r3, #5
 8003902:	60bb      	str	r3, [r7, #8]
    if (strncmp("true", *string, true_token_size) == 0) {
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	4619      	mov	r1, r3
 800390c:	4815      	ldr	r0, [pc, #84]	; (8003964 <parse_boolean_value+0x70>)
 800390e:	f014 fc71 	bl	80181f4 <strncmp>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10a      	bne.n	800392e <parse_boolean_value+0x3a>
        *string += true_token_size;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	441a      	add	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	601a      	str	r2, [r3, #0]
        return json_value_init_boolean(1);
 8003924:	2001      	movs	r0, #1
 8003926:	f000 fa53 	bl	8003dd0 <json_value_init_boolean>
 800392a:	4603      	mov	r3, r0
 800392c:	e015      	b.n	800395a <parse_boolean_value+0x66>
    } else if (strncmp("false", *string, false_token_size) == 0) {
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	4619      	mov	r1, r3
 8003936:	480c      	ldr	r0, [pc, #48]	; (8003968 <parse_boolean_value+0x74>)
 8003938:	f014 fc5c 	bl	80181f4 <strncmp>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10a      	bne.n	8003958 <parse_boolean_value+0x64>
        *string += false_token_size;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	441a      	add	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	601a      	str	r2, [r3, #0]
        return json_value_init_boolean(0);
 800394e:	2000      	movs	r0, #0
 8003950:	f000 fa3e 	bl	8003dd0 <json_value_init_boolean>
 8003954:	4603      	mov	r3, r0
 8003956:	e000      	b.n	800395a <parse_boolean_value+0x66>
    }
    return NULL;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	0801ad8c 	.word	0x0801ad8c
 8003968:	0801ad94 	.word	0x0801ad94

0800396c <parse_number_value>:

static JSON_Value * parse_number_value(const char **string) {
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
    char *end;
    double number = 0;
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	f04f 0300 	mov.w	r3, #0
 800397c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    errno = 0;
 8003980:	4b24      	ldr	r3, [pc, #144]	; (8003a14 <parse_number_value+0xa8>)
 8003982:	2200      	movs	r2, #0
 8003984:	601a      	str	r2, [r3, #0]
    number = strtod(*string, &end);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f107 020c 	add.w	r2, r7, #12
 800398e:	4611      	mov	r1, r2
 8003990:	4618      	mov	r0, r3
 8003992:	f015 fa7f 	bl	8018e94 <strtod>
 8003996:	ed87 0b04 	vstr	d0, [r7, #16]
    if (errno == ERANGE && (number <= -HUGE_VAL || number >= HUGE_VAL)) {
 800399a:	4b1e      	ldr	r3, [pc, #120]	; (8003a14 <parse_number_value+0xa8>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2b22      	cmp	r3, #34	; 0x22
 80039a0:	d116      	bne.n	80039d0 <parse_number_value+0x64>
 80039a2:	f04f 32ff 	mov.w	r2, #4294967295
 80039a6:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80039aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80039ae:	f7fd f8a5 	bl	8000afc <__aeabi_dcmplt>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d109      	bne.n	80039cc <parse_number_value+0x60>
 80039b8:	f04f 32ff 	mov.w	r2, #4294967295
 80039bc:	4b16      	ldr	r3, [pc, #88]	; (8003a18 <parse_number_value+0xac>)
 80039be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80039c2:	f7fd f8b9 	bl	8000b38 <__aeabi_dcmpgt>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <parse_number_value+0x64>
        return NULL;
 80039cc:	2300      	movs	r3, #0
 80039ce:	e01d      	b.n	8003a0c <parse_number_value+0xa0>
    }
    if ((errno && errno != ERANGE) || !is_decimal(*string, end - *string)) {
 80039d0:	4b10      	ldr	r3, [pc, #64]	; (8003a14 <parse_number_value+0xa8>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <parse_number_value+0x74>
 80039d8:	4b0e      	ldr	r3, [pc, #56]	; (8003a14 <parse_number_value+0xa8>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2b22      	cmp	r3, #34	; 0x22
 80039de:	d10b      	bne.n	80039f8 <parse_number_value+0x8c>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6818      	ldr	r0, [r3, #0]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	4619      	mov	r1, r3
 80039ee:	f7fe fe53 	bl	8002698 <is_decimal>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <parse_number_value+0x90>
        return NULL;
 80039f8:	2300      	movs	r3, #0
 80039fa:	e007      	b.n	8003a0c <parse_number_value+0xa0>
    }
    *string = end;
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	601a      	str	r2, [r3, #0]
    return json_value_init_number(number);
 8003a02:	ed97 0b04 	vldr	d0, [r7, #16]
 8003a06:	f000 f991 	bl	8003d2c <json_value_init_number>
 8003a0a:	4603      	mov	r3, r0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3718      	adds	r7, #24
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	2000952c 	.word	0x2000952c
 8003a18:	7fefffff 	.word	0x7fefffff

08003a1c <parse_null_value>:

static JSON_Value * parse_null_value(const char **string) {
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
    size_t token_size = SIZEOF_TOKEN("null");
 8003a24:	2304      	movs	r3, #4
 8003a26:	60fb      	str	r3, [r7, #12]
    if (strncmp("null", *string, token_size) == 0) {
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	4619      	mov	r1, r3
 8003a30:	480a      	ldr	r0, [pc, #40]	; (8003a5c <parse_null_value+0x40>)
 8003a32:	f014 fbdf 	bl	80181f4 <strncmp>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d109      	bne.n	8003a50 <parse_null_value+0x34>
        *string += token_size;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	441a      	add	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	601a      	str	r2, [r3, #0]
        return json_value_init_null();
 8003a48:	f000 f9e6 	bl	8003e18 <json_value_init_null>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	e000      	b.n	8003a52 <parse_null_value+0x36>
    }
    return NULL;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	0801ad9c 	.word	0x0801ad9c

08003a60 <json_parse_string>:
    output_value = json_parse_string_with_comments(file_contents);
    parson_free(file_contents);
    return output_value;
}

JSON_Value * json_parse_string(const char *string) {
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
    if (string == NULL) {
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <json_parse_string+0x12>
        return NULL;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	e016      	b.n	8003aa0 <json_parse_string+0x40>
    }
    if (string[0] == '\xEF' && string[1] == '\xBB' && string[2] == '\xBF') {
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	2bef      	cmp	r3, #239	; 0xef
 8003a78:	d10c      	bne.n	8003a94 <json_parse_string+0x34>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	2bbb      	cmp	r3, #187	; 0xbb
 8003a82:	d107      	bne.n	8003a94 <json_parse_string+0x34>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	3302      	adds	r3, #2
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	2bbf      	cmp	r3, #191	; 0xbf
 8003a8c:	d102      	bne.n	8003a94 <json_parse_string+0x34>
        string = string + 3; /* Support for UTF-8 BOM */
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	3303      	adds	r3, #3
 8003a92:	607b      	str	r3, [r7, #4]
    }
    return parse_value((const char**)&string, 0);
 8003a94:	1d3b      	adds	r3, r7, #4
 8003a96:	2100      	movs	r1, #0
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff fc8d 	bl	80033b8 <parse_value>
 8003a9e:	4603      	mov	r3, r0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <json_object_get_value>:
    return result;
}

/* JSON Object API */

JSON_Value * json_object_get_value(const JSON_Object *object, const char *name) {
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
    if (object == NULL || name == NULL) {
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d002      	beq.n	8003abe <json_object_get_value+0x16>
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <json_object_get_value+0x1a>
        return NULL;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	e009      	b.n	8003ad6 <json_object_get_value+0x2e>
    }
    return json_object_getn_value(object, name, strlen(name));
 8003ac2:	6838      	ldr	r0, [r7, #0]
 8003ac4:	f7fc fb94 	bl	80001f0 <strlen>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	461a      	mov	r2, r3
 8003acc:	6839      	ldr	r1, [r7, #0]
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7ff f8fb 	bl	8002cca <json_object_getn_value>
 8003ad4:	4603      	mov	r3, r0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <json_object_get_string>:

const char * json_object_get_string(const JSON_Object *object, const char *name) {
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b082      	sub	sp, #8
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
 8003ae6:	6039      	str	r1, [r7, #0]
    return json_value_get_string(json_object_get_value(object, name));
 8003ae8:	6839      	ldr	r1, [r7, #0]
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7ff ffdc 	bl	8003aa8 <json_object_get_value>
 8003af0:	4603      	mov	r3, r0
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 f880 	bl	8003bf8 <json_value_get_string>
 8003af8:	4603      	mov	r3, r0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <json_object_get_wrapping_value>:
        return NULL;
    }
    return object->values[index];
}

JSON_Value *json_object_get_wrapping_value(const JSON_Object *object) {
 8003b02:	b480      	push	{r7}
 8003b04:	b083      	sub	sp, #12
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
    if (!object) {
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d101      	bne.n	8003b14 <json_object_get_wrapping_value+0x12>
        return NULL;
 8003b10:	2300      	movs	r3, #0
 8003b12:	e001      	b.n	8003b18 <json_object_get_wrapping_value+0x16>
    }
    return object->wrapping_value;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <json_array_get_count>:

int json_array_get_boolean(const JSON_Array *array, size_t index) {
    return json_value_get_boolean(json_array_get_value(array, index));
}

size_t json_array_get_count(const JSON_Array *array) {
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
    return array ? array->count : 0;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d002      	beq.n	8003b38 <json_array_get_count+0x14>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	e000      	b.n	8003b3a <json_array_get_count+0x16>
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <json_array_get_wrapping_value>:

JSON_Value * json_array_get_wrapping_value(const JSON_Array *array) {
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
    if (!array) {
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <json_array_get_wrapping_value+0x12>
        return NULL;
 8003b54:	2300      	movs	r3, #0
 8003b56:	e001      	b.n	8003b5c <json_array_get_wrapping_value+0x16>
    }
    return array->wrapping_value;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <json_value_get_type>:

/* JSON Value API */
JSON_Value_Type json_value_get_type(const JSON_Value *value) {
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
    return value ? value->type : JSONError;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d002      	beq.n	8003b7c <json_value_get_type+0x14>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	e001      	b.n	8003b80 <json_value_get_type+0x18>
 8003b7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <json_value_get_object>:

JSON_Object * json_value_get_object(const JSON_Value *value) {
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f7ff ffe7 	bl	8003b68 <json_value_get_type>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	d102      	bne.n	8003ba6 <json_value_get_object+0x1a>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	e000      	b.n	8003ba8 <json_value_get_object+0x1c>
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <json_value_get_array>:

JSON_Array * json_value_get_array(const JSON_Value *value) {
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONArray ? value->value.array : NULL;
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f7ff ffd5 	bl	8003b68 <json_value_get_type>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b05      	cmp	r3, #5
 8003bc2:	d102      	bne.n	8003bca <json_value_get_array+0x1a>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	e000      	b.n	8003bcc <json_value_get_array+0x1c>
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <json_value_get_string_desc>:

static const JSON_String * json_value_get_string_desc(const JSON_Value *value) {
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONString ? &value->value.string : NULL;
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f7ff ffc3 	bl	8003b68 <json_value_get_type>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d102      	bne.n	8003bee <json_value_get_string_desc+0x1a>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3308      	adds	r3, #8
 8003bec:	e000      	b.n	8003bf0 <json_value_get_string_desc+0x1c>
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3708      	adds	r7, #8
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <json_value_get_string>:

const char * json_value_get_string(const JSON_Value *value) {
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
    const JSON_String *str = json_value_get_string_desc(value);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f7ff ffe7 	bl	8003bd4 <json_value_get_string_desc>
 8003c06:	60f8      	str	r0, [r7, #12]
    return str ? str->chars : NULL;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d002      	beq.n	8003c14 <json_value_get_string+0x1c>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	e000      	b.n	8003c16 <json_value_get_string+0x1e>
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
	...

08003c20 <json_value_free>:

JSON_Value * json_value_get_parent (const JSON_Value *value) {
    return value ? value->parent : NULL;
}

void json_value_free(JSON_Value *value) {
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
    switch (json_value_get_type(value)) {
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f7ff ff9d 	bl	8003b68 <json_value_get_type>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b05      	cmp	r3, #5
 8003c32:	d012      	beq.n	8003c5a <json_value_free+0x3a>
 8003c34:	2b05      	cmp	r3, #5
 8003c36:	dc16      	bgt.n	8003c66 <json_value_free+0x46>
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d007      	beq.n	8003c4c <json_value_free+0x2c>
 8003c3c:	2b04      	cmp	r3, #4
 8003c3e:	d112      	bne.n	8003c66 <json_value_free+0x46>
        case JSONObject:
            json_object_free(value->value.object);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7ff f87d 	bl	8002d44 <json_object_free>
            break;
 8003c4a:	e00d      	b.n	8003c68 <json_value_free+0x48>
        case JSONString:
            parson_free(value->value.string.chars);
 8003c4c:	4b0a      	ldr	r3, [pc, #40]	; (8003c78 <json_value_free+0x58>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	6892      	ldr	r2, [r2, #8]
 8003c54:	4610      	mov	r0, r2
 8003c56:	4798      	blx	r3
            break;
 8003c58:	e006      	b.n	8003c68 <json_value_free+0x48>
        case JSONArray:
            json_array_free(value->value.array);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7ff f91a 	bl	8002e98 <json_array_free>
            break;
 8003c64:	e000      	b.n	8003c68 <json_value_free+0x48>
        default:
            break;
 8003c66:	bf00      	nop
    }
    parson_free(value);
 8003c68:	4b03      	ldr	r3, [pc, #12]	; (8003c78 <json_value_free+0x58>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	4798      	blx	r3
}
 8003c70:	bf00      	nop
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	20000004 	.word	0x20000004

08003c7c <json_value_init_object>:

JSON_Value * json_value_init_object(void) {
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8003c82:	4b12      	ldr	r3, [pc, #72]	; (8003ccc <json_value_init_object+0x50>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2010      	movs	r0, #16
 8003c88:	4798      	blx	r3
 8003c8a:	6078      	str	r0, [r7, #4]
    if (!new_value) {
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <json_value_init_object+0x1a>
        return NULL;
 8003c92:	2300      	movs	r3, #0
 8003c94:	e016      	b.n	8003cc4 <json_value_init_object+0x48>
    }
    new_value->parent = NULL;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	601a      	str	r2, [r3, #0]
    new_value->type = JSONObject;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2204      	movs	r2, #4
 8003ca0:	605a      	str	r2, [r3, #4]
    new_value->value.object = json_object_make(new_value);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f7fe fd64 	bl	8002770 <json_object_make>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	609a      	str	r2, [r3, #8]
    if (!new_value->value.object) {
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d105      	bne.n	8003cc2 <json_value_init_object+0x46>
        parson_free(new_value);
 8003cb6:	4b06      	ldr	r3, [pc, #24]	; (8003cd0 <json_value_init_object+0x54>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	4798      	blx	r3
        return NULL;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	e000      	b.n	8003cc4 <json_value_init_object+0x48>
    }
    return new_value;
 8003cc2:	687b      	ldr	r3, [r7, #4]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3708      	adds	r7, #8
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	20000000 	.word	0x20000000
 8003cd0:	20000004 	.word	0x20000004

08003cd4 <json_value_init_array>:

JSON_Value * json_value_init_array(void) {
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8003cda:	4b12      	ldr	r3, [pc, #72]	; (8003d24 <json_value_init_array+0x50>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2010      	movs	r0, #16
 8003ce0:	4798      	blx	r3
 8003ce2:	6078      	str	r0, [r7, #4]
    if (!new_value) {
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <json_value_init_array+0x1a>
        return NULL;
 8003cea:	2300      	movs	r3, #0
 8003cec:	e016      	b.n	8003d1c <json_value_init_array+0x48>
    }
    new_value->parent = NULL;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]
    new_value->type = JSONArray;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2205      	movs	r2, #5
 8003cf8:	605a      	str	r2, [r3, #4]
    new_value->value.array = json_array_make(new_value);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7ff f836 	bl	8002d6c <json_array_make>
 8003d00:	4602      	mov	r2, r0
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	609a      	str	r2, [r3, #8]
    if (!new_value->value.array) {
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d105      	bne.n	8003d1a <json_value_init_array+0x46>
        parson_free(new_value);
 8003d0e:	4b06      	ldr	r3, [pc, #24]	; (8003d28 <json_value_init_array+0x54>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	4798      	blx	r3
        return NULL;
 8003d16:	2300      	movs	r3, #0
 8003d18:	e000      	b.n	8003d1c <json_value_init_array+0x48>
    }
    return new_value;
 8003d1a:	687b      	ldr	r3, [r7, #4]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3708      	adds	r7, #8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	20000000 	.word	0x20000000
 8003d28:	20000004 	.word	0x20000004

08003d2c <json_value_init_number>:
        parson_free(copy);
    }
    return value;
}

JSON_Value * json_value_init_number(double number) {
 8003d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	ed87 0b00 	vstr	d0, [r7]
    JSON_Value *new_value = NULL;
 8003d36:	2300      	movs	r3, #0
 8003d38:	60fb      	str	r3, [r7, #12]
    if (IS_NUMBER_INVALID(number)) {
 8003d3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003d42:	f7fc ff03 	bl	8000b4c <__aeabi_dcmpun>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d121      	bne.n	8003d90 <json_value_init_number+0x64>
 8003d4c:	683c      	ldr	r4, [r7, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8003d54:	2301      	movs	r3, #1
 8003d56:	461e      	mov	r6, r3
 8003d58:	f04f 32ff 	mov.w	r2, #4294967295
 8003d5c:	4b1a      	ldr	r3, [pc, #104]	; (8003dc8 <json_value_init_number+0x9c>)
 8003d5e:	4620      	mov	r0, r4
 8003d60:	4629      	mov	r1, r5
 8003d62:	f7fc fef3 	bl	8000b4c <__aeabi_dcmpun>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10b      	bne.n	8003d84 <json_value_init_number+0x58>
 8003d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d70:	4b15      	ldr	r3, [pc, #84]	; (8003dc8 <json_value_init_number+0x9c>)
 8003d72:	4620      	mov	r0, r4
 8003d74:	4629      	mov	r1, r5
 8003d76:	f7fc fecb 	bl	8000b10 <__aeabi_dcmple>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <json_value_init_number+0x58>
 8003d80:	2300      	movs	r3, #0
 8003d82:	461e      	mov	r6, r3
 8003d84:	b2f3      	uxtb	r3, r6
 8003d86:	f083 0301 	eor.w	r3, r3, #1
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <json_value_init_number+0x68>
        return NULL;
 8003d90:	2300      	movs	r3, #0
 8003d92:	e015      	b.n	8003dc0 <json_value_init_number+0x94>
    }
    new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8003d94:	4b0d      	ldr	r3, [pc, #52]	; (8003dcc <json_value_init_number+0xa0>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2010      	movs	r0, #16
 8003d9a:	4798      	blx	r3
 8003d9c:	60f8      	str	r0, [r7, #12]
    if (new_value == NULL) {
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d101      	bne.n	8003da8 <json_value_init_number+0x7c>
        return NULL;
 8003da4:	2300      	movs	r3, #0
 8003da6:	e00b      	b.n	8003dc0 <json_value_init_number+0x94>
    }
    new_value->parent = NULL;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	601a      	str	r2, [r3, #0]
    new_value->type = JSONNumber;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2203      	movs	r2, #3
 8003db2:	605a      	str	r2, [r3, #4]
    new_value->value.number = number;
 8003db4:	68f9      	ldr	r1, [r7, #12]
 8003db6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003dba:	e9c1 2302 	strd	r2, r3, [r1, #8]
    return new_value;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3714      	adds	r7, #20
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dc8:	7fefffff 	.word	0x7fefffff
 8003dcc:	20000000 	.word	0x20000000

08003dd0 <json_value_init_boolean>:

JSON_Value * json_value_init_boolean(int boolean) {
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8003dd8:	4b0e      	ldr	r3, [pc, #56]	; (8003e14 <json_value_init_boolean+0x44>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2010      	movs	r0, #16
 8003dde:	4798      	blx	r3
 8003de0:	60f8      	str	r0, [r7, #12]
    if (!new_value) {
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d101      	bne.n	8003dec <json_value_init_boolean+0x1c>
        return NULL;
 8003de8:	2300      	movs	r3, #0
 8003dea:	e00f      	b.n	8003e0c <json_value_init_boolean+0x3c>
    }
    new_value->parent = NULL;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	601a      	str	r2, [r3, #0]
    new_value->type = JSONBoolean;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2206      	movs	r2, #6
 8003df6:	605a      	str	r2, [r3, #4]
    new_value->value.boolean = boolean ? 1 : 0;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	bf14      	ite	ne
 8003dfe:	2301      	movne	r3, #1
 8003e00:	2300      	moveq	r3, #0
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	461a      	mov	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	609a      	str	r2, [r3, #8]
    return new_value;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	20000000 	.word	0x20000000

08003e18 <json_value_init_null>:

JSON_Value * json_value_init_null(void) {
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 8003e1e:	4b0a      	ldr	r3, [pc, #40]	; (8003e48 <json_value_init_null+0x30>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2010      	movs	r0, #16
 8003e24:	4798      	blx	r3
 8003e26:	6078      	str	r0, [r7, #4]
    if (!new_value) {
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <json_value_init_null+0x1a>
        return NULL;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	e006      	b.n	8003e40 <json_value_init_null+0x28>
    }
    new_value->parent = NULL;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	601a      	str	r2, [r3, #0]
    new_value->type = JSONNull;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	605a      	str	r2, [r3, #4]
    return new_value;
 8003e3e:	687b      	ldr	r3, [r7, #4]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3708      	adds	r7, #8
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	20000000 	.word	0x20000000

08003e4c <json_object>:

JSON_Value_Type json_type(const JSON_Value *value) {
    return json_value_get_type(value);
}

JSON_Object * json_object (const JSON_Value *value) {
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
    return json_value_get_object(value);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f7ff fe99 	bl	8003b8c <json_value_get_object>
 8003e5a:	4603      	mov	r3, r0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003e6a:	1d3b      	adds	r3, r7, #4
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	601a      	str	r2, [r3, #0]
 8003e70:	605a      	str	r2, [r3, #4]
 8003e72:	609a      	str	r2, [r3, #8]
 8003e74:	60da      	str	r2, [r3, #12]
 8003e76:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003e78:	2300      	movs	r3, #0
 8003e7a:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003e7c:	4b0f      	ldr	r3, [pc, #60]	; (8003ebc <MX_RTC_Init+0x58>)
 8003e7e:	4a10      	ldr	r2, [pc, #64]	; (8003ec0 <MX_RTC_Init+0x5c>)
 8003e80:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003e82:	4b0e      	ldr	r3, [pc, #56]	; (8003ebc <MX_RTC_Init+0x58>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003e88:	4b0c      	ldr	r3, [pc, #48]	; (8003ebc <MX_RTC_Init+0x58>)
 8003e8a:	227f      	movs	r2, #127	; 0x7f
 8003e8c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003e8e:	4b0b      	ldr	r3, [pc, #44]	; (8003ebc <MX_RTC_Init+0x58>)
 8003e90:	22ff      	movs	r2, #255	; 0xff
 8003e92:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003e94:	4b09      	ldr	r3, [pc, #36]	; (8003ebc <MX_RTC_Init+0x58>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003e9a:	4b08      	ldr	r3, [pc, #32]	; (8003ebc <MX_RTC_Init+0x58>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003ea0:	4b06      	ldr	r3, [pc, #24]	; (8003ebc <MX_RTC_Init+0x58>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003ea6:	4805      	ldr	r0, [pc, #20]	; (8003ebc <MX_RTC_Init+0x58>)
 8003ea8:	f004 f93a 	bl	8008120 <HAL_RTC_Init>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8003eb2:	f7fe fb5d 	bl	8002570 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003eb6:	3718      	adds	r7, #24
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	20000bb0 	.word	0x20000bb0
 8003ec0:	40002800 	.word	0x40002800

08003ec4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b08e      	sub	sp, #56	; 0x38
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ecc:	f107 0308 	add.w	r3, r7, #8
 8003ed0:	2230      	movs	r2, #48	; 0x30
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f013 ffb7 	bl	8017e48 <memset>
  if(rtcHandle->Instance==RTC)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a0c      	ldr	r2, [pc, #48]	; (8003f10 <HAL_RTC_MspInit+0x4c>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d111      	bne.n	8003f08 <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003ee4:	2320      	movs	r3, #32
 8003ee6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003ee8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003eec:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003eee:	f107 0308 	add.w	r3, r7, #8
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f003 fdb6 	bl	8007a64 <HAL_RCCEx_PeriphCLKConfig>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8003efe:	f7fe fb37 	bl	8002570 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003f02:	4b04      	ldr	r3, [pc, #16]	; (8003f14 <HAL_RTC_MspInit+0x50>)
 8003f04:	2201      	movs	r2, #1
 8003f06:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003f08:	bf00      	nop
 8003f0a:	3738      	adds	r7, #56	; 0x38
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	40002800 	.word	0x40002800
 8003f14:	42470e3c 	.word	0x42470e3c

08003f18 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8003f1c:	4b18      	ldr	r3, [pc, #96]	; (8003f80 <MX_SPI4_Init+0x68>)
 8003f1e:	4a19      	ldr	r2, [pc, #100]	; (8003f84 <MX_SPI4_Init+0x6c>)
 8003f20:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8003f22:	4b17      	ldr	r3, [pc, #92]	; (8003f80 <MX_SPI4_Init+0x68>)
 8003f24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003f28:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 8003f2a:	4b15      	ldr	r3, [pc, #84]	; (8003f80 <MX_SPI4_Init+0x68>)
 8003f2c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003f30:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f32:	4b13      	ldr	r3, [pc, #76]	; (8003f80 <MX_SPI4_Init+0x68>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f38:	4b11      	ldr	r3, [pc, #68]	; (8003f80 <MX_SPI4_Init+0x68>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003f3e:	4b10      	ldr	r3, [pc, #64]	; (8003f80 <MX_SPI4_Init+0x68>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8003f44:	4b0e      	ldr	r3, [pc, #56]	; (8003f80 <MX_SPI4_Init+0x68>)
 8003f46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f4a:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003f4c:	4b0c      	ldr	r3, [pc, #48]	; (8003f80 <MX_SPI4_Init+0x68>)
 8003f4e:	2238      	movs	r2, #56	; 0x38
 8003f50:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003f52:	4b0b      	ldr	r3, [pc, #44]	; (8003f80 <MX_SPI4_Init+0x68>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f58:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <MX_SPI4_Init+0x68>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f5e:	4b08      	ldr	r3, [pc, #32]	; (8003f80 <MX_SPI4_Init+0x68>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8003f64:	4b06      	ldr	r3, [pc, #24]	; (8003f80 <MX_SPI4_Init+0x68>)
 8003f66:	220a      	movs	r2, #10
 8003f68:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8003f6a:	4805      	ldr	r0, [pc, #20]	; (8003f80 <MX_SPI4_Init+0x68>)
 8003f6c:	f004 fdb2 	bl	8008ad4 <HAL_SPI_Init>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <MX_SPI4_Init+0x62>
  {
    Error_Handler();
 8003f76:	f7fe fafb 	bl	8002570 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8003f7a:	bf00      	nop
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	20000bd0 	.word	0x20000bd0
 8003f84:	40013400 	.word	0x40013400

08003f88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b08a      	sub	sp, #40	; 0x28
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f90:	f107 0314 	add.w	r3, r7, #20
 8003f94:	2200      	movs	r2, #0
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	605a      	str	r2, [r3, #4]
 8003f9a:	609a      	str	r2, [r3, #8]
 8003f9c:	60da      	str	r2, [r3, #12]
 8003f9e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a19      	ldr	r2, [pc, #100]	; (800400c <HAL_SPI_MspInit+0x84>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d12b      	bne.n	8004002 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003faa:	2300      	movs	r3, #0
 8003fac:	613b      	str	r3, [r7, #16]
 8003fae:	4b18      	ldr	r3, [pc, #96]	; (8004010 <HAL_SPI_MspInit+0x88>)
 8003fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb2:	4a17      	ldr	r2, [pc, #92]	; (8004010 <HAL_SPI_MspInit+0x88>)
 8003fb4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8003fba:	4b15      	ldr	r3, [pc, #84]	; (8004010 <HAL_SPI_MspInit+0x88>)
 8003fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fc2:	613b      	str	r3, [r7, #16]
 8003fc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	4b11      	ldr	r3, [pc, #68]	; (8004010 <HAL_SPI_MspInit+0x88>)
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fce:	4a10      	ldr	r2, [pc, #64]	; (8004010 <HAL_SPI_MspInit+0x88>)
 8003fd0:	f043 0310 	orr.w	r3, r3, #16
 8003fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8003fd6:	4b0e      	ldr	r3, [pc, #56]	; (8004010 <HAL_SPI_MspInit+0x88>)
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fda:	f003 0310 	and.w	r3, r3, #16
 8003fde:	60fb      	str	r3, [r7, #12]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = ST7735S_SCK_Pin|ST7735S_MOSI_Pin;
 8003fe2:	2344      	movs	r3, #68	; 0x44
 8003fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fea:	2300      	movs	r3, #0
 8003fec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003ff2:	2305      	movs	r3, #5
 8003ff4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003ff6:	f107 0314 	add.w	r3, r7, #20
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	4805      	ldr	r0, [pc, #20]	; (8004014 <HAL_SPI_MspInit+0x8c>)
 8003ffe:	f002 fb45 	bl	800668c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8004002:	bf00      	nop
 8004004:	3728      	adds	r7, #40	; 0x28
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	40013400 	.word	0x40013400
 8004010:	40023800 	.word	0x40023800
 8004014:	40021000 	.word	0x40021000

08004018 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800401e:	2300      	movs	r3, #0
 8004020:	607b      	str	r3, [r7, #4]
 8004022:	4b10      	ldr	r3, [pc, #64]	; (8004064 <HAL_MspInit+0x4c>)
 8004024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004026:	4a0f      	ldr	r2, [pc, #60]	; (8004064 <HAL_MspInit+0x4c>)
 8004028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800402c:	6453      	str	r3, [r2, #68]	; 0x44
 800402e:	4b0d      	ldr	r3, [pc, #52]	; (8004064 <HAL_MspInit+0x4c>)
 8004030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004036:	607b      	str	r3, [r7, #4]
 8004038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800403a:	2300      	movs	r3, #0
 800403c:	603b      	str	r3, [r7, #0]
 800403e:	4b09      	ldr	r3, [pc, #36]	; (8004064 <HAL_MspInit+0x4c>)
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	4a08      	ldr	r2, [pc, #32]	; (8004064 <HAL_MspInit+0x4c>)
 8004044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004048:	6413      	str	r3, [r2, #64]	; 0x40
 800404a:	4b06      	ldr	r3, [pc, #24]	; (8004064 <HAL_MspInit+0x4c>)
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004052:	603b      	str	r3, [r7, #0]
 8004054:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004056:	bf00      	nop
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	40023800 	.word	0x40023800

08004068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004068:	b480      	push	{r7}
 800406a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800406c:	e7fe      	b.n	800406c <NMI_Handler+0x4>

0800406e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800406e:	b480      	push	{r7}
 8004070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004072:	e7fe      	b.n	8004072 <HardFault_Handler+0x4>

08004074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004078:	e7fe      	b.n	8004078 <MemManage_Handler+0x4>

0800407a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800407a:	b480      	push	{r7}
 800407c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800407e:	e7fe      	b.n	800407e <BusFault_Handler+0x4>

08004080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004084:	e7fe      	b.n	8004084 <UsageFault_Handler+0x4>

08004086 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004086:	b480      	push	{r7}
 8004088:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800408a:	bf00      	nop
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004098:	bf00      	nop
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040a2:	b480      	push	{r7}
 80040a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040a6:	bf00      	nop
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040b4:	f000 fd76 	bl	8004ba4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040b8:	bf00      	nop
 80040ba:	bd80      	pop	{r7, pc}

080040bc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80040c0:	4802      	ldr	r0, [pc, #8]	; (80040cc <TIM1_CC_IRQHandler+0x10>)
 80040c2:	f005 ff13 	bl	8009eec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80040c6:	bf00      	nop
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	20000c70 	.word	0x20000c70

080040d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80040d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80040d8:	f002 fe78 	bl	8006dcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80040dc:	bf00      	nop
 80040de:	bd80      	pop	{r7, pc}

080040e0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80040e4:	4802      	ldr	r0, [pc, #8]	; (80040f0 <ETH_IRQHandler+0x10>)
 80040e6:	f001 fb11 	bl	800570c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80040ea:	bf00      	nop
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	200025e8 	.word	0x200025e8

080040f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
	return 1;
 80040f8:	2301      	movs	r3, #1
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <_kill>:

int _kill(int pid, int sig)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800410e:	4b05      	ldr	r3, [pc, #20]	; (8004124 <_kill+0x20>)
 8004110:	2216      	movs	r2, #22
 8004112:	601a      	str	r2, [r3, #0]
	return -1;
 8004114:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004118:	4618      	mov	r0, r3
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr
 8004124:	2000952c 	.word	0x2000952c

08004128 <_exit>:

void _exit (int status)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004130:	f04f 31ff 	mov.w	r1, #4294967295
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f7ff ffe5 	bl	8004104 <_kill>
	while (1) {}		/* Make sure we hang here */
 800413a:	e7fe      	b.n	800413a <_exit+0x12>

0800413c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004148:	2300      	movs	r3, #0
 800414a:	617b      	str	r3, [r7, #20]
 800414c:	e00a      	b.n	8004164 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800414e:	f3af 8000 	nop.w
 8004152:	4601      	mov	r1, r0
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	1c5a      	adds	r2, r3, #1
 8004158:	60ba      	str	r2, [r7, #8]
 800415a:	b2ca      	uxtb	r2, r1
 800415c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	3301      	adds	r3, #1
 8004162:	617b      	str	r3, [r7, #20]
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	429a      	cmp	r2, r3
 800416a:	dbf0      	blt.n	800414e <_read+0x12>
	}

return len;
 800416c:	687b      	ldr	r3, [r7, #4]
}
 800416e:	4618      	mov	r0, r3
 8004170:	3718      	adds	r7, #24
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b086      	sub	sp, #24
 800417a:	af00      	add	r7, sp, #0
 800417c:	60f8      	str	r0, [r7, #12]
 800417e:	60b9      	str	r1, [r7, #8]
 8004180:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004182:	2300      	movs	r3, #0
 8004184:	617b      	str	r3, [r7, #20]
 8004186:	e009      	b.n	800419c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	1c5a      	adds	r2, r3, #1
 800418c:	60ba      	str	r2, [r7, #8]
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	4618      	mov	r0, r3
 8004192:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	3301      	adds	r3, #1
 800419a:	617b      	str	r3, [r7, #20]
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	dbf1      	blt.n	8004188 <_write+0x12>
	}
	return len;
 80041a4:	687b      	ldr	r3, [r7, #4]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3718      	adds	r7, #24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <_close>:

int _close(int file)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b083      	sub	sp, #12
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
	return -1;
 80041b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b083      	sub	sp, #12
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
 80041ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80041d6:	605a      	str	r2, [r3, #4]
	return 0;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <_isatty>:

int _isatty(int file)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b083      	sub	sp, #12
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
	return 1;
 80041ee:	2301      	movs	r3, #1
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
	return 0;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3714      	adds	r7, #20
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
	...

08004218 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004218:	b480      	push	{r7}
 800421a:	b087      	sub	sp, #28
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004220:	4a14      	ldr	r2, [pc, #80]	; (8004274 <_sbrk+0x5c>)
 8004222:	4b15      	ldr	r3, [pc, #84]	; (8004278 <_sbrk+0x60>)
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800422c:	4b13      	ldr	r3, [pc, #76]	; (800427c <_sbrk+0x64>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d102      	bne.n	800423a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004234:	4b11      	ldr	r3, [pc, #68]	; (800427c <_sbrk+0x64>)
 8004236:	4a12      	ldr	r2, [pc, #72]	; (8004280 <_sbrk+0x68>)
 8004238:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800423a:	4b10      	ldr	r3, [pc, #64]	; (800427c <_sbrk+0x64>)
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4413      	add	r3, r2
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	429a      	cmp	r2, r3
 8004246:	d205      	bcs.n	8004254 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8004248:	4b0e      	ldr	r3, [pc, #56]	; (8004284 <_sbrk+0x6c>)
 800424a:	220c      	movs	r2, #12
 800424c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800424e:	f04f 33ff 	mov.w	r3, #4294967295
 8004252:	e009      	b.n	8004268 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8004254:	4b09      	ldr	r3, [pc, #36]	; (800427c <_sbrk+0x64>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800425a:	4b08      	ldr	r3, [pc, #32]	; (800427c <_sbrk+0x64>)
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4413      	add	r3, r2
 8004262:	4a06      	ldr	r2, [pc, #24]	; (800427c <_sbrk+0x64>)
 8004264:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004266:	68fb      	ldr	r3, [r7, #12]
}
 8004268:	4618      	mov	r0, r3
 800426a:	371c      	adds	r7, #28
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	20030000 	.word	0x20030000
 8004278:	00000400 	.word	0x00000400
 800427c:	20000a20 	.word	0x20000a20
 8004280:	20009530 	.word	0x20009530
 8004284:	2000952c 	.word	0x2000952c

08004288 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800428c:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <SystemInit+0x20>)
 800428e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004292:	4a05      	ldr	r2, [pc, #20]	; (80042a8 <SystemInit+0x20>)
 8004294:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004298:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800429c:	bf00      	nop
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	e000ed00 	.word	0xe000ed00

080042ac <_Z15tcp_server_initv>:
   3. Listen for the  incoming requests by the client
   4. Accept the Request, and now the server is ready for the data transfer
 */

void tcp_server_init(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
	/* 1. create new tcp pcb */
	struct tcp_pcb *tpcb;

	tpcb = tcp_new();
 80042b2:	f00c f801 	bl	80102b8 <tcp_new>
 80042b6:	60f8      	str	r0, [r7, #12]

	err_t err;

	/* 2. bind _pcb to port 7 ( protocol) */
	ip_addr_t myIPADDR;
	IP_ADDR4(&myIPADDR, 192, 168, 0, 11);
 80042b8:	4b0f      	ldr	r3, [pc, #60]	; (80042f8 <_Z15tcp_server_initv+0x4c>)
 80042ba:	607b      	str	r3, [r7, #4]
	err = tcp_bind(tpcb, &myIPADDR, 7);
 80042bc:	1d3b      	adds	r3, r7, #4
 80042be:	2207      	movs	r2, #7
 80042c0:	4619      	mov	r1, r3
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f00a fe3c 	bl	800ef40 <tcp_bind>
 80042c8:	4603      	mov	r3, r0
 80042ca:	72fb      	strb	r3, [r7, #11]

	if (err == ERR_OK)
 80042cc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d109      	bne.n	80042e8 <_Z15tcp_server_initv+0x3c>
	{
		/* 3. start tcp listening for _pcb */
		tpcb = tcp_listen(tpcb);
 80042d4:	21ff      	movs	r1, #255	; 0xff
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f00a feea 	bl	800f0b0 <tcp_listen_with_backlog>
 80042dc:	60f8      	str	r0, [r7, #12]

		/* 4. initialize LwIP tcp_accept callback function */
		tcp_accept(tpcb, tcp_server_accept);
 80042de:	4907      	ldr	r1, [pc, #28]	; (80042fc <_Z15tcp_server_initv+0x50>)
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f00c f869 	bl	80103b8 <tcp_accept>
	else
	{
		/* deallocate the pcb */
		memp_free(MEMP_TCP_PCB, tpcb);
	}
}
 80042e6:	e003      	b.n	80042f0 <_Z15tcp_server_initv+0x44>
		memp_free(MEMP_TCP_PCB, tpcb);
 80042e8:	68f9      	ldr	r1, [r7, #12]
 80042ea:	2001      	movs	r0, #1
 80042ec:	f009 f9e0 	bl	800d6b0 <memp_free>
}
 80042f0:	bf00      	nop
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	0b00a8c0 	.word	0x0b00a8c0
 80042fc:	08004301 	.word	0x08004301

08004300 <_ZL17tcp_server_acceptPvP7tcp_pcba>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used
  * @retval err_t: error status
  */
static err_t tcp_server_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	4613      	mov	r3, r2
 800430c:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 800430e:	2101      	movs	r1, #1
 8004310:	68b8      	ldr	r0, [r7, #8]
 8004312:	f00b fddf 	bl	800fed4 <tcp_setprio>

  /* allocate structure es to maintain tcp connection information */
  es = (struct tcp_server_struct *)mem_malloc(sizeof(struct tcp_server_struct));
 8004316:	200c      	movs	r0, #12
 8004318:	f009 f810 	bl	800d33c <mem_malloc>
 800431c:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d01f      	beq.n	8004364 <_ZL17tcp_server_acceptPvP7tcp_pcba+0x64>
  {
    es->state = ES_ACCEPTED;
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	2201      	movs	r2, #1
 8004328:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	68ba      	ldr	r2, [r7, #8]
 800432e:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	2200      	movs	r2, #0
 8004334:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	2200      	movs	r2, #0
 800433a:	609a      	str	r2, [r3, #8]

    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 800433c:	6939      	ldr	r1, [r7, #16]
 800433e:	68b8      	ldr	r0, [r7, #8]
 8004340:	f00b ffc2 	bl	80102c8 <tcp_arg>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, tcp_server_recv);
 8004344:	490d      	ldr	r1, [pc, #52]	; (800437c <_ZL17tcp_server_acceptPvP7tcp_pcba+0x7c>)
 8004346:	68b8      	ldr	r0, [r7, #8]
 8004348:	f00b ffd0 	bl	80102ec <tcp_recv>

    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_server_error);
 800434c:	490c      	ldr	r1, [pc, #48]	; (8004380 <_ZL17tcp_server_acceptPvP7tcp_pcba+0x80>)
 800434e:	68b8      	ldr	r0, [r7, #8]
 8004350:	f00c f810 	bl	8010374 <tcp_err>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_server_poll, 0);
 8004354:	2200      	movs	r2, #0
 8004356:	490b      	ldr	r1, [pc, #44]	; (8004384 <_ZL17tcp_server_acceptPvP7tcp_pcba+0x84>)
 8004358:	68b8      	ldr	r0, [r7, #8]
 800435a:	f00c f845 	bl	80103e8 <tcp_poll>

    ret_err = ERR_OK;
 800435e:	2300      	movs	r3, #0
 8004360:	75fb      	strb	r3, [r7, #23]
 8004362:	e005      	b.n	8004370 <_ZL17tcp_server_acceptPvP7tcp_pcba+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_server_connection_close(newpcb, es);
 8004364:	6939      	ldr	r1, [r7, #16]
 8004366:	68b8      	ldr	r0, [r7, #8]
 8004368:	f000 f966 	bl	8004638 <_ZL27tcp_server_connection_closeP7tcp_pcbP17tcp_server_struct>
    /* return memory error */
    ret_err = ERR_MEM;
 800436c:	23ff      	movs	r3, #255	; 0xff
 800436e:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8004370:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004374:	4618      	mov	r0, r3
 8004376:	3718      	adds	r7, #24
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	08004389 	.word	0x08004389
 8004380:	080044bd 	.word	0x080044bd
 8004384:	080044e1 	.word	0x080044e1

08004388 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b088      	sub	sp, #32
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
 8004394:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d105      	bne.n	80043a8 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x20>
 800439c:	4b43      	ldr	r3, [pc, #268]	; (80044ac <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x124>)
 800439e:	22c3      	movs	r2, #195	; 0xc3
 80043a0:	4943      	ldr	r1, [pc, #268]	; (80044b0 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x128>)
 80043a2:	4844      	ldr	r0, [pc, #272]	; (80044b4 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x12c>)
 80043a4:	f013 fe02 	bl	8017fac <iprintf>

  es = (struct tcp_server_struct *)arg;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	61bb      	str	r3, [r7, #24]

  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d116      	bne.n	80043e0 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x58>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	2203      	movs	r2, #3
 80043b6:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d104      	bne.n	80043ca <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x42>
    {
       /* we're done sending, close connection */
       tcp_server_connection_close(tpcb, es);
 80043c0:	69b9      	ldr	r1, [r7, #24]
 80043c2:	68b8      	ldr	r0, [r7, #8]
 80043c4:	f000 f938 	bl	8004638 <_ZL27tcp_server_connection_closeP7tcp_pcbP17tcp_server_struct>
 80043c8:	e007      	b.n	80043da <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x52>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_server_sent);
 80043ca:	493b      	ldr	r1, [pc, #236]	; (80044b8 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x130>)
 80043cc:	68b8      	ldr	r0, [r7, #8]
 80043ce:	f00b ffaf 	bl	8010330 <tcp_sent>

      /* send remaining data*/
      tcp_server_send(tpcb, es);
 80043d2:	69b9      	ldr	r1, [r7, #24]
 80043d4:	68b8      	ldr	r0, [r7, #8]
 80043d6:	f000 f8db 	bl	8004590 <_ZL15tcp_server_sendP7tcp_pcbP17tcp_server_struct>
    }
    ret_err = ERR_OK;
 80043da:	2300      	movs	r3, #0
 80043dc:	77fb      	strb	r3, [r7, #31]
 80043de:	e05f      	b.n	80044a0 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x118>
  }
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 80043e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00b      	beq.n	8004400 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x78>
  {
    /* free received pbuf*/
    if (p != NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d005      	beq.n	80043fa <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x72>
    {
      es->p = NULL;
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	2200      	movs	r2, #0
 80043f2:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f009 ff6d 	bl	800e2d4 <pbuf_free>
    }
    ret_err = err;
 80043fa:	78fb      	ldrb	r3, [r7, #3]
 80043fc:	77fb      	strb	r3, [r7, #31]
 80043fe:	e04f      	b.n	80044a0 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x118>
  }
  else if(es->state == ES_ACCEPTED)
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d110      	bne.n	800442a <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0xa2>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	2202      	movs	r2, #2
 800440c:	701a      	strb	r2, [r3, #0]

    /* store reference to incoming pbuf (chain) */
    es->p = p;
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	609a      	str	r2, [r3, #8]

    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_server_sent);
 8004414:	4928      	ldr	r1, [pc, #160]	; (80044b8 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x130>)
 8004416:	68b8      	ldr	r0, [r7, #8]
 8004418:	f00b ff8a 	bl	8010330 <tcp_sent>

    /* handle the received data */
    tcp_server_handle(tpcb, es);
 800441c:	69b9      	ldr	r1, [r7, #24]
 800441e:	68b8      	ldr	r0, [r7, #8]
 8004420:	f000 f932 	bl	8004688 <_ZL17tcp_server_handleP7tcp_pcbP17tcp_server_struct>

    ret_err = ERR_OK;
 8004424:	2300      	movs	r3, #0
 8004426:	77fb      	strb	r3, [r7, #31]
 8004428:	e03a      	b.n	80044a0 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x118>
  }
  else if (es->state == ES_RECEIVED)
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	2b02      	cmp	r3, #2
 8004430:	d115      	bne.n	800445e <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0xd6>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d107      	bne.n	800444a <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0xc2>
    {
      es->p = p;
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	609a      	str	r2, [r3, #8]

      /* handle the received data */
      tcp_server_handle(tpcb, es);
 8004440:	69b9      	ldr	r1, [r7, #24]
 8004442:	68b8      	ldr	r0, [r7, #8]
 8004444:	f000 f920 	bl	8004688 <_ZL17tcp_server_handleP7tcp_pcbP17tcp_server_struct>
 8004448:	e006      	b.n	8004458 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0xd0>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 8004450:	6879      	ldr	r1, [r7, #4]
 8004452:	6978      	ldr	r0, [r7, #20]
 8004454:	f00a f856 	bl	800e504 <pbuf_chain>
    }
    ret_err = ERR_OK;
 8004458:	2300      	movs	r3, #0
 800445a:	77fb      	strb	r3, [r7, #31]
 800445c:	e020      	b.n	80044a0 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x118>
  }
  else if(es->state == ES_CLOSING)
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	2b03      	cmp	r3, #3
 8004464:	d10e      	bne.n	8004484 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0xfc>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	891b      	ldrh	r3, [r3, #8]
 800446a:	4619      	mov	r1, r3
 800446c:	68b8      	ldr	r0, [r7, #8]
 800446e:	f00a ff35 	bl	800f2dc <tcp_recved>
    es->p = NULL;
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	2200      	movs	r2, #0
 8004476:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f009 ff2b 	bl	800e2d4 <pbuf_free>
    ret_err = ERR_OK;
 800447e:	2300      	movs	r3, #0
 8004480:	77fb      	strb	r3, [r7, #31]
 8004482:	e00d      	b.n	80044a0 <_ZL15tcp_server_recvPvP7tcp_pcbP4pbufa+0x118>
  }
  else
  {
    /* unknown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	891b      	ldrh	r3, [r3, #8]
 8004488:	4619      	mov	r1, r3
 800448a:	68b8      	ldr	r0, [r7, #8]
 800448c:	f00a ff26 	bl	800f2dc <tcp_recved>
    es->p = NULL;
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	2200      	movs	r2, #0
 8004494:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f009 ff1c 	bl	800e2d4 <pbuf_free>
    ret_err = ERR_OK;
 800449c:	2300      	movs	r3, #0
 800449e:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 80044a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3720      	adds	r7, #32
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	0801aee8 	.word	0x0801aee8
 80044b0:	0801af08 	.word	0x0801af08
 80044b4:	0801af14 	.word	0x0801af14
 80044b8:	08004541 	.word	0x08004541

080044bc <_ZL16tcp_server_errorPva>:
  * @param  arg: pointer on argument parameter
  * @param  err: not used
  * @retval None
  */
static void tcp_server_error(void *arg, err_t err)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	460b      	mov	r3, r1
 80044c6:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_server_struct *)arg;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d002      	beq.n	80044d8 <_ZL16tcp_server_errorPva+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f008 fdcc 	bl	800d070 <mem_free>
  }
}
 80044d8:	bf00      	nop
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <_ZL15tcp_server_pollPvP7tcp_pcb>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_server_poll(void *arg, struct tcp_pcb *tpcb)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_server_struct *es;

  es = (struct tcp_server_struct *)arg;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d017      	beq.n	8004524 <_ZL15tcp_server_pollPvP7tcp_pcb+0x44>
  {
    if (es->p != NULL)
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d008      	beq.n	800450e <_ZL15tcp_server_pollPvP7tcp_pcb+0x2e>
    {
      tcp_sent(tpcb, tcp_server_sent);
 80044fc:	490f      	ldr	r1, [pc, #60]	; (800453c <_ZL15tcp_server_pollPvP7tcp_pcb+0x5c>)
 80044fe:	6838      	ldr	r0, [r7, #0]
 8004500:	f00b ff16 	bl	8010330 <tcp_sent>
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_server_send(tpcb, es);
 8004504:	68b9      	ldr	r1, [r7, #8]
 8004506:	6838      	ldr	r0, [r7, #0]
 8004508:	f000 f842 	bl	8004590 <_ZL15tcp_server_sendP7tcp_pcbP17tcp_server_struct>
 800450c:	e007      	b.n	800451e <_ZL15tcp_server_pollPvP7tcp_pcb+0x3e>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	2b03      	cmp	r3, #3
 8004514:	d103      	bne.n	800451e <_ZL15tcp_server_pollPvP7tcp_pcb+0x3e>
      {
        /*  close tcp connection */
        tcp_server_connection_close(tpcb, es);
 8004516:	68b9      	ldr	r1, [r7, #8]
 8004518:	6838      	ldr	r0, [r7, #0]
 800451a:	f000 f88d 	bl	8004638 <_ZL27tcp_server_connection_closeP7tcp_pcbP17tcp_server_struct>
      }
    }
    ret_err = ERR_OK;
 800451e:	2300      	movs	r3, #0
 8004520:	73fb      	strb	r3, [r7, #15]
 8004522:	e004      	b.n	800452e <_ZL15tcp_server_pollPvP7tcp_pcb+0x4e>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 8004524:	6838      	ldr	r0, [r7, #0]
 8004526:	f00a fcff 	bl	800ef28 <tcp_abort>
    ret_err = ERR_ABRT;
 800452a:	23f3      	movs	r3, #243	; 0xf3
 800452c:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 800452e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004532:	4618      	mov	r0, r3
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	08004541 	.word	0x08004541

08004540 <_ZL15tcp_server_sentPvP7tcp_pcbt>:
  *         is received from remote host for sent data)
  * @param  None
  * @retval None
  */
static err_t tcp_server_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	4613      	mov	r3, r2
 800454c:	80fb      	strh	r3, [r7, #6]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_server_struct *)arg;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	2200      	movs	r2, #0
 8004556:	705a      	strb	r2, [r3, #1]

  if(es->p != NULL)
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d008      	beq.n	8004572 <_ZL15tcp_server_sentPvP7tcp_pcbt+0x32>
  {
    /* still got pbufs to send */
    tcp_sent(tpcb, tcp_server_sent);
 8004560:	490a      	ldr	r1, [pc, #40]	; (800458c <_ZL15tcp_server_sentPvP7tcp_pcbt+0x4c>)
 8004562:	68b8      	ldr	r0, [r7, #8]
 8004564:	f00b fee4 	bl	8010330 <tcp_sent>
    tcp_server_send(tpcb, es);
 8004568:	6979      	ldr	r1, [r7, #20]
 800456a:	68b8      	ldr	r0, [r7, #8]
 800456c:	f000 f810 	bl	8004590 <_ZL15tcp_server_sendP7tcp_pcbP17tcp_server_struct>
 8004570:	e007      	b.n	8004582 <_ZL15tcp_server_sentPvP7tcp_pcbt+0x42>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	2b03      	cmp	r3, #3
 8004578:	d103      	bne.n	8004582 <_ZL15tcp_server_sentPvP7tcp_pcbt+0x42>
      tcp_server_connection_close(tpcb, es);
 800457a:	6979      	ldr	r1, [r7, #20]
 800457c:	68b8      	ldr	r0, [r7, #8]
 800457e:	f000 f85b 	bl	8004638 <_ZL27tcp_server_connection_closeP7tcp_pcbP17tcp_server_struct>
  }
  return ERR_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3718      	adds	r7, #24
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	08004541 	.word	0x08004541

08004590 <_ZL15tcp_server_sendP7tcp_pcbP17tcp_server_struct>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_send(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 800459a:	2300      	movs	r3, #0
 800459c:	75fb      	strb	r3, [r7, #23]

  while ((wr_err == ERR_OK) &&
         (es->p != NULL) &&
 800459e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d144      	bne.n	8004630 <_ZL15tcp_server_sendP7tcp_pcbP17tcp_server_struct+0xa0>
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d040      	beq.n	8004630 <_ZL15tcp_server_sendP7tcp_pcbP17tcp_server_struct+0xa0>
         (es->p->len <= tcp_sndbuf(tpcb)))
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	895a      	ldrh	r2, [r3, #10]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) &&
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d838      	bhi.n	8004630 <_ZL15tcp_server_sendP7tcp_pcbP17tcp_server_struct+0xa0>
  {

    /* get pointer on pbuf from es structure */
    ptr = es->p;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	6859      	ldr	r1, [r3, #4]
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	895a      	ldrh	r2, [r3, #10]
 80045cc:	2301      	movs	r3, #1
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f00e fdb8 	bl	8013144 <tcp_write>
 80045d4:	4603      	mov	r3, r0
 80045d6:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
 80045d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d11e      	bne.n	800461e <_ZL15tcp_server_sendP7tcp_pcbP17tcp_server_struct+0x8e>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	895b      	ldrh	r3, [r3, #10]
 80045e4:	81fb      	strh	r3, [r7, #14]

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d004      	beq.n	8004600 <_ZL15tcp_server_sendP7tcp_pcbP17tcp_server_struct+0x70>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f009 ff0a 	bl	800e414 <pbuf_ref>

     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 8004600:	6938      	ldr	r0, [r7, #16]
 8004602:	f009 fe67 	bl	800e2d4 <pbuf_free>
 8004606:	4603      	mov	r3, r0
 8004608:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 800460a:	7b7b      	ldrb	r3, [r7, #13]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d100      	bne.n	8004612 <_ZL15tcp_server_sendP7tcp_pcbP17tcp_server_struct+0x82>
      do
 8004610:	e7f6      	b.n	8004600 <_ZL15tcp_server_sendP7tcp_pcbP17tcp_server_struct+0x70>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 8004612:	89fb      	ldrh	r3, [r7, #14]
 8004614:	4619      	mov	r1, r3
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f00a fe60 	bl	800f2dc <tcp_recved>
 800461c:	e7bf      	b.n	800459e <_ZL15tcp_server_sendP7tcp_pcbP17tcp_server_struct+0xe>
   }
   else if(wr_err == ERR_MEM)
 800461e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004626:	d1ba      	bne.n	800459e <_ZL15tcp_server_sendP7tcp_pcbP17tcp_server_struct+0xe>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 800462e:	e7b6      	b.n	800459e <_ZL15tcp_server_sendP7tcp_pcbP17tcp_server_struct+0xe>
   else
   {
     /* other problem ?? */
   }
  }
}
 8004630:	bf00      	nop
 8004632:	3718      	adds	r7, #24
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <_ZL27tcp_server_connection_closeP7tcp_pcbP17tcp_server_struct>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_connection_close(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]

  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 8004642:	2100      	movs	r1, #0
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f00b fe3f 	bl	80102c8 <tcp_arg>
  tcp_sent(tpcb, NULL);
 800464a:	2100      	movs	r1, #0
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f00b fe6f 	bl	8010330 <tcp_sent>
  tcp_recv(tpcb, NULL);
 8004652:	2100      	movs	r1, #0
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f00b fe49 	bl	80102ec <tcp_recv>
  tcp_err(tpcb, NULL);
 800465a:	2100      	movs	r1, #0
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f00b fe89 	bl	8010374 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8004662:	2200      	movs	r2, #0
 8004664:	2100      	movs	r1, #0
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f00b febe 	bl	80103e8 <tcp_poll>

  /* delete es structure */
  if (es != NULL)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d002      	beq.n	8004678 <_ZL27tcp_server_connection_closeP7tcp_pcbP17tcp_server_struct+0x40>
  {
    mem_free(es);
 8004672:	6838      	ldr	r0, [r7, #0]
 8004674:	f008 fcfc 	bl	800d070 <mem_free>
  }

  /* close tcp connection */
  tcp_close(tpcb);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f00a fb6b 	bl	800ed54 <tcp_close>
}
 800467e:	bf00      	nop
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
	...

08004688 <_ZL17tcp_server_handleP7tcp_pcbP17tcp_server_struct>:

/* Handle the incoming TCP Data */

static void tcp_server_handle (struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b08a      	sub	sp, #40	; 0x28
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
//
//	pbuf_free(es->p);
	struct tcp_server_struct esTx;

	/* get the Remote IP */
	ip4_addr_t inIP = tpcb->remote_ip;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	613b      	str	r3, [r7, #16]
	uint16_t inPort = tpcb->remote_port;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	8b1b      	ldrh	r3, [r3, #24]
 800469c:	84fb      	strh	r3, [r7, #38]	; 0x26

	/* Extract the IP */
	char *remIP = ipaddr_ntoa(&inIP);
 800469e:	f107 0310 	add.w	r3, r7, #16
 80046a2:	4618      	mov	r0, r3
 80046a4:	f012 f964 	bl	8016970 <ip4addr_ntoa>
 80046a8:	6238      	str	r0, [r7, #32]

	esTx.state = es->state;
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	753b      	strb	r3, [r7, #20]
	esTx.pcb = es->pcb;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	61bb      	str	r3, [r7, #24]
	esTx.p = es->p;
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	61fb      	str	r3, [r7, #28]

	char buf[] = "HAHAXD\n";
 80046bc:	4a11      	ldr	r2, [pc, #68]	; (8004704 <_ZL17tcp_server_handleP7tcp_pcbP17tcp_server_struct+0x7c>)
 80046be:	f107 0308 	add.w	r3, r7, #8
 80046c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80046c6:	e883 0003 	stmia.w	r3, {r0, r1}

	//int len = sprintf(buf, " %s + Hello from TCP server\n", (char*)es->p->payload);

	esTx.p->payload = (void*)buf;
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	f107 0208 	add.w	r2, r7, #8
 80046d0:	605a      	str	r2, [r3, #4]
	esTx.p->tot_len = (es->p->tot_len - es->p->len) + 7;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	891a      	ldrh	r2, [r3, #8]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	895b      	ldrh	r3, [r3, #10]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	3207      	adds	r2, #7
 80046e6:	b292      	uxth	r2, r2
 80046e8:	811a      	strh	r2, [r3, #8]
	esTx.p->len = 7;
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	2207      	movs	r2, #7
 80046ee:	815a      	strh	r2, [r3, #10]

	tcp_server_send(tpcb, &esTx);
 80046f0:	f107 0314 	add.w	r3, r7, #20
 80046f4:	4619      	mov	r1, r3
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f7ff ff4a 	bl	8004590 <_ZL15tcp_server_sendP7tcp_pcbP17tcp_server_struct>

}
 80046fc:	bf00      	nop
 80046fe:	3728      	adds	r7, #40	; 0x28
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	0801af3c 	.word	0x0801af3c

08004708 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b08a      	sub	sp, #40	; 0x28
 800470c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800470e:	f107 0318 	add.w	r3, r7, #24
 8004712:	2200      	movs	r2, #0
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	605a      	str	r2, [r3, #4]
 8004718:	609a      	str	r2, [r3, #8]
 800471a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800471c:	f107 0310 	add.w	r3, r7, #16
 8004720:	2200      	movs	r2, #0
 8004722:	601a      	str	r2, [r3, #0]
 8004724:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004726:	463b      	mov	r3, r7
 8004728:	2200      	movs	r2, #0
 800472a:	601a      	str	r2, [r3, #0]
 800472c:	605a      	str	r2, [r3, #4]
 800472e:	609a      	str	r2, [r3, #8]
 8004730:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004732:	4b2d      	ldr	r3, [pc, #180]	; (80047e8 <MX_TIM1_Init+0xe0>)
 8004734:	4a2d      	ldr	r2, [pc, #180]	; (80047ec <MX_TIM1_Init+0xe4>)
 8004736:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180;
 8004738:	4b2b      	ldr	r3, [pc, #172]	; (80047e8 <MX_TIM1_Init+0xe0>)
 800473a:	22b4      	movs	r2, #180	; 0xb4
 800473c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800473e:	4b2a      	ldr	r3, [pc, #168]	; (80047e8 <MX_TIM1_Init+0xe0>)
 8004740:	2200      	movs	r2, #0
 8004742:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004744:	4b28      	ldr	r3, [pc, #160]	; (80047e8 <MX_TIM1_Init+0xe0>)
 8004746:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800474a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800474c:	4b26      	ldr	r3, [pc, #152]	; (80047e8 <MX_TIM1_Init+0xe0>)
 800474e:	2200      	movs	r2, #0
 8004750:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004752:	4b25      	ldr	r3, [pc, #148]	; (80047e8 <MX_TIM1_Init+0xe0>)
 8004754:	2200      	movs	r2, #0
 8004756:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004758:	4b23      	ldr	r3, [pc, #140]	; (80047e8 <MX_TIM1_Init+0xe0>)
 800475a:	2200      	movs	r2, #0
 800475c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800475e:	4822      	ldr	r0, [pc, #136]	; (80047e8 <MX_TIM1_Init+0xe0>)
 8004760:	f004 fd70 	bl	8009244 <HAL_TIM_Base_Init>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d001      	beq.n	800476e <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 800476a:	f7fd ff01 	bl	8002570 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800476e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004772:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004774:	f107 0318 	add.w	r3, r7, #24
 8004778:	4619      	mov	r1, r3
 800477a:	481b      	ldr	r0, [pc, #108]	; (80047e8 <MX_TIM1_Init+0xe0>)
 800477c:	f006 f84a 	bl	800a814 <HAL_TIM_ConfigClockSource>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8004786:	f7fd fef3 	bl	8002570 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800478a:	4817      	ldr	r0, [pc, #92]	; (80047e8 <MX_TIM1_Init+0xe0>)
 800478c:	f005 f8cc 	bl	8009928 <HAL_TIM_IC_Init>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8004796:	f7fd feeb 	bl	8002570 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800479a:	2300      	movs	r3, #0
 800479c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800479e:	2300      	movs	r3, #0
 80047a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80047a2:	f107 0310 	add.w	r3, r7, #16
 80047a6:	4619      	mov	r1, r3
 80047a8:	480f      	ldr	r0, [pc, #60]	; (80047e8 <MX_TIM1_Init+0xe0>)
 80047aa:	f007 fa0b 	bl	800bbc4 <HAL_TIMEx_MasterConfigSynchronization>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d001      	beq.n	80047b8 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 80047b4:	f7fd fedc 	bl	8002570 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80047b8:	2300      	movs	r3, #0
 80047ba:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80047bc:	2301      	movs	r3, #1
 80047be:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80047c0:	2300      	movs	r3, #0
 80047c2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80047c4:	2300      	movs	r3, #0
 80047c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80047c8:	463b      	mov	r3, r7
 80047ca:	2200      	movs	r2, #0
 80047cc:	4619      	mov	r1, r3
 80047ce:	4806      	ldr	r0, [pc, #24]	; (80047e8 <MX_TIM1_Init+0xe0>)
 80047d0:	f005 fc94 	bl	800a0fc <HAL_TIM_IC_ConfigChannel>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80047da:	f7fd fec9 	bl	8002570 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80047de:	bf00      	nop
 80047e0:	3728      	adds	r7, #40	; 0x28
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	20000c70 	.word	0x20000c70
 80047ec:	40010000 	.word	0x40010000

080047f0 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b088      	sub	sp, #32
 80047f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80047f6:	1d3b      	adds	r3, r7, #4
 80047f8:	2200      	movs	r2, #0
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	605a      	str	r2, [r3, #4]
 80047fe:	609a      	str	r2, [r3, #8]
 8004800:	60da      	str	r2, [r3, #12]
 8004802:	611a      	str	r2, [r3, #16]
 8004804:	615a      	str	r2, [r3, #20]
 8004806:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004808:	4b1d      	ldr	r3, [pc, #116]	; (8004880 <MX_TIM13_Init+0x90>)
 800480a:	4a1e      	ldr	r2, [pc, #120]	; (8004884 <MX_TIM13_Init+0x94>)
 800480c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 180;
 800480e:	4b1c      	ldr	r3, [pc, #112]	; (8004880 <MX_TIM13_Init+0x90>)
 8004810:	22b4      	movs	r2, #180	; 0xb4
 8004812:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004814:	4b1a      	ldr	r3, [pc, #104]	; (8004880 <MX_TIM13_Init+0x90>)
 8004816:	2200      	movs	r2, #0
 8004818:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100;
 800481a:	4b19      	ldr	r3, [pc, #100]	; (8004880 <MX_TIM13_Init+0x90>)
 800481c:	2264      	movs	r2, #100	; 0x64
 800481e:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004820:	4b17      	ldr	r3, [pc, #92]	; (8004880 <MX_TIM13_Init+0x90>)
 8004822:	2200      	movs	r2, #0
 8004824:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004826:	4b16      	ldr	r3, [pc, #88]	; (8004880 <MX_TIM13_Init+0x90>)
 8004828:	2200      	movs	r2, #0
 800482a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800482c:	4814      	ldr	r0, [pc, #80]	; (8004880 <MX_TIM13_Init+0x90>)
 800482e:	f004 fd09 	bl	8009244 <HAL_TIM_Base_Init>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d001      	beq.n	800483c <MX_TIM13_Init+0x4c>
  {
    Error_Handler();
 8004838:	f7fd fe9a 	bl	8002570 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800483c:	4810      	ldr	r0, [pc, #64]	; (8004880 <MX_TIM13_Init+0x90>)
 800483e:	f004 fdf1 	bl	8009424 <HAL_TIM_PWM_Init>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d001      	beq.n	800484c <MX_TIM13_Init+0x5c>
  {
    Error_Handler();
 8004848:	f7fd fe92 	bl	8002570 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800484c:	2360      	movs	r3, #96	; 0x60
 800484e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8004850:	2332      	movs	r3, #50	; 0x32
 8004852:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004854:	2300      	movs	r3, #0
 8004856:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004858:	2300      	movs	r3, #0
 800485a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800485c:	1d3b      	adds	r3, r7, #4
 800485e:	2200      	movs	r2, #0
 8004860:	4619      	mov	r1, r3
 8004862:	4807      	ldr	r0, [pc, #28]	; (8004880 <MX_TIM13_Init+0x90>)
 8004864:	f005 fdfe 	bl	800a464 <HAL_TIM_PWM_ConfigChannel>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <MX_TIM13_Init+0x82>
  {
    Error_Handler();
 800486e:	f7fd fe7f 	bl	8002570 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8004872:	4803      	ldr	r0, [pc, #12]	; (8004880 <MX_TIM13_Init+0x90>)
 8004874:	f000 f86e 	bl	8004954 <HAL_TIM_MspPostInit>

}
 8004878:	bf00      	nop
 800487a:	3720      	adds	r7, #32
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	20000c28 	.word	0x20000c28
 8004884:	40001c00 	.word	0x40001c00

08004888 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b08a      	sub	sp, #40	; 0x28
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004890:	f107 0314 	add.w	r3, r7, #20
 8004894:	2200      	movs	r2, #0
 8004896:	601a      	str	r2, [r3, #0]
 8004898:	605a      	str	r2, [r3, #4]
 800489a:	609a      	str	r2, [r3, #8]
 800489c:	60da      	str	r2, [r3, #12]
 800489e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a27      	ldr	r2, [pc, #156]	; (8004944 <HAL_TIM_Base_MspInit+0xbc>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d135      	bne.n	8004916 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80048aa:	2300      	movs	r3, #0
 80048ac:	613b      	str	r3, [r7, #16]
 80048ae:	4b26      	ldr	r3, [pc, #152]	; (8004948 <HAL_TIM_Base_MspInit+0xc0>)
 80048b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b2:	4a25      	ldr	r2, [pc, #148]	; (8004948 <HAL_TIM_Base_MspInit+0xc0>)
 80048b4:	f043 0301 	orr.w	r3, r3, #1
 80048b8:	6453      	str	r3, [r2, #68]	; 0x44
 80048ba:	4b23      	ldr	r3, [pc, #140]	; (8004948 <HAL_TIM_Base_MspInit+0xc0>)
 80048bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	613b      	str	r3, [r7, #16]
 80048c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80048c6:	2300      	movs	r3, #0
 80048c8:	60fb      	str	r3, [r7, #12]
 80048ca:	4b1f      	ldr	r3, [pc, #124]	; (8004948 <HAL_TIM_Base_MspInit+0xc0>)
 80048cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ce:	4a1e      	ldr	r2, [pc, #120]	; (8004948 <HAL_TIM_Base_MspInit+0xc0>)
 80048d0:	f043 0310 	orr.w	r3, r3, #16
 80048d4:	6313      	str	r3, [r2, #48]	; 0x30
 80048d6:	4b1c      	ldr	r3, [pc, #112]	; (8004948 <HAL_TIM_Base_MspInit+0xc0>)
 80048d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048da:	f003 0310 	and.w	r3, r3, #16
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = HC_SR04_ECHO_Pin;
 80048e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048e8:	2302      	movs	r3, #2
 80048ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ec:	2300      	movs	r3, #0
 80048ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048f0:	2300      	movs	r3, #0
 80048f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80048f4:	2301      	movs	r3, #1
 80048f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HC_SR04_ECHO_GPIO_Port, &GPIO_InitStruct);
 80048f8:	f107 0314 	add.w	r3, r7, #20
 80048fc:	4619      	mov	r1, r3
 80048fe:	4813      	ldr	r0, [pc, #76]	; (800494c <HAL_TIM_Base_MspInit+0xc4>)
 8004900:	f001 fec4 	bl	800668c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8004904:	2200      	movs	r2, #0
 8004906:	2100      	movs	r1, #0
 8004908:	201b      	movs	r0, #27
 800490a:	f000 fa7f 	bl	8004e0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800490e:	201b      	movs	r0, #27
 8004910:	f000 faa8 	bl	8004e64 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8004914:	e012      	b.n	800493c <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM13)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a0d      	ldr	r2, [pc, #52]	; (8004950 <HAL_TIM_Base_MspInit+0xc8>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d10d      	bne.n	800493c <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004920:	2300      	movs	r3, #0
 8004922:	60bb      	str	r3, [r7, #8]
 8004924:	4b08      	ldr	r3, [pc, #32]	; (8004948 <HAL_TIM_Base_MspInit+0xc0>)
 8004926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004928:	4a07      	ldr	r2, [pc, #28]	; (8004948 <HAL_TIM_Base_MspInit+0xc0>)
 800492a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800492e:	6413      	str	r3, [r2, #64]	; 0x40
 8004930:	4b05      	ldr	r3, [pc, #20]	; (8004948 <HAL_TIM_Base_MspInit+0xc0>)
 8004932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004938:	60bb      	str	r3, [r7, #8]
 800493a:	68bb      	ldr	r3, [r7, #8]
}
 800493c:	bf00      	nop
 800493e:	3728      	adds	r7, #40	; 0x28
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	40010000 	.word	0x40010000
 8004948:	40023800 	.word	0x40023800
 800494c:	40021000 	.word	0x40021000
 8004950:	40001c00 	.word	0x40001c00

08004954 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b088      	sub	sp, #32
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800495c:	f107 030c 	add.w	r3, r7, #12
 8004960:	2200      	movs	r2, #0
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	605a      	str	r2, [r3, #4]
 8004966:	609a      	str	r2, [r3, #8]
 8004968:	60da      	str	r2, [r3, #12]
 800496a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a12      	ldr	r2, [pc, #72]	; (80049bc <HAL_TIM_MspPostInit+0x68>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d11e      	bne.n	80049b4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004976:	2300      	movs	r3, #0
 8004978:	60bb      	str	r3, [r7, #8]
 800497a:	4b11      	ldr	r3, [pc, #68]	; (80049c0 <HAL_TIM_MspPostInit+0x6c>)
 800497c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497e:	4a10      	ldr	r2, [pc, #64]	; (80049c0 <HAL_TIM_MspPostInit+0x6c>)
 8004980:	f043 0320 	orr.w	r3, r3, #32
 8004984:	6313      	str	r3, [r2, #48]	; 0x30
 8004986:	4b0e      	ldr	r3, [pc, #56]	; (80049c0 <HAL_TIM_MspPostInit+0x6c>)
 8004988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498a:	f003 0320 	and.w	r3, r3, #32
 800498e:	60bb      	str	r3, [r7, #8]
 8004990:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = LCD_TEXT_V0_Pin;
 8004992:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004996:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004998:	2302      	movs	r3, #2
 800499a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800499c:	2300      	movs	r3, #0
 800499e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049a0:	2300      	movs	r3, #0
 80049a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80049a4:	2309      	movs	r3, #9
 80049a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_TEXT_V0_GPIO_Port, &GPIO_InitStruct);
 80049a8:	f107 030c 	add.w	r3, r7, #12
 80049ac:	4619      	mov	r1, r3
 80049ae:	4805      	ldr	r0, [pc, #20]	; (80049c4 <HAL_TIM_MspPostInit+0x70>)
 80049b0:	f001 fe6c 	bl	800668c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 80049b4:	bf00      	nop
 80049b6:	3720      	adds	r7, #32
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	40001c00 	.word	0x40001c00
 80049c0:	40023800 	.word	0x40023800
 80049c4:	40021400 	.word	0x40021400

080049c8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80049cc:	4b11      	ldr	r3, [pc, #68]	; (8004a14 <MX_USART3_UART_Init+0x4c>)
 80049ce:	4a12      	ldr	r2, [pc, #72]	; (8004a18 <MX_USART3_UART_Init+0x50>)
 80049d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80049d2:	4b10      	ldr	r3, [pc, #64]	; (8004a14 <MX_USART3_UART_Init+0x4c>)
 80049d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80049d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80049da:	4b0e      	ldr	r3, [pc, #56]	; (8004a14 <MX_USART3_UART_Init+0x4c>)
 80049dc:	2200      	movs	r2, #0
 80049de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80049e0:	4b0c      	ldr	r3, [pc, #48]	; (8004a14 <MX_USART3_UART_Init+0x4c>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80049e6:	4b0b      	ldr	r3, [pc, #44]	; (8004a14 <MX_USART3_UART_Init+0x4c>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80049ec:	4b09      	ldr	r3, [pc, #36]	; (8004a14 <MX_USART3_UART_Init+0x4c>)
 80049ee:	220c      	movs	r2, #12
 80049f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049f2:	4b08      	ldr	r3, [pc, #32]	; (8004a14 <MX_USART3_UART_Init+0x4c>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80049f8:	4b06      	ldr	r3, [pc, #24]	; (8004a14 <MX_USART3_UART_Init+0x4c>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80049fe:	4805      	ldr	r0, [pc, #20]	; (8004a14 <MX_USART3_UART_Init+0x4c>)
 8004a00:	f007 f9d2 	bl	800bda8 <HAL_UART_Init>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004a0a:	f7fd fdb1 	bl	8002570 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004a0e:	bf00      	nop
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	20000cb8 	.word	0x20000cb8
 8004a18:	40004800 	.word	0x40004800

08004a1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b08a      	sub	sp, #40	; 0x28
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a24:	f107 0314 	add.w	r3, r7, #20
 8004a28:	2200      	movs	r2, #0
 8004a2a:	601a      	str	r2, [r3, #0]
 8004a2c:	605a      	str	r2, [r3, #4]
 8004a2e:	609a      	str	r2, [r3, #8]
 8004a30:	60da      	str	r2, [r3, #12]
 8004a32:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a19      	ldr	r2, [pc, #100]	; (8004aa0 <HAL_UART_MspInit+0x84>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d12c      	bne.n	8004a98 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004a3e:	2300      	movs	r3, #0
 8004a40:	613b      	str	r3, [r7, #16]
 8004a42:	4b18      	ldr	r3, [pc, #96]	; (8004aa4 <HAL_UART_MspInit+0x88>)
 8004a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a46:	4a17      	ldr	r2, [pc, #92]	; (8004aa4 <HAL_UART_MspInit+0x88>)
 8004a48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a4e:	4b15      	ldr	r3, [pc, #84]	; (8004aa4 <HAL_UART_MspInit+0x88>)
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a56:	613b      	str	r3, [r7, #16]
 8004a58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	60fb      	str	r3, [r7, #12]
 8004a5e:	4b11      	ldr	r3, [pc, #68]	; (8004aa4 <HAL_UART_MspInit+0x88>)
 8004a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a62:	4a10      	ldr	r2, [pc, #64]	; (8004aa4 <HAL_UART_MspInit+0x88>)
 8004a64:	f043 0308 	orr.w	r3, r3, #8
 8004a68:	6313      	str	r3, [r2, #48]	; 0x30
 8004a6a:	4b0e      	ldr	r3, [pc, #56]	; (8004aa4 <HAL_UART_MspInit+0x88>)
 8004a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6e:	f003 0308 	and.w	r3, r3, #8
 8004a72:	60fb      	str	r3, [r7, #12]
 8004a74:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8004a76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a80:	2300      	movs	r3, #0
 8004a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a84:	2303      	movs	r3, #3
 8004a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004a88:	2307      	movs	r3, #7
 8004a8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a8c:	f107 0314 	add.w	r3, r7, #20
 8004a90:	4619      	mov	r1, r3
 8004a92:	4805      	ldr	r0, [pc, #20]	; (8004aa8 <HAL_UART_MspInit+0x8c>)
 8004a94:	f001 fdfa 	bl	800668c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004a98:	bf00      	nop
 8004a9a:	3728      	adds	r7, #40	; 0x28
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	40004800 	.word	0x40004800
 8004aa4:	40023800 	.word	0x40023800
 8004aa8:	40020c00 	.word	0x40020c00

08004aac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004aac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ae4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004ab0:	480d      	ldr	r0, [pc, #52]	; (8004ae8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004ab2:	490e      	ldr	r1, [pc, #56]	; (8004aec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004ab4:	4a0e      	ldr	r2, [pc, #56]	; (8004af0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ab8:	e002      	b.n	8004ac0 <LoopCopyDataInit>

08004aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004abe:	3304      	adds	r3, #4

08004ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ac4:	d3f9      	bcc.n	8004aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ac6:	4a0b      	ldr	r2, [pc, #44]	; (8004af4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004ac8:	4c0b      	ldr	r4, [pc, #44]	; (8004af8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004acc:	e001      	b.n	8004ad2 <LoopFillZerobss>

08004ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ad0:	3204      	adds	r2, #4

08004ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ad4:	d3fb      	bcc.n	8004ace <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004ad6:	f7ff fbd7 	bl	8004288 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ada:	f013 f8c9 	bl	8017c70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004ade:	f7fd fbbb 	bl	8002258 <main>
  bx  lr    
 8004ae2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004ae4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8004ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004aec:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8004af0:	0801e350 	.word	0x0801e350
  ldr r2, =_sbss
 8004af4:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8004af8:	20009530 	.word	0x20009530

08004afc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004afc:	e7fe      	b.n	8004afc <ADC_IRQHandler>
	...

08004b00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004b04:	4b0e      	ldr	r3, [pc, #56]	; (8004b40 <HAL_Init+0x40>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a0d      	ldr	r2, [pc, #52]	; (8004b40 <HAL_Init+0x40>)
 8004b0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004b10:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <HAL_Init+0x40>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a0a      	ldr	r2, [pc, #40]	; (8004b40 <HAL_Init+0x40>)
 8004b16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b1c:	4b08      	ldr	r3, [pc, #32]	; (8004b40 <HAL_Init+0x40>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a07      	ldr	r2, [pc, #28]	; (8004b40 <HAL_Init+0x40>)
 8004b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b28:	2003      	movs	r0, #3
 8004b2a:	f000 f94f 	bl	8004dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b2e:	2000      	movs	r0, #0
 8004b30:	f000 f808 	bl	8004b44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b34:	f7ff fa70 	bl	8004018 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	40023c00 	.word	0x40023c00

08004b44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004b4c:	4b12      	ldr	r3, [pc, #72]	; (8004b98 <HAL_InitTick+0x54>)
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	4b12      	ldr	r3, [pc, #72]	; (8004b9c <HAL_InitTick+0x58>)
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	4619      	mov	r1, r3
 8004b56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 f996 	bl	8004e94 <HAL_SYSTICK_Config>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e00e      	b.n	8004b90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2b0f      	cmp	r3, #15
 8004b76:	d80a      	bhi.n	8004b8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b78:	2200      	movs	r2, #0
 8004b7a:	6879      	ldr	r1, [r7, #4]
 8004b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b80:	f000 f944 	bl	8004e0c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b84:	4a06      	ldr	r2, [pc, #24]	; (8004ba0 <HAL_InitTick+0x5c>)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	e000      	b.n	8004b90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3708      	adds	r7, #8
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	20000008 	.word	0x20000008
 8004b9c:	20000010 	.word	0x20000010
 8004ba0:	2000000c 	.word	0x2000000c

08004ba4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ba8:	4b06      	ldr	r3, [pc, #24]	; (8004bc4 <HAL_IncTick+0x20>)
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	461a      	mov	r2, r3
 8004bae:	4b06      	ldr	r3, [pc, #24]	; (8004bc8 <HAL_IncTick+0x24>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	4a04      	ldr	r2, [pc, #16]	; (8004bc8 <HAL_IncTick+0x24>)
 8004bb6:	6013      	str	r3, [r2, #0]
}
 8004bb8:	bf00      	nop
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	20000010 	.word	0x20000010
 8004bc8:	20000cfc 	.word	0x20000cfc

08004bcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	af00      	add	r7, sp, #0
  return uwTick;
 8004bd0:	4b03      	ldr	r3, [pc, #12]	; (8004be0 <HAL_GetTick+0x14>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	20000cfc 	.word	0x20000cfc

08004be4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004bec:	f7ff ffee 	bl	8004bcc <HAL_GetTick>
 8004bf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bfc:	d005      	beq.n	8004c0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004bfe:	4b0a      	ldr	r3, [pc, #40]	; (8004c28 <HAL_Delay+0x44>)
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	461a      	mov	r2, r3
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	4413      	add	r3, r2
 8004c08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004c0a:	bf00      	nop
 8004c0c:	f7ff ffde 	bl	8004bcc <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d8f7      	bhi.n	8004c0c <HAL_Delay+0x28>
  {
  }
}
 8004c1c:	bf00      	nop
 8004c1e:	bf00      	nop
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	20000010 	.word	0x20000010

08004c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f003 0307 	and.w	r3, r3, #7
 8004c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c3c:	4b0c      	ldr	r3, [pc, #48]	; (8004c70 <__NVIC_SetPriorityGrouping+0x44>)
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c48:	4013      	ands	r3, r2
 8004c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c5e:	4a04      	ldr	r2, [pc, #16]	; (8004c70 <__NVIC_SetPriorityGrouping+0x44>)
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	60d3      	str	r3, [r2, #12]
}
 8004c64:	bf00      	nop
 8004c66:	3714      	adds	r7, #20
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	e000ed00 	.word	0xe000ed00

08004c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c74:	b480      	push	{r7}
 8004c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c78:	4b04      	ldr	r3, [pc, #16]	; (8004c8c <__NVIC_GetPriorityGrouping+0x18>)
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	0a1b      	lsrs	r3, r3, #8
 8004c7e:	f003 0307 	and.w	r3, r3, #7
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr
 8004c8c:	e000ed00 	.word	0xe000ed00

08004c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	4603      	mov	r3, r0
 8004c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	db0b      	blt.n	8004cba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ca2:	79fb      	ldrb	r3, [r7, #7]
 8004ca4:	f003 021f 	and.w	r2, r3, #31
 8004ca8:	4907      	ldr	r1, [pc, #28]	; (8004cc8 <__NVIC_EnableIRQ+0x38>)
 8004caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cae:	095b      	lsrs	r3, r3, #5
 8004cb0:	2001      	movs	r0, #1
 8004cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8004cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004cba:	bf00      	nop
 8004cbc:	370c      	adds	r7, #12
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	e000e100 	.word	0xe000e100

08004ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	6039      	str	r1, [r7, #0]
 8004cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	db0a      	blt.n	8004cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	b2da      	uxtb	r2, r3
 8004ce4:	490c      	ldr	r1, [pc, #48]	; (8004d18 <__NVIC_SetPriority+0x4c>)
 8004ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cea:	0112      	lsls	r2, r2, #4
 8004cec:	b2d2      	uxtb	r2, r2
 8004cee:	440b      	add	r3, r1
 8004cf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004cf4:	e00a      	b.n	8004d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	b2da      	uxtb	r2, r3
 8004cfa:	4908      	ldr	r1, [pc, #32]	; (8004d1c <__NVIC_SetPriority+0x50>)
 8004cfc:	79fb      	ldrb	r3, [r7, #7]
 8004cfe:	f003 030f 	and.w	r3, r3, #15
 8004d02:	3b04      	subs	r3, #4
 8004d04:	0112      	lsls	r2, r2, #4
 8004d06:	b2d2      	uxtb	r2, r2
 8004d08:	440b      	add	r3, r1
 8004d0a:	761a      	strb	r2, [r3, #24]
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr
 8004d18:	e000e100 	.word	0xe000e100
 8004d1c:	e000ed00 	.word	0xe000ed00

08004d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b089      	sub	sp, #36	; 0x24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f003 0307 	and.w	r3, r3, #7
 8004d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	f1c3 0307 	rsb	r3, r3, #7
 8004d3a:	2b04      	cmp	r3, #4
 8004d3c:	bf28      	it	cs
 8004d3e:	2304      	movcs	r3, #4
 8004d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	3304      	adds	r3, #4
 8004d46:	2b06      	cmp	r3, #6
 8004d48:	d902      	bls.n	8004d50 <NVIC_EncodePriority+0x30>
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	3b03      	subs	r3, #3
 8004d4e:	e000      	b.n	8004d52 <NVIC_EncodePriority+0x32>
 8004d50:	2300      	movs	r3, #0
 8004d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d54:	f04f 32ff 	mov.w	r2, #4294967295
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5e:	43da      	mvns	r2, r3
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	401a      	ands	r2, r3
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d68:	f04f 31ff 	mov.w	r1, #4294967295
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d72:	43d9      	mvns	r1, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d78:	4313      	orrs	r3, r2
         );
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3724      	adds	r7, #36	; 0x24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
	...

08004d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	3b01      	subs	r3, #1
 8004d94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d98:	d301      	bcc.n	8004d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e00f      	b.n	8004dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d9e:	4a0a      	ldr	r2, [pc, #40]	; (8004dc8 <SysTick_Config+0x40>)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	3b01      	subs	r3, #1
 8004da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004da6:	210f      	movs	r1, #15
 8004da8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dac:	f7ff ff8e 	bl	8004ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004db0:	4b05      	ldr	r3, [pc, #20]	; (8004dc8 <SysTick_Config+0x40>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004db6:	4b04      	ldr	r3, [pc, #16]	; (8004dc8 <SysTick_Config+0x40>)
 8004db8:	2207      	movs	r2, #7
 8004dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3708      	adds	r7, #8
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	e000e010 	.word	0xe000e010

08004dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b07      	cmp	r3, #7
 8004dd8:	d00f      	beq.n	8004dfa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2b06      	cmp	r3, #6
 8004dde:	d00c      	beq.n	8004dfa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b05      	cmp	r3, #5
 8004de4:	d009      	beq.n	8004dfa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b04      	cmp	r3, #4
 8004dea:	d006      	beq.n	8004dfa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b03      	cmp	r3, #3
 8004df0:	d003      	beq.n	8004dfa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004df2:	2192      	movs	r1, #146	; 0x92
 8004df4:	4804      	ldr	r0, [pc, #16]	; (8004e08 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8004df6:	f7fd fbc0 	bl	800257a <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f7ff ff16 	bl	8004c2c <__NVIC_SetPriorityGrouping>
}
 8004e00:	bf00      	nop
 8004e02:	3708      	adds	r7, #8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	0801af44 	.word	0x0801af44

08004e0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b086      	sub	sp, #24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	4603      	mov	r3, r0
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
 8004e18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2b0f      	cmp	r3, #15
 8004e22:	d903      	bls.n	8004e2c <HAL_NVIC_SetPriority+0x20>
 8004e24:	21aa      	movs	r1, #170	; 0xaa
 8004e26:	480e      	ldr	r0, [pc, #56]	; (8004e60 <HAL_NVIC_SetPriority+0x54>)
 8004e28:	f7fd fba7 	bl	800257a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	2b0f      	cmp	r3, #15
 8004e30:	d903      	bls.n	8004e3a <HAL_NVIC_SetPriority+0x2e>
 8004e32:	21ab      	movs	r1, #171	; 0xab
 8004e34:	480a      	ldr	r0, [pc, #40]	; (8004e60 <HAL_NVIC_SetPriority+0x54>)
 8004e36:	f7fd fba0 	bl	800257a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004e3a:	f7ff ff1b 	bl	8004c74 <__NVIC_GetPriorityGrouping>
 8004e3e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	68b9      	ldr	r1, [r7, #8]
 8004e44:	6978      	ldr	r0, [r7, #20]
 8004e46:	f7ff ff6b 	bl	8004d20 <NVIC_EncodePriority>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e50:	4611      	mov	r1, r2
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7ff ff3a 	bl	8004ccc <__NVIC_SetPriority>
}
 8004e58:	bf00      	nop
 8004e5a:	3718      	adds	r7, #24
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	0801af44 	.word	0x0801af44

08004e64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8004e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	da03      	bge.n	8004e7e <HAL_NVIC_EnableIRQ+0x1a>
 8004e76:	21be      	movs	r1, #190	; 0xbe
 8004e78:	4805      	ldr	r0, [pc, #20]	; (8004e90 <HAL_NVIC_EnableIRQ+0x2c>)
 8004e7a:	f7fd fb7e 	bl	800257a <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7ff ff04 	bl	8004c90 <__NVIC_EnableIRQ>
}
 8004e88:	bf00      	nop
 8004e8a:	3708      	adds	r7, #8
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	0801af44 	.word	0x0801af44

08004e94 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f7ff ff73 	bl	8004d88 <SysTick_Config>
 8004ea2:	4603      	mov	r3, r0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3708      	adds	r7, #8
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b088      	sub	sp, #32
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	61fb      	str	r3, [r7, #28]
 8004eb8:	2300      	movs	r3, #0
 8004eba:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8004ebc:	4ba7      	ldr	r3, [pc, #668]	; (800515c <HAL_ETH_Init+0x2b0>)
 8004ebe:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d101      	bne.n	8004ed2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e1d1      	b.n	8005276 <HAL_ETH_Init+0x3ca>
  }
  
  /* Check parameters */
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d007      	beq.n	8004eea <HAL_ETH_Init+0x3e>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <HAL_ETH_Init+0x3e>
 8004ee2:	21e3      	movs	r1, #227	; 0xe3
 8004ee4:	489e      	ldr	r0, [pc, #632]	; (8005160 <HAL_ETH_Init+0x2b4>)
 8004ee6:	f7fd fb48 	bl	800257a <assert_failed>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d007      	beq.n	8004f02 <HAL_ETH_Init+0x56>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d003      	beq.n	8004f02 <HAL_ETH_Init+0x56>
 8004efa:	21e4      	movs	r1, #228	; 0xe4
 8004efc:	4898      	ldr	r0, [pc, #608]	; (8005160 <HAL_ETH_Init+0x2b4>)
 8004efe:	f7fd fb3c 	bl	800257a <assert_failed>
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	69db      	ldr	r3, [r3, #28]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d007      	beq.n	8004f1a <HAL_ETH_Init+0x6e>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d003      	beq.n	8004f1a <HAL_ETH_Init+0x6e>
 8004f12:	21e5      	movs	r1, #229	; 0xe5
 8004f14:	4892      	ldr	r0, [pc, #584]	; (8005160 <HAL_ETH_Init+0x2b4>)
 8004f16:	f7fd fb30 	bl	800257a <assert_failed>
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d008      	beq.n	8004f34 <HAL_ETH_Init+0x88>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f2a:	d003      	beq.n	8004f34 <HAL_ETH_Init+0x88>
 8004f2c:	21e6      	movs	r1, #230	; 0xe6
 8004f2e:	488c      	ldr	r0, [pc, #560]	; (8005160 <HAL_ETH_Init+0x2b4>)
 8004f30:	f7fd fb23 	bl	800257a <assert_failed>
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d106      	bne.n	8004f4e <HAL_ETH_Init+0xa2>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f007 fb47 	bl	800c5dc <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f4e:	2300      	movs	r3, #0
 8004f50:	60bb      	str	r3, [r7, #8]
 8004f52:	4b84      	ldr	r3, [pc, #528]	; (8005164 <HAL_ETH_Init+0x2b8>)
 8004f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f56:	4a83      	ldr	r2, [pc, #524]	; (8005164 <HAL_ETH_Init+0x2b8>)
 8004f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8004f5e:	4b81      	ldr	r3, [pc, #516]	; (8005164 <HAL_ETH_Init+0x2b8>)
 8004f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f66:	60bb      	str	r3, [r7, #8]
 8004f68:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004f6a:	4b7f      	ldr	r3, [pc, #508]	; (8005168 <HAL_ETH_Init+0x2bc>)
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	4a7e      	ldr	r2, [pc, #504]	; (8005168 <HAL_ETH_Init+0x2bc>)
 8004f70:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004f74:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004f76:	4b7c      	ldr	r3, [pc, #496]	; (8005168 <HAL_ETH_Init+0x2bc>)
 8004f78:	685a      	ldr	r2, [r3, #4]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
 8004f7e:	497a      	ldr	r1, [pc, #488]	; (8005168 <HAL_ETH_Init+0x2bc>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f042 0201 	orr.w	r2, r2, #1
 8004f96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f9a:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004f9c:	f7ff fe16 	bl	8004bcc <HAL_GetTick>
 8004fa0:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004fa2:	e011      	b.n	8004fc8 <HAL_ETH_Init+0x11c>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8004fa4:	f7ff fe12 	bl	8004bcc <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004fb2:	d909      	bls.n	8004fc8 <HAL_ETH_Init+0x11c>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2203      	movs	r2, #3
 8004fb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e156      	b.n	8005276 <HAL_ETH_Init+0x3ca>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1e4      	bne.n	8004fa4 <HAL_ETH_Init+0xf8>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	f023 031c 	bic.w	r3, r3, #28
 8004fe8:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004fea:	f002 fd07 	bl	80079fc <HAL_RCC_GetHCLKFreq>
 8004fee:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	4a5e      	ldr	r2, [pc, #376]	; (800516c <HAL_ETH_Init+0x2c0>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d908      	bls.n	800500a <HAL_ETH_Init+0x15e>
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	4a5d      	ldr	r2, [pc, #372]	; (8005170 <HAL_ETH_Init+0x2c4>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d804      	bhi.n	800500a <HAL_ETH_Init+0x15e>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	f043 0308 	orr.w	r3, r3, #8
 8005006:	61fb      	str	r3, [r7, #28]
 8005008:	e027      	b.n	800505a <HAL_ETH_Init+0x1ae>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	4a58      	ldr	r2, [pc, #352]	; (8005170 <HAL_ETH_Init+0x2c4>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d908      	bls.n	8005024 <HAL_ETH_Init+0x178>
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	4a51      	ldr	r2, [pc, #324]	; (800515c <HAL_ETH_Init+0x2b0>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d204      	bcs.n	8005024 <HAL_ETH_Init+0x178>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	f043 030c 	orr.w	r3, r3, #12
 8005020:	61fb      	str	r3, [r7, #28]
 8005022:	e01a      	b.n	800505a <HAL_ETH_Init+0x1ae>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	4a4d      	ldr	r2, [pc, #308]	; (800515c <HAL_ETH_Init+0x2b0>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d303      	bcc.n	8005034 <HAL_ETH_Init+0x188>
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	4a51      	ldr	r2, [pc, #324]	; (8005174 <HAL_ETH_Init+0x2c8>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d911      	bls.n	8005058 <HAL_ETH_Init+0x1ac>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	4a4f      	ldr	r2, [pc, #316]	; (8005174 <HAL_ETH_Init+0x2c8>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d908      	bls.n	800504e <HAL_ETH_Init+0x1a2>
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	4a4e      	ldr	r2, [pc, #312]	; (8005178 <HAL_ETH_Init+0x2cc>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d804      	bhi.n	800504e <HAL_ETH_Init+0x1a2>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	f043 0304 	orr.w	r3, r3, #4
 800504a:	61fb      	str	r3, [r7, #28]
 800504c:	e005      	b.n	800505a <HAL_ETH_Init+0x1ae>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	f043 0310 	orr.w	r3, r3, #16
 8005054:	61fb      	str	r3, [r7, #28]
 8005056:	e000      	b.n	800505a <HAL_ETH_Init+0x1ae>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8005058:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	69fa      	ldr	r2, [r7, #28]
 8005060:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8005062:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005066:	2100      	movs	r1, #0
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 fc49 	bl	8005900 <HAL_ETH_WritePHYRegister>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00b      	beq.n	800508c <HAL_ETH_Init+0x1e0>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8005078:	6939      	ldr	r1, [r7, #16]
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 ffd6 	bl	800602c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e0f4      	b.n	8005276 <HAL_ETH_Init+0x3ca>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800508c:	20ff      	movs	r0, #255	; 0xff
 800508e:	f7ff fda9 	bl	8004be4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	f000 80a6 	beq.w	80051e8 <HAL_ETH_Init+0x33c>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800509c:	f7ff fd96 	bl	8004bcc <HAL_GetTick>
 80050a0:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80050a2:	f107 030c 	add.w	r3, r7, #12
 80050a6:	461a      	mov	r2, r3
 80050a8:	2101      	movs	r1, #1
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 fbb4 	bl	8005818 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80050b0:	f7ff fd8c 	bl	8004bcc <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80050be:	4293      	cmp	r3, r2
 80050c0:	d90f      	bls.n	80050e2 <HAL_ETH_Init+0x236>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80050c6:	6939      	ldr	r1, [r7, #16]
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 ffaf 	bl	800602c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e0c9      	b.n	8005276 <HAL_ETH_Init+0x3ca>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f003 0304 	and.w	r3, r3, #4
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d0da      	beq.n	80050a2 <HAL_ETH_Init+0x1f6>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80050ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80050f0:	2100      	movs	r1, #0
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 fc04 	bl	8005900 <HAL_ETH_WritePHYRegister>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00b      	beq.n	8005116 <HAL_ETH_Init+0x26a>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8005102:	6939      	ldr	r1, [r7, #16]
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 ff91 	bl	800602c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8005112:	2301      	movs	r3, #1
 8005114:	e0af      	b.n	8005276 <HAL_ETH_Init+0x3ca>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8005116:	f7ff fd59 	bl	8004bcc <HAL_GetTick>
 800511a:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800511c:	f107 030c 	add.w	r3, r7, #12
 8005120:	461a      	mov	r2, r3
 8005122:	2101      	movs	r1, #1
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 fb77 	bl	8005818 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800512a:	f7ff fd4f 	bl	8004bcc <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	f241 3288 	movw	r2, #5000	; 0x1388
 8005138:	4293      	cmp	r3, r2
 800513a:	d91f      	bls.n	800517c <HAL_ETH_Init+0x2d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8005140:	6939      	ldr	r1, [r7, #16]
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 ff72 	bl	800602c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e08c      	b.n	8005276 <HAL_ETH_Init+0x3ca>
 800515c:	03938700 	.word	0x03938700
 8005160:	0801af80 	.word	0x0801af80
 8005164:	40023800 	.word	0x40023800
 8005168:	40013800 	.word	0x40013800
 800516c:	01312cff 	.word	0x01312cff
 8005170:	02160ebf 	.word	0x02160ebf
 8005174:	05f5e0ff 	.word	0x05f5e0ff
 8005178:	08f0d17f 	.word	0x08f0d17f
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f003 0320 	and.w	r3, r3, #32
 8005182:	2b00      	cmp	r3, #0
 8005184:	d0ca      	beq.n	800511c <HAL_ETH_Init+0x270>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8005186:	f107 030c 	add.w	r3, r7, #12
 800518a:	461a      	mov	r2, r3
 800518c:	2110      	movs	r1, #16
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 fb42 	bl	8005818 <HAL_ETH_ReadPHYRegister>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00b      	beq.n	80051b2 <HAL_ETH_Init+0x306>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800519e:	6939      	ldr	r1, [r7, #16]
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 ff43 	bl	800602c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80051ae:	2301      	movs	r3, #1
 80051b0:	e061      	b.n	8005276 <HAL_ETH_Init+0x3ca>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f003 0304 	and.w	r3, r3, #4
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d004      	beq.n	80051c6 <HAL_ETH_Init+0x31a>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051c2:	60da      	str	r2, [r3, #12]
 80051c4:	e002      	b.n	80051cc <HAL_ETH_Init+0x320>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f003 0302 	and.w	r3, r3, #2
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d003      	beq.n	80051de <HAL_ETH_Init+0x332>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	609a      	str	r2, [r3, #8]
 80051dc:	e042      	b.n	8005264 <HAL_ETH_Init+0x3b8>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80051e4:	609a      	str	r2, [r3, #8]
 80051e6:	e03d      	b.n	8005264 <HAL_ETH_Init+0x3b8>
    }
  }
  else /* AutoNegotiation Disable */
  {
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d009      	beq.n	8005204 <HAL_ETH_Init+0x358>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051f8:	d004      	beq.n	8005204 <HAL_ETH_Init+0x358>
 80051fa:	f240 11c9 	movw	r1, #457	; 0x1c9
 80051fe:	4820      	ldr	r0, [pc, #128]	; (8005280 <HAL_ETH_Init+0x3d4>)
 8005200:	f7fd f9bb 	bl	800257a <assert_failed>
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800520c:	d008      	beq.n	8005220 <HAL_ETH_Init+0x374>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d004      	beq.n	8005220 <HAL_ETH_Init+0x374>
 8005216:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 800521a:	4819      	ldr	r0, [pc, #100]	; (8005280 <HAL_ETH_Init+0x3d4>)
 800521c:	f7fd f9ad 	bl	800257a <assert_failed>
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	08db      	lsrs	r3, r3, #3
 8005226:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	085b      	lsrs	r3, r3, #1
 800522e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8005230:	4313      	orrs	r3, r2
 8005232:	b29b      	uxth	r3, r3
 8005234:	461a      	mov	r2, r3
 8005236:	2100      	movs	r1, #0
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 fb61 	bl	8005900 <HAL_ETH_WritePHYRegister>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00b      	beq.n	800525c <HAL_ETH_Init+0x3b0>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8005248:	6939      	ldr	r1, [r7, #16]
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 feee 	bl	800602c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e00c      	b.n	8005276 <HAL_ETH_Init+0x3ca>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800525c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8005260:	f7ff fcc0 	bl	8004be4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8005264:	6939      	ldr	r1, [r7, #16]
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 fee0 	bl	800602c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3720      	adds	r7, #32
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	0801af80 	.word	0x0801af80

08005284 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8005284:	b480      	push	{r7}
 8005286:	b087      	sub	sp, #28
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
 8005290:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8005292:	2300      	movs	r3, #0
 8005294:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800529c:	2b01      	cmp	r3, #1
 800529e:	d101      	bne.n	80052a4 <HAL_ETH_DMATxDescListInit+0x20>
 80052a0:	2302      	movs	r3, #2
 80052a2:	e052      	b.n	800534a <HAL_ETH_DMATxDescListInit+0xc6>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2202      	movs	r2, #2
 80052b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80052ba:	2300      	movs	r3, #0
 80052bc:	617b      	str	r3, [r7, #20]
 80052be:	e030      	b.n	8005322 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	015b      	lsls	r3, r3, #5
 80052c4:	68ba      	ldr	r2, [r7, #8]
 80052c6:	4413      	add	r3, r2
 80052c8:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80052d0:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80052d8:	fb02 f303 	mul.w	r3, r2, r3
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	4413      	add	r3, r2
 80052e0:	461a      	mov	r2, r3
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d105      	bne.n	80052fa <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	3b01      	subs	r3, #1
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	429a      	cmp	r2, r3
 8005302:	d208      	bcs.n	8005316 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	3301      	adds	r3, #1
 8005308:	015b      	lsls	r3, r3, #5
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	4413      	add	r3, r2
 800530e:	461a      	mov	r2, r3
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	60da      	str	r2, [r3, #12]
 8005314:	e002      	b.n	800531c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	3301      	adds	r3, #1
 8005320:	617b      	str	r3, [r7, #20]
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	429a      	cmp	r2, r3
 8005328:	d3ca      	bcc.n	80052c0 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005334:	3310      	adds	r3, #16
 8005336:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	371c      	adds	r7, #28
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8005356:	b480      	push	{r7}
 8005358:	b087      	sub	sp, #28
 800535a:	af00      	add	r7, sp, #0
 800535c:	60f8      	str	r0, [r7, #12]
 800535e:	60b9      	str	r1, [r7, #8]
 8005360:	607a      	str	r2, [r7, #4]
 8005362:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8005364:	2300      	movs	r3, #0
 8005366:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800536e:	2b01      	cmp	r3, #1
 8005370:	d101      	bne.n	8005376 <HAL_ETH_DMARxDescListInit+0x20>
 8005372:	2302      	movs	r3, #2
 8005374:	e056      	b.n	8005424 <HAL_ETH_DMARxDescListInit+0xce>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2202      	movs	r2, #2
 8005382:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	68ba      	ldr	r2, [r7, #8]
 800538a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 800538c:	2300      	movs	r3, #0
 800538e:	617b      	str	r3, [r7, #20]
 8005390:	e034      	b.n	80053fc <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	015b      	lsls	r3, r3, #5
 8005396:	68ba      	ldr	r2, [r7, #8]
 8005398:	4413      	add	r3, r2
 800539a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80053a2:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80053aa:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80053b2:	fb02 f303 	mul.w	r3, r2, r3
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	4413      	add	r3, r2
 80053ba:	461a      	mov	r2, r3
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d105      	bne.n	80053d4 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	3b01      	subs	r3, #1
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d208      	bcs.n	80053f0 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	3301      	adds	r3, #1
 80053e2:	015b      	lsls	r3, r3, #5
 80053e4:	68ba      	ldr	r2, [r7, #8]
 80053e6:	4413      	add	r3, r2
 80053e8:	461a      	mov	r2, r3
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	60da      	str	r2, [r3, #12]
 80053ee:	e002      	b.n	80053f6 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80053f0:	68ba      	ldr	r2, [r7, #8]
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	3301      	adds	r3, #1
 80053fa:	617b      	str	r3, [r7, #20]
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	429a      	cmp	r2, r3
 8005402:	d3c6      	bcc.n	8005392 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800540e:	330c      	adds	r3, #12
 8005410:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	371c      	adds	r7, #28
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8005430:	b480      	push	{r7}
 8005432:	b087      	sub	sp, #28
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800543a:	2300      	movs	r3, #0
 800543c:	617b      	str	r3, [r7, #20]
 800543e:	2300      	movs	r3, #0
 8005440:	60fb      	str	r3, [r7, #12]
 8005442:	2300      	movs	r3, #0
 8005444:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800544c:	2b01      	cmp	r3, #1
 800544e:	d101      	bne.n	8005454 <HAL_ETH_TransmitFrame+0x24>
 8005450:	2302      	movs	r3, #2
 8005452:	e0cd      	b.n	80055f0 <HAL_ETH_TransmitFrame+0x1c0>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2202      	movs	r2, #2
 8005460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d109      	bne.n	800547e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800547a:	2301      	movs	r3, #1
 800547c:	e0b8      	b.n	80055f0 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	da09      	bge.n	800549c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2212      	movs	r2, #18
 800548c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e0a9      	b.n	80055f0 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d915      	bls.n	80054d2 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	4a54      	ldr	r2, [pc, #336]	; (80055fc <HAL_ETH_TransmitFrame+0x1cc>)
 80054aa:	fba2 2303 	umull	r2, r3, r2, r3
 80054ae:	0a9b      	lsrs	r3, r3, #10
 80054b0:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80054b2:	683a      	ldr	r2, [r7, #0]
 80054b4:	4b51      	ldr	r3, [pc, #324]	; (80055fc <HAL_ETH_TransmitFrame+0x1cc>)
 80054b6:	fba3 1302 	umull	r1, r3, r3, r2
 80054ba:	0a9b      	lsrs	r3, r3, #10
 80054bc:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80054c0:	fb01 f303 	mul.w	r3, r1, r3
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d005      	beq.n	80054d6 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	3301      	adds	r3, #1
 80054ce:	617b      	str	r3, [r7, #20]
 80054d0:	e001      	b.n	80054d6 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80054d2:	2301      	movs	r3, #1
 80054d4:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d11c      	bne.n	8005516 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e6:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80054ea:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f0:	683a      	ldr	r2, [r7, #0]
 80054f2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80054f6:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005502:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005506:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	461a      	mov	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	62da      	str	r2, [r3, #44]	; 0x2c
 8005514:	e04b      	b.n	80055ae <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8005516:	2300      	movs	r3, #0
 8005518:	613b      	str	r3, [r7, #16]
 800551a:	e044      	b.n	80055a6 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005526:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800552a:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d107      	bne.n	8005542 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800553c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005540:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005546:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800554a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	3b01      	subs	r3, #1
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	429a      	cmp	r2, r3
 8005554:	d116      	bne.n	8005584 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005560:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005564:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	4a25      	ldr	r2, [pc, #148]	; (8005600 <HAL_ETH_TransmitFrame+0x1d0>)
 800556a:	fb02 f203 	mul.w	r2, r2, r3
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	4413      	add	r3, r2
 8005572:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005576:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8005582:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005592:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	461a      	mov	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	3301      	adds	r3, #1
 80055a4:	613b      	str	r3, [r7, #16]
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d3b6      	bcc.n	800551c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055b6:	3314      	adds	r3, #20
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0304 	and.w	r3, r3, #4
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00d      	beq.n	80055de <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055ca:	3314      	adds	r3, #20
 80055cc:	2204      	movs	r2, #4
 80055ce:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055d8:	3304      	adds	r3, #4
 80055da:	2200      	movs	r2, #0
 80055dc:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	371c      	adds	r7, #28
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr
 80055fc:	ac02b00b 	.word	0xac02b00b
 8005600:	fffffa0c 	.word	0xfffffa0c

08005604 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 800560c:	2300      	movs	r3, #0
 800560e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005616:	2b01      	cmp	r3, #1
 8005618:	d101      	bne.n	800561e <HAL_ETH_GetReceivedFrame+0x1a>
 800561a:	2302      	movs	r3, #2
 800561c:	e070      	b.n	8005700 <HAL_ETH_GetReceivedFrame+0xfc>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2202      	movs	r2, #2
 800562a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	db5a      	blt.n	80056ee <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005642:	2b00      	cmp	r3, #0
 8005644:	d030      	beq.n	80056a8 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564a:	1c5a      	adds	r2, r3, #1
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005654:	2b01      	cmp	r3, #1
 8005656:	d103      	bne.n	8005660 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	0c1b      	lsrs	r3, r3, #16
 8005670:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005674:	3b04      	subs	r3, #4
 8005676:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005682:	689a      	ldr	r2, [r3, #8]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	461a      	mov	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 80056a4:	2300      	movs	r3, #0
 80056a6:	e02b      	b.n	8005700 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d010      	beq.n	80056d8 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	461a      	mov	r2, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	629a      	str	r2, [r3, #40]	; 0x28
 80056d6:	e00a      	b.n	80056ee <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056dc:	1c5a      	adds	r2, r3, #1
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	461a      	mov	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
}
 8005700:	4618      	mov	r0, r3
 8005702:	3714      	adds	r7, #20
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800571c:	3314      	adds	r3, #20
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005724:	2b40      	cmp	r3, #64	; 0x40
 8005726:	d112      	bne.n	800574e <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 f860 	bl	80057ee <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005736:	3314      	adds	r3, #20
 8005738:	2240      	movs	r2, #64	; 0x40
 800573a:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800574c:	e01b      	b.n	8005786 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005756:	3314      	adds	r3, #20
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b01      	cmp	r3, #1
 8005760:	d111      	bne.n	8005786 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 f839 	bl	80057da <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005770:	3314      	adds	r3, #20
 8005772:	2201      	movs	r2, #1
 8005774:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800578e:	3314      	adds	r3, #20
 8005790:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005794:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800579e:	3314      	adds	r3, #20
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057aa:	d112      	bne.n	80057d2 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 f828 	bl	8005802 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057ba:	3314      	adds	r3, #20
 80057bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80057c0:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2201      	movs	r2, #1
 80057c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80057d2:	bf00      	nop
 80057d4:	3708      	adds	r7, #8
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80057da:	b480      	push	{r7}
 80057dc:	b083      	sub	sp, #12
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80057e2:	bf00      	nop
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr

080057ee <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80057ee:	b480      	push	{r7}
 80057f0:	b083      	sub	sp, #12
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80057f6:	bf00      	nop
 80057f8:	370c      	adds	r7, #12
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8005802:	b480      	push	{r7}
 8005804:	b083      	sub	sp, #12
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800580a:	bf00      	nop
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
	...

08005818 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b086      	sub	sp, #24
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	460b      	mov	r3, r1
 8005822:	607a      	str	r2, [r7, #4]
 8005824:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8005826:	2300      	movs	r3, #0
 8005828:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800582a:	2300      	movs	r3, #0
 800582c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	8a1b      	ldrh	r3, [r3, #16]
 8005832:	2b20      	cmp	r3, #32
 8005834:	d904      	bls.n	8005840 <HAL_ETH_ReadPHYRegister+0x28>
 8005836:	f240 5115 	movw	r1, #1301	; 0x515
 800583a:	4830      	ldr	r0, [pc, #192]	; (80058fc <HAL_ETH_ReadPHYRegister+0xe4>)
 800583c:	f7fc fe9d 	bl	800257a <assert_failed>
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005846:	b2db      	uxtb	r3, r3
 8005848:	2b82      	cmp	r3, #130	; 0x82
 800584a:	d101      	bne.n	8005850 <HAL_ETH_ReadPHYRegister+0x38>
  {
    return HAL_BUSY;
 800584c:	2302      	movs	r3, #2
 800584e:	e050      	b.n	80058f2 <HAL_ETH_ReadPHYRegister+0xda>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2282      	movs	r2, #130	; 0x82
 8005854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	f003 031c 	and.w	r3, r3, #28
 8005866:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8a1b      	ldrh	r3, [r3, #16]
 800586c:	02db      	lsls	r3, r3, #11
 800586e:	b29b      	uxth	r3, r3
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	4313      	orrs	r3, r2
 8005874:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8005876:	897b      	ldrh	r3, [r7, #10]
 8005878:	019b      	lsls	r3, r3, #6
 800587a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	4313      	orrs	r3, r2
 8005882:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	f023 0302 	bic.w	r3, r3, #2
 800588a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	f043 0301 	orr.w	r3, r3, #1
 8005892:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800589c:	f7ff f996 	bl	8004bcc <HAL_GetTick>
 80058a0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80058a2:	e015      	b.n	80058d0 <HAL_ETH_ReadPHYRegister+0xb8>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80058a4:	f7ff f992 	bl	8004bcc <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058b2:	d309      	bcc.n	80058c8 <HAL_ETH_ReadPHYRegister+0xb0>
    {
      heth->State= HAL_ETH_STATE_READY;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e014      	b.n	80058f2 <HAL_ETH_ReadPHYRegister+0xda>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	f003 0301 	and.w	r3, r3, #1
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1e4      	bne.n	80058a4 <HAL_ETH_ReadPHYRegister+0x8c>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	461a      	mov	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3718      	adds	r7, #24
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	0801af80 	.word	0x0801af80

08005900 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	460b      	mov	r3, r1
 800590a:	607a      	str	r2, [r7, #4]
 800590c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800590e:	2300      	movs	r3, #0
 8005910:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8005912:	2300      	movs	r3, #0
 8005914:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	8a1b      	ldrh	r3, [r3, #16]
 800591a:	2b20      	cmp	r3, #32
 800591c:	d904      	bls.n	8005928 <HAL_ETH_WritePHYRegister+0x28>
 800591e:	f240 515d 	movw	r1, #1373	; 0x55d
 8005922:	482f      	ldr	r0, [pc, #188]	; (80059e0 <HAL_ETH_WritePHYRegister+0xe0>)
 8005924:	f7fc fe29 	bl	800257a <assert_failed>
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800592e:	b2db      	uxtb	r3, r3
 8005930:	2b42      	cmp	r3, #66	; 0x42
 8005932:	d101      	bne.n	8005938 <HAL_ETH_WritePHYRegister+0x38>
  {
    return HAL_BUSY;
 8005934:	2302      	movs	r3, #2
 8005936:	e04e      	b.n	80059d6 <HAL_ETH_WritePHYRegister+0xd6>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2242      	movs	r2, #66	; 0x42
 800593c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	f003 031c 	and.w	r3, r3, #28
 800594e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	8a1b      	ldrh	r3, [r3, #16]
 8005954:	02db      	lsls	r3, r3, #11
 8005956:	b29b      	uxth	r3, r3
 8005958:	697a      	ldr	r2, [r7, #20]
 800595a:	4313      	orrs	r3, r2
 800595c:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800595e:	897b      	ldrh	r3, [r7, #10]
 8005960:	019b      	lsls	r3, r3, #6
 8005962:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	4313      	orrs	r3, r2
 800596a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f043 0302 	orr.w	r3, r3, #2
 8005972:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	f043 0301 	orr.w	r3, r3, #1
 800597a:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	b29a      	uxth	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800598e:	f7ff f91d 	bl	8004bcc <HAL_GetTick>
 8005992:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005994:	e015      	b.n	80059c2 <HAL_ETH_WritePHYRegister+0xc2>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8005996:	f7ff f919 	bl	8004bcc <HAL_GetTick>
 800599a:	4602      	mov	r2, r0
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059a4:	d309      	bcc.n	80059ba <HAL_ETH_WritePHYRegister+0xba>
    {
      heth->State= HAL_ETH_STATE_READY;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e00d      	b.n	80059d6 <HAL_ETH_WritePHYRegister+0xd6>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f003 0301 	and.w	r3, r3, #1
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1e4      	bne.n	8005996 <HAL_ETH_WritePHYRegister+0x96>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3718      	adds	r7, #24
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	0801af80 	.word	0x0801af80

080059e4 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d101      	bne.n	80059fa <HAL_ETH_Start+0x16>
 80059f6:	2302      	movs	r3, #2
 80059f8:	e01f      	b.n	8005a3a <HAL_ETH_Start+0x56>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2201      	movs	r2, #1
 80059fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2202      	movs	r2, #2
 8005a06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 fd20 	bl	8006450 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 fd57 	bl	80064c4 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 fdee 	bl	80065f8 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 fd8b 	bl	8006538 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 fdb8 	bl	8006598 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3708      	adds	r7, #8
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b082      	sub	sp, #8
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d101      	bne.n	8005a58 <HAL_ETH_Stop+0x16>
 8005a54:	2302      	movs	r3, #2
 8005a56:	e01f      	b.n	8005a98 <HAL_ETH_Stop+0x56>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2202      	movs	r2, #2
 8005a64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 fd7d 	bl	8006568 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fdaa 	bl	80065c8 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 fd42 	bl	80064fe <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 fdbc 	bl	80065f8 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 fd02 	bl	800648a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3708      	adds	r7, #8
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d101      	bne.n	8005abc <HAL_ETH_ConfigMAC+0x1c>
 8005ab8:	2302      	movs	r3, #2
 8005aba:	e2b3      	b.n	8006024 <HAL_ETH_ConfigMAC+0x584>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d009      	beq.n	8005ae8 <HAL_ETH_ConfigMAC+0x48>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005adc:	d004      	beq.n	8005ae8 <HAL_ETH_ConfigMAC+0x48>
 8005ade:	f240 610c 	movw	r1, #1548	; 0x60c
 8005ae2:	48a1      	ldr	r0, [pc, #644]	; (8005d68 <HAL_ETH_ConfigMAC+0x2c8>)
 8005ae4:	f7fc fd49 	bl	800257a <assert_failed>
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005af0:	d008      	beq.n	8005b04 <HAL_ETH_ConfigMAC+0x64>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d004      	beq.n	8005b04 <HAL_ETH_ConfigMAC+0x64>
 8005afa:	f240 610d 	movw	r1, #1549	; 0x60d
 8005afe:	489a      	ldr	r0, [pc, #616]	; (8005d68 <HAL_ETH_ConfigMAC+0x2c8>)
 8005b00:	f7fc fd3b 	bl	800257a <assert_failed>
  
  if (macconf != NULL)
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 8264 	beq.w	8005fd4 <HAL_ETH_ConfigMAC+0x534>
  {
    /* Check the parameters */
    assert_param(IS_ETH_WATCHDOG(macconf->Watchdog));
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d009      	beq.n	8005b28 <HAL_ETH_ConfigMAC+0x88>
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b1c:	d004      	beq.n	8005b28 <HAL_ETH_ConfigMAC+0x88>
 8005b1e:	f240 6112 	movw	r1, #1554	; 0x612
 8005b22:	4891      	ldr	r0, [pc, #580]	; (8005d68 <HAL_ETH_ConfigMAC+0x2c8>)
 8005b24:	f7fc fd29 	bl	800257a <assert_failed>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d009      	beq.n	8005b44 <HAL_ETH_ConfigMAC+0xa4>
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b38:	d004      	beq.n	8005b44 <HAL_ETH_ConfigMAC+0xa4>
 8005b3a:	f240 6113 	movw	r1, #1555	; 0x613
 8005b3e:	488a      	ldr	r0, [pc, #552]	; (8005d68 <HAL_ETH_ConfigMAC+0x2c8>)
 8005b40:	f7fc fd1b 	bl	800257a <assert_failed>
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d027      	beq.n	8005b9c <HAL_ETH_ConfigMAC+0xfc>
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b54:	d022      	beq.n	8005b9c <HAL_ETH_ConfigMAC+0xfc>
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b5e:	d01d      	beq.n	8005b9c <HAL_ETH_ConfigMAC+0xfc>
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005b68:	d018      	beq.n	8005b9c <HAL_ETH_ConfigMAC+0xfc>
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005b72:	d013      	beq.n	8005b9c <HAL_ETH_ConfigMAC+0xfc>
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8005b7c:	d00e      	beq.n	8005b9c <HAL_ETH_ConfigMAC+0xfc>
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005b86:	d009      	beq.n	8005b9c <HAL_ETH_ConfigMAC+0xfc>
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005b90:	d004      	beq.n	8005b9c <HAL_ETH_ConfigMAC+0xfc>
 8005b92:	f240 6114 	movw	r1, #1556	; 0x614
 8005b96:	4874      	ldr	r0, [pc, #464]	; (8005d68 <HAL_ETH_ConfigMAC+0x2c8>)
 8005b98:	f7fc fcef 	bl	800257a <assert_failed>
    assert_param(IS_ETH_CARRIER_SENSE(macconf->CarrierSense));
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d009      	beq.n	8005bb8 <HAL_ETH_ConfigMAC+0x118>
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bac:	d004      	beq.n	8005bb8 <HAL_ETH_ConfigMAC+0x118>
 8005bae:	f240 6115 	movw	r1, #1557	; 0x615
 8005bb2:	486d      	ldr	r0, [pc, #436]	; (8005d68 <HAL_ETH_ConfigMAC+0x2c8>)
 8005bb4:	f7fc fce1 	bl	800257a <assert_failed>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d009      	beq.n	8005bd4 <HAL_ETH_ConfigMAC+0x134>
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bc8:	d004      	beq.n	8005bd4 <HAL_ETH_ConfigMAC+0x134>
 8005bca:	f240 6116 	movw	r1, #1558	; 0x616
 8005bce:	4866      	ldr	r0, [pc, #408]	; (8005d68 <HAL_ETH_ConfigMAC+0x2c8>)
 8005bd0:	f7fc fcd3 	bl	800257a <assert_failed>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	695b      	ldr	r3, [r3, #20]
 8005bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bdc:	d008      	beq.n	8005bf0 <HAL_ETH_ConfigMAC+0x150>
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d004      	beq.n	8005bf0 <HAL_ETH_ConfigMAC+0x150>
 8005be6:	f240 6117 	movw	r1, #1559	; 0x617
 8005bea:	485f      	ldr	r0, [pc, #380]	; (8005d68 <HAL_ETH_ConfigMAC+0x2c8>)
 8005bec:	f7fc fcc5 	bl	800257a <assert_failed>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bf8:	d008      	beq.n	8005c0c <HAL_ETH_ConfigMAC+0x16c>
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d004      	beq.n	8005c0c <HAL_ETH_ConfigMAC+0x16c>
 8005c02:	f44f 61c3 	mov.w	r1, #1560	; 0x618
 8005c06:	4858      	ldr	r0, [pc, #352]	; (8005d68 <HAL_ETH_ConfigMAC+0x2c8>)
 8005c08:	f7fc fcb7 	bl	800257a <assert_failed>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	69db      	ldr	r3, [r3, #28]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d009      	beq.n	8005c28 <HAL_ETH_ConfigMAC+0x188>
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	69db      	ldr	r3, [r3, #28]
 8005c18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c1c:	d004      	beq.n	8005c28 <HAL_ETH_ConfigMAC+0x188>
 8005c1e:	f240 6119 	movw	r1, #1561	; 0x619
 8005c22:	4851      	ldr	r0, [pc, #324]	; (8005d68 <HAL_ETH_ConfigMAC+0x2c8>)
 8005c24:	f7fc fca9 	bl	800257a <assert_failed>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	6a1b      	ldr	r3, [r3, #32]
 8005c2c:	2b80      	cmp	r3, #128	; 0x80
 8005c2e:	d008      	beq.n	8005c42 <HAL_ETH_ConfigMAC+0x1a2>
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	6a1b      	ldr	r3, [r3, #32]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d004      	beq.n	8005c42 <HAL_ETH_ConfigMAC+0x1a2>
 8005c38:	f240 611a 	movw	r1, #1562	; 0x61a
 8005c3c:	484a      	ldr	r0, [pc, #296]	; (8005d68 <HAL_ETH_ConfigMAC+0x2c8>)
 8005c3e:	f7fc fc9c 	bl	800257a <assert_failed>
    assert_param(IS_ETH_BACKOFF_LIMIT(macconf->BackOffLimit));
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d010      	beq.n	8005c6c <HAL_ETH_ConfigMAC+0x1cc>
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4e:	2b20      	cmp	r3, #32
 8005c50:	d00c      	beq.n	8005c6c <HAL_ETH_ConfigMAC+0x1cc>
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c56:	2b40      	cmp	r3, #64	; 0x40
 8005c58:	d008      	beq.n	8005c6c <HAL_ETH_ConfigMAC+0x1cc>
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5e:	2b60      	cmp	r3, #96	; 0x60
 8005c60:	d004      	beq.n	8005c6c <HAL_ETH_ConfigMAC+0x1cc>
 8005c62:	f240 611b 	movw	r1, #1563	; 0x61b
 8005c66:	4840      	ldr	r0, [pc, #256]	; (8005d68 <HAL_ETH_ConfigMAC+0x2c8>)
 8005c68:	f7fc fc87 	bl	800257a <assert_failed>
    assert_param(IS_ETH_DEFERRAL_CHECK(macconf->DeferralCheck));
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c70:	2b10      	cmp	r3, #16
 8005c72:	d008      	beq.n	8005c86 <HAL_ETH_ConfigMAC+0x1e6>
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d004      	beq.n	8005c86 <HAL_ETH_ConfigMAC+0x1e6>
 8005c7c:	f240 611c 	movw	r1, #1564	; 0x61c
 8005c80:	4839      	ldr	r0, [pc, #228]	; (8005d68 <HAL_ETH_ConfigMAC+0x2c8>)
 8005c82:	f7fc fc7a 	bl	800257a <assert_failed>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c8e:	d008      	beq.n	8005ca2 <HAL_ETH_ConfigMAC+0x202>
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d004      	beq.n	8005ca2 <HAL_ETH_ConfigMAC+0x202>
 8005c98:	f240 611d 	movw	r1, #1565	; 0x61d
 8005c9c:	4832      	ldr	r0, [pc, #200]	; (8005d68 <HAL_ETH_ConfigMAC+0x2c8>)
 8005c9e:	f7fc fc6c 	bl	800257a <assert_failed>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005caa:	d00d      	beq.n	8005cc8 <HAL_ETH_ConfigMAC+0x228>
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cb4:	d008      	beq.n	8005cc8 <HAL_ETH_ConfigMAC+0x228>
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d004      	beq.n	8005cc8 <HAL_ETH_ConfigMAC+0x228>
 8005cbe:	f240 611e 	movw	r1, #1566	; 0x61e
 8005cc2:	4829      	ldr	r0, [pc, #164]	; (8005d68 <HAL_ETH_ConfigMAC+0x2c8>)
 8005cc4:	f7fc fc59 	bl	800257a <assert_failed>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ccc:	2b40      	cmp	r3, #64	; 0x40
 8005cce:	d00c      	beq.n	8005cea <HAL_ETH_ConfigMAC+0x24a>
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cd4:	2b80      	cmp	r3, #128	; 0x80
 8005cd6:	d008      	beq.n	8005cea <HAL_ETH_ConfigMAC+0x24a>
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cdc:	2bc0      	cmp	r3, #192	; 0xc0
 8005cde:	d004      	beq.n	8005cea <HAL_ETH_ConfigMAC+0x24a>
 8005ce0:	f240 611f 	movw	r1, #1567	; 0x61f
 8005ce4:	4820      	ldr	r0, [pc, #128]	; (8005d68 <HAL_ETH_ConfigMAC+0x2c8>)
 8005ce6:	f7fc fc48 	bl	800257a <assert_failed>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d008      	beq.n	8005d04 <HAL_ETH_ConfigMAC+0x264>
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf6:	2b20      	cmp	r3, #32
 8005cf8:	d004      	beq.n	8005d04 <HAL_ETH_ConfigMAC+0x264>
 8005cfa:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8005cfe:	481a      	ldr	r0, [pc, #104]	; (8005d68 <HAL_ETH_ConfigMAC+0x2c8>)
 8005d00:	f7fc fc3b 	bl	800257a <assert_failed>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d008      	beq.n	8005d1e <HAL_ETH_ConfigMAC+0x27e>
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d10:	2b08      	cmp	r3, #8
 8005d12:	d004      	beq.n	8005d1e <HAL_ETH_ConfigMAC+0x27e>
 8005d14:	f240 6121 	movw	r1, #1569	; 0x621
 8005d18:	4813      	ldr	r0, [pc, #76]	; (8005d68 <HAL_ETH_ConfigMAC+0x2c8>)
 8005d1a:	f7fc fc2e 	bl	800257a <assert_failed>
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d008      	beq.n	8005d38 <HAL_ETH_ConfigMAC+0x298>
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d004      	beq.n	8005d38 <HAL_ETH_ConfigMAC+0x298>
 8005d2e:	f240 6122 	movw	r1, #1570	; 0x622
 8005d32:	480d      	ldr	r0, [pc, #52]	; (8005d68 <HAL_ETH_ConfigMAC+0x2c8>)
 8005d34:	f7fc fc21 	bl	800257a <assert_failed>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d3c:	f240 4204 	movw	r2, #1028	; 0x404
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d013      	beq.n	8005d6c <HAL_ETH_ConfigMAC+0x2cc>
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d48:	2b04      	cmp	r3, #4
 8005d4a:	d00f      	beq.n	8005d6c <HAL_ETH_ConfigMAC+0x2cc>
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00b      	beq.n	8005d6c <HAL_ETH_ConfigMAC+0x2cc>
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d58:	2b10      	cmp	r3, #16
 8005d5a:	d007      	beq.n	8005d6c <HAL_ETH_ConfigMAC+0x2cc>
 8005d5c:	f240 6123 	movw	r1, #1571	; 0x623
 8005d60:	4801      	ldr	r0, [pc, #4]	; (8005d68 <HAL_ETH_ConfigMAC+0x2c8>)
 8005d62:	f7fc fc0a 	bl	800257a <assert_failed>
 8005d66:	e001      	b.n	8005d6c <HAL_ETH_ConfigMAC+0x2cc>
 8005d68:	0801af80 	.word	0x0801af80
    assert_param(IS_ETH_UNICAST_FRAMES_FILTER(macconf->UnicastFramesFilter));
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d70:	f240 4202 	movw	r2, #1026	; 0x402
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d00c      	beq.n	8005d92 <HAL_ETH_ConfigMAC+0x2f2>
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d008      	beq.n	8005d92 <HAL_ETH_ConfigMAC+0x2f2>
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d004      	beq.n	8005d92 <HAL_ETH_ConfigMAC+0x2f2>
 8005d88:	f240 6124 	movw	r1, #1572	; 0x624
 8005d8c:	488f      	ldr	r0, [pc, #572]	; (8005fcc <HAL_ETH_ConfigMAC+0x52c>)
 8005d8e:	f7fc fbf4 	bl	800257a <assert_failed>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d9a:	d304      	bcc.n	8005da6 <HAL_ETH_ConfigMAC+0x306>
 8005d9c:	f240 6125 	movw	r1, #1573	; 0x625
 8005da0:	488a      	ldr	r0, [pc, #552]	; (8005fcc <HAL_ETH_ConfigMAC+0x52c>)
 8005da2:	f7fc fbea 	bl	800257a <assert_failed>
    assert_param(IS_ETH_ZEROQUANTA_PAUSE(macconf->ZeroQuantaPause));
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d008      	beq.n	8005dc0 <HAL_ETH_ConfigMAC+0x320>
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005db2:	2b80      	cmp	r3, #128	; 0x80
 8005db4:	d004      	beq.n	8005dc0 <HAL_ETH_ConfigMAC+0x320>
 8005db6:	f240 6126 	movw	r1, #1574	; 0x626
 8005dba:	4884      	ldr	r0, [pc, #528]	; (8005fcc <HAL_ETH_ConfigMAC+0x52c>)
 8005dbc:	f7fc fbdd 	bl	800257a <assert_failed>
    assert_param(IS_ETH_PAUSE_LOW_THRESHOLD(macconf->PauseLowThreshold));
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d010      	beq.n	8005dea <HAL_ETH_ConfigMAC+0x34a>
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dcc:	2b10      	cmp	r3, #16
 8005dce:	d00c      	beq.n	8005dea <HAL_ETH_ConfigMAC+0x34a>
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dd4:	2b20      	cmp	r3, #32
 8005dd6:	d008      	beq.n	8005dea <HAL_ETH_ConfigMAC+0x34a>
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ddc:	2b30      	cmp	r3, #48	; 0x30
 8005dde:	d004      	beq.n	8005dea <HAL_ETH_ConfigMAC+0x34a>
 8005de0:	f240 6127 	movw	r1, #1575	; 0x627
 8005de4:	4879      	ldr	r0, [pc, #484]	; (8005fcc <HAL_ETH_ConfigMAC+0x52c>)
 8005de6:	f7fc fbc8 	bl	800257a <assert_failed>
    assert_param(IS_ETH_UNICAST_PAUSE_FRAME_DETECT(macconf->UnicastPauseFrameDetect));
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dee:	2b08      	cmp	r3, #8
 8005df0:	d008      	beq.n	8005e04 <HAL_ETH_ConfigMAC+0x364>
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d004      	beq.n	8005e04 <HAL_ETH_ConfigMAC+0x364>
 8005dfa:	f44f 61c5 	mov.w	r1, #1576	; 0x628
 8005dfe:	4873      	ldr	r0, [pc, #460]	; (8005fcc <HAL_ETH_ConfigMAC+0x52c>)
 8005e00:	f7fc fbbb 	bl	800257a <assert_failed>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e08:	2b04      	cmp	r3, #4
 8005e0a:	d008      	beq.n	8005e1e <HAL_ETH_ConfigMAC+0x37e>
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d004      	beq.n	8005e1e <HAL_ETH_ConfigMAC+0x37e>
 8005e14:	f240 6129 	movw	r1, #1577	; 0x629
 8005e18:	486c      	ldr	r0, [pc, #432]	; (8005fcc <HAL_ETH_ConfigMAC+0x52c>)
 8005e1a:	f7fc fbae 	bl	800257a <assert_failed>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d008      	beq.n	8005e38 <HAL_ETH_ConfigMAC+0x398>
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d004      	beq.n	8005e38 <HAL_ETH_ConfigMAC+0x398>
 8005e2e:	f240 612a 	movw	r1, #1578	; 0x62a
 8005e32:	4866      	ldr	r0, [pc, #408]	; (8005fcc <HAL_ETH_ConfigMAC+0x52c>)
 8005e34:	f7fc fba1 	bl	800257a <assert_failed>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e40:	d008      	beq.n	8005e54 <HAL_ETH_ConfigMAC+0x3b4>
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d004      	beq.n	8005e54 <HAL_ETH_ConfigMAC+0x3b4>
 8005e4a:	f240 612b 	movw	r1, #1579	; 0x62b
 8005e4e:	485f      	ldr	r0, [pc, #380]	; (8005fcc <HAL_ETH_ConfigMAC+0x52c>)
 8005e50:	f7fc fb93 	bl	800257a <assert_failed>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e5c:	d304      	bcc.n	8005e68 <HAL_ETH_ConfigMAC+0x3c8>
 8005e5e:	f240 612c 	movw	r1, #1580	; 0x62c
 8005e62:	485a      	ldr	r0, [pc, #360]	; (8005fcc <HAL_ETH_ConfigMAC+0x52c>)
 8005e64:	f7fc fb89 	bl	800257a <assert_failed>
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	4b57      	ldr	r3, [pc, #348]	; (8005fd0 <HAL_ETH_ConfigMAC+0x530>)
 8005e74:	4013      	ands	r3, r2
 8005e76:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8005e80:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8005e86:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8005e8c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8005e92:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8005e98:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8005e9e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8005ea4:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8005eaa:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8005eb0:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8005eb6:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8005ebc:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8005ec2:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005eda:	2001      	movs	r0, #1
 8005edc:	f7fe fe82 	bl	8004be4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8005ef0:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8005ef6:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8005efc:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8005f02:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8005f08:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8005f0e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8005f1a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8005f1c:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005f26:	2001      	movs	r0, #1
 8005f28:	f7fe fe5c 	bl	8004be4 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	683a      	ldr	r2, [r7, #0]
 8005f3a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005f3c:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	683a      	ldr	r2, [r7, #0]
 8005f44:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005f46:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	f64f 7341 	movw	r3, #65345	; 0xff41
 8005f56:	4013      	ands	r3, r2
 8005f58:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f5e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8005f64:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8005f6a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8005f70:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8005f76:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8005f7c:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	699b      	ldr	r3, [r3, #24]
 8005f92:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005f94:	2001      	movs	r0, #1
 8005f96:	f7fe fe25 	bl	8004be4 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	430a      	orrs	r2, r1
 8005fb0:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	69db      	ldr	r3, [r3, #28]
 8005fb8:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8005fba:	2001      	movs	r0, #1
 8005fbc:	f7fe fe12 	bl	8004be4 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	61da      	str	r2, [r3, #28]
 8005fc8:	e023      	b.n	8006012 <HAL_ETH_ConfigMAC+0x572>
 8005fca:	bf00      	nop
 8005fcc:	0801af80 	.word	0x0801af80
 8005fd0:	ff20810f 	.word	0xff20810f
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005fe2:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	689a      	ldr	r2, [r3, #8]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8006004:	2001      	movs	r0, #1
 8006006:	f7fe fded 	bl	8004be4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b0b0      	sub	sp, #192	; 0xc0
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8006036:	2300      	movs	r3, #0
 8006038:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d007      	beq.n	8006052 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006048:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006050:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8006052:	2300      	movs	r3, #0
 8006054:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8006056:	2300      	movs	r3, #0
 8006058:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800605a:	2300      	movs	r3, #0
 800605c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800605e:	2300      	movs	r3, #0
 8006060:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8006062:	2300      	movs	r3, #0
 8006064:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8006066:	2300      	movs	r3, #0
 8006068:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	69db      	ldr	r3, [r3, #28]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d103      	bne.n	800607a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8006072:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006076:	663b      	str	r3, [r7, #96]	; 0x60
 8006078:	e001      	b.n	800607e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800607a:	2300      	movs	r3, #0
 800607c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800607e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006082:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8006084:	2300      	movs	r3, #0
 8006086:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8006088:	2300      	movs	r3, #0
 800608a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800608c:	2300      	movs	r3, #0
 800608e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8006090:	2300      	movs	r3, #0
 8006092:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8006094:	2300      	movs	r3, #0
 8006096:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8006098:	2340      	movs	r3, #64	; 0x40
 800609a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800609c:	2300      	movs	r3, #0
 800609e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80060a2:	2300      	movs	r3, #0
 80060a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80060a8:	2300      	movs	r3, #0
 80060aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80060ae:	2300      	movs	r3, #0
 80060b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80060b4:	2300      	movs	r3, #0
 80060b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80060ba:	2300      	movs	r3, #0
 80060bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80060c0:	2300      	movs	r3, #0
 80060c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80060c6:	2300      	movs	r3, #0
 80060c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80060cc:	2380      	movs	r3, #128	; 0x80
 80060ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80060d2:	2300      	movs	r3, #0
 80060d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80060d8:	2300      	movs	r3, #0
 80060da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80060de:	2300      	movs	r3, #0
 80060e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80060e4:	2300      	movs	r3, #0
 80060e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80060ea:	2300      	movs	r3, #0
 80060ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80060f0:	2300      	movs	r3, #0
 80060f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8006100:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006104:	4bac      	ldr	r3, [pc, #688]	; (80063b8 <ETH_MACDMAConfig+0x38c>)
 8006106:	4013      	ands	r3, r2
 8006108:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800610c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800610e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8006110:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8006112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8006114:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8006116:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8006118:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800611e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8006120:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8006122:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8006124:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8006126:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800612c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800612e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8006130:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8006132:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8006134:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8006136:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8006138:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800613a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800613c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800613e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8006140:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8006142:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006146:	4313      	orrs	r3, r2
 8006148:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006154:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006160:	2001      	movs	r0, #1
 8006162:	f7fe fd3f 	bl	8004be4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800616e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8006170:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8006172:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8006174:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8006176:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8006178:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800617a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800617e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8006180:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8006184:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8006186:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800618a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800618c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8006190:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8006194:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800619c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800619e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80061aa:	2001      	movs	r0, #1
 80061ac:	f7fe fd1a 	bl	8004be4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80061b8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80061c2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80061cc:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80061d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80061dc:	f64f 7341 	movw	r3, #65345	; 0xff41
 80061e0:	4013      	ands	r3, r2
 80061e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80061e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061ea:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80061ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80061f0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80061f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80061f6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80061f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80061fc:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80061fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8006202:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8006204:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8006208:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800620a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800620e:	4313      	orrs	r3, r2
 8006210:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800621c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	699b      	ldr	r3, [r3, #24]
 8006224:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8006228:	2001      	movs	r0, #1
 800622a:	f7fe fcdb 	bl	8004be4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006236:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8006238:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800623c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	430a      	orrs	r2, r1
 8006246:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	69db      	ldr	r3, [r3, #28]
 800624e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8006252:	2001      	movs	r0, #1
 8006254:	f7fe fcc6 	bl	8004be4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006260:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8006262:	2300      	movs	r3, #0
 8006264:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8006266:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800626a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800626c:	2300      	movs	r3, #0
 800626e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8006270:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006274:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8006276:	2300      	movs	r3, #0
 8006278:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800627a:	2300      	movs	r3, #0
 800627c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800627e:	2300      	movs	r3, #0
 8006280:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8006282:	2300      	movs	r3, #0
 8006284:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8006286:	2304      	movs	r3, #4
 8006288:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800628a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800628e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8006290:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006294:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8006296:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800629a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800629c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80062a0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80062a2:	2380      	movs	r3, #128	; 0x80
 80062a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80062a6:	2300      	movs	r3, #0
 80062a8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80062aa:	2300      	movs	r3, #0
 80062ac:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062b6:	3318      	adds	r3, #24
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80062be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80062c2:	4b3e      	ldr	r3, [pc, #248]	; (80063bc <ETH_MACDMAConfig+0x390>)
 80062c4:	4013      	ands	r3, r2
 80062c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80062ca:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80062cc:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80062ce:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80062d0:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80062d2:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80062d4:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80062d6:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80062d8:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80062da:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80062dc:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80062de:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80062e0:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80062e2:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80062e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80062e6:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80062e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80062ea:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80062ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80062f0:	4313      	orrs	r3, r2
 80062f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062fe:	3318      	adds	r3, #24
 8006300:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006304:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800630e:	3318      	adds	r3, #24
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8006316:	2001      	movs	r0, #1
 8006318:	f7fe fc64 	bl	8004be4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006324:	3318      	adds	r3, #24
 8006326:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800632a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800632c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800632e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8006330:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8006332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8006334:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8006336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8006338:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800633a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800633c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800633e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006340:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8006342:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8006344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8006346:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006354:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8006364:	2001      	movs	r0, #1
 8006366:	f7fe fc3d 	bl	8004be4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006372:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006376:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	2b01      	cmp	r3, #1
 800637e:	d10f      	bne.n	80063a0 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006388:	331c      	adds	r3, #28
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006394:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800639c:	331c      	adds	r3, #28
 800639e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	461a      	mov	r2, r3
 80063a6:	2100      	movs	r1, #0
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 f809 	bl	80063c0 <ETH_MACAddressConfig>
}
 80063ae:	bf00      	nop
 80063b0:	37c0      	adds	r7, #192	; 0xc0
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	ff20810f 	.word	0xff20810f
 80063bc:	f8de3f23 	.word	0xf8de3f23

080063c0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b086      	sub	sp, #24
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	607a      	str	r2, [r7, #4]
  
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00d      	beq.n	80063ee <ETH_MACAddressConfig+0x2e>
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	2b08      	cmp	r3, #8
 80063d6:	d00a      	beq.n	80063ee <ETH_MACAddressConfig+0x2e>
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	2b10      	cmp	r3, #16
 80063dc:	d007      	beq.n	80063ee <ETH_MACAddressConfig+0x2e>
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	2b18      	cmp	r3, #24
 80063e2:	d004      	beq.n	80063ee <ETH_MACAddressConfig+0x2e>
 80063e4:	f640 013c 	movw	r1, #2108	; 0x83c
 80063e8:	4816      	ldr	r0, [pc, #88]	; (8006444 <ETH_MACAddressConfig+0x84>)
 80063ea:	f7fc f8c6 	bl	800257a <assert_failed>
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	3305      	adds	r3, #5
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	021b      	lsls	r3, r3, #8
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	3204      	adds	r2, #4
 80063fa:	7812      	ldrb	r2, [r2, #0]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	4b11      	ldr	r3, [pc, #68]	; (8006448 <ETH_MACAddressConfig+0x88>)
 8006404:	4413      	add	r3, r2
 8006406:	461a      	mov	r2, r3
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	3303      	adds	r3, #3
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	061a      	lsls	r2, r3, #24
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	3302      	adds	r3, #2
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	041b      	lsls	r3, r3, #16
 800641c:	431a      	orrs	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	3301      	adds	r3, #1
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	021b      	lsls	r3, r3, #8
 8006426:	4313      	orrs	r3, r2
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	7812      	ldrb	r2, [r2, #0]
 800642c:	4313      	orrs	r3, r2
 800642e:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	4b06      	ldr	r3, [pc, #24]	; (800644c <ETH_MACAddressConfig+0x8c>)
 8006434:	4413      	add	r3, r2
 8006436:	461a      	mov	r2, r3
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	6013      	str	r3, [r2, #0]
}
 800643c:	bf00      	nop
 800643e:	3718      	adds	r7, #24
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}
 8006444:	0801af80 	.word	0x0801af80
 8006448:	40028040 	.word	0x40028040
 800644c:	40028044 	.word	0x40028044

08006450 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8006458:	2300      	movs	r3, #0
 800645a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f042 0208 	orr.w	r2, r2, #8
 800646a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8006474:	2001      	movs	r0, #1
 8006476:	f000 f8e9 	bl	800664c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	601a      	str	r2, [r3, #0]
}
 8006482:	bf00      	nop
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800648a:	b580      	push	{r7, lr}
 800648c:	b084      	sub	sp, #16
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8006492:	2300      	movs	r3, #0
 8006494:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f022 0208 	bic.w	r2, r2, #8
 80064a4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80064ae:	2001      	movs	r0, #1
 80064b0:	f000 f8cc 	bl	800664c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	601a      	str	r2, [r3, #0]
}
 80064bc:	bf00      	nop
 80064be:	3710      	adds	r7, #16
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80064cc:	2300      	movs	r3, #0
 80064ce:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f042 0204 	orr.w	r2, r2, #4
 80064de:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80064e8:	2001      	movs	r0, #1
 80064ea:	f000 f8af 	bl	800664c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	601a      	str	r2, [r3, #0]
}
 80064f6:	bf00      	nop
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80064fe:	b580      	push	{r7, lr}
 8006500:	b084      	sub	sp, #16
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8006506:	2300      	movs	r3, #0
 8006508:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f022 0204 	bic.w	r2, r2, #4
 8006518:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8006522:	2001      	movs	r0, #1
 8006524:	f000 f892 	bl	800664c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	601a      	str	r2, [r3, #0]
}
 8006530:	bf00      	nop
 8006532:	3710      	adds	r7, #16
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006548:	3318      	adds	r3, #24
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006554:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006558:	3318      	adds	r3, #24
 800655a:	601a      	str	r2, [r3, #0]
}
 800655c:	bf00      	nop
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8006568:	b480      	push	{r7}
 800656a:	b083      	sub	sp, #12
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006578:	3318      	adds	r3, #24
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006588:	3318      	adds	r3, #24
 800658a:	601a      	str	r2, [r3, #0]
}
 800658c:	bf00      	nop
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065a8:	3318      	adds	r3, #24
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f042 0202 	orr.w	r2, r2, #2
 80065b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065b8:	3318      	adds	r3, #24
 80065ba:	601a      	str	r2, [r3, #0]
}
 80065bc:	bf00      	nop
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065d8:	3318      	adds	r3, #24
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f022 0202 	bic.w	r2, r2, #2
 80065e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065e8:	3318      	adds	r3, #24
 80065ea:	601a      	str	r2, [r3, #0]
}
 80065ec:	bf00      	nop
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8006600:	2300      	movs	r3, #0
 8006602:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800660c:	3318      	adds	r3, #24
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006618:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800661c:	3318      	adds	r3, #24
 800661e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006628:	3318      	adds	r3, #24
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800662e:	2001      	movs	r0, #1
 8006630:	f000 f80c 	bl	800664c <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800663e:	3318      	adds	r3, #24
 8006640:	601a      	str	r2, [r3, #0]
}
 8006642:	bf00      	nop
 8006644:	3710      	adds	r7, #16
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
	...

0800664c <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006654:	4b0b      	ldr	r3, [pc, #44]	; (8006684 <ETH_Delay+0x38>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a0b      	ldr	r2, [pc, #44]	; (8006688 <ETH_Delay+0x3c>)
 800665a:	fba2 2303 	umull	r2, r3, r2, r3
 800665e:	0a5b      	lsrs	r3, r3, #9
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	fb02 f303 	mul.w	r3, r2, r3
 8006666:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8006668:	bf00      	nop
  } 
  while (Delay --);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	1e5a      	subs	r2, r3, #1
 800666e:	60fa      	str	r2, [r7, #12]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d1f9      	bne.n	8006668 <ETH_Delay+0x1c>
}
 8006674:	bf00      	nop
 8006676:	bf00      	nop
 8006678:	3714      	adds	r7, #20
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	20000008 	.word	0x20000008
 8006688:	10624dd3 	.word	0x10624dd3

0800668c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b088      	sub	sp, #32
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006696:	2300      	movs	r3, #0
 8006698:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800669a:	2300      	movs	r3, #0
 800669c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800669e:	2300      	movs	r3, #0
 80066a0:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a3d      	ldr	r2, [pc, #244]	; (800679c <HAL_GPIO_Init+0x110>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d02b      	beq.n	8006702 <HAL_GPIO_Init+0x76>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a3c      	ldr	r2, [pc, #240]	; (80067a0 <HAL_GPIO_Init+0x114>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d027      	beq.n	8006702 <HAL_GPIO_Init+0x76>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a3b      	ldr	r2, [pc, #236]	; (80067a4 <HAL_GPIO_Init+0x118>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d023      	beq.n	8006702 <HAL_GPIO_Init+0x76>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a3a      	ldr	r2, [pc, #232]	; (80067a8 <HAL_GPIO_Init+0x11c>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d01f      	beq.n	8006702 <HAL_GPIO_Init+0x76>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a39      	ldr	r2, [pc, #228]	; (80067ac <HAL_GPIO_Init+0x120>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d01b      	beq.n	8006702 <HAL_GPIO_Init+0x76>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a38      	ldr	r2, [pc, #224]	; (80067b0 <HAL_GPIO_Init+0x124>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d017      	beq.n	8006702 <HAL_GPIO_Init+0x76>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a37      	ldr	r2, [pc, #220]	; (80067b4 <HAL_GPIO_Init+0x128>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d013      	beq.n	8006702 <HAL_GPIO_Init+0x76>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a36      	ldr	r2, [pc, #216]	; (80067b8 <HAL_GPIO_Init+0x12c>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d00f      	beq.n	8006702 <HAL_GPIO_Init+0x76>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a35      	ldr	r2, [pc, #212]	; (80067bc <HAL_GPIO_Init+0x130>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d00b      	beq.n	8006702 <HAL_GPIO_Init+0x76>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4a34      	ldr	r2, [pc, #208]	; (80067c0 <HAL_GPIO_Init+0x134>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d007      	beq.n	8006702 <HAL_GPIO_Init+0x76>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a33      	ldr	r2, [pc, #204]	; (80067c4 <HAL_GPIO_Init+0x138>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d003      	beq.n	8006702 <HAL_GPIO_Init+0x76>
 80066fa:	21ac      	movs	r1, #172	; 0xac
 80066fc:	4832      	ldr	r0, [pc, #200]	; (80067c8 <HAL_GPIO_Init+0x13c>)
 80066fe:	f7fb ff3c 	bl	800257a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	b29b      	uxth	r3, r3
 8006708:	2b00      	cmp	r3, #0
 800670a:	d005      	beq.n	8006718 <HAL_GPIO_Init+0x8c>
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	0c1b      	lsrs	r3, r3, #16
 8006712:	041b      	lsls	r3, r3, #16
 8006714:	2b00      	cmp	r3, #0
 8006716:	d003      	beq.n	8006720 <HAL_GPIO_Init+0x94>
 8006718:	21ad      	movs	r1, #173	; 0xad
 800671a:	482b      	ldr	r0, [pc, #172]	; (80067c8 <HAL_GPIO_Init+0x13c>)
 800671c:	f7fb ff2d 	bl	800257a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d035      	beq.n	8006794 <HAL_GPIO_Init+0x108>
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d031      	beq.n	8006794 <HAL_GPIO_Init+0x108>
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	2b11      	cmp	r3, #17
 8006736:	d02d      	beq.n	8006794 <HAL_GPIO_Init+0x108>
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	2b02      	cmp	r3, #2
 800673e:	d029      	beq.n	8006794 <HAL_GPIO_Init+0x108>
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	2b12      	cmp	r3, #18
 8006746:	d025      	beq.n	8006794 <HAL_GPIO_Init+0x108>
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8006750:	d020      	beq.n	8006794 <HAL_GPIO_Init+0x108>
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800675a:	d01b      	beq.n	8006794 <HAL_GPIO_Init+0x108>
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8006764:	d016      	beq.n	8006794 <HAL_GPIO_Init+0x108>
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 800676e:	d011      	beq.n	8006794 <HAL_GPIO_Init+0x108>
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8006778:	d00c      	beq.n	8006794 <HAL_GPIO_Init+0x108>
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8006782:	d007      	beq.n	8006794 <HAL_GPIO_Init+0x108>
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	2b03      	cmp	r3, #3
 800678a:	d003      	beq.n	8006794 <HAL_GPIO_Init+0x108>
 800678c:	21ae      	movs	r1, #174	; 0xae
 800678e:	480e      	ldr	r0, [pc, #56]	; (80067c8 <HAL_GPIO_Init+0x13c>)
 8006790:	f7fb fef3 	bl	800257a <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006794:	2300      	movs	r3, #0
 8006796:	61fb      	str	r3, [r7, #28]
 8006798:	e274      	b.n	8006c84 <HAL_GPIO_Init+0x5f8>
 800679a:	bf00      	nop
 800679c:	40020000 	.word	0x40020000
 80067a0:	40020400 	.word	0x40020400
 80067a4:	40020800 	.word	0x40020800
 80067a8:	40020c00 	.word	0x40020c00
 80067ac:	40021000 	.word	0x40021000
 80067b0:	40021400 	.word	0x40021400
 80067b4:	40021800 	.word	0x40021800
 80067b8:	40021c00 	.word	0x40021c00
 80067bc:	40022000 	.word	0x40022000
 80067c0:	40022400 	.word	0x40022400
 80067c4:	40022800 	.word	0x40022800
 80067c8:	0801afb8 	.word	0x0801afb8
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80067cc:	2201      	movs	r2, #1
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	fa02 f303 	lsl.w	r3, r2, r3
 80067d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	4013      	ands	r3, r2
 80067de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	f040 824a 	bne.w	8006c7e <HAL_GPIO_Init+0x5f2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	f003 0303 	and.w	r3, r3, #3
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d005      	beq.n	8006802 <HAL_GPIO_Init+0x176>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d144      	bne.n	800688c <HAL_GPIO_Init+0x200>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00f      	beq.n	800682a <HAL_GPIO_Init+0x19e>
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	2b01      	cmp	r3, #1
 8006810:	d00b      	beq.n	800682a <HAL_GPIO_Init+0x19e>
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	2b02      	cmp	r3, #2
 8006818:	d007      	beq.n	800682a <HAL_GPIO_Init+0x19e>
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	2b03      	cmp	r3, #3
 8006820:	d003      	beq.n	800682a <HAL_GPIO_Init+0x19e>
 8006822:	21c0      	movs	r1, #192	; 0xc0
 8006824:	4892      	ldr	r0, [pc, #584]	; (8006a70 <HAL_GPIO_Init+0x3e4>)
 8006826:	f7fb fea8 	bl	800257a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	005b      	lsls	r3, r3, #1
 8006834:	2203      	movs	r2, #3
 8006836:	fa02 f303 	lsl.w	r3, r2, r3
 800683a:	43db      	mvns	r3, r3
 800683c:	69ba      	ldr	r2, [r7, #24]
 800683e:	4013      	ands	r3, r2
 8006840:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	68da      	ldr	r2, [r3, #12]
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	005b      	lsls	r3, r3, #1
 800684a:	fa02 f303 	lsl.w	r3, r2, r3
 800684e:	69ba      	ldr	r2, [r7, #24]
 8006850:	4313      	orrs	r3, r2
 8006852:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	69ba      	ldr	r2, [r7, #24]
 8006858:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006860:	2201      	movs	r2, #1
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	fa02 f303 	lsl.w	r3, r2, r3
 8006868:	43db      	mvns	r3, r3
 800686a:	69ba      	ldr	r2, [r7, #24]
 800686c:	4013      	ands	r3, r2
 800686e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	091b      	lsrs	r3, r3, #4
 8006876:	f003 0201 	and.w	r2, r3, #1
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	fa02 f303 	lsl.w	r3, r2, r3
 8006880:	69ba      	ldr	r2, [r7, #24]
 8006882:	4313      	orrs	r3, r2
 8006884:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	69ba      	ldr	r2, [r7, #24]
 800688a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	f003 0303 	and.w	r3, r3, #3
 8006894:	2b03      	cmp	r3, #3
 8006896:	d027      	beq.n	80068e8 <HAL_GPIO_Init+0x25c>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00b      	beq.n	80068b8 <HAL_GPIO_Init+0x22c>
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d007      	beq.n	80068b8 <HAL_GPIO_Init+0x22c>
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d003      	beq.n	80068b8 <HAL_GPIO_Init+0x22c>
 80068b0:	21d1      	movs	r1, #209	; 0xd1
 80068b2:	486f      	ldr	r0, [pc, #444]	; (8006a70 <HAL_GPIO_Init+0x3e4>)
 80068b4:	f7fb fe61 	bl	800257a <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	005b      	lsls	r3, r3, #1
 80068c2:	2203      	movs	r2, #3
 80068c4:	fa02 f303 	lsl.w	r3, r2, r3
 80068c8:	43db      	mvns	r3, r3
 80068ca:	69ba      	ldr	r2, [r7, #24]
 80068cc:	4013      	ands	r3, r2
 80068ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	689a      	ldr	r2, [r3, #8]
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	005b      	lsls	r3, r3, #1
 80068d8:	fa02 f303 	lsl.w	r3, r2, r3
 80068dc:	69ba      	ldr	r2, [r7, #24]
 80068de:	4313      	orrs	r3, r2
 80068e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	69ba      	ldr	r2, [r7, #24]
 80068e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	f003 0303 	and.w	r3, r3, #3
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	f040 80e3 	bne.w	8006abc <HAL_GPIO_Init+0x430>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f000 80ba 	beq.w	8006a74 <HAL_GPIO_Init+0x3e8>
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	2b09      	cmp	r3, #9
 8006906:	f000 80b5 	beq.w	8006a74 <HAL_GPIO_Init+0x3e8>
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	2b00      	cmp	r3, #0
 8006910:	f000 80b0 	beq.w	8006a74 <HAL_GPIO_Init+0x3e8>
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	2b00      	cmp	r3, #0
 800691a:	f000 80ab 	beq.w	8006a74 <HAL_GPIO_Init+0x3e8>
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	2b00      	cmp	r3, #0
 8006924:	f000 80a6 	beq.w	8006a74 <HAL_GPIO_Init+0x3e8>
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	2b00      	cmp	r3, #0
 800692e:	f000 80a1 	beq.w	8006a74 <HAL_GPIO_Init+0x3e8>
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	2b01      	cmp	r3, #1
 8006938:	f000 809c 	beq.w	8006a74 <HAL_GPIO_Init+0x3e8>
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	2b01      	cmp	r3, #1
 8006942:	f000 8097 	beq.w	8006a74 <HAL_GPIO_Init+0x3e8>
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	2b02      	cmp	r3, #2
 800694c:	f000 8092 	beq.w	8006a74 <HAL_GPIO_Init+0x3e8>
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	2b02      	cmp	r3, #2
 8006956:	f000 808d 	beq.w	8006a74 <HAL_GPIO_Init+0x3e8>
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	2b02      	cmp	r3, #2
 8006960:	f000 8088 	beq.w	8006a74 <HAL_GPIO_Init+0x3e8>
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	2b03      	cmp	r3, #3
 800696a:	f000 8083 	beq.w	8006a74 <HAL_GPIO_Init+0x3e8>
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	2b04      	cmp	r3, #4
 8006974:	d07e      	beq.n	8006a74 <HAL_GPIO_Init+0x3e8>
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	2b04      	cmp	r3, #4
 800697c:	d07a      	beq.n	8006a74 <HAL_GPIO_Init+0x3e8>
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	2b04      	cmp	r3, #4
 8006984:	d076      	beq.n	8006a74 <HAL_GPIO_Init+0x3e8>
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	2b05      	cmp	r3, #5
 800698c:	d072      	beq.n	8006a74 <HAL_GPIO_Init+0x3e8>
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	2b05      	cmp	r3, #5
 8006994:	d06e      	beq.n	8006a74 <HAL_GPIO_Init+0x3e8>
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	2b09      	cmp	r3, #9
 800699c:	d06a      	beq.n	8006a74 <HAL_GPIO_Init+0x3e8>
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	2b06      	cmp	r3, #6
 80069a4:	d066      	beq.n	8006a74 <HAL_GPIO_Init+0x3e8>
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	2b09      	cmp	r3, #9
 80069ac:	d062      	beq.n	8006a74 <HAL_GPIO_Init+0x3e8>
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	2b07      	cmp	r3, #7
 80069b4:	d05e      	beq.n	8006a74 <HAL_GPIO_Init+0x3e8>
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	2b07      	cmp	r3, #7
 80069bc:	d05a      	beq.n	8006a74 <HAL_GPIO_Init+0x3e8>
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	2b07      	cmp	r3, #7
 80069c4:	d056      	beq.n	8006a74 <HAL_GPIO_Init+0x3e8>
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	2b08      	cmp	r3, #8
 80069cc:	d052      	beq.n	8006a74 <HAL_GPIO_Init+0x3e8>
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	2b08      	cmp	r3, #8
 80069d4:	d04e      	beq.n	8006a74 <HAL_GPIO_Init+0x3e8>
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	2b08      	cmp	r3, #8
 80069dc:	d04a      	beq.n	8006a74 <HAL_GPIO_Init+0x3e8>
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	2b09      	cmp	r3, #9
 80069e4:	d046      	beq.n	8006a74 <HAL_GPIO_Init+0x3e8>
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	2b09      	cmp	r3, #9
 80069ec:	d042      	beq.n	8006a74 <HAL_GPIO_Init+0x3e8>
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	2b0a      	cmp	r3, #10
 80069f4:	d03e      	beq.n	8006a74 <HAL_GPIO_Init+0x3e8>
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	2b0a      	cmp	r3, #10
 80069fc:	d03a      	beq.n	8006a74 <HAL_GPIO_Init+0x3e8>
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	2b0b      	cmp	r3, #11
 8006a04:	d036      	beq.n	8006a74 <HAL_GPIO_Init+0x3e8>
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	2b0c      	cmp	r3, #12
 8006a0c:	d032      	beq.n	8006a74 <HAL_GPIO_Init+0x3e8>
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	2b0c      	cmp	r3, #12
 8006a14:	d02e      	beq.n	8006a74 <HAL_GPIO_Init+0x3e8>
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	2b0d      	cmp	r3, #13
 8006a1c:	d02a      	beq.n	8006a74 <HAL_GPIO_Init+0x3e8>
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	2b0f      	cmp	r3, #15
 8006a24:	d026      	beq.n	8006a74 <HAL_GPIO_Init+0x3e8>
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	2b05      	cmp	r3, #5
 8006a2c:	d022      	beq.n	8006a74 <HAL_GPIO_Init+0x3e8>
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	2b05      	cmp	r3, #5
 8006a34:	d01e      	beq.n	8006a74 <HAL_GPIO_Init+0x3e8>
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	2b05      	cmp	r3, #5
 8006a3c:	d01a      	beq.n	8006a74 <HAL_GPIO_Init+0x3e8>
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	2b08      	cmp	r3, #8
 8006a44:	d016      	beq.n	8006a74 <HAL_GPIO_Init+0x3e8>
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	2b08      	cmp	r3, #8
 8006a4c:	d012      	beq.n	8006a74 <HAL_GPIO_Init+0x3e8>
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	2b0c      	cmp	r3, #12
 8006a54:	d00e      	beq.n	8006a74 <HAL_GPIO_Init+0x3e8>
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	2b06      	cmp	r3, #6
 8006a5c:	d00a      	beq.n	8006a74 <HAL_GPIO_Init+0x3e8>
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	2b0e      	cmp	r3, #14
 8006a64:	d006      	beq.n	8006a74 <HAL_GPIO_Init+0x3e8>
 8006a66:	21de      	movs	r1, #222	; 0xde
 8006a68:	4801      	ldr	r0, [pc, #4]	; (8006a70 <HAL_GPIO_Init+0x3e4>)
 8006a6a:	f7fb fd86 	bl	800257a <assert_failed>
 8006a6e:	e001      	b.n	8006a74 <HAL_GPIO_Init+0x3e8>
 8006a70:	0801afb8 	.word	0x0801afb8
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	08da      	lsrs	r2, r3, #3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	3208      	adds	r2, #8
 8006a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	f003 0307 	and.w	r3, r3, #7
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	220f      	movs	r2, #15
 8006a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a90:	43db      	mvns	r3, r3
 8006a92:	69ba      	ldr	r2, [r7, #24]
 8006a94:	4013      	ands	r3, r2
 8006a96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	691a      	ldr	r2, [r3, #16]
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	f003 0307 	and.w	r3, r3, #7
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa8:	69ba      	ldr	r2, [r7, #24]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	08da      	lsrs	r2, r3, #3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	3208      	adds	r2, #8
 8006ab6:	69b9      	ldr	r1, [r7, #24]
 8006ab8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	005b      	lsls	r3, r3, #1
 8006ac6:	2203      	movs	r2, #3
 8006ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8006acc:	43db      	mvns	r3, r3
 8006ace:	69ba      	ldr	r2, [r7, #24]
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	f003 0203 	and.w	r2, r3, #3
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	005b      	lsls	r3, r3, #1
 8006ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae4:	69ba      	ldr	r2, [r7, #24]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	69ba      	ldr	r2, [r7, #24]
 8006aee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f000 80c0 	beq.w	8006c7e <HAL_GPIO_Init+0x5f2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006afe:	2300      	movs	r3, #0
 8006b00:	60fb      	str	r3, [r7, #12]
 8006b02:	4b65      	ldr	r3, [pc, #404]	; (8006c98 <HAL_GPIO_Init+0x60c>)
 8006b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b06:	4a64      	ldr	r2, [pc, #400]	; (8006c98 <HAL_GPIO_Init+0x60c>)
 8006b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8006b0e:	4b62      	ldr	r3, [pc, #392]	; (8006c98 <HAL_GPIO_Init+0x60c>)
 8006b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b16:	60fb      	str	r3, [r7, #12]
 8006b18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b1a:	4a60      	ldr	r2, [pc, #384]	; (8006c9c <HAL_GPIO_Init+0x610>)
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	089b      	lsrs	r3, r3, #2
 8006b20:	3302      	adds	r3, #2
 8006b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	f003 0303 	and.w	r3, r3, #3
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	220f      	movs	r2, #15
 8006b32:	fa02 f303 	lsl.w	r3, r2, r3
 8006b36:	43db      	mvns	r3, r3
 8006b38:	69ba      	ldr	r2, [r7, #24]
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a57      	ldr	r2, [pc, #348]	; (8006ca0 <HAL_GPIO_Init+0x614>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d037      	beq.n	8006bb6 <HAL_GPIO_Init+0x52a>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a56      	ldr	r2, [pc, #344]	; (8006ca4 <HAL_GPIO_Init+0x618>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d031      	beq.n	8006bb2 <HAL_GPIO_Init+0x526>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a55      	ldr	r2, [pc, #340]	; (8006ca8 <HAL_GPIO_Init+0x61c>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d02b      	beq.n	8006bae <HAL_GPIO_Init+0x522>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a54      	ldr	r2, [pc, #336]	; (8006cac <HAL_GPIO_Init+0x620>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d025      	beq.n	8006baa <HAL_GPIO_Init+0x51e>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a53      	ldr	r2, [pc, #332]	; (8006cb0 <HAL_GPIO_Init+0x624>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d01f      	beq.n	8006ba6 <HAL_GPIO_Init+0x51a>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a52      	ldr	r2, [pc, #328]	; (8006cb4 <HAL_GPIO_Init+0x628>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d019      	beq.n	8006ba2 <HAL_GPIO_Init+0x516>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a51      	ldr	r2, [pc, #324]	; (8006cb8 <HAL_GPIO_Init+0x62c>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d013      	beq.n	8006b9e <HAL_GPIO_Init+0x512>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a50      	ldr	r2, [pc, #320]	; (8006cbc <HAL_GPIO_Init+0x630>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d00d      	beq.n	8006b9a <HAL_GPIO_Init+0x50e>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a4f      	ldr	r2, [pc, #316]	; (8006cc0 <HAL_GPIO_Init+0x634>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d007      	beq.n	8006b96 <HAL_GPIO_Init+0x50a>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a4e      	ldr	r2, [pc, #312]	; (8006cc4 <HAL_GPIO_Init+0x638>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d101      	bne.n	8006b92 <HAL_GPIO_Init+0x506>
 8006b8e:	2309      	movs	r3, #9
 8006b90:	e012      	b.n	8006bb8 <HAL_GPIO_Init+0x52c>
 8006b92:	230a      	movs	r3, #10
 8006b94:	e010      	b.n	8006bb8 <HAL_GPIO_Init+0x52c>
 8006b96:	2308      	movs	r3, #8
 8006b98:	e00e      	b.n	8006bb8 <HAL_GPIO_Init+0x52c>
 8006b9a:	2307      	movs	r3, #7
 8006b9c:	e00c      	b.n	8006bb8 <HAL_GPIO_Init+0x52c>
 8006b9e:	2306      	movs	r3, #6
 8006ba0:	e00a      	b.n	8006bb8 <HAL_GPIO_Init+0x52c>
 8006ba2:	2305      	movs	r3, #5
 8006ba4:	e008      	b.n	8006bb8 <HAL_GPIO_Init+0x52c>
 8006ba6:	2304      	movs	r3, #4
 8006ba8:	e006      	b.n	8006bb8 <HAL_GPIO_Init+0x52c>
 8006baa:	2303      	movs	r3, #3
 8006bac:	e004      	b.n	8006bb8 <HAL_GPIO_Init+0x52c>
 8006bae:	2302      	movs	r3, #2
 8006bb0:	e002      	b.n	8006bb8 <HAL_GPIO_Init+0x52c>
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e000      	b.n	8006bb8 <HAL_GPIO_Init+0x52c>
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	69fa      	ldr	r2, [r7, #28]
 8006bba:	f002 0203 	and.w	r2, r2, #3
 8006bbe:	0092      	lsls	r2, r2, #2
 8006bc0:	4093      	lsls	r3, r2
 8006bc2:	69ba      	ldr	r2, [r7, #24]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006bc8:	4934      	ldr	r1, [pc, #208]	; (8006c9c <HAL_GPIO_Init+0x610>)
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	089b      	lsrs	r3, r3, #2
 8006bce:	3302      	adds	r3, #2
 8006bd0:	69ba      	ldr	r2, [r7, #24]
 8006bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006bd6:	4b3c      	ldr	r3, [pc, #240]	; (8006cc8 <HAL_GPIO_Init+0x63c>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	43db      	mvns	r3, r3
 8006be0:	69ba      	ldr	r2, [r7, #24]
 8006be2:	4013      	ands	r3, r2
 8006be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d003      	beq.n	8006bfa <HAL_GPIO_Init+0x56e>
        {
          temp |= iocurrent;
 8006bf2:	69ba      	ldr	r2, [r7, #24]
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006bfa:	4a33      	ldr	r2, [pc, #204]	; (8006cc8 <HAL_GPIO_Init+0x63c>)
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006c00:	4b31      	ldr	r3, [pc, #196]	; (8006cc8 <HAL_GPIO_Init+0x63c>)
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	43db      	mvns	r3, r3
 8006c0a:	69ba      	ldr	r2, [r7, #24]
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d003      	beq.n	8006c24 <HAL_GPIO_Init+0x598>
        {
          temp |= iocurrent;
 8006c1c:	69ba      	ldr	r2, [r7, #24]
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006c24:	4a28      	ldr	r2, [pc, #160]	; (8006cc8 <HAL_GPIO_Init+0x63c>)
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006c2a:	4b27      	ldr	r3, [pc, #156]	; (8006cc8 <HAL_GPIO_Init+0x63c>)
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	43db      	mvns	r3, r3
 8006c34:	69ba      	ldr	r2, [r7, #24]
 8006c36:	4013      	ands	r3, r2
 8006c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d003      	beq.n	8006c4e <HAL_GPIO_Init+0x5c2>
        {
          temp |= iocurrent;
 8006c46:	69ba      	ldr	r2, [r7, #24]
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006c4e:	4a1e      	ldr	r2, [pc, #120]	; (8006cc8 <HAL_GPIO_Init+0x63c>)
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006c54:	4b1c      	ldr	r3, [pc, #112]	; (8006cc8 <HAL_GPIO_Init+0x63c>)
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	43db      	mvns	r3, r3
 8006c5e:	69ba      	ldr	r2, [r7, #24]
 8006c60:	4013      	ands	r3, r2
 8006c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d003      	beq.n	8006c78 <HAL_GPIO_Init+0x5ec>
        {
          temp |= iocurrent;
 8006c70:	69ba      	ldr	r2, [r7, #24]
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006c78:	4a13      	ldr	r2, [pc, #76]	; (8006cc8 <HAL_GPIO_Init+0x63c>)
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	3301      	adds	r3, #1
 8006c82:	61fb      	str	r3, [r7, #28]
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	2b0f      	cmp	r3, #15
 8006c88:	f67f ada0 	bls.w	80067cc <HAL_GPIO_Init+0x140>
      }
    }
  }
}
 8006c8c:	bf00      	nop
 8006c8e:	bf00      	nop
 8006c90:	3720      	adds	r7, #32
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	40023800 	.word	0x40023800
 8006c9c:	40013800 	.word	0x40013800
 8006ca0:	40020000 	.word	0x40020000
 8006ca4:	40020400 	.word	0x40020400
 8006ca8:	40020800 	.word	0x40020800
 8006cac:	40020c00 	.word	0x40020c00
 8006cb0:	40021000 	.word	0x40021000
 8006cb4:	40021400 	.word	0x40021400
 8006cb8:	40021800 	.word	0x40021800
 8006cbc:	40021c00 	.word	0x40021c00
 8006cc0:	40022000 	.word	0x40022000
 8006cc4:	40022400 	.word	0x40022400
 8006cc8:	40013c00 	.word	0x40013c00

08006ccc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8006cd8:	887b      	ldrh	r3, [r7, #2]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d004      	beq.n	8006ce8 <HAL_GPIO_ReadPin+0x1c>
 8006cde:	887b      	ldrh	r3, [r7, #2]
 8006ce0:	0c1b      	lsrs	r3, r3, #16
 8006ce2:	041b      	lsls	r3, r3, #16
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d004      	beq.n	8006cf2 <HAL_GPIO_ReadPin+0x26>
 8006ce8:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8006cec:	4809      	ldr	r0, [pc, #36]	; (8006d14 <HAL_GPIO_ReadPin+0x48>)
 8006cee:	f7fb fc44 	bl	800257a <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	691a      	ldr	r2, [r3, #16]
 8006cf6:	887b      	ldrh	r3, [r7, #2]
 8006cf8:	4013      	ands	r3, r2
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d002      	beq.n	8006d04 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	73fb      	strb	r3, [r7, #15]
 8006d02:	e001      	b.n	8006d08 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006d04:	2300      	movs	r3, #0
 8006d06:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3710      	adds	r7, #16
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	0801afb8 	.word	0x0801afb8

08006d18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	460b      	mov	r3, r1
 8006d22:	807b      	strh	r3, [r7, #2]
 8006d24:	4613      	mov	r3, r2
 8006d26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8006d28:	887b      	ldrh	r3, [r7, #2]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d004      	beq.n	8006d38 <HAL_GPIO_WritePin+0x20>
 8006d2e:	887b      	ldrh	r3, [r7, #2]
 8006d30:	0c1b      	lsrs	r3, r3, #16
 8006d32:	041b      	lsls	r3, r3, #16
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d004      	beq.n	8006d42 <HAL_GPIO_WritePin+0x2a>
 8006d38:	f240 119d 	movw	r1, #413	; 0x19d
 8006d3c:	480e      	ldr	r0, [pc, #56]	; (8006d78 <HAL_GPIO_WritePin+0x60>)
 8006d3e:	f7fb fc1c 	bl	800257a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8006d42:	787b      	ldrb	r3, [r7, #1]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d007      	beq.n	8006d58 <HAL_GPIO_WritePin+0x40>
 8006d48:	787b      	ldrb	r3, [r7, #1]
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d004      	beq.n	8006d58 <HAL_GPIO_WritePin+0x40>
 8006d4e:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8006d52:	4809      	ldr	r0, [pc, #36]	; (8006d78 <HAL_GPIO_WritePin+0x60>)
 8006d54:	f7fb fc11 	bl	800257a <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8006d58:	787b      	ldrb	r3, [r7, #1]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d003      	beq.n	8006d66 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006d5e:	887a      	ldrh	r2, [r7, #2]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006d64:	e003      	b.n	8006d6e <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006d66:	887b      	ldrh	r3, [r7, #2]
 8006d68:	041a      	lsls	r2, r3, #16
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	619a      	str	r2, [r3, #24]
}
 8006d6e:	bf00      	nop
 8006d70:	3708      	adds	r7, #8
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	0801afb8 	.word	0x0801afb8

08006d7c <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	460b      	mov	r3, r1
 8006d86:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8006d88:	887b      	ldrh	r3, [r7, #2]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d004      	beq.n	8006d98 <HAL_GPIO_TogglePin+0x1c>
 8006d8e:	887b      	ldrh	r3, [r7, #2]
 8006d90:	0c1b      	lsrs	r3, r3, #16
 8006d92:	041b      	lsls	r3, r3, #16
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d004      	beq.n	8006da2 <HAL_GPIO_TogglePin+0x26>
 8006d98:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8006d9c:	480a      	ldr	r0, [pc, #40]	; (8006dc8 <HAL_GPIO_TogglePin+0x4c>)
 8006d9e:	f7fb fbec 	bl	800257a <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	695b      	ldr	r3, [r3, #20]
 8006da6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006da8:	887a      	ldrh	r2, [r7, #2]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	4013      	ands	r3, r2
 8006dae:	041a      	lsls	r2, r3, #16
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	43d9      	mvns	r1, r3
 8006db4:	887b      	ldrh	r3, [r7, #2]
 8006db6:	400b      	ands	r3, r1
 8006db8:	431a      	orrs	r2, r3
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	619a      	str	r2, [r3, #24]
}
 8006dbe:	bf00      	nop
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	0801afb8 	.word	0x0801afb8

08006dcc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006dd6:	4b08      	ldr	r3, [pc, #32]	; (8006df8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006dd8:	695a      	ldr	r2, [r3, #20]
 8006dda:	88fb      	ldrh	r3, [r7, #6]
 8006ddc:	4013      	ands	r3, r2
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d006      	beq.n	8006df0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006de2:	4a05      	ldr	r2, [pc, #20]	; (8006df8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006de4:	88fb      	ldrh	r3, [r7, #6]
 8006de6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006de8:	88fb      	ldrh	r3, [r7, #6]
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7fb fbb0 	bl	8002550 <HAL_GPIO_EXTI_Callback>
  }
}
 8006df0:	bf00      	nop
 8006df2:	3708      	adds	r7, #8
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	40013c00 	.word	0x40013c00

08006dfc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006e02:	2300      	movs	r3, #0
 8006e04:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006e06:	2300      	movs	r3, #0
 8006e08:	603b      	str	r3, [r7, #0]
 8006e0a:	4b20      	ldr	r3, [pc, #128]	; (8006e8c <HAL_PWREx_EnableOverDrive+0x90>)
 8006e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0e:	4a1f      	ldr	r2, [pc, #124]	; (8006e8c <HAL_PWREx_EnableOverDrive+0x90>)
 8006e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e14:	6413      	str	r3, [r2, #64]	; 0x40
 8006e16:	4b1d      	ldr	r3, [pc, #116]	; (8006e8c <HAL_PWREx_EnableOverDrive+0x90>)
 8006e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e1e:	603b      	str	r3, [r7, #0]
 8006e20:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006e22:	4b1b      	ldr	r3, [pc, #108]	; (8006e90 <HAL_PWREx_EnableOverDrive+0x94>)
 8006e24:	2201      	movs	r2, #1
 8006e26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e28:	f7fd fed0 	bl	8004bcc <HAL_GetTick>
 8006e2c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006e2e:	e009      	b.n	8006e44 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006e30:	f7fd fecc 	bl	8004bcc <HAL_GetTick>
 8006e34:	4602      	mov	r2, r0
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e3e:	d901      	bls.n	8006e44 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006e40:	2303      	movs	r3, #3
 8006e42:	e01f      	b.n	8006e84 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006e44:	4b13      	ldr	r3, [pc, #76]	; (8006e94 <HAL_PWREx_EnableOverDrive+0x98>)
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e50:	d1ee      	bne.n	8006e30 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006e52:	4b11      	ldr	r3, [pc, #68]	; (8006e98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e54:	2201      	movs	r2, #1
 8006e56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e58:	f7fd feb8 	bl	8004bcc <HAL_GetTick>
 8006e5c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006e5e:	e009      	b.n	8006e74 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006e60:	f7fd feb4 	bl	8004bcc <HAL_GetTick>
 8006e64:	4602      	mov	r2, r0
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e6e:	d901      	bls.n	8006e74 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006e70:	2303      	movs	r3, #3
 8006e72:	e007      	b.n	8006e84 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006e74:	4b07      	ldr	r3, [pc, #28]	; (8006e94 <HAL_PWREx_EnableOverDrive+0x98>)
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e80:	d1ee      	bne.n	8006e60 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3708      	adds	r7, #8
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	40023800 	.word	0x40023800
 8006e90:	420e0040 	.word	0x420e0040
 8006e94:	40007000 	.word	0x40007000
 8006e98:	420e0044 	.word	0x420e0044

08006e9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b086      	sub	sp, #24
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d101      	bne.n	8006eae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e316      	b.n	80074dc <HAL_RCC_OscConfig+0x640>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2b0f      	cmp	r3, #15
 8006eb4:	d903      	bls.n	8006ebe <HAL_RCC_OscConfig+0x22>
 8006eb6:	21e8      	movs	r1, #232	; 0xe8
 8006eb8:	48a3      	ldr	r0, [pc, #652]	; (8007148 <HAL_RCC_OscConfig+0x2ac>)
 8006eba:	f7fb fb5e 	bl	800257a <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 0301 	and.w	r3, r3, #1
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f000 8088 	beq.w	8006fdc <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d00d      	beq.n	8006ef0 <HAL_RCC_OscConfig+0x54>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006edc:	d008      	beq.n	8006ef0 <HAL_RCC_OscConfig+0x54>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ee6:	d003      	beq.n	8006ef0 <HAL_RCC_OscConfig+0x54>
 8006ee8:	21ed      	movs	r1, #237	; 0xed
 8006eea:	4897      	ldr	r0, [pc, #604]	; (8007148 <HAL_RCC_OscConfig+0x2ac>)
 8006eec:	f7fb fb45 	bl	800257a <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ef0:	4b96      	ldr	r3, [pc, #600]	; (800714c <HAL_RCC_OscConfig+0x2b0>)
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	f003 030c 	and.w	r3, r3, #12
 8006ef8:	2b04      	cmp	r3, #4
 8006efa:	d00c      	beq.n	8006f16 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006efc:	4b93      	ldr	r3, [pc, #588]	; (800714c <HAL_RCC_OscConfig+0x2b0>)
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006f04:	2b08      	cmp	r3, #8
 8006f06:	d112      	bne.n	8006f2e <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f08:	4b90      	ldr	r3, [pc, #576]	; (800714c <HAL_RCC_OscConfig+0x2b0>)
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f14:	d10b      	bne.n	8006f2e <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f16:	4b8d      	ldr	r3, [pc, #564]	; (800714c <HAL_RCC_OscConfig+0x2b0>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d05b      	beq.n	8006fda <HAL_RCC_OscConfig+0x13e>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d157      	bne.n	8006fda <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e2d6      	b.n	80074dc <HAL_RCC_OscConfig+0x640>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f36:	d106      	bne.n	8006f46 <HAL_RCC_OscConfig+0xaa>
 8006f38:	4b84      	ldr	r3, [pc, #528]	; (800714c <HAL_RCC_OscConfig+0x2b0>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a83      	ldr	r2, [pc, #524]	; (800714c <HAL_RCC_OscConfig+0x2b0>)
 8006f3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f42:	6013      	str	r3, [r2, #0]
 8006f44:	e01d      	b.n	8006f82 <HAL_RCC_OscConfig+0xe6>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f4e:	d10c      	bne.n	8006f6a <HAL_RCC_OscConfig+0xce>
 8006f50:	4b7e      	ldr	r3, [pc, #504]	; (800714c <HAL_RCC_OscConfig+0x2b0>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a7d      	ldr	r2, [pc, #500]	; (800714c <HAL_RCC_OscConfig+0x2b0>)
 8006f56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f5a:	6013      	str	r3, [r2, #0]
 8006f5c:	4b7b      	ldr	r3, [pc, #492]	; (800714c <HAL_RCC_OscConfig+0x2b0>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a7a      	ldr	r2, [pc, #488]	; (800714c <HAL_RCC_OscConfig+0x2b0>)
 8006f62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f66:	6013      	str	r3, [r2, #0]
 8006f68:	e00b      	b.n	8006f82 <HAL_RCC_OscConfig+0xe6>
 8006f6a:	4b78      	ldr	r3, [pc, #480]	; (800714c <HAL_RCC_OscConfig+0x2b0>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a77      	ldr	r2, [pc, #476]	; (800714c <HAL_RCC_OscConfig+0x2b0>)
 8006f70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f74:	6013      	str	r3, [r2, #0]
 8006f76:	4b75      	ldr	r3, [pc, #468]	; (800714c <HAL_RCC_OscConfig+0x2b0>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a74      	ldr	r2, [pc, #464]	; (800714c <HAL_RCC_OscConfig+0x2b0>)
 8006f7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f80:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d013      	beq.n	8006fb2 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f8a:	f7fd fe1f 	bl	8004bcc <HAL_GetTick>
 8006f8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f90:	e008      	b.n	8006fa4 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f92:	f7fd fe1b 	bl	8004bcc <HAL_GetTick>
 8006f96:	4602      	mov	r2, r0
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	1ad3      	subs	r3, r2, r3
 8006f9c:	2b64      	cmp	r3, #100	; 0x64
 8006f9e:	d901      	bls.n	8006fa4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	e29b      	b.n	80074dc <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fa4:	4b69      	ldr	r3, [pc, #420]	; (800714c <HAL_RCC_OscConfig+0x2b0>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d0f0      	beq.n	8006f92 <HAL_RCC_OscConfig+0xf6>
 8006fb0:	e014      	b.n	8006fdc <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fb2:	f7fd fe0b 	bl	8004bcc <HAL_GetTick>
 8006fb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006fb8:	e008      	b.n	8006fcc <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006fba:	f7fd fe07 	bl	8004bcc <HAL_GetTick>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	1ad3      	subs	r3, r2, r3
 8006fc4:	2b64      	cmp	r3, #100	; 0x64
 8006fc6:	d901      	bls.n	8006fcc <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e287      	b.n	80074dc <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006fcc:	4b5f      	ldr	r3, [pc, #380]	; (800714c <HAL_RCC_OscConfig+0x2b0>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d1f0      	bne.n	8006fba <HAL_RCC_OscConfig+0x11e>
 8006fd8:	e000      	b.n	8006fdc <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fda:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 0302 	and.w	r3, r3, #2
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d079      	beq.n	80070dc <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d008      	beq.n	8007002 <HAL_RCC_OscConfig+0x166>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d004      	beq.n	8007002 <HAL_RCC_OscConfig+0x166>
 8006ff8:	f240 111f 	movw	r1, #287	; 0x11f
 8006ffc:	4852      	ldr	r0, [pc, #328]	; (8007148 <HAL_RCC_OscConfig+0x2ac>)
 8006ffe:	f7fb fabc 	bl	800257a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	2b1f      	cmp	r3, #31
 8007008:	d904      	bls.n	8007014 <HAL_RCC_OscConfig+0x178>
 800700a:	f44f 7190 	mov.w	r1, #288	; 0x120
 800700e:	484e      	ldr	r0, [pc, #312]	; (8007148 <HAL_RCC_OscConfig+0x2ac>)
 8007010:	f7fb fab3 	bl	800257a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007014:	4b4d      	ldr	r3, [pc, #308]	; (800714c <HAL_RCC_OscConfig+0x2b0>)
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	f003 030c 	and.w	r3, r3, #12
 800701c:	2b00      	cmp	r3, #0
 800701e:	d00b      	beq.n	8007038 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007020:	4b4a      	ldr	r3, [pc, #296]	; (800714c <HAL_RCC_OscConfig+0x2b0>)
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007028:	2b08      	cmp	r3, #8
 800702a:	d11c      	bne.n	8007066 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800702c:	4b47      	ldr	r3, [pc, #284]	; (800714c <HAL_RCC_OscConfig+0x2b0>)
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007034:	2b00      	cmp	r3, #0
 8007036:	d116      	bne.n	8007066 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007038:	4b44      	ldr	r3, [pc, #272]	; (800714c <HAL_RCC_OscConfig+0x2b0>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 0302 	and.w	r3, r3, #2
 8007040:	2b00      	cmp	r3, #0
 8007042:	d005      	beq.n	8007050 <HAL_RCC_OscConfig+0x1b4>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	2b01      	cmp	r3, #1
 800704a:	d001      	beq.n	8007050 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	e245      	b.n	80074dc <HAL_RCC_OscConfig+0x640>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007050:	4b3e      	ldr	r3, [pc, #248]	; (800714c <HAL_RCC_OscConfig+0x2b0>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	00db      	lsls	r3, r3, #3
 800705e:	493b      	ldr	r1, [pc, #236]	; (800714c <HAL_RCC_OscConfig+0x2b0>)
 8007060:	4313      	orrs	r3, r2
 8007062:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007064:	e03a      	b.n	80070dc <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d020      	beq.n	80070b0 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800706e:	4b38      	ldr	r3, [pc, #224]	; (8007150 <HAL_RCC_OscConfig+0x2b4>)
 8007070:	2201      	movs	r2, #1
 8007072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007074:	f7fd fdaa 	bl	8004bcc <HAL_GetTick>
 8007078:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800707a:	e008      	b.n	800708e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800707c:	f7fd fda6 	bl	8004bcc <HAL_GetTick>
 8007080:	4602      	mov	r2, r0
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	2b02      	cmp	r3, #2
 8007088:	d901      	bls.n	800708e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e226      	b.n	80074dc <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800708e:	4b2f      	ldr	r3, [pc, #188]	; (800714c <HAL_RCC_OscConfig+0x2b0>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 0302 	and.w	r3, r3, #2
 8007096:	2b00      	cmp	r3, #0
 8007098:	d0f0      	beq.n	800707c <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800709a:	4b2c      	ldr	r3, [pc, #176]	; (800714c <HAL_RCC_OscConfig+0x2b0>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	00db      	lsls	r3, r3, #3
 80070a8:	4928      	ldr	r1, [pc, #160]	; (800714c <HAL_RCC_OscConfig+0x2b0>)
 80070aa:	4313      	orrs	r3, r2
 80070ac:	600b      	str	r3, [r1, #0]
 80070ae:	e015      	b.n	80070dc <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070b0:	4b27      	ldr	r3, [pc, #156]	; (8007150 <HAL_RCC_OscConfig+0x2b4>)
 80070b2:	2200      	movs	r2, #0
 80070b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070b6:	f7fd fd89 	bl	8004bcc <HAL_GetTick>
 80070ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070bc:	e008      	b.n	80070d0 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80070be:	f7fd fd85 	bl	8004bcc <HAL_GetTick>
 80070c2:	4602      	mov	r2, r0
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	1ad3      	subs	r3, r2, r3
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d901      	bls.n	80070d0 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 80070cc:	2303      	movs	r3, #3
 80070ce:	e205      	b.n	80074dc <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070d0:	4b1e      	ldr	r3, [pc, #120]	; (800714c <HAL_RCC_OscConfig+0x2b0>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 0302 	and.w	r3, r3, #2
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d1f0      	bne.n	80070be <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 0308 	and.w	r3, r3, #8
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d046      	beq.n	8007176 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	695b      	ldr	r3, [r3, #20]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d008      	beq.n	8007102 <HAL_RCC_OscConfig+0x266>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	695b      	ldr	r3, [r3, #20]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d004      	beq.n	8007102 <HAL_RCC_OscConfig+0x266>
 80070f8:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80070fc:	4812      	ldr	r0, [pc, #72]	; (8007148 <HAL_RCC_OscConfig+0x2ac>)
 80070fe:	f7fb fa3c 	bl	800257a <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	695b      	ldr	r3, [r3, #20]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d016      	beq.n	8007138 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800710a:	4b12      	ldr	r3, [pc, #72]	; (8007154 <HAL_RCC_OscConfig+0x2b8>)
 800710c:	2201      	movs	r2, #1
 800710e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007110:	f7fd fd5c 	bl	8004bcc <HAL_GetTick>
 8007114:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007116:	e008      	b.n	800712a <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007118:	f7fd fd58 	bl	8004bcc <HAL_GetTick>
 800711c:	4602      	mov	r2, r0
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	1ad3      	subs	r3, r2, r3
 8007122:	2b02      	cmp	r3, #2
 8007124:	d901      	bls.n	800712a <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8007126:	2303      	movs	r3, #3
 8007128:	e1d8      	b.n	80074dc <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800712a:	4b08      	ldr	r3, [pc, #32]	; (800714c <HAL_RCC_OscConfig+0x2b0>)
 800712c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800712e:	f003 0302 	and.w	r3, r3, #2
 8007132:	2b00      	cmp	r3, #0
 8007134:	d0f0      	beq.n	8007118 <HAL_RCC_OscConfig+0x27c>
 8007136:	e01e      	b.n	8007176 <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007138:	4b06      	ldr	r3, [pc, #24]	; (8007154 <HAL_RCC_OscConfig+0x2b8>)
 800713a:	2200      	movs	r2, #0
 800713c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800713e:	f7fd fd45 	bl	8004bcc <HAL_GetTick>
 8007142:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007144:	e011      	b.n	800716a <HAL_RCC_OscConfig+0x2ce>
 8007146:	bf00      	nop
 8007148:	0801aff4 	.word	0x0801aff4
 800714c:	40023800 	.word	0x40023800
 8007150:	42470000 	.word	0x42470000
 8007154:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007158:	f7fd fd38 	bl	8004bcc <HAL_GetTick>
 800715c:	4602      	mov	r2, r0
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	2b02      	cmp	r3, #2
 8007164:	d901      	bls.n	800716a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007166:	2303      	movs	r3, #3
 8007168:	e1b8      	b.n	80074dc <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800716a:	4b97      	ldr	r3, [pc, #604]	; (80073c8 <HAL_RCC_OscConfig+0x52c>)
 800716c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800716e:	f003 0302 	and.w	r3, r3, #2
 8007172:	2b00      	cmp	r3, #0
 8007174:	d1f0      	bne.n	8007158 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 0304 	and.w	r3, r3, #4
 800717e:	2b00      	cmp	r3, #0
 8007180:	f000 80a8 	beq.w	80072d4 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007184:	2300      	movs	r3, #0
 8007186:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d00c      	beq.n	80071aa <HAL_RCC_OscConfig+0x30e>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d008      	beq.n	80071aa <HAL_RCC_OscConfig+0x30e>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	2b05      	cmp	r3, #5
 800719e:	d004      	beq.n	80071aa <HAL_RCC_OscConfig+0x30e>
 80071a0:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80071a4:	4889      	ldr	r0, [pc, #548]	; (80073cc <HAL_RCC_OscConfig+0x530>)
 80071a6:	f7fb f9e8 	bl	800257a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071aa:	4b87      	ldr	r3, [pc, #540]	; (80073c8 <HAL_RCC_OscConfig+0x52c>)
 80071ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d10f      	bne.n	80071d6 <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071b6:	2300      	movs	r3, #0
 80071b8:	60bb      	str	r3, [r7, #8]
 80071ba:	4b83      	ldr	r3, [pc, #524]	; (80073c8 <HAL_RCC_OscConfig+0x52c>)
 80071bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071be:	4a82      	ldr	r2, [pc, #520]	; (80073c8 <HAL_RCC_OscConfig+0x52c>)
 80071c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071c4:	6413      	str	r3, [r2, #64]	; 0x40
 80071c6:	4b80      	ldr	r3, [pc, #512]	; (80073c8 <HAL_RCC_OscConfig+0x52c>)
 80071c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071ce:	60bb      	str	r3, [r7, #8]
 80071d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071d2:	2301      	movs	r3, #1
 80071d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071d6:	4b7e      	ldr	r3, [pc, #504]	; (80073d0 <HAL_RCC_OscConfig+0x534>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d118      	bne.n	8007214 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80071e2:	4b7b      	ldr	r3, [pc, #492]	; (80073d0 <HAL_RCC_OscConfig+0x534>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a7a      	ldr	r2, [pc, #488]	; (80073d0 <HAL_RCC_OscConfig+0x534>)
 80071e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071ee:	f7fd fced 	bl	8004bcc <HAL_GetTick>
 80071f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071f4:	e008      	b.n	8007208 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071f6:	f7fd fce9 	bl	8004bcc <HAL_GetTick>
 80071fa:	4602      	mov	r2, r0
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	1ad3      	subs	r3, r2, r3
 8007200:	2b02      	cmp	r3, #2
 8007202:	d901      	bls.n	8007208 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 8007204:	2303      	movs	r3, #3
 8007206:	e169      	b.n	80074dc <HAL_RCC_OscConfig+0x640>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007208:	4b71      	ldr	r3, [pc, #452]	; (80073d0 <HAL_RCC_OscConfig+0x534>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007210:	2b00      	cmp	r3, #0
 8007212:	d0f0      	beq.n	80071f6 <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d106      	bne.n	800722a <HAL_RCC_OscConfig+0x38e>
 800721c:	4b6a      	ldr	r3, [pc, #424]	; (80073c8 <HAL_RCC_OscConfig+0x52c>)
 800721e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007220:	4a69      	ldr	r2, [pc, #420]	; (80073c8 <HAL_RCC_OscConfig+0x52c>)
 8007222:	f043 0301 	orr.w	r3, r3, #1
 8007226:	6713      	str	r3, [r2, #112]	; 0x70
 8007228:	e01c      	b.n	8007264 <HAL_RCC_OscConfig+0x3c8>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	2b05      	cmp	r3, #5
 8007230:	d10c      	bne.n	800724c <HAL_RCC_OscConfig+0x3b0>
 8007232:	4b65      	ldr	r3, [pc, #404]	; (80073c8 <HAL_RCC_OscConfig+0x52c>)
 8007234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007236:	4a64      	ldr	r2, [pc, #400]	; (80073c8 <HAL_RCC_OscConfig+0x52c>)
 8007238:	f043 0304 	orr.w	r3, r3, #4
 800723c:	6713      	str	r3, [r2, #112]	; 0x70
 800723e:	4b62      	ldr	r3, [pc, #392]	; (80073c8 <HAL_RCC_OscConfig+0x52c>)
 8007240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007242:	4a61      	ldr	r2, [pc, #388]	; (80073c8 <HAL_RCC_OscConfig+0x52c>)
 8007244:	f043 0301 	orr.w	r3, r3, #1
 8007248:	6713      	str	r3, [r2, #112]	; 0x70
 800724a:	e00b      	b.n	8007264 <HAL_RCC_OscConfig+0x3c8>
 800724c:	4b5e      	ldr	r3, [pc, #376]	; (80073c8 <HAL_RCC_OscConfig+0x52c>)
 800724e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007250:	4a5d      	ldr	r2, [pc, #372]	; (80073c8 <HAL_RCC_OscConfig+0x52c>)
 8007252:	f023 0301 	bic.w	r3, r3, #1
 8007256:	6713      	str	r3, [r2, #112]	; 0x70
 8007258:	4b5b      	ldr	r3, [pc, #364]	; (80073c8 <HAL_RCC_OscConfig+0x52c>)
 800725a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800725c:	4a5a      	ldr	r2, [pc, #360]	; (80073c8 <HAL_RCC_OscConfig+0x52c>)
 800725e:	f023 0304 	bic.w	r3, r3, #4
 8007262:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d015      	beq.n	8007298 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800726c:	f7fd fcae 	bl	8004bcc <HAL_GetTick>
 8007270:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007272:	e00a      	b.n	800728a <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007274:	f7fd fcaa 	bl	8004bcc <HAL_GetTick>
 8007278:	4602      	mov	r2, r0
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	1ad3      	subs	r3, r2, r3
 800727e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007282:	4293      	cmp	r3, r2
 8007284:	d901      	bls.n	800728a <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8007286:	2303      	movs	r3, #3
 8007288:	e128      	b.n	80074dc <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800728a:	4b4f      	ldr	r3, [pc, #316]	; (80073c8 <HAL_RCC_OscConfig+0x52c>)
 800728c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800728e:	f003 0302 	and.w	r3, r3, #2
 8007292:	2b00      	cmp	r3, #0
 8007294:	d0ee      	beq.n	8007274 <HAL_RCC_OscConfig+0x3d8>
 8007296:	e014      	b.n	80072c2 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007298:	f7fd fc98 	bl	8004bcc <HAL_GetTick>
 800729c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800729e:	e00a      	b.n	80072b6 <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072a0:	f7fd fc94 	bl	8004bcc <HAL_GetTick>
 80072a4:	4602      	mov	r2, r0
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	1ad3      	subs	r3, r2, r3
 80072aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d901      	bls.n	80072b6 <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 80072b2:	2303      	movs	r3, #3
 80072b4:	e112      	b.n	80074dc <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072b6:	4b44      	ldr	r3, [pc, #272]	; (80073c8 <HAL_RCC_OscConfig+0x52c>)
 80072b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ba:	f003 0302 	and.w	r3, r3, #2
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d1ee      	bne.n	80072a0 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80072c2:	7dfb      	ldrb	r3, [r7, #23]
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d105      	bne.n	80072d4 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072c8:	4b3f      	ldr	r3, [pc, #252]	; (80073c8 <HAL_RCC_OscConfig+0x52c>)
 80072ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072cc:	4a3e      	ldr	r2, [pc, #248]	; (80073c8 <HAL_RCC_OscConfig+0x52c>)
 80072ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	699b      	ldr	r3, [r3, #24]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d00c      	beq.n	80072f6 <HAL_RCC_OscConfig+0x45a>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	699b      	ldr	r3, [r3, #24]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d008      	beq.n	80072f6 <HAL_RCC_OscConfig+0x45a>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	699b      	ldr	r3, [r3, #24]
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	d004      	beq.n	80072f6 <HAL_RCC_OscConfig+0x45a>
 80072ec:	f240 11cf 	movw	r1, #463	; 0x1cf
 80072f0:	4836      	ldr	r0, [pc, #216]	; (80073cc <HAL_RCC_OscConfig+0x530>)
 80072f2:	f7fb f942 	bl	800257a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	f000 80ed 	beq.w	80074da <HAL_RCC_OscConfig+0x63e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007300:	4b31      	ldr	r3, [pc, #196]	; (80073c8 <HAL_RCC_OscConfig+0x52c>)
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	f003 030c 	and.w	r3, r3, #12
 8007308:	2b08      	cmp	r3, #8
 800730a:	f000 80ae 	beq.w	800746a <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	699b      	ldr	r3, [r3, #24]
 8007312:	2b02      	cmp	r3, #2
 8007314:	f040 8092 	bne.w	800743c <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	69db      	ldr	r3, [r3, #28]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d009      	beq.n	8007334 <HAL_RCC_OscConfig+0x498>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	69db      	ldr	r3, [r3, #28]
 8007324:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007328:	d004      	beq.n	8007334 <HAL_RCC_OscConfig+0x498>
 800732a:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800732e:	4827      	ldr	r0, [pc, #156]	; (80073cc <HAL_RCC_OscConfig+0x530>)
 8007330:	f7fb f923 	bl	800257a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a1b      	ldr	r3, [r3, #32]
 8007338:	2b3f      	cmp	r3, #63	; 0x3f
 800733a:	d904      	bls.n	8007346 <HAL_RCC_OscConfig+0x4aa>
 800733c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007340:	4822      	ldr	r0, [pc, #136]	; (80073cc <HAL_RCC_OscConfig+0x530>)
 8007342:	f7fb f91a 	bl	800257a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734a:	2b31      	cmp	r3, #49	; 0x31
 800734c:	d904      	bls.n	8007358 <HAL_RCC_OscConfig+0x4bc>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007352:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8007356:	d904      	bls.n	8007362 <HAL_RCC_OscConfig+0x4c6>
 8007358:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800735c:	481b      	ldr	r0, [pc, #108]	; (80073cc <HAL_RCC_OscConfig+0x530>)
 800735e:	f7fb f90c 	bl	800257a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007366:	2b02      	cmp	r3, #2
 8007368:	d010      	beq.n	800738c <HAL_RCC_OscConfig+0x4f0>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800736e:	2b04      	cmp	r3, #4
 8007370:	d00c      	beq.n	800738c <HAL_RCC_OscConfig+0x4f0>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007376:	2b06      	cmp	r3, #6
 8007378:	d008      	beq.n	800738c <HAL_RCC_OscConfig+0x4f0>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800737e:	2b08      	cmp	r3, #8
 8007380:	d004      	beq.n	800738c <HAL_RCC_OscConfig+0x4f0>
 8007382:	f240 11db 	movw	r1, #475	; 0x1db
 8007386:	4811      	ldr	r0, [pc, #68]	; (80073cc <HAL_RCC_OscConfig+0x530>)
 8007388:	f7fb f8f7 	bl	800257a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007390:	2b01      	cmp	r3, #1
 8007392:	d903      	bls.n	800739c <HAL_RCC_OscConfig+0x500>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007398:	2b0f      	cmp	r3, #15
 800739a:	d904      	bls.n	80073a6 <HAL_RCC_OscConfig+0x50a>
 800739c:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 80073a0:	480a      	ldr	r0, [pc, #40]	; (80073cc <HAL_RCC_OscConfig+0x530>)
 80073a2:	f7fb f8ea 	bl	800257a <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073a6:	4b0b      	ldr	r3, [pc, #44]	; (80073d4 <HAL_RCC_OscConfig+0x538>)
 80073a8:	2200      	movs	r2, #0
 80073aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073ac:	f7fd fc0e 	bl	8004bcc <HAL_GetTick>
 80073b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073b2:	e011      	b.n	80073d8 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073b4:	f7fd fc0a 	bl	8004bcc <HAL_GetTick>
 80073b8:	4602      	mov	r2, r0
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d90a      	bls.n	80073d8 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 80073c2:	2303      	movs	r3, #3
 80073c4:	e08a      	b.n	80074dc <HAL_RCC_OscConfig+0x640>
 80073c6:	bf00      	nop
 80073c8:	40023800 	.word	0x40023800
 80073cc:	0801aff4 	.word	0x0801aff4
 80073d0:	40007000 	.word	0x40007000
 80073d4:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073d8:	4b42      	ldr	r3, [pc, #264]	; (80074e4 <HAL_RCC_OscConfig+0x648>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d1e7      	bne.n	80073b4 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	69da      	ldr	r2, [r3, #28]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6a1b      	ldr	r3, [r3, #32]
 80073ec:	431a      	orrs	r2, r3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f2:	019b      	lsls	r3, r3, #6
 80073f4:	431a      	orrs	r2, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fa:	085b      	lsrs	r3, r3, #1
 80073fc:	3b01      	subs	r3, #1
 80073fe:	041b      	lsls	r3, r3, #16
 8007400:	431a      	orrs	r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007406:	061b      	lsls	r3, r3, #24
 8007408:	4936      	ldr	r1, [pc, #216]	; (80074e4 <HAL_RCC_OscConfig+0x648>)
 800740a:	4313      	orrs	r3, r2
 800740c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800740e:	4b36      	ldr	r3, [pc, #216]	; (80074e8 <HAL_RCC_OscConfig+0x64c>)
 8007410:	2201      	movs	r2, #1
 8007412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007414:	f7fd fbda 	bl	8004bcc <HAL_GetTick>
 8007418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800741a:	e008      	b.n	800742e <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800741c:	f7fd fbd6 	bl	8004bcc <HAL_GetTick>
 8007420:	4602      	mov	r2, r0
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	1ad3      	subs	r3, r2, r3
 8007426:	2b02      	cmp	r3, #2
 8007428:	d901      	bls.n	800742e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800742a:	2303      	movs	r3, #3
 800742c:	e056      	b.n	80074dc <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800742e:	4b2d      	ldr	r3, [pc, #180]	; (80074e4 <HAL_RCC_OscConfig+0x648>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007436:	2b00      	cmp	r3, #0
 8007438:	d0f0      	beq.n	800741c <HAL_RCC_OscConfig+0x580>
 800743a:	e04e      	b.n	80074da <HAL_RCC_OscConfig+0x63e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800743c:	4b2a      	ldr	r3, [pc, #168]	; (80074e8 <HAL_RCC_OscConfig+0x64c>)
 800743e:	2200      	movs	r2, #0
 8007440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007442:	f7fd fbc3 	bl	8004bcc <HAL_GetTick>
 8007446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007448:	e008      	b.n	800745c <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800744a:	f7fd fbbf 	bl	8004bcc <HAL_GetTick>
 800744e:	4602      	mov	r2, r0
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	1ad3      	subs	r3, r2, r3
 8007454:	2b02      	cmp	r3, #2
 8007456:	d901      	bls.n	800745c <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8007458:	2303      	movs	r3, #3
 800745a:	e03f      	b.n	80074dc <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800745c:	4b21      	ldr	r3, [pc, #132]	; (80074e4 <HAL_RCC_OscConfig+0x648>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007464:	2b00      	cmp	r3, #0
 8007466:	d1f0      	bne.n	800744a <HAL_RCC_OscConfig+0x5ae>
 8007468:	e037      	b.n	80074da <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	699b      	ldr	r3, [r3, #24]
 800746e:	2b01      	cmp	r3, #1
 8007470:	d101      	bne.n	8007476 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	e032      	b.n	80074dc <HAL_RCC_OscConfig+0x640>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007476:	4b1b      	ldr	r3, [pc, #108]	; (80074e4 <HAL_RCC_OscConfig+0x648>)
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	699b      	ldr	r3, [r3, #24]
 8007480:	2b01      	cmp	r3, #1
 8007482:	d028      	beq.n	80074d6 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800748e:	429a      	cmp	r2, r3
 8007490:	d121      	bne.n	80074d6 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800749c:	429a      	cmp	r2, r3
 800749e:	d11a      	bne.n	80074d6 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80074a6:	4013      	ands	r3, r2
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80074ac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d111      	bne.n	80074d6 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074bc:	085b      	lsrs	r3, r3, #1
 80074be:	3b01      	subs	r3, #1
 80074c0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d107      	bne.n	80074d6 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d001      	beq.n	80074da <HAL_RCC_OscConfig+0x63e>
#endif
        {
          return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e000      	b.n	80074dc <HAL_RCC_OscConfig+0x640>
        }
      }
    }
  }
  return HAL_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3718      	adds	r7, #24
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	40023800 	.word	0x40023800
 80074e8:	42470060 	.word	0x42470060

080074ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d101      	bne.n	8007500 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	e18c      	b.n	800781a <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d003      	beq.n	8007510 <HAL_RCC_ClockConfig+0x24>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2b0f      	cmp	r3, #15
 800750e:	d904      	bls.n	800751a <HAL_RCC_ClockConfig+0x2e>
 8007510:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8007514:	4887      	ldr	r0, [pc, #540]	; (8007734 <HAL_RCC_ClockConfig+0x248>)
 8007516:	f7fb f830 	bl	800257a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d031      	beq.n	8007584 <HAL_RCC_ClockConfig+0x98>
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	2b01      	cmp	r3, #1
 8007524:	d02e      	beq.n	8007584 <HAL_RCC_ClockConfig+0x98>
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	2b02      	cmp	r3, #2
 800752a:	d02b      	beq.n	8007584 <HAL_RCC_ClockConfig+0x98>
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	2b03      	cmp	r3, #3
 8007530:	d028      	beq.n	8007584 <HAL_RCC_ClockConfig+0x98>
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	2b04      	cmp	r3, #4
 8007536:	d025      	beq.n	8007584 <HAL_RCC_ClockConfig+0x98>
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	2b05      	cmp	r3, #5
 800753c:	d022      	beq.n	8007584 <HAL_RCC_ClockConfig+0x98>
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	2b06      	cmp	r3, #6
 8007542:	d01f      	beq.n	8007584 <HAL_RCC_ClockConfig+0x98>
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	2b07      	cmp	r3, #7
 8007548:	d01c      	beq.n	8007584 <HAL_RCC_ClockConfig+0x98>
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	2b08      	cmp	r3, #8
 800754e:	d019      	beq.n	8007584 <HAL_RCC_ClockConfig+0x98>
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	2b09      	cmp	r3, #9
 8007554:	d016      	beq.n	8007584 <HAL_RCC_ClockConfig+0x98>
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	2b0a      	cmp	r3, #10
 800755a:	d013      	beq.n	8007584 <HAL_RCC_ClockConfig+0x98>
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	2b0b      	cmp	r3, #11
 8007560:	d010      	beq.n	8007584 <HAL_RCC_ClockConfig+0x98>
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	2b0c      	cmp	r3, #12
 8007566:	d00d      	beq.n	8007584 <HAL_RCC_ClockConfig+0x98>
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	2b0d      	cmp	r3, #13
 800756c:	d00a      	beq.n	8007584 <HAL_RCC_ClockConfig+0x98>
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	2b0e      	cmp	r3, #14
 8007572:	d007      	beq.n	8007584 <HAL_RCC_ClockConfig+0x98>
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	2b0f      	cmp	r3, #15
 8007578:	d004      	beq.n	8007584 <HAL_RCC_ClockConfig+0x98>
 800757a:	f240 215d 	movw	r1, #605	; 0x25d
 800757e:	486d      	ldr	r0, [pc, #436]	; (8007734 <HAL_RCC_ClockConfig+0x248>)
 8007580:	f7fa fffb 	bl	800257a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007584:	4b6c      	ldr	r3, [pc, #432]	; (8007738 <HAL_RCC_ClockConfig+0x24c>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 030f 	and.w	r3, r3, #15
 800758c:	683a      	ldr	r2, [r7, #0]
 800758e:	429a      	cmp	r2, r3
 8007590:	d90c      	bls.n	80075ac <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007592:	4b69      	ldr	r3, [pc, #420]	; (8007738 <HAL_RCC_ClockConfig+0x24c>)
 8007594:	683a      	ldr	r2, [r7, #0]
 8007596:	b2d2      	uxtb	r2, r2
 8007598:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800759a:	4b67      	ldr	r3, [pc, #412]	; (8007738 <HAL_RCC_ClockConfig+0x24c>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f003 030f 	and.w	r3, r3, #15
 80075a2:	683a      	ldr	r2, [r7, #0]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d001      	beq.n	80075ac <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	e136      	b.n	800781a <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 0302 	and.w	r3, r3, #2
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d049      	beq.n	800764c <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 0304 	and.w	r3, r3, #4
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d005      	beq.n	80075d0 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80075c4:	4b5d      	ldr	r3, [pc, #372]	; (800773c <HAL_RCC_ClockConfig+0x250>)
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	4a5c      	ldr	r2, [pc, #368]	; (800773c <HAL_RCC_ClockConfig+0x250>)
 80075ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80075ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 0308 	and.w	r3, r3, #8
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d005      	beq.n	80075e8 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80075dc:	4b57      	ldr	r3, [pc, #348]	; (800773c <HAL_RCC_ClockConfig+0x250>)
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	4a56      	ldr	r2, [pc, #344]	; (800773c <HAL_RCC_ClockConfig+0x250>)
 80075e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80075e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d024      	beq.n	800763a <HAL_RCC_ClockConfig+0x14e>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	2b80      	cmp	r3, #128	; 0x80
 80075f6:	d020      	beq.n	800763a <HAL_RCC_ClockConfig+0x14e>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	2b90      	cmp	r3, #144	; 0x90
 80075fe:	d01c      	beq.n	800763a <HAL_RCC_ClockConfig+0x14e>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	2ba0      	cmp	r3, #160	; 0xa0
 8007606:	d018      	beq.n	800763a <HAL_RCC_ClockConfig+0x14e>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	2bb0      	cmp	r3, #176	; 0xb0
 800760e:	d014      	beq.n	800763a <HAL_RCC_ClockConfig+0x14e>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	2bc0      	cmp	r3, #192	; 0xc0
 8007616:	d010      	beq.n	800763a <HAL_RCC_ClockConfig+0x14e>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	2bd0      	cmp	r3, #208	; 0xd0
 800761e:	d00c      	beq.n	800763a <HAL_RCC_ClockConfig+0x14e>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	2be0      	cmp	r3, #224	; 0xe0
 8007626:	d008      	beq.n	800763a <HAL_RCC_ClockConfig+0x14e>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	2bf0      	cmp	r3, #240	; 0xf0
 800762e:	d004      	beq.n	800763a <HAL_RCC_ClockConfig+0x14e>
 8007630:	f44f 7120 	mov.w	r1, #640	; 0x280
 8007634:	483f      	ldr	r0, [pc, #252]	; (8007734 <HAL_RCC_ClockConfig+0x248>)
 8007636:	f7fa ffa0 	bl	800257a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800763a:	4b40      	ldr	r3, [pc, #256]	; (800773c <HAL_RCC_ClockConfig+0x250>)
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	493d      	ldr	r1, [pc, #244]	; (800773c <HAL_RCC_ClockConfig+0x250>)
 8007648:	4313      	orrs	r3, r2
 800764a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f003 0301 	and.w	r3, r3, #1
 8007654:	2b00      	cmp	r3, #0
 8007656:	d059      	beq.n	800770c <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d010      	beq.n	8007682 <HAL_RCC_ClockConfig+0x196>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	2b01      	cmp	r3, #1
 8007666:	d00c      	beq.n	8007682 <HAL_RCC_ClockConfig+0x196>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	2b02      	cmp	r3, #2
 800766e:	d008      	beq.n	8007682 <HAL_RCC_ClockConfig+0x196>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	2b03      	cmp	r3, #3
 8007676:	d004      	beq.n	8007682 <HAL_RCC_ClockConfig+0x196>
 8007678:	f240 2187 	movw	r1, #647	; 0x287
 800767c:	482d      	ldr	r0, [pc, #180]	; (8007734 <HAL_RCC_ClockConfig+0x248>)
 800767e:	f7fa ff7c 	bl	800257a <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	2b01      	cmp	r3, #1
 8007688:	d107      	bne.n	800769a <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800768a:	4b2c      	ldr	r3, [pc, #176]	; (800773c <HAL_RCC_ClockConfig+0x250>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007692:	2b00      	cmp	r3, #0
 8007694:	d119      	bne.n	80076ca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	e0bf      	b.n	800781a <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	2b02      	cmp	r3, #2
 80076a0:	d003      	beq.n	80076aa <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80076a6:	2b03      	cmp	r3, #3
 80076a8:	d107      	bne.n	80076ba <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076aa:	4b24      	ldr	r3, [pc, #144]	; (800773c <HAL_RCC_ClockConfig+0x250>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d109      	bne.n	80076ca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	e0af      	b.n	800781a <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076ba:	4b20      	ldr	r3, [pc, #128]	; (800773c <HAL_RCC_ClockConfig+0x250>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 0302 	and.w	r3, r3, #2
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d101      	bne.n	80076ca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e0a7      	b.n	800781a <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80076ca:	4b1c      	ldr	r3, [pc, #112]	; (800773c <HAL_RCC_ClockConfig+0x250>)
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	f023 0203 	bic.w	r2, r3, #3
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	4919      	ldr	r1, [pc, #100]	; (800773c <HAL_RCC_ClockConfig+0x250>)
 80076d8:	4313      	orrs	r3, r2
 80076da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80076dc:	f7fd fa76 	bl	8004bcc <HAL_GetTick>
 80076e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076e2:	e00a      	b.n	80076fa <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076e4:	f7fd fa72 	bl	8004bcc <HAL_GetTick>
 80076e8:	4602      	mov	r2, r0
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d901      	bls.n	80076fa <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 80076f6:	2303      	movs	r3, #3
 80076f8:	e08f      	b.n	800781a <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076fa:	4b10      	ldr	r3, [pc, #64]	; (800773c <HAL_RCC_ClockConfig+0x250>)
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	f003 020c 	and.w	r2, r3, #12
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	429a      	cmp	r2, r3
 800770a:	d1eb      	bne.n	80076e4 <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800770c:	4b0a      	ldr	r3, [pc, #40]	; (8007738 <HAL_RCC_ClockConfig+0x24c>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 030f 	and.w	r3, r3, #15
 8007714:	683a      	ldr	r2, [r7, #0]
 8007716:	429a      	cmp	r2, r3
 8007718:	d212      	bcs.n	8007740 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800771a:	4b07      	ldr	r3, [pc, #28]	; (8007738 <HAL_RCC_ClockConfig+0x24c>)
 800771c:	683a      	ldr	r2, [r7, #0]
 800771e:	b2d2      	uxtb	r2, r2
 8007720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007722:	4b05      	ldr	r3, [pc, #20]	; (8007738 <HAL_RCC_ClockConfig+0x24c>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 030f 	and.w	r3, r3, #15
 800772a:	683a      	ldr	r2, [r7, #0]
 800772c:	429a      	cmp	r2, r3
 800772e:	d007      	beq.n	8007740 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	e072      	b.n	800781a <HAL_RCC_ClockConfig+0x32e>
 8007734:	0801aff4 	.word	0x0801aff4
 8007738:	40023c00 	.word	0x40023c00
 800773c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 0304 	and.w	r3, r3, #4
 8007748:	2b00      	cmp	r3, #0
 800774a:	d025      	beq.n	8007798 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d018      	beq.n	8007786 <HAL_RCC_ClockConfig+0x29a>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800775c:	d013      	beq.n	8007786 <HAL_RCC_ClockConfig+0x29a>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007766:	d00e      	beq.n	8007786 <HAL_RCC_ClockConfig+0x29a>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8007770:	d009      	beq.n	8007786 <HAL_RCC_ClockConfig+0x29a>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800777a:	d004      	beq.n	8007786 <HAL_RCC_ClockConfig+0x29a>
 800777c:	f240 21c5 	movw	r1, #709	; 0x2c5
 8007780:	4828      	ldr	r0, [pc, #160]	; (8007824 <HAL_RCC_ClockConfig+0x338>)
 8007782:	f7fa fefa 	bl	800257a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007786:	4b28      	ldr	r3, [pc, #160]	; (8007828 <HAL_RCC_ClockConfig+0x33c>)
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	4925      	ldr	r1, [pc, #148]	; (8007828 <HAL_RCC_ClockConfig+0x33c>)
 8007794:	4313      	orrs	r3, r2
 8007796:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 0308 	and.w	r3, r3, #8
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d026      	beq.n	80077f2 <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	691b      	ldr	r3, [r3, #16]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d018      	beq.n	80077de <HAL_RCC_ClockConfig+0x2f2>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077b4:	d013      	beq.n	80077de <HAL_RCC_ClockConfig+0x2f2>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	691b      	ldr	r3, [r3, #16]
 80077ba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80077be:	d00e      	beq.n	80077de <HAL_RCC_ClockConfig+0x2f2>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80077c8:	d009      	beq.n	80077de <HAL_RCC_ClockConfig+0x2f2>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80077d2:	d004      	beq.n	80077de <HAL_RCC_ClockConfig+0x2f2>
 80077d4:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80077d8:	4812      	ldr	r0, [pc, #72]	; (8007824 <HAL_RCC_ClockConfig+0x338>)
 80077da:	f7fa fece 	bl	800257a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80077de:	4b12      	ldr	r3, [pc, #72]	; (8007828 <HAL_RCC_ClockConfig+0x33c>)
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	00db      	lsls	r3, r3, #3
 80077ec:	490e      	ldr	r1, [pc, #56]	; (8007828 <HAL_RCC_ClockConfig+0x33c>)
 80077ee:	4313      	orrs	r3, r2
 80077f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80077f2:	f000 f821 	bl	8007838 <HAL_RCC_GetSysClockFreq>
 80077f6:	4602      	mov	r2, r0
 80077f8:	4b0b      	ldr	r3, [pc, #44]	; (8007828 <HAL_RCC_ClockConfig+0x33c>)
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	091b      	lsrs	r3, r3, #4
 80077fe:	f003 030f 	and.w	r3, r3, #15
 8007802:	490a      	ldr	r1, [pc, #40]	; (800782c <HAL_RCC_ClockConfig+0x340>)
 8007804:	5ccb      	ldrb	r3, [r1, r3]
 8007806:	fa22 f303 	lsr.w	r3, r2, r3
 800780a:	4a09      	ldr	r2, [pc, #36]	; (8007830 <HAL_RCC_ClockConfig+0x344>)
 800780c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800780e:	4b09      	ldr	r3, [pc, #36]	; (8007834 <HAL_RCC_ClockConfig+0x348>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4618      	mov	r0, r3
 8007814:	f7fd f996 	bl	8004b44 <HAL_InitTick>

  return HAL_OK;
 8007818:	2300      	movs	r3, #0
}
 800781a:	4618      	mov	r0, r3
 800781c:	3710      	adds	r7, #16
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	0801aff4 	.word	0x0801aff4
 8007828:	40023800 	.word	0x40023800
 800782c:	0801dd88 	.word	0x0801dd88
 8007830:	20000008 	.word	0x20000008
 8007834:	2000000c 	.word	0x2000000c

08007838 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007838:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800783c:	b084      	sub	sp, #16
 800783e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007840:	2300      	movs	r3, #0
 8007842:	607b      	str	r3, [r7, #4]
 8007844:	2300      	movs	r3, #0
 8007846:	60fb      	str	r3, [r7, #12]
 8007848:	2300      	movs	r3, #0
 800784a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800784c:	2300      	movs	r3, #0
 800784e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007850:	4b67      	ldr	r3, [pc, #412]	; (80079f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	f003 030c 	and.w	r3, r3, #12
 8007858:	2b08      	cmp	r3, #8
 800785a:	d00d      	beq.n	8007878 <HAL_RCC_GetSysClockFreq+0x40>
 800785c:	2b08      	cmp	r3, #8
 800785e:	f200 80bd 	bhi.w	80079dc <HAL_RCC_GetSysClockFreq+0x1a4>
 8007862:	2b00      	cmp	r3, #0
 8007864:	d002      	beq.n	800786c <HAL_RCC_GetSysClockFreq+0x34>
 8007866:	2b04      	cmp	r3, #4
 8007868:	d003      	beq.n	8007872 <HAL_RCC_GetSysClockFreq+0x3a>
 800786a:	e0b7      	b.n	80079dc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800786c:	4b61      	ldr	r3, [pc, #388]	; (80079f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800786e:	60bb      	str	r3, [r7, #8]
       break;
 8007870:	e0b7      	b.n	80079e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007872:	4b61      	ldr	r3, [pc, #388]	; (80079f8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007874:	60bb      	str	r3, [r7, #8]
      break;
 8007876:	e0b4      	b.n	80079e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007878:	4b5d      	ldr	r3, [pc, #372]	; (80079f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007880:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007882:	4b5b      	ldr	r3, [pc, #364]	; (80079f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800788a:	2b00      	cmp	r3, #0
 800788c:	d04d      	beq.n	800792a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800788e:	4b58      	ldr	r3, [pc, #352]	; (80079f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	099b      	lsrs	r3, r3, #6
 8007894:	461a      	mov	r2, r3
 8007896:	f04f 0300 	mov.w	r3, #0
 800789a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800789e:	f04f 0100 	mov.w	r1, #0
 80078a2:	ea02 0800 	and.w	r8, r2, r0
 80078a6:	ea03 0901 	and.w	r9, r3, r1
 80078aa:	4640      	mov	r0, r8
 80078ac:	4649      	mov	r1, r9
 80078ae:	f04f 0200 	mov.w	r2, #0
 80078b2:	f04f 0300 	mov.w	r3, #0
 80078b6:	014b      	lsls	r3, r1, #5
 80078b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80078bc:	0142      	lsls	r2, r0, #5
 80078be:	4610      	mov	r0, r2
 80078c0:	4619      	mov	r1, r3
 80078c2:	ebb0 0008 	subs.w	r0, r0, r8
 80078c6:	eb61 0109 	sbc.w	r1, r1, r9
 80078ca:	f04f 0200 	mov.w	r2, #0
 80078ce:	f04f 0300 	mov.w	r3, #0
 80078d2:	018b      	lsls	r3, r1, #6
 80078d4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80078d8:	0182      	lsls	r2, r0, #6
 80078da:	1a12      	subs	r2, r2, r0
 80078dc:	eb63 0301 	sbc.w	r3, r3, r1
 80078e0:	f04f 0000 	mov.w	r0, #0
 80078e4:	f04f 0100 	mov.w	r1, #0
 80078e8:	00d9      	lsls	r1, r3, #3
 80078ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80078ee:	00d0      	lsls	r0, r2, #3
 80078f0:	4602      	mov	r2, r0
 80078f2:	460b      	mov	r3, r1
 80078f4:	eb12 0208 	adds.w	r2, r2, r8
 80078f8:	eb43 0309 	adc.w	r3, r3, r9
 80078fc:	f04f 0000 	mov.w	r0, #0
 8007900:	f04f 0100 	mov.w	r1, #0
 8007904:	0259      	lsls	r1, r3, #9
 8007906:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800790a:	0250      	lsls	r0, r2, #9
 800790c:	4602      	mov	r2, r0
 800790e:	460b      	mov	r3, r1
 8007910:	4610      	mov	r0, r2
 8007912:	4619      	mov	r1, r3
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	461a      	mov	r2, r3
 8007918:	f04f 0300 	mov.w	r3, #0
 800791c:	f7f9 f94c 	bl	8000bb8 <__aeabi_uldivmod>
 8007920:	4602      	mov	r2, r0
 8007922:	460b      	mov	r3, r1
 8007924:	4613      	mov	r3, r2
 8007926:	60fb      	str	r3, [r7, #12]
 8007928:	e04a      	b.n	80079c0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800792a:	4b31      	ldr	r3, [pc, #196]	; (80079f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	099b      	lsrs	r3, r3, #6
 8007930:	461a      	mov	r2, r3
 8007932:	f04f 0300 	mov.w	r3, #0
 8007936:	f240 10ff 	movw	r0, #511	; 0x1ff
 800793a:	f04f 0100 	mov.w	r1, #0
 800793e:	ea02 0400 	and.w	r4, r2, r0
 8007942:	ea03 0501 	and.w	r5, r3, r1
 8007946:	4620      	mov	r0, r4
 8007948:	4629      	mov	r1, r5
 800794a:	f04f 0200 	mov.w	r2, #0
 800794e:	f04f 0300 	mov.w	r3, #0
 8007952:	014b      	lsls	r3, r1, #5
 8007954:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007958:	0142      	lsls	r2, r0, #5
 800795a:	4610      	mov	r0, r2
 800795c:	4619      	mov	r1, r3
 800795e:	1b00      	subs	r0, r0, r4
 8007960:	eb61 0105 	sbc.w	r1, r1, r5
 8007964:	f04f 0200 	mov.w	r2, #0
 8007968:	f04f 0300 	mov.w	r3, #0
 800796c:	018b      	lsls	r3, r1, #6
 800796e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007972:	0182      	lsls	r2, r0, #6
 8007974:	1a12      	subs	r2, r2, r0
 8007976:	eb63 0301 	sbc.w	r3, r3, r1
 800797a:	f04f 0000 	mov.w	r0, #0
 800797e:	f04f 0100 	mov.w	r1, #0
 8007982:	00d9      	lsls	r1, r3, #3
 8007984:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007988:	00d0      	lsls	r0, r2, #3
 800798a:	4602      	mov	r2, r0
 800798c:	460b      	mov	r3, r1
 800798e:	1912      	adds	r2, r2, r4
 8007990:	eb45 0303 	adc.w	r3, r5, r3
 8007994:	f04f 0000 	mov.w	r0, #0
 8007998:	f04f 0100 	mov.w	r1, #0
 800799c:	0299      	lsls	r1, r3, #10
 800799e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80079a2:	0290      	lsls	r0, r2, #10
 80079a4:	4602      	mov	r2, r0
 80079a6:	460b      	mov	r3, r1
 80079a8:	4610      	mov	r0, r2
 80079aa:	4619      	mov	r1, r3
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	461a      	mov	r2, r3
 80079b0:	f04f 0300 	mov.w	r3, #0
 80079b4:	f7f9 f900 	bl	8000bb8 <__aeabi_uldivmod>
 80079b8:	4602      	mov	r2, r0
 80079ba:	460b      	mov	r3, r1
 80079bc:	4613      	mov	r3, r2
 80079be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80079c0:	4b0b      	ldr	r3, [pc, #44]	; (80079f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	0c1b      	lsrs	r3, r3, #16
 80079c6:	f003 0303 	and.w	r3, r3, #3
 80079ca:	3301      	adds	r3, #1
 80079cc:	005b      	lsls	r3, r3, #1
 80079ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80079d0:	68fa      	ldr	r2, [r7, #12]
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80079d8:	60bb      	str	r3, [r7, #8]
      break;
 80079da:	e002      	b.n	80079e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80079dc:	4b05      	ldr	r3, [pc, #20]	; (80079f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80079de:	60bb      	str	r3, [r7, #8]
      break;
 80079e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80079e2:	68bb      	ldr	r3, [r7, #8]
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3710      	adds	r7, #16
 80079e8:	46bd      	mov	sp, r7
 80079ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80079ee:	bf00      	nop
 80079f0:	40023800 	.word	0x40023800
 80079f4:	00f42400 	.word	0x00f42400
 80079f8:	007a1200 	.word	0x007a1200

080079fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079fc:	b480      	push	{r7}
 80079fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a00:	4b03      	ldr	r3, [pc, #12]	; (8007a10 <HAL_RCC_GetHCLKFreq+0x14>)
 8007a02:	681b      	ldr	r3, [r3, #0]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr
 8007a0e:	bf00      	nop
 8007a10:	20000008 	.word	0x20000008

08007a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007a18:	f7ff fff0 	bl	80079fc <HAL_RCC_GetHCLKFreq>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	4b05      	ldr	r3, [pc, #20]	; (8007a34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	0a9b      	lsrs	r3, r3, #10
 8007a24:	f003 0307 	and.w	r3, r3, #7
 8007a28:	4903      	ldr	r1, [pc, #12]	; (8007a38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a2a:	5ccb      	ldrb	r3, [r1, r3]
 8007a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	40023800 	.word	0x40023800
 8007a38:	0801dd98 	.word	0x0801dd98

08007a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007a40:	f7ff ffdc 	bl	80079fc <HAL_RCC_GetHCLKFreq>
 8007a44:	4602      	mov	r2, r0
 8007a46:	4b05      	ldr	r3, [pc, #20]	; (8007a5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	0b5b      	lsrs	r3, r3, #13
 8007a4c:	f003 0307 	and.w	r3, r3, #7
 8007a50:	4903      	ldr	r1, [pc, #12]	; (8007a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a52:	5ccb      	ldrb	r3, [r1, r3]
 8007a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	bd80      	pop	{r7, pc}
 8007a5c:	40023800 	.word	0x40023800
 8007a60:	0801dd98 	.word	0x0801dd98

08007a64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b086      	sub	sp, #24
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007a70:	2300      	movs	r3, #0
 8007a72:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d003      	beq.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	2b7f      	cmp	r3, #127	; 0x7f
 8007a82:	d904      	bls.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8007a84:	f640 017b 	movw	r1, #2171	; 0x87b
 8007a88:	4882      	ldr	r0, [pc, #520]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007a8a:	f7fa fd76 	bl	800257a <assert_failed>

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f003 0301 	and.w	r3, r3, #1
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d10c      	bne.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x50>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d106      	bne.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x50>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	f000 80c5 	beq.w	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	2b31      	cmp	r3, #49	; 0x31
 8007aba:	d904      	bls.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8007ac4:	d904      	bls.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8007ac6:	f640 0186 	movw	r1, #2182	; 0x886
 8007aca:	4872      	ldr	r0, [pc, #456]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007acc:	f7fa fd55 	bl	800257a <assert_failed>

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007ad0:	4b71      	ldr	r3, [pc, #452]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007ad6:	f7fd f879 	bl	8004bcc <HAL_GetTick>
 8007ada:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007adc:	e008      	b.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007ade:	f7fd f875 	bl	8004bcc <HAL_GetTick>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	1ad3      	subs	r3, r2, r3
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	d901      	bls.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007aec:	2303      	movs	r3, #3
 8007aee:	e30e      	b.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007af0:	4b6a      	ldr	r3, [pc, #424]	; (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d1f0      	bne.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x7a>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 0301 	and.w	r3, r3, #1
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d016      	beq.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d903      	bls.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	2b07      	cmp	r3, #7
 8007b16:	d904      	bls.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8007b18:	f640 019c 	movw	r1, #2204	; 0x89c
 8007b1c:	485d      	ldr	r0, [pc, #372]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007b1e:	f7fa fd2c 	bl	800257a <assert_failed>
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	019a      	lsls	r2, r3, #6
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	071b      	lsls	r3, r3, #28
 8007b2e:	495b      	ldr	r1, [pc, #364]	; (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8007b30:	4313      	orrs	r3, r2
 8007b32:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f003 0302 	and.w	r3, r3, #2
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d039      	beq.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x152>
    {
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	68db      	ldr	r3, [r3, #12]
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d903      	bls.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	68db      	ldr	r3, [r3, #12]
 8007b4e:	2b0f      	cmp	r3, #15
 8007b50:	d904      	bls.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8007b52:	f640 01a9 	movw	r1, #2217	; 0x8a9
 8007b56:	484f      	ldr	r0, [pc, #316]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007b58:	f7fa fd0f 	bl	800257a <assert_failed>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	69db      	ldr	r3, [r3, #28]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d003      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x108>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	69db      	ldr	r3, [r3, #28]
 8007b68:	2b20      	cmp	r3, #32
 8007b6a:	d904      	bls.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8007b6c:	f640 01aa 	movw	r1, #2218	; 0x8aa
 8007b70:	4848      	ldr	r0, [pc, #288]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007b72:	f7fa fd02 	bl	800257a <assert_failed>

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007b76:	4b49      	ldr	r3, [pc, #292]	; (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8007b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b7c:	0f1b      	lsrs	r3, r3, #28
 8007b7e:	f003 0307 	and.w	r3, r3, #7
 8007b82:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	019a      	lsls	r2, r3, #6
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	061b      	lsls	r3, r3, #24
 8007b90:	431a      	orrs	r2, r3
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	071b      	lsls	r3, r3, #28
 8007b96:	4941      	ldr	r1, [pc, #260]	; (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007b9e:	4b3f      	ldr	r3, [pc, #252]	; (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8007ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ba4:	f023 021f 	bic.w	r2, r3, #31
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	69db      	ldr	r3, [r3, #28]
 8007bac:	3b01      	subs	r3, #1
 8007bae:	493b      	ldr	r1, [pc, #236]	; (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d027      	beq.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d903      	bls.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	68db      	ldr	r3, [r3, #12]
 8007bce:	2b0f      	cmp	r3, #15
 8007bd0:	d904      	bls.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x178>
 8007bd2:	f640 01bb 	movw	r1, #2235	; 0x8bb
 8007bd6:	482f      	ldr	r0, [pc, #188]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007bd8:	f7fa fccf 	bl	800257a <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d903      	bls.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x188>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	2b07      	cmp	r3, #7
 8007bea:	d904      	bls.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007bec:	f640 01bc 	movw	r1, #2236	; 0x8bc
 8007bf0:	4828      	ldr	r0, [pc, #160]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007bf2:	f7fa fcc2 	bl	800257a <assert_failed>

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	019a      	lsls	r2, r3, #6
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	061b      	lsls	r3, r3, #24
 8007c02:	431a      	orrs	r2, r3
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	071b      	lsls	r3, r3, #28
 8007c0a:	4924      	ldr	r1, [pc, #144]	; (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007c12:	4b21      	ldr	r3, [pc, #132]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8007c14:	2201      	movs	r2, #1
 8007c16:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007c18:	f7fc ffd8 	bl	8004bcc <HAL_GetTick>
 8007c1c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007c1e:	e008      	b.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007c20:	f7fc ffd4 	bl	8004bcc <HAL_GetTick>
 8007c24:	4602      	mov	r2, r0
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	1ad3      	subs	r3, r2, r3
 8007c2a:	2b02      	cmp	r3, #2
 8007c2c:	d901      	bls.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007c2e:	2303      	movs	r3, #3
 8007c30:	e26d      	b.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007c32:	4b1a      	ldr	r3, [pc, #104]	; (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d0f0      	beq.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f003 0304 	and.w	r3, r3, #4
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d106      	bne.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	f000 80d5 	beq.w	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	691b      	ldr	r3, [r3, #16]
 8007c5c:	2b31      	cmp	r3, #49	; 0x31
 8007c5e:	d904      	bls.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8007c68:	d904      	bls.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8007c6a:	f640 01da 	movw	r1, #2266	; 0x8da
 8007c6e:	4809      	ldr	r0, [pc, #36]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007c70:	f7fa fc83 	bl	800257a <assert_failed>

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007c74:	4b0a      	ldr	r3, [pc, #40]	; (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8007c76:	2200      	movs	r2, #0
 8007c78:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007c7a:	f7fc ffa7 	bl	8004bcc <HAL_GetTick>
 8007c7e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007c80:	e010      	b.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007c82:	f7fc ffa3 	bl	8004bcc <HAL_GetTick>
 8007c86:	4602      	mov	r2, r0
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	1ad3      	subs	r3, r2, r3
 8007c8c:	2b02      	cmp	r3, #2
 8007c8e:	d909      	bls.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x240>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007c90:	2303      	movs	r3, #3
 8007c92:	e23c      	b.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8007c94:	0801b02c 	.word	0x0801b02c
 8007c98:	42470068 	.word	0x42470068
 8007c9c:	40023800 	.word	0x40023800
 8007ca0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007ca4:	4b50      	ldr	r3, [pc, #320]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cb0:	d0e7      	beq.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f003 0304 	and.w	r3, r3, #4
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d03a      	beq.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	695b      	ldr	r3, [r3, #20]
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d903      	bls.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	695b      	ldr	r3, [r3, #20]
 8007cca:	2b0f      	cmp	r3, #15
 8007ccc:	d904      	bls.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8007cce:	f640 01ef 	movw	r1, #2287	; 0x8ef
 8007cd2:	4846      	ldr	r0, [pc, #280]	; (8007dec <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8007cd4:	f7fa fc51 	bl	800257a <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6a1b      	ldr	r3, [r3, #32]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d003      	beq.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6a1b      	ldr	r3, [r3, #32]
 8007ce4:	2b20      	cmp	r3, #32
 8007ce6:	d904      	bls.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8007ce8:	f44f 610f 	mov.w	r1, #2288	; 0x8f0
 8007cec:	483f      	ldr	r0, [pc, #252]	; (8007dec <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8007cee:	f7fa fc44 	bl	800257a <assert_failed>

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007cf2:	4b3d      	ldr	r3, [pc, #244]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cf8:	0f1b      	lsrs	r3, r3, #28
 8007cfa:	f003 0307 	and.w	r3, r3, #7
 8007cfe:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	019a      	lsls	r2, r3, #6
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	695b      	ldr	r3, [r3, #20]
 8007d0a:	061b      	lsls	r3, r3, #24
 8007d0c:	431a      	orrs	r2, r3
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	071b      	lsls	r3, r3, #28
 8007d12:	4935      	ldr	r1, [pc, #212]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007d14:	4313      	orrs	r3, r2
 8007d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007d1a:	4b33      	ldr	r3, [pc, #204]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007d1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d20:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6a1b      	ldr	r3, [r3, #32]
 8007d28:	3b01      	subs	r3, #1
 8007d2a:	021b      	lsls	r3, r3, #8
 8007d2c:	492e      	ldr	r1, [pc, #184]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 0308 	and.w	r3, r3, #8
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d043      	beq.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x364>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	699b      	ldr	r3, [r3, #24]
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d903      	bls.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	699b      	ldr	r3, [r3, #24]
 8007d4c:	2b07      	cmp	r3, #7
 8007d4e:	d904      	bls.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 8007d50:	f640 01ff 	movw	r1, #2303	; 0x8ff
 8007d54:	4825      	ldr	r0, [pc, #148]	; (8007dec <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8007d56:	f7fa fc10 	bl	800257a <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d013      	beq.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x326>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d6a:	d00e      	beq.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x326>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d74:	d009      	beq.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x326>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007d7e:	d004      	beq.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x326>
 8007d80:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8007d84:	4819      	ldr	r0, [pc, #100]	; (8007dec <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8007d86:	f7fa fbf8 	bl	800257a <assert_failed>

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007d8a:	4b17      	ldr	r3, [pc, #92]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d90:	0e1b      	lsrs	r3, r3, #24
 8007d92:	f003 030f 	and.w	r3, r3, #15
 8007d96:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	691b      	ldr	r3, [r3, #16]
 8007d9c:	019a      	lsls	r2, r3, #6
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	061b      	lsls	r3, r3, #24
 8007da2:	431a      	orrs	r2, r3
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	699b      	ldr	r3, [r3, #24]
 8007da8:	071b      	lsls	r3, r3, #28
 8007daa:	490f      	ldr	r1, [pc, #60]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007dac:	4313      	orrs	r3, r2
 8007dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007db2:	4b0d      	ldr	r3, [pc, #52]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007db4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007db8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc0:	4909      	ldr	r1, [pc, #36]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007dc8:	4b09      	ldr	r3, [pc, #36]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8007dca:	2201      	movs	r2, #1
 8007dcc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007dce:	f7fc fefd 	bl	8004bcc <HAL_GetTick>
 8007dd2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007dd4:	e00e      	b.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x390>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007dd6:	f7fc fef9 	bl	8004bcc <HAL_GetTick>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	1ad3      	subs	r3, r2, r3
 8007de0:	2b02      	cmp	r3, #2
 8007de2:	d907      	bls.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x390>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007de4:	2303      	movs	r3, #3
 8007de6:	e192      	b.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8007de8:	40023800 	.word	0x40023800
 8007dec:	0801b02c 	.word	0x0801b02c
 8007df0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007df4:	4b96      	ldr	r3, [pc, #600]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007dfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e00:	d1e9      	bne.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 0320 	and.w	r3, r3, #32
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	f000 8173 	beq.w	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x692>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e18:	f000 80a6 	beq.w	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e24:	f000 80a0 	beq.w	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e2c:	4a89      	ldr	r2, [pc, #548]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	f000 809a 	beq.w	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e38:	4a87      	ldr	r2, [pc, #540]	; (8008058 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	f000 8094 	beq.w	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e44:	4a85      	ldr	r2, [pc, #532]	; (800805c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	f000 808e 	beq.w	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e50:	4a83      	ldr	r2, [pc, #524]	; (8008060 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	f000 8088 	beq.w	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e5c:	4a81      	ldr	r2, [pc, #516]	; (8008064 <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	f000 8082 	beq.w	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e68:	4a7f      	ldr	r2, [pc, #508]	; (8008068 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d07c      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e72:	4a7e      	ldr	r2, [pc, #504]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d077      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e7c:	4a7c      	ldr	r2, [pc, #496]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x60c>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d072      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e86:	4a7b      	ldr	r2, [pc, #492]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x610>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d06d      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e90:	4a79      	ldr	r2, [pc, #484]	; (8008078 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d068      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e9a:	4a78      	ldr	r2, [pc, #480]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x618>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d063      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea4:	4a76      	ldr	r2, [pc, #472]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x61c>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d05e      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eae:	4a75      	ldr	r2, [pc, #468]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x620>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d059      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb8:	4a73      	ldr	r2, [pc, #460]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x624>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d054      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec2:	4a72      	ldr	r2, [pc, #456]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0x628>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d04f      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ecc:	4a70      	ldr	r2, [pc, #448]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d04a      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed6:	4a6f      	ldr	r2, [pc, #444]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x630>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d045      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee0:	4a6d      	ldr	r2, [pc, #436]	; (8008098 <HAL_RCCEx_PeriphCLKConfig+0x634>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d040      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eea:	4a6c      	ldr	r2, [pc, #432]	; (800809c <HAL_RCCEx_PeriphCLKConfig+0x638>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d03b      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef4:	4a6a      	ldr	r2, [pc, #424]	; (80080a0 <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d036      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007efe:	4a69      	ldr	r2, [pc, #420]	; (80080a4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d031      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f08:	4a67      	ldr	r2, [pc, #412]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d02c      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f12:	4a66      	ldr	r2, [pc, #408]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x648>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d027      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f1c:	4a64      	ldr	r2, [pc, #400]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d022      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f26:	4a63      	ldr	r2, [pc, #396]	; (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d01d      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f30:	4a61      	ldr	r2, [pc, #388]	; (80080b8 <HAL_RCCEx_PeriphCLKConfig+0x654>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d018      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f3a:	4a60      	ldr	r2, [pc, #384]	; (80080bc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d013      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f44:	4a5e      	ldr	r2, [pc, #376]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d00e      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f4e:	4a5d      	ldr	r2, [pc, #372]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d009      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f58:	4a5b      	ldr	r2, [pc, #364]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d004      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007f5e:	f640 111f 	movw	r1, #2335	; 0x91f
 8007f62:	485a      	ldr	r0, [pc, #360]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x668>)
 8007f64:	f7fa fb09 	bl	800257a <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007f68:	2300      	movs	r3, #0
 8007f6a:	60fb      	str	r3, [r7, #12]
 8007f6c:	4b38      	ldr	r3, [pc, #224]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8007f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f70:	4a37      	ldr	r2, [pc, #220]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8007f72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f76:	6413      	str	r3, [r2, #64]	; 0x40
 8007f78:	4b35      	ldr	r3, [pc, #212]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8007f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f80:	60fb      	str	r3, [r7, #12]
 8007f82:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007f84:	4b52      	ldr	r3, [pc, #328]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x66c>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a51      	ldr	r2, [pc, #324]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x66c>)
 8007f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f8e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007f90:	f7fc fe1c 	bl	8004bcc <HAL_GetTick>
 8007f94:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007f96:	e008      	b.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x546>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007f98:	f7fc fe18 	bl	8004bcc <HAL_GetTick>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	1ad3      	subs	r3, r2, r3
 8007fa2:	2b02      	cmp	r3, #2
 8007fa4:	d901      	bls.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x546>
      {
        return HAL_TIMEOUT;
 8007fa6:	2303      	movs	r3, #3
 8007fa8:	e0b1      	b.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007faa:	4b49      	ldr	r3, [pc, #292]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x66c>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d0f0      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x534>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007fb6:	4b26      	ldr	r3, [pc, #152]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8007fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fbe:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d02f      	beq.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fce:	693a      	ldr	r2, [r7, #16]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d028      	beq.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007fd4:	4b1e      	ldr	r3, [pc, #120]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8007fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fdc:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007fde:	4b3d      	ldr	r3, [pc, #244]	; (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x670>)
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007fe4:	4b3b      	ldr	r3, [pc, #236]	; (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x670>)
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007fea:	4a19      	ldr	r2, [pc, #100]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007ff0:	4b17      	ldr	r3, [pc, #92]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8007ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ff4:	f003 0301 	and.w	r3, r3, #1
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d114      	bne.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007ffc:	f7fc fde6 	bl	8004bcc <HAL_GetTick>
 8008000:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008002:	e00a      	b.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008004:	f7fc fde2 	bl	8004bcc <HAL_GetTick>
 8008008:	4602      	mov	r2, r0
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	1ad3      	subs	r3, r2, r3
 800800e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008012:	4293      	cmp	r3, r2
 8008014:	d901      	bls.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
          {
            return HAL_TIMEOUT;
 8008016:	2303      	movs	r3, #3
 8008018:	e079      	b.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800801a:	4b0d      	ldr	r3, [pc, #52]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800801c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800801e:	f003 0302 	and.w	r3, r3, #2
 8008022:	2b00      	cmp	r3, #0
 8008024:	d0ee      	beq.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800802a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800802e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008032:	d151      	bne.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x674>
 8008034:	4b06      	ldr	r3, [pc, #24]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008040:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008048:	4901      	ldr	r1, [pc, #4]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800804a:	4313      	orrs	r3, r2
 800804c:	608b      	str	r3, [r1, #8]
 800804e:	e049      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8008050:	40023800 	.word	0x40023800
 8008054:	00020300 	.word	0x00020300
 8008058:	00030300 	.word	0x00030300
 800805c:	00040300 	.word	0x00040300
 8008060:	00050300 	.word	0x00050300
 8008064:	00060300 	.word	0x00060300
 8008068:	00070300 	.word	0x00070300
 800806c:	00080300 	.word	0x00080300
 8008070:	00090300 	.word	0x00090300
 8008074:	000a0300 	.word	0x000a0300
 8008078:	000b0300 	.word	0x000b0300
 800807c:	000c0300 	.word	0x000c0300
 8008080:	000d0300 	.word	0x000d0300
 8008084:	000e0300 	.word	0x000e0300
 8008088:	000f0300 	.word	0x000f0300
 800808c:	00100300 	.word	0x00100300
 8008090:	00110300 	.word	0x00110300
 8008094:	00120300 	.word	0x00120300
 8008098:	00130300 	.word	0x00130300
 800809c:	00140300 	.word	0x00140300
 80080a0:	00150300 	.word	0x00150300
 80080a4:	00160300 	.word	0x00160300
 80080a8:	00170300 	.word	0x00170300
 80080ac:	00180300 	.word	0x00180300
 80080b0:	00190300 	.word	0x00190300
 80080b4:	001a0300 	.word	0x001a0300
 80080b8:	001b0300 	.word	0x001b0300
 80080bc:	001c0300 	.word	0x001c0300
 80080c0:	001d0300 	.word	0x001d0300
 80080c4:	001e0300 	.word	0x001e0300
 80080c8:	001f0300 	.word	0x001f0300
 80080cc:	0801b02c 	.word	0x0801b02c
 80080d0:	40007000 	.word	0x40007000
 80080d4:	42470e40 	.word	0x42470e40
 80080d8:	4b0f      	ldr	r3, [pc, #60]	; (8008118 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	4a0e      	ldr	r2, [pc, #56]	; (8008118 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 80080de:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80080e2:	6093      	str	r3, [r2, #8]
 80080e4:	4b0c      	ldr	r3, [pc, #48]	; (8008118 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 80080e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080f0:	4909      	ldr	r1, [pc, #36]	; (8008118 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 80080f2:	4313      	orrs	r3, r2
 80080f4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f003 0310 	and.w	r3, r3, #16
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d004      	beq.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x6a8>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8008108:	4b04      	ldr	r3, [pc, #16]	; (800811c <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800810a:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800810c:	2300      	movs	r3, #0
}
 800810e:	4618      	mov	r0, r3
 8008110:	3718      	adds	r7, #24
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	40023800 	.word	0x40023800
 800811c:	424711e0 	.word	0x424711e0

08008120 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d101      	bne.n	8008132 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	e0d6      	b.n	80082e0 <HAL_RTC_Init+0x1c0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	2b40      	cmp	r3, #64	; 0x40
 8008138:	d007      	beq.n	800814a <HAL_RTC_Init+0x2a>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d003      	beq.n	800814a <HAL_RTC_Init+0x2a>
 8008142:	21ff      	movs	r1, #255	; 0xff
 8008144:	4868      	ldr	r0, [pc, #416]	; (80082e8 <HAL_RTC_Init+0x1c8>)
 8008146:	f7fa fa18 	bl	800257a <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	2b7f      	cmp	r3, #127	; 0x7f
 8008150:	d904      	bls.n	800815c <HAL_RTC_Init+0x3c>
 8008152:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008156:	4864      	ldr	r0, [pc, #400]	; (80082e8 <HAL_RTC_Init+0x1c8>)
 8008158:	f7fa fa0f 	bl	800257a <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	68db      	ldr	r3, [r3, #12]
 8008160:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008164:	d304      	bcc.n	8008170 <HAL_RTC_Init+0x50>
 8008166:	f240 1101 	movw	r1, #257	; 0x101
 800816a:	485f      	ldr	r0, [pc, #380]	; (80082e8 <HAL_RTC_Init+0x1c8>)
 800816c:	f7fa fa05 	bl	800257a <assert_failed>
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	691b      	ldr	r3, [r3, #16]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d013      	beq.n	80081a0 <HAL_RTC_Init+0x80>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	691b      	ldr	r3, [r3, #16]
 800817c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008180:	d00e      	beq.n	80081a0 <HAL_RTC_Init+0x80>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	691b      	ldr	r3, [r3, #16]
 8008186:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800818a:	d009      	beq.n	80081a0 <HAL_RTC_Init+0x80>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008194:	d004      	beq.n	80081a0 <HAL_RTC_Init+0x80>
 8008196:	f44f 7181 	mov.w	r1, #258	; 0x102
 800819a:	4853      	ldr	r0, [pc, #332]	; (80082e8 <HAL_RTC_Init+0x1c8>)
 800819c:	f7fa f9ed 	bl	800257a <assert_failed>
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	695b      	ldr	r3, [r3, #20]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d009      	beq.n	80081bc <HAL_RTC_Init+0x9c>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	695b      	ldr	r3, [r3, #20]
 80081ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081b0:	d004      	beq.n	80081bc <HAL_RTC_Init+0x9c>
 80081b2:	f240 1103 	movw	r1, #259	; 0x103
 80081b6:	484c      	ldr	r0, [pc, #304]	; (80082e8 <HAL_RTC_Init+0x1c8>)
 80081b8:	f7fa f9df 	bl	800257a <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	699b      	ldr	r3, [r3, #24]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d009      	beq.n	80081d8 <HAL_RTC_Init+0xb8>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	699b      	ldr	r3, [r3, #24]
 80081c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80081cc:	d004      	beq.n	80081d8 <HAL_RTC_Init+0xb8>
 80081ce:	f44f 7182 	mov.w	r1, #260	; 0x104
 80081d2:	4845      	ldr	r0, [pc, #276]	; (80082e8 <HAL_RTC_Init+0x1c8>)
 80081d4:	f7fa f9d1 	bl	800257a <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	7f5b      	ldrb	r3, [r3, #29]
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d105      	bne.n	80081ee <HAL_RTC_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f7fb fe6b 	bl	8003ec4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2202      	movs	r2, #2
 80081f2:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	22ca      	movs	r2, #202	; 0xca
 80081fa:	625a      	str	r2, [r3, #36]	; 0x24
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2253      	movs	r2, #83	; 0x53
 8008202:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 fbfd 	bl	8008a04 <RTC_EnterInitMode>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d008      	beq.n	8008222 <HAL_RTC_Init+0x102>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	22ff      	movs	r2, #255	; 0xff
 8008216:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2204      	movs	r2, #4
 800821c:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	e05e      	b.n	80082e0 <HAL_RTC_Init+0x1c0>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	6812      	ldr	r2, [r2, #0]
 800822c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008230:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008234:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	6899      	ldr	r1, [r3, #8]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	685a      	ldr	r2, [r3, #4]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	691b      	ldr	r3, [r3, #16]
 8008244:	431a      	orrs	r2, r3
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	695b      	ldr	r3, [r3, #20]
 800824a:	431a      	orrs	r2, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	430a      	orrs	r2, r1
 8008252:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	68d2      	ldr	r2, [r2, #12]
 800825c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	6919      	ldr	r1, [r3, #16]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	041a      	lsls	r2, r3, #16
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	430a      	orrs	r2, r1
 8008270:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	68da      	ldr	r2, [r3, #12]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008280:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	f003 0320 	and.w	r3, r3, #32
 800828c:	2b00      	cmp	r3, #0
 800828e:	d10e      	bne.n	80082ae <HAL_RTC_Init+0x18e>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 fb8f 	bl	80089b4 <HAL_RTC_WaitForSynchro>
 8008296:	4603      	mov	r3, r0
 8008298:	2b00      	cmp	r3, #0
 800829a:	d008      	beq.n	80082ae <HAL_RTC_Init+0x18e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	22ff      	movs	r2, #255	; 0xff
 80082a2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2204      	movs	r2, #4
 80082a8:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	e018      	b.n	80082e0 <HAL_RTC_Init+0x1c0>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80082bc:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	699a      	ldr	r2, [r3, #24]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	430a      	orrs	r2, r1
 80082ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	22ff      	movs	r2, #255	; 0xff
 80082d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2201      	movs	r2, #1
 80082dc:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80082de:	2300      	movs	r3, #0
  }
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3708      	adds	r7, #8
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}
 80082e8:	0801b068 	.word	0x0801b068

080082ec <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80082ec:	b590      	push	{r4, r7, lr}
 80082ee:	b087      	sub	sp, #28
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80082f8:	2300      	movs	r3, #0
 80082fa:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d007      	beq.n	8008312 <HAL_RTC_SetTime+0x26>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2b01      	cmp	r3, #1
 8008306:	d004      	beq.n	8008312 <HAL_RTC_SetTime+0x26>
 8008308:	f240 21da 	movw	r1, #730	; 0x2da
 800830c:	48a4      	ldr	r0, [pc, #656]	; (80085a0 <HAL_RTC_SetTime+0x2b4>)
 800830e:	f7fa f934 	bl	800257a <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	68db      	ldr	r3, [r3, #12]
 8008316:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800831a:	d00d      	beq.n	8008338 <HAL_RTC_SetTime+0x4c>
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008324:	d008      	beq.n	8008338 <HAL_RTC_SetTime+0x4c>
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	68db      	ldr	r3, [r3, #12]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d004      	beq.n	8008338 <HAL_RTC_SetTime+0x4c>
 800832e:	f240 21db 	movw	r1, #731	; 0x2db
 8008332:	489b      	ldr	r0, [pc, #620]	; (80085a0 <HAL_RTC_SetTime+0x2b4>)
 8008334:	f7fa f921 	bl	800257a <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	691b      	ldr	r3, [r3, #16]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d009      	beq.n	8008354 <HAL_RTC_SetTime+0x68>
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	691b      	ldr	r3, [r3, #16]
 8008344:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008348:	d004      	beq.n	8008354 <HAL_RTC_SetTime+0x68>
 800834a:	f44f 7137 	mov.w	r1, #732	; 0x2dc
 800834e:	4894      	ldr	r0, [pc, #592]	; (80085a0 <HAL_RTC_SetTime+0x2b4>)
 8008350:	f7fa f913 	bl	800257a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	7f1b      	ldrb	r3, [r3, #28]
 8008358:	2b01      	cmp	r3, #1
 800835a:	d101      	bne.n	8008360 <HAL_RTC_SetTime+0x74>
 800835c:	2302      	movs	r3, #2
 800835e:	e12c      	b.n	80085ba <HAL_RTC_SetTime+0x2ce>
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2201      	movs	r2, #1
 8008364:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2202      	movs	r2, #2
 800836a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d15c      	bne.n	800842c <HAL_RTC_SetTime+0x140>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800837c:	2b00      	cmp	r3, #0
 800837e:	d01a      	beq.n	80083b6 <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d003      	beq.n	8008390 <HAL_RTC_SetTime+0xa4>
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	2b0c      	cmp	r3, #12
 800838e:	d904      	bls.n	800839a <HAL_RTC_SetTime+0xae>
 8008390:	f240 21e7 	movw	r1, #743	; 0x2e7
 8008394:	4882      	ldr	r0, [pc, #520]	; (80085a0 <HAL_RTC_SetTime+0x2b4>)
 8008396:	f7fa f8f0 	bl	800257a <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	78db      	ldrb	r3, [r3, #3]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d015      	beq.n	80083ce <HAL_RTC_SetTime+0xe2>
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	78db      	ldrb	r3, [r3, #3]
 80083a6:	2b40      	cmp	r3, #64	; 0x40
 80083a8:	d011      	beq.n	80083ce <HAL_RTC_SetTime+0xe2>
 80083aa:	f44f 713a 	mov.w	r1, #744	; 0x2e8
 80083ae:	487c      	ldr	r0, [pc, #496]	; (80085a0 <HAL_RTC_SetTime+0x2b4>)
 80083b0:	f7fa f8e3 	bl	800257a <assert_failed>
 80083b4:	e00b      	b.n	80083ce <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	2200      	movs	r2, #0
 80083ba:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	2b17      	cmp	r3, #23
 80083c2:	d904      	bls.n	80083ce <HAL_RTC_SetTime+0xe2>
 80083c4:	f240 21ed 	movw	r1, #749	; 0x2ed
 80083c8:	4875      	ldr	r0, [pc, #468]	; (80085a0 <HAL_RTC_SetTime+0x2b4>)
 80083ca:	f7fa f8d6 	bl	800257a <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	785b      	ldrb	r3, [r3, #1]
 80083d2:	2b3b      	cmp	r3, #59	; 0x3b
 80083d4:	d904      	bls.n	80083e0 <HAL_RTC_SetTime+0xf4>
 80083d6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80083da:	4871      	ldr	r0, [pc, #452]	; (80085a0 <HAL_RTC_SetTime+0x2b4>)
 80083dc:	f7fa f8cd 	bl	800257a <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	789b      	ldrb	r3, [r3, #2]
 80083e4:	2b3b      	cmp	r3, #59	; 0x3b
 80083e6:	d904      	bls.n	80083f2 <HAL_RTC_SetTime+0x106>
 80083e8:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 80083ec:	486c      	ldr	r0, [pc, #432]	; (80085a0 <HAL_RTC_SetTime+0x2b4>)
 80083ee:	f7fa f8c4 	bl	800257a <assert_failed>

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	4618      	mov	r0, r3
 80083f8:	f000 fb30 	bl	8008a5c <RTC_ByteToBcd2>
 80083fc:	4603      	mov	r3, r0
 80083fe:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	785b      	ldrb	r3, [r3, #1]
 8008404:	4618      	mov	r0, r3
 8008406:	f000 fb29 	bl	8008a5c <RTC_ByteToBcd2>
 800840a:	4603      	mov	r3, r0
 800840c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800840e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	789b      	ldrb	r3, [r3, #2]
 8008414:	4618      	mov	r0, r3
 8008416:	f000 fb21 	bl	8008a5c <RTC_ByteToBcd2>
 800841a:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800841c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	78db      	ldrb	r3, [r3, #3]
 8008424:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008426:	4313      	orrs	r3, r2
 8008428:	617b      	str	r3, [r7, #20]
 800842a:	e062      	b.n	80084f2 <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008436:	2b00      	cmp	r3, #0
 8008438:	d022      	beq.n	8008480 <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	4618      	mov	r0, r3
 8008440:	f000 fb2a 	bl	8008a98 <RTC_Bcd2ToByte>
 8008444:	4603      	mov	r3, r0
 8008446:	2b00      	cmp	r3, #0
 8008448:	d007      	beq.n	800845a <HAL_RTC_SetTime+0x16e>
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	4618      	mov	r0, r3
 8008450:	f000 fb22 	bl	8008a98 <RTC_Bcd2ToByte>
 8008454:	4603      	mov	r3, r0
 8008456:	2b0c      	cmp	r3, #12
 8008458:	d904      	bls.n	8008464 <HAL_RTC_SetTime+0x178>
 800845a:	f240 21fb 	movw	r1, #763	; 0x2fb
 800845e:	4850      	ldr	r0, [pc, #320]	; (80085a0 <HAL_RTC_SetTime+0x2b4>)
 8008460:	f7fa f88b 	bl	800257a <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	78db      	ldrb	r3, [r3, #3]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d019      	beq.n	80084a0 <HAL_RTC_SetTime+0x1b4>
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	78db      	ldrb	r3, [r3, #3]
 8008470:	2b40      	cmp	r3, #64	; 0x40
 8008472:	d015      	beq.n	80084a0 <HAL_RTC_SetTime+0x1b4>
 8008474:	f44f 713f 	mov.w	r1, #764	; 0x2fc
 8008478:	4849      	ldr	r0, [pc, #292]	; (80085a0 <HAL_RTC_SetTime+0x2b4>)
 800847a:	f7fa f87e 	bl	800257a <assert_failed>
 800847e:	e00f      	b.n	80084a0 <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	2200      	movs	r2, #0
 8008484:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	4618      	mov	r0, r3
 800848c:	f000 fb04 	bl	8008a98 <RTC_Bcd2ToByte>
 8008490:	4603      	mov	r3, r0
 8008492:	2b17      	cmp	r3, #23
 8008494:	d904      	bls.n	80084a0 <HAL_RTC_SetTime+0x1b4>
 8008496:	f240 3101 	movw	r1, #769	; 0x301
 800849a:	4841      	ldr	r0, [pc, #260]	; (80085a0 <HAL_RTC_SetTime+0x2b4>)
 800849c:	f7fa f86d 	bl	800257a <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	785b      	ldrb	r3, [r3, #1]
 80084a4:	4618      	mov	r0, r3
 80084a6:	f000 faf7 	bl	8008a98 <RTC_Bcd2ToByte>
 80084aa:	4603      	mov	r3, r0
 80084ac:	2b3b      	cmp	r3, #59	; 0x3b
 80084ae:	d904      	bls.n	80084ba <HAL_RTC_SetTime+0x1ce>
 80084b0:	f240 3103 	movw	r1, #771	; 0x303
 80084b4:	483a      	ldr	r0, [pc, #232]	; (80085a0 <HAL_RTC_SetTime+0x2b4>)
 80084b6:	f7fa f860 	bl	800257a <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	789b      	ldrb	r3, [r3, #2]
 80084be:	4618      	mov	r0, r3
 80084c0:	f000 faea 	bl	8008a98 <RTC_Bcd2ToByte>
 80084c4:	4603      	mov	r3, r0
 80084c6:	2b3b      	cmp	r3, #59	; 0x3b
 80084c8:	d904      	bls.n	80084d4 <HAL_RTC_SetTime+0x1e8>
 80084ca:	f44f 7141 	mov.w	r1, #772	; 0x304
 80084ce:	4834      	ldr	r0, [pc, #208]	; (80085a0 <HAL_RTC_SetTime+0x2b4>)
 80084d0:	f7fa f853 	bl	800257a <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	785b      	ldrb	r3, [r3, #1]
 80084de:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80084e0:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80084e2:	68ba      	ldr	r2, [r7, #8]
 80084e4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80084e6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	78db      	ldrb	r3, [r3, #3]
 80084ec:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80084ee:	4313      	orrs	r3, r2
 80084f0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	22ca      	movs	r2, #202	; 0xca
 80084f8:	625a      	str	r2, [r3, #36]	; 0x24
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	2253      	movs	r2, #83	; 0x53
 8008500:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008502:	68f8      	ldr	r0, [r7, #12]
 8008504:	f000 fa7e 	bl	8008a04 <RTC_EnterInitMode>
 8008508:	4603      	mov	r3, r0
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00b      	beq.n	8008526 <HAL_RTC_SetTime+0x23a>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	22ff      	movs	r2, #255	; 0xff
 8008514:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2204      	movs	r2, #4
 800851a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2200      	movs	r2, #0
 8008520:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	e049      	b.n	80085ba <HAL_RTC_SetTime+0x2ce>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008530:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008534:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	689a      	ldr	r2, [r3, #8]
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008544:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	6899      	ldr	r1, [r3, #8]
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	68da      	ldr	r2, [r3, #12]
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	691b      	ldr	r3, [r3, #16]
 8008554:	431a      	orrs	r2, r3
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	430a      	orrs	r2, r1
 800855c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	68da      	ldr	r2, [r3, #12]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800856c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	f003 0320 	and.w	r3, r3, #32
 8008578:	2b00      	cmp	r3, #0
 800857a:	d113      	bne.n	80085a4 <HAL_RTC_SetTime+0x2b8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800857c:	68f8      	ldr	r0, [r7, #12]
 800857e:	f000 fa19 	bl	80089b4 <HAL_RTC_WaitForSynchro>
 8008582:	4603      	mov	r3, r0
 8008584:	2b00      	cmp	r3, #0
 8008586:	d00d      	beq.n	80085a4 <HAL_RTC_SetTime+0x2b8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	22ff      	movs	r2, #255	; 0xff
 800858e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2204      	movs	r2, #4
 8008594:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2200      	movs	r2, #0
 800859a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800859c:	2301      	movs	r3, #1
 800859e:	e00c      	b.n	80085ba <HAL_RTC_SetTime+0x2ce>
 80085a0:	0801b068 	.word	0x0801b068
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	22ff      	movs	r2, #255	; 0xff
 80085aa:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2201      	movs	r2, #1
 80085b0:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2200      	movs	r2, #0
 80085b6:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80085b8:	2300      	movs	r3, #0
  }
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	371c      	adds	r7, #28
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd90      	pop	{r4, r7, pc}
 80085c2:	bf00      	nop

080085c4 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b086      	sub	sp, #24
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	60b9      	str	r1, [r7, #8]
 80085ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80085d0:	2300      	movs	r3, #0
 80085d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d007      	beq.n	80085ea <HAL_RTC_GetTime+0x26>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d004      	beq.n	80085ea <HAL_RTC_GetTime+0x26>
 80085e0:	f240 315d 	movw	r1, #861	; 0x35d
 80085e4:	482c      	ldr	r0, [pc, #176]	; (8008698 <HAL_RTC_GetTime+0xd4>)
 80085e6:	f7f9 ffc8 	bl	800257a <assert_failed>

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	691b      	ldr	r3, [r3, #16]
 80085fa:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800860c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008610:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	0c1b      	lsrs	r3, r3, #16
 8008616:	b2db      	uxtb	r3, r3
 8008618:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800861c:	b2da      	uxtb	r2, r3
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	0a1b      	lsrs	r3, r3, #8
 8008626:	b2db      	uxtb	r3, r3
 8008628:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800862c:	b2da      	uxtb	r2, r3
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	b2db      	uxtb	r3, r3
 8008636:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800863a:	b2da      	uxtb	r2, r3
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	0c1b      	lsrs	r3, r3, #16
 8008644:	b2db      	uxtb	r3, r3
 8008646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800864a:	b2da      	uxtb	r2, r3
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d11a      	bne.n	800868c <HAL_RTC_GetTime+0xc8>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	4618      	mov	r0, r3
 800865c:	f000 fa1c 	bl	8008a98 <RTC_Bcd2ToByte>
 8008660:	4603      	mov	r3, r0
 8008662:	461a      	mov	r2, r3
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	785b      	ldrb	r3, [r3, #1]
 800866c:	4618      	mov	r0, r3
 800866e:	f000 fa13 	bl	8008a98 <RTC_Bcd2ToByte>
 8008672:	4603      	mov	r3, r0
 8008674:	461a      	mov	r2, r3
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	789b      	ldrb	r3, [r3, #2]
 800867e:	4618      	mov	r0, r3
 8008680:	f000 fa0a 	bl	8008a98 <RTC_Bcd2ToByte>
 8008684:	4603      	mov	r3, r0
 8008686:	461a      	mov	r2, r3
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800868c:	2300      	movs	r3, #0
}
 800868e:	4618      	mov	r0, r3
 8008690:	3718      	adds	r7, #24
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	0801b068 	.word	0x0801b068

0800869c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800869c:	b590      	push	{r4, r7, lr}
 800869e:	b087      	sub	sp, #28
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	60b9      	str	r1, [r7, #8]
 80086a6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80086a8:	2300      	movs	r3, #0
 80086aa:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d007      	beq.n	80086c2 <HAL_RTC_SetDate+0x26>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d004      	beq.n	80086c2 <HAL_RTC_SetDate+0x26>
 80086b8:	f240 318a 	movw	r1, #906	; 0x38a
 80086bc:	488e      	ldr	r0, [pc, #568]	; (80088f8 <HAL_RTC_SetDate+0x25c>)
 80086be:	f7f9 ff5c 	bl	800257a <assert_failed>

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	7f1b      	ldrb	r3, [r3, #28]
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d101      	bne.n	80086ce <HAL_RTC_SetDate+0x32>
 80086ca:	2302      	movs	r3, #2
 80086cc:	e10f      	b.n	80088ee <HAL_RTC_SetDate+0x252>
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2201      	movs	r2, #1
 80086d2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2202      	movs	r2, #2
 80086d8:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d10e      	bne.n	80086fe <HAL_RTC_SetDate+0x62>
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	785b      	ldrb	r3, [r3, #1]
 80086e4:	f003 0310 	and.w	r3, r3, #16
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d008      	beq.n	80086fe <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	785b      	ldrb	r3, [r3, #1]
 80086f0:	f023 0310 	bic.w	r3, r3, #16
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	330a      	adds	r3, #10
 80086f8:	b2da      	uxtb	r2, r3
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	781b      	ldrb	r3, [r3, #0]
 8008702:	2b01      	cmp	r3, #1
 8008704:	d01c      	beq.n	8008740 <HAL_RTC_SetDate+0xa4>
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	2b02      	cmp	r3, #2
 800870c:	d018      	beq.n	8008740 <HAL_RTC_SetDate+0xa4>
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	2b03      	cmp	r3, #3
 8008714:	d014      	beq.n	8008740 <HAL_RTC_SetDate+0xa4>
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	2b04      	cmp	r3, #4
 800871c:	d010      	beq.n	8008740 <HAL_RTC_SetDate+0xa4>
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	2b05      	cmp	r3, #5
 8008724:	d00c      	beq.n	8008740 <HAL_RTC_SetDate+0xa4>
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	2b06      	cmp	r3, #6
 800872c:	d008      	beq.n	8008740 <HAL_RTC_SetDate+0xa4>
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	2b07      	cmp	r3, #7
 8008734:	d004      	beq.n	8008740 <HAL_RTC_SetDate+0xa4>
 8008736:	f240 3196 	movw	r1, #918	; 0x396
 800873a:	486f      	ldr	r0, [pc, #444]	; (80088f8 <HAL_RTC_SetDate+0x25c>)
 800873c:	f7f9 ff1d 	bl	800257a <assert_failed>

  if(Format == RTC_FORMAT_BIN)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d13f      	bne.n	80087c6 <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	78db      	ldrb	r3, [r3, #3]
 800874a:	2b63      	cmp	r3, #99	; 0x63
 800874c:	d904      	bls.n	8008758 <HAL_RTC_SetDate+0xbc>
 800874e:	f240 319a 	movw	r1, #922	; 0x39a
 8008752:	4869      	ldr	r0, [pc, #420]	; (80088f8 <HAL_RTC_SetDate+0x25c>)
 8008754:	f7f9 ff11 	bl	800257a <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	785b      	ldrb	r3, [r3, #1]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d003      	beq.n	8008768 <HAL_RTC_SetDate+0xcc>
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	785b      	ldrb	r3, [r3, #1]
 8008764:	2b0c      	cmp	r3, #12
 8008766:	d904      	bls.n	8008772 <HAL_RTC_SetDate+0xd6>
 8008768:	f240 319b 	movw	r1, #923	; 0x39b
 800876c:	4862      	ldr	r0, [pc, #392]	; (80088f8 <HAL_RTC_SetDate+0x25c>)
 800876e:	f7f9 ff04 	bl	800257a <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	789b      	ldrb	r3, [r3, #2]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d003      	beq.n	8008782 <HAL_RTC_SetDate+0xe6>
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	789b      	ldrb	r3, [r3, #2]
 800877e:	2b1f      	cmp	r3, #31
 8008780:	d904      	bls.n	800878c <HAL_RTC_SetDate+0xf0>
 8008782:	f44f 7167 	mov.w	r1, #924	; 0x39c
 8008786:	485c      	ldr	r0, [pc, #368]	; (80088f8 <HAL_RTC_SetDate+0x25c>)
 8008788:	f7f9 fef7 	bl	800257a <assert_failed>

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	78db      	ldrb	r3, [r3, #3]
 8008790:	4618      	mov	r0, r3
 8008792:	f000 f963 	bl	8008a5c <RTC_ByteToBcd2>
 8008796:	4603      	mov	r3, r0
 8008798:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	785b      	ldrb	r3, [r3, #1]
 800879e:	4618      	mov	r0, r3
 80087a0:	f000 f95c 	bl	8008a5c <RTC_ByteToBcd2>
 80087a4:	4603      	mov	r3, r0
 80087a6:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80087a8:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	789b      	ldrb	r3, [r3, #2]
 80087ae:	4618      	mov	r0, r3
 80087b0:	f000 f954 	bl	8008a5c <RTC_ByteToBcd2>
 80087b4:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80087b6:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80087c0:	4313      	orrs	r3, r2
 80087c2:	617b      	str	r3, [r7, #20]
 80087c4:	e045      	b.n	8008852 <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	78db      	ldrb	r3, [r3, #3]
 80087ca:	4618      	mov	r0, r3
 80087cc:	f000 f964 	bl	8008a98 <RTC_Bcd2ToByte>
 80087d0:	4603      	mov	r3, r0
 80087d2:	2b63      	cmp	r3, #99	; 0x63
 80087d4:	d904      	bls.n	80087e0 <HAL_RTC_SetDate+0x144>
 80087d6:	f240 31a5 	movw	r1, #933	; 0x3a5
 80087da:	4847      	ldr	r0, [pc, #284]	; (80088f8 <HAL_RTC_SetDate+0x25c>)
 80087dc:	f7f9 fecd 	bl	800257a <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	785b      	ldrb	r3, [r3, #1]
 80087e4:	4618      	mov	r0, r3
 80087e6:	f000 f957 	bl	8008a98 <RTC_Bcd2ToByte>
 80087ea:	4603      	mov	r3, r0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d007      	beq.n	8008800 <HAL_RTC_SetDate+0x164>
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	785b      	ldrb	r3, [r3, #1]
 80087f4:	4618      	mov	r0, r3
 80087f6:	f000 f94f 	bl	8008a98 <RTC_Bcd2ToByte>
 80087fa:	4603      	mov	r3, r0
 80087fc:	2b0c      	cmp	r3, #12
 80087fe:	d904      	bls.n	800880a <HAL_RTC_SetDate+0x16e>
 8008800:	f240 31a6 	movw	r1, #934	; 0x3a6
 8008804:	483c      	ldr	r0, [pc, #240]	; (80088f8 <HAL_RTC_SetDate+0x25c>)
 8008806:	f7f9 feb8 	bl	800257a <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	789b      	ldrb	r3, [r3, #2]
 800880e:	4618      	mov	r0, r3
 8008810:	f000 f942 	bl	8008a98 <RTC_Bcd2ToByte>
 8008814:	4603      	mov	r3, r0
 8008816:	2b00      	cmp	r3, #0
 8008818:	d007      	beq.n	800882a <HAL_RTC_SetDate+0x18e>
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	789b      	ldrb	r3, [r3, #2]
 800881e:	4618      	mov	r0, r3
 8008820:	f000 f93a 	bl	8008a98 <RTC_Bcd2ToByte>
 8008824:	4603      	mov	r3, r0
 8008826:	2b1f      	cmp	r3, #31
 8008828:	d904      	bls.n	8008834 <HAL_RTC_SetDate+0x198>
 800882a:	f240 31a7 	movw	r1, #935	; 0x3a7
 800882e:	4832      	ldr	r0, [pc, #200]	; (80088f8 <HAL_RTC_SetDate+0x25c>)
 8008830:	f7f9 fea3 	bl	800257a <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	78db      	ldrb	r3, [r3, #3]
 8008838:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	785b      	ldrb	r3, [r3, #1]
 800883e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008840:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008842:	68ba      	ldr	r2, [r7, #8]
 8008844:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8008846:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800884e:	4313      	orrs	r3, r2
 8008850:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	22ca      	movs	r2, #202	; 0xca
 8008858:	625a      	str	r2, [r3, #36]	; 0x24
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2253      	movs	r2, #83	; 0x53
 8008860:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008862:	68f8      	ldr	r0, [r7, #12]
 8008864:	f000 f8ce 	bl	8008a04 <RTC_EnterInitMode>
 8008868:	4603      	mov	r3, r0
 800886a:	2b00      	cmp	r3, #0
 800886c:	d00b      	beq.n	8008886 <HAL_RTC_SetDate+0x1ea>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	22ff      	movs	r2, #255	; 0xff
 8008874:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2204      	movs	r2, #4
 800887a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2200      	movs	r2, #0
 8008880:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008882:	2301      	movs	r3, #1
 8008884:	e033      	b.n	80088ee <HAL_RTC_SetDate+0x252>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681a      	ldr	r2, [r3, #0]
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008890:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008894:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	68da      	ldr	r2, [r3, #12]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80088a4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	f003 0320 	and.w	r3, r3, #32
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d111      	bne.n	80088d8 <HAL_RTC_SetDate+0x23c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80088b4:	68f8      	ldr	r0, [r7, #12]
 80088b6:	f000 f87d 	bl	80089b4 <HAL_RTC_WaitForSynchro>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d00b      	beq.n	80088d8 <HAL_RTC_SetDate+0x23c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	22ff      	movs	r2, #255	; 0xff
 80088c6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2204      	movs	r2, #4
 80088cc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2200      	movs	r2, #0
 80088d2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80088d4:	2301      	movs	r3, #1
 80088d6:	e00a      	b.n	80088ee <HAL_RTC_SetDate+0x252>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	22ff      	movs	r2, #255	; 0xff
 80088de:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2201      	movs	r2, #1
 80088e4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2200      	movs	r2, #0
 80088ea:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80088ec:	2300      	movs	r3, #0
  }
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	371c      	adds	r7, #28
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd90      	pop	{r4, r7, pc}
 80088f6:	bf00      	nop
 80088f8:	0801b068 	.word	0x0801b068

080088fc <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b086      	sub	sp, #24
 8008900:	af00      	add	r7, sp, #0
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008908:	2300      	movs	r3, #0
 800890a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d007      	beq.n	8008922 <HAL_RTC_GetDate+0x26>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2b01      	cmp	r3, #1
 8008916:	d004      	beq.n	8008922 <HAL_RTC_GetDate+0x26>
 8008918:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800891c:	4824      	ldr	r0, [pc, #144]	; (80089b0 <HAL_RTC_GetDate+0xb4>)
 800891e:	f7f9 fe2c 	bl	800257a <assert_failed>

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800892c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008930:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	0c1b      	lsrs	r3, r3, #16
 8008936:	b2da      	uxtb	r2, r3
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	0a1b      	lsrs	r3, r3, #8
 8008940:	b2db      	uxtb	r3, r3
 8008942:	f003 031f 	and.w	r3, r3, #31
 8008946:	b2da      	uxtb	r2, r3
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	b2db      	uxtb	r3, r3
 8008950:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008954:	b2da      	uxtb	r2, r3
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	0b5b      	lsrs	r3, r3, #13
 800895e:	b2db      	uxtb	r3, r3
 8008960:	f003 0307 	and.w	r3, r3, #7
 8008964:	b2da      	uxtb	r2, r3
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d11a      	bne.n	80089a6 <HAL_RTC_GetDate+0xaa>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	78db      	ldrb	r3, [r3, #3]
 8008974:	4618      	mov	r0, r3
 8008976:	f000 f88f 	bl	8008a98 <RTC_Bcd2ToByte>
 800897a:	4603      	mov	r3, r0
 800897c:	461a      	mov	r2, r3
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	785b      	ldrb	r3, [r3, #1]
 8008986:	4618      	mov	r0, r3
 8008988:	f000 f886 	bl	8008a98 <RTC_Bcd2ToByte>
 800898c:	4603      	mov	r3, r0
 800898e:	461a      	mov	r2, r3
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	789b      	ldrb	r3, [r3, #2]
 8008998:	4618      	mov	r0, r3
 800899a:	f000 f87d 	bl	8008a98 <RTC_Bcd2ToByte>
 800899e:	4603      	mov	r3, r0
 80089a0:	461a      	mov	r2, r3
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3718      	adds	r7, #24
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	0801b068 	.word	0x0801b068

080089b4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80089bc:	2300      	movs	r3, #0
 80089be:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	68da      	ldr	r2, [r3, #12]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80089ce:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80089d0:	f7fc f8fc 	bl	8004bcc <HAL_GetTick>
 80089d4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80089d6:	e009      	b.n	80089ec <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80089d8:	f7fc f8f8 	bl	8004bcc <HAL_GetTick>
 80089dc:	4602      	mov	r2, r0
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	1ad3      	subs	r3, r2, r3
 80089e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80089e6:	d901      	bls.n	80089ec <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80089e8:	2303      	movs	r3, #3
 80089ea:	e007      	b.n	80089fc <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	68db      	ldr	r3, [r3, #12]
 80089f2:	f003 0320 	and.w	r3, r3, #32
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d0ee      	beq.n	80089d8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80089fa:	2300      	movs	r3, #0
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3710      	adds	r7, #16
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b084      	sub	sp, #16
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	68db      	ldr	r3, [r3, #12]
 8008a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d119      	bne.n	8008a52 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f04f 32ff 	mov.w	r2, #4294967295
 8008a26:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008a28:	f7fc f8d0 	bl	8004bcc <HAL_GetTick>
 8008a2c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008a2e:	e009      	b.n	8008a44 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008a30:	f7fc f8cc 	bl	8004bcc <HAL_GetTick>
 8008a34:	4602      	mov	r2, r0
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	1ad3      	subs	r3, r2, r3
 8008a3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a3e:	d901      	bls.n	8008a44 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008a40:	2303      	movs	r3, #3
 8008a42:	e007      	b.n	8008a54 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	68db      	ldr	r3, [r3, #12]
 8008a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d0ee      	beq.n	8008a30 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008a52:	2300      	movs	r3, #0
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3710      	adds	r7, #16
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b085      	sub	sp, #20
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	4603      	mov	r3, r0
 8008a64:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008a66:	2300      	movs	r3, #0
 8008a68:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8008a6a:	e005      	b.n	8008a78 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	3301      	adds	r3, #1
 8008a70:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8008a72:	79fb      	ldrb	r3, [r7, #7]
 8008a74:	3b0a      	subs	r3, #10
 8008a76:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8008a78:	79fb      	ldrb	r3, [r7, #7]
 8008a7a:	2b09      	cmp	r3, #9
 8008a7c:	d8f6      	bhi.n	8008a6c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	011b      	lsls	r3, r3, #4
 8008a84:	b2da      	uxtb	r2, r3
 8008a86:	79fb      	ldrb	r3, [r7, #7]
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	b2db      	uxtb	r3, r3
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3714      	adds	r7, #20
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b085      	sub	sp, #20
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8008aa6:	79fb      	ldrb	r3, [r7, #7]
 8008aa8:	091b      	lsrs	r3, r3, #4
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	461a      	mov	r2, r3
 8008aae:	4613      	mov	r3, r2
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	4413      	add	r3, r2
 8008ab4:	005b      	lsls	r3, r3, #1
 8008ab6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8008ab8:	79fb      	ldrb	r3, [r7, #7]
 8008aba:	f003 030f 	and.w	r3, r3, #15
 8008abe:	b2da      	uxtb	r2, r3
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	4413      	add	r3, r2
 8008ac6:	b2db      	uxtb	r3, r3
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3714      	adds	r7, #20
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr

08008ad4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b082      	sub	sp, #8
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d101      	bne.n	8008ae6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	e192      	b.n	8008e0c <HAL_SPI_Init+0x338>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a77      	ldr	r2, [pc, #476]	; (8008cc8 <HAL_SPI_Init+0x1f4>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d01d      	beq.n	8008b2c <HAL_SPI_Init+0x58>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a75      	ldr	r2, [pc, #468]	; (8008ccc <HAL_SPI_Init+0x1f8>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d018      	beq.n	8008b2c <HAL_SPI_Init+0x58>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a74      	ldr	r2, [pc, #464]	; (8008cd0 <HAL_SPI_Init+0x1fc>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d013      	beq.n	8008b2c <HAL_SPI_Init+0x58>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a72      	ldr	r2, [pc, #456]	; (8008cd4 <HAL_SPI_Init+0x200>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d00e      	beq.n	8008b2c <HAL_SPI_Init+0x58>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a71      	ldr	r2, [pc, #452]	; (8008cd8 <HAL_SPI_Init+0x204>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d009      	beq.n	8008b2c <HAL_SPI_Init+0x58>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a6f      	ldr	r2, [pc, #444]	; (8008cdc <HAL_SPI_Init+0x208>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d004      	beq.n	8008b2c <HAL_SPI_Init+0x58>
 8008b22:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8008b26:	486e      	ldr	r0, [pc, #440]	; (8008ce0 <HAL_SPI_Init+0x20c>)
 8008b28:	f7f9 fd27 	bl	800257a <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d009      	beq.n	8008b48 <HAL_SPI_Init+0x74>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b3c:	d004      	beq.n	8008b48 <HAL_SPI_Init+0x74>
 8008b3e:	f240 1143 	movw	r1, #323	; 0x143
 8008b42:	4867      	ldr	r0, [pc, #412]	; (8008ce0 <HAL_SPI_Init+0x20c>)
 8008b44:	f7f9 fd19 	bl	800257a <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d00e      	beq.n	8008b6e <HAL_SPI_Init+0x9a>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b58:	d009      	beq.n	8008b6e <HAL_SPI_Init+0x9a>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b62:	d004      	beq.n	8008b6e <HAL_SPI_Init+0x9a>
 8008b64:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8008b68:	485d      	ldr	r0, [pc, #372]	; (8008ce0 <HAL_SPI_Init+0x20c>)
 8008b6a:	f7f9 fd06 	bl	800257a <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	68db      	ldr	r3, [r3, #12]
 8008b72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b76:	d008      	beq.n	8008b8a <HAL_SPI_Init+0xb6>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	68db      	ldr	r3, [r3, #12]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d004      	beq.n	8008b8a <HAL_SPI_Init+0xb6>
 8008b80:	f240 1145 	movw	r1, #325	; 0x145
 8008b84:	4856      	ldr	r0, [pc, #344]	; (8008ce0 <HAL_SPI_Init+0x20c>)
 8008b86:	f7f9 fcf8 	bl	800257a <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	699b      	ldr	r3, [r3, #24]
 8008b8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b92:	d00d      	beq.n	8008bb0 <HAL_SPI_Init+0xdc>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	699b      	ldr	r3, [r3, #24]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d009      	beq.n	8008bb0 <HAL_SPI_Init+0xdc>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	699b      	ldr	r3, [r3, #24]
 8008ba0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008ba4:	d004      	beq.n	8008bb0 <HAL_SPI_Init+0xdc>
 8008ba6:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8008baa:	484d      	ldr	r0, [pc, #308]	; (8008ce0 <HAL_SPI_Init+0x20c>)
 8008bac:	f7f9 fce5 	bl	800257a <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	69db      	ldr	r3, [r3, #28]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d020      	beq.n	8008bfa <HAL_SPI_Init+0x126>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	69db      	ldr	r3, [r3, #28]
 8008bbc:	2b08      	cmp	r3, #8
 8008bbe:	d01c      	beq.n	8008bfa <HAL_SPI_Init+0x126>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	69db      	ldr	r3, [r3, #28]
 8008bc4:	2b10      	cmp	r3, #16
 8008bc6:	d018      	beq.n	8008bfa <HAL_SPI_Init+0x126>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	69db      	ldr	r3, [r3, #28]
 8008bcc:	2b18      	cmp	r3, #24
 8008bce:	d014      	beq.n	8008bfa <HAL_SPI_Init+0x126>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	69db      	ldr	r3, [r3, #28]
 8008bd4:	2b20      	cmp	r3, #32
 8008bd6:	d010      	beq.n	8008bfa <HAL_SPI_Init+0x126>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	69db      	ldr	r3, [r3, #28]
 8008bdc:	2b28      	cmp	r3, #40	; 0x28
 8008bde:	d00c      	beq.n	8008bfa <HAL_SPI_Init+0x126>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	69db      	ldr	r3, [r3, #28]
 8008be4:	2b30      	cmp	r3, #48	; 0x30
 8008be6:	d008      	beq.n	8008bfa <HAL_SPI_Init+0x126>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	69db      	ldr	r3, [r3, #28]
 8008bec:	2b38      	cmp	r3, #56	; 0x38
 8008bee:	d004      	beq.n	8008bfa <HAL_SPI_Init+0x126>
 8008bf0:	f240 1147 	movw	r1, #327	; 0x147
 8008bf4:	483a      	ldr	r0, [pc, #232]	; (8008ce0 <HAL_SPI_Init+0x20c>)
 8008bf6:	f7f9 fcc0 	bl	800257a <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6a1b      	ldr	r3, [r3, #32]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d008      	beq.n	8008c14 <HAL_SPI_Init+0x140>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6a1b      	ldr	r3, [r3, #32]
 8008c06:	2b80      	cmp	r3, #128	; 0x80
 8008c08:	d004      	beq.n	8008c14 <HAL_SPI_Init+0x140>
 8008c0a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008c0e:	4834      	ldr	r0, [pc, #208]	; (8008ce0 <HAL_SPI_Init+0x20c>)
 8008c10:	f7f9 fcb3 	bl	800257a <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d008      	beq.n	8008c2e <HAL_SPI_Init+0x15a>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c20:	2b10      	cmp	r3, #16
 8008c22:	d004      	beq.n	8008c2e <HAL_SPI_Init+0x15a>
 8008c24:	f240 1149 	movw	r1, #329	; 0x149
 8008c28:	482d      	ldr	r0, [pc, #180]	; (8008ce0 <HAL_SPI_Init+0x20c>)
 8008c2a:	f7f9 fca6 	bl	800257a <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d156      	bne.n	8008ce4 <HAL_SPI_Init+0x210>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	691b      	ldr	r3, [r3, #16]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d008      	beq.n	8008c50 <HAL_SPI_Init+0x17c>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	691b      	ldr	r3, [r3, #16]
 8008c42:	2b02      	cmp	r3, #2
 8008c44:	d004      	beq.n	8008c50 <HAL_SPI_Init+0x17c>
 8008c46:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8008c4a:	4825      	ldr	r0, [pc, #148]	; (8008ce0 <HAL_SPI_Init+0x20c>)
 8008c4c:	f7f9 fc95 	bl	800257a <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	695b      	ldr	r3, [r3, #20]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d008      	beq.n	8008c6a <HAL_SPI_Init+0x196>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	695b      	ldr	r3, [r3, #20]
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d004      	beq.n	8008c6a <HAL_SPI_Init+0x196>
 8008c60:	f240 114d 	movw	r1, #333	; 0x14d
 8008c64:	481e      	ldr	r0, [pc, #120]	; (8008ce0 <HAL_SPI_Init+0x20c>)
 8008c66:	f7f9 fc88 	bl	800257a <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c72:	d125      	bne.n	8008cc0 <HAL_SPI_Init+0x1ec>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	69db      	ldr	r3, [r3, #28]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d05e      	beq.n	8008d3a <HAL_SPI_Init+0x266>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	69db      	ldr	r3, [r3, #28]
 8008c80:	2b08      	cmp	r3, #8
 8008c82:	d05a      	beq.n	8008d3a <HAL_SPI_Init+0x266>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	69db      	ldr	r3, [r3, #28]
 8008c88:	2b10      	cmp	r3, #16
 8008c8a:	d056      	beq.n	8008d3a <HAL_SPI_Init+0x266>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	69db      	ldr	r3, [r3, #28]
 8008c90:	2b18      	cmp	r3, #24
 8008c92:	d052      	beq.n	8008d3a <HAL_SPI_Init+0x266>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	69db      	ldr	r3, [r3, #28]
 8008c98:	2b20      	cmp	r3, #32
 8008c9a:	d04e      	beq.n	8008d3a <HAL_SPI_Init+0x266>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	69db      	ldr	r3, [r3, #28]
 8008ca0:	2b28      	cmp	r3, #40	; 0x28
 8008ca2:	d04a      	beq.n	8008d3a <HAL_SPI_Init+0x266>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	69db      	ldr	r3, [r3, #28]
 8008ca8:	2b30      	cmp	r3, #48	; 0x30
 8008caa:	d046      	beq.n	8008d3a <HAL_SPI_Init+0x266>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	69db      	ldr	r3, [r3, #28]
 8008cb0:	2b38      	cmp	r3, #56	; 0x38
 8008cb2:	d042      	beq.n	8008d3a <HAL_SPI_Init+0x266>
 8008cb4:	f240 1151 	movw	r1, #337	; 0x151
 8008cb8:	4809      	ldr	r0, [pc, #36]	; (8008ce0 <HAL_SPI_Init+0x20c>)
 8008cba:	f7f9 fc5e 	bl	800257a <assert_failed>
 8008cbe:	e03c      	b.n	8008d3a <HAL_SPI_Init+0x266>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	61da      	str	r2, [r3, #28]
 8008cc6:	e038      	b.n	8008d3a <HAL_SPI_Init+0x266>
 8008cc8:	40013000 	.word	0x40013000
 8008ccc:	40003800 	.word	0x40003800
 8008cd0:	40003c00 	.word	0x40003c00
 8008cd4:	40013400 	.word	0x40013400
 8008cd8:	40015000 	.word	0x40015000
 8008cdc:	40015400 	.word	0x40015400
 8008ce0:	0801b0a0 	.word	0x0801b0a0
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	69db      	ldr	r3, [r3, #28]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d020      	beq.n	8008d2e <HAL_SPI_Init+0x25a>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	69db      	ldr	r3, [r3, #28]
 8008cf0:	2b08      	cmp	r3, #8
 8008cf2:	d01c      	beq.n	8008d2e <HAL_SPI_Init+0x25a>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	69db      	ldr	r3, [r3, #28]
 8008cf8:	2b10      	cmp	r3, #16
 8008cfa:	d018      	beq.n	8008d2e <HAL_SPI_Init+0x25a>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	69db      	ldr	r3, [r3, #28]
 8008d00:	2b18      	cmp	r3, #24
 8008d02:	d014      	beq.n	8008d2e <HAL_SPI_Init+0x25a>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	69db      	ldr	r3, [r3, #28]
 8008d08:	2b20      	cmp	r3, #32
 8008d0a:	d010      	beq.n	8008d2e <HAL_SPI_Init+0x25a>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	69db      	ldr	r3, [r3, #28]
 8008d10:	2b28      	cmp	r3, #40	; 0x28
 8008d12:	d00c      	beq.n	8008d2e <HAL_SPI_Init+0x25a>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	69db      	ldr	r3, [r3, #28]
 8008d18:	2b30      	cmp	r3, #48	; 0x30
 8008d1a:	d008      	beq.n	8008d2e <HAL_SPI_Init+0x25a>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	69db      	ldr	r3, [r3, #28]
 8008d20:	2b38      	cmp	r3, #56	; 0x38
 8008d22:	d004      	beq.n	8008d2e <HAL_SPI_Init+0x25a>
 8008d24:	f240 115b 	movw	r1, #347	; 0x15b
 8008d28:	483a      	ldr	r0, [pc, #232]	; (8008e14 <HAL_SPI_Init+0x340>)
 8008d2a:	f7f9 fc26 	bl	800257a <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2200      	movs	r2, #0
 8008d32:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2200      	movs	r2, #0
 8008d38:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d46:	b2db      	uxtb	r3, r3
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d106      	bne.n	8008d5a <HAL_SPI_Init+0x286>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f7fb f917 	bl	8003f88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2202      	movs	r2, #2
 8008d5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	681a      	ldr	r2, [r3, #0]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d70:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008d82:	431a      	orrs	r2, r3
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	68db      	ldr	r3, [r3, #12]
 8008d88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d8c:	431a      	orrs	r2, r3
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	691b      	ldr	r3, [r3, #16]
 8008d92:	f003 0302 	and.w	r3, r3, #2
 8008d96:	431a      	orrs	r2, r3
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	695b      	ldr	r3, [r3, #20]
 8008d9c:	f003 0301 	and.w	r3, r3, #1
 8008da0:	431a      	orrs	r2, r3
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	699b      	ldr	r3, [r3, #24]
 8008da6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008daa:	431a      	orrs	r2, r3
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	69db      	ldr	r3, [r3, #28]
 8008db0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008db4:	431a      	orrs	r2, r3
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6a1b      	ldr	r3, [r3, #32]
 8008dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dbe:	ea42 0103 	orr.w	r1, r2, r3
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dc6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	430a      	orrs	r2, r1
 8008dd0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	699b      	ldr	r3, [r3, #24]
 8008dd6:	0c1b      	lsrs	r3, r3, #16
 8008dd8:	f003 0104 	and.w	r1, r3, #4
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de0:	f003 0210 	and.w	r2, r3, #16
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	430a      	orrs	r2, r1
 8008dea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	69da      	ldr	r2, [r3, #28]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008dfa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2201      	movs	r2, #1
 8008e06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008e0a:	2300      	movs	r3, #0
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3708      	adds	r7, #8
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}
 8008e14:	0801b0a0 	.word	0x0801b0a0

08008e18 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b088      	sub	sp, #32
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	60f8      	str	r0, [r7, #12]
 8008e20:	60b9      	str	r1, [r7, #8]
 8008e22:	603b      	str	r3, [r7, #0]
 8008e24:	4613      	mov	r3, r2
 8008e26:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d009      	beq.n	8008e48 <HAL_SPI_Transmit+0x30>
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e3c:	d004      	beq.n	8008e48 <HAL_SPI_Transmit+0x30>
 8008e3e:	f240 310a 	movw	r1, #778	; 0x30a
 8008e42:	4893      	ldr	r0, [pc, #588]	; (8009090 <HAL_SPI_Transmit+0x278>)
 8008e44:	f7f9 fb99 	bl	800257a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d101      	bne.n	8008e56 <HAL_SPI_Transmit+0x3e>
 8008e52:	2302      	movs	r3, #2
 8008e54:	e128      	b.n	80090a8 <HAL_SPI_Transmit+0x290>
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2201      	movs	r2, #1
 8008e5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008e5e:	f7fb feb5 	bl	8004bcc <HAL_GetTick>
 8008e62:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008e64:	88fb      	ldrh	r3, [r7, #6]
 8008e66:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d002      	beq.n	8008e7a <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8008e74:	2302      	movs	r3, #2
 8008e76:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008e78:	e10d      	b.n	8009096 <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d002      	beq.n	8008e86 <HAL_SPI_Transmit+0x6e>
 8008e80:	88fb      	ldrh	r3, [r7, #6]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d102      	bne.n	8008e8c <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 8008e86:	2301      	movs	r3, #1
 8008e88:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008e8a:	e104      	b.n	8009096 <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2203      	movs	r2, #3
 8008e90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2200      	movs	r2, #0
 8008e98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	68ba      	ldr	r2, [r7, #8]
 8008e9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	88fa      	ldrh	r2, [r7, #6]
 8008ea4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	88fa      	ldrh	r2, [r7, #6]
 8008eaa:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	689b      	ldr	r3, [r3, #8]
 8008ece:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ed2:	d10f      	bne.n	8008ef4 <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ee2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008ef2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008efe:	2b40      	cmp	r3, #64	; 0x40
 8008f00:	d007      	beq.n	8008f12 <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f10:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	68db      	ldr	r3, [r3, #12]
 8008f16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f1a:	d14b      	bne.n	8008fb4 <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d002      	beq.n	8008f2a <HAL_SPI_Transmit+0x112>
 8008f24:	8afb      	ldrh	r3, [r7, #22]
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	d13e      	bne.n	8008fa8 <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f2e:	881a      	ldrh	r2, [r3, #0]
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f3a:	1c9a      	adds	r2, r3, #2
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	3b01      	subs	r3, #1
 8008f48:	b29a      	uxth	r2, r3
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008f4e:	e02b      	b.n	8008fa8 <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	689b      	ldr	r3, [r3, #8]
 8008f56:	f003 0302 	and.w	r3, r3, #2
 8008f5a:	2b02      	cmp	r3, #2
 8008f5c:	d112      	bne.n	8008f84 <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f62:	881a      	ldrh	r2, [r3, #0]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f6e:	1c9a      	adds	r2, r3, #2
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	b29a      	uxth	r2, r3
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	86da      	strh	r2, [r3, #54]	; 0x36
 8008f82:	e011      	b.n	8008fa8 <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f84:	f7fb fe22 	bl	8004bcc <HAL_GetTick>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	1ad3      	subs	r3, r2, r3
 8008f8e:	683a      	ldr	r2, [r7, #0]
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d803      	bhi.n	8008f9c <HAL_SPI_Transmit+0x184>
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f9a:	d102      	bne.n	8008fa2 <HAL_SPI_Transmit+0x18a>
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d102      	bne.n	8008fa8 <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 8008fa2:	2303      	movs	r3, #3
 8008fa4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008fa6:	e076      	b.n	8009096 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008fac:	b29b      	uxth	r3, r3
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d1ce      	bne.n	8008f50 <HAL_SPI_Transmit+0x138>
 8008fb2:	e04c      	b.n	800904e <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d002      	beq.n	8008fc2 <HAL_SPI_Transmit+0x1aa>
 8008fbc:	8afb      	ldrh	r3, [r7, #22]
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d140      	bne.n	8009044 <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	330c      	adds	r3, #12
 8008fcc:	7812      	ldrb	r2, [r2, #0]
 8008fce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fd4:	1c5a      	adds	r2, r3, #1
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	3b01      	subs	r3, #1
 8008fe2:	b29a      	uxth	r2, r3
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008fe8:	e02c      	b.n	8009044 <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	f003 0302 	and.w	r3, r3, #2
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	d113      	bne.n	8009020 <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	330c      	adds	r3, #12
 8009002:	7812      	ldrb	r2, [r2, #0]
 8009004:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800900a:	1c5a      	adds	r2, r3, #1
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009014:	b29b      	uxth	r3, r3
 8009016:	3b01      	subs	r3, #1
 8009018:	b29a      	uxth	r2, r3
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	86da      	strh	r2, [r3, #54]	; 0x36
 800901e:	e011      	b.n	8009044 <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009020:	f7fb fdd4 	bl	8004bcc <HAL_GetTick>
 8009024:	4602      	mov	r2, r0
 8009026:	69bb      	ldr	r3, [r7, #24]
 8009028:	1ad3      	subs	r3, r2, r3
 800902a:	683a      	ldr	r2, [r7, #0]
 800902c:	429a      	cmp	r2, r3
 800902e:	d803      	bhi.n	8009038 <HAL_SPI_Transmit+0x220>
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009036:	d102      	bne.n	800903e <HAL_SPI_Transmit+0x226>
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d102      	bne.n	8009044 <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 800903e:	2303      	movs	r3, #3
 8009040:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009042:	e028      	b.n	8009096 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009048:	b29b      	uxth	r3, r3
 800904a:	2b00      	cmp	r3, #0
 800904c:	d1cd      	bne.n	8008fea <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800904e:	69ba      	ldr	r2, [r7, #24]
 8009050:	6839      	ldr	r1, [r7, #0]
 8009052:	68f8      	ldr	r0, [r7, #12]
 8009054:	f000 f8b4 	bl	80091c0 <SPI_EndRxTxTransaction>
 8009058:	4603      	mov	r3, r0
 800905a:	2b00      	cmp	r3, #0
 800905c:	d002      	beq.n	8009064 <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2220      	movs	r2, #32
 8009062:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	689b      	ldr	r3, [r3, #8]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d10a      	bne.n	8009082 <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800906c:	2300      	movs	r3, #0
 800906e:	613b      	str	r3, [r7, #16]
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	68db      	ldr	r3, [r3, #12]
 8009076:	613b      	str	r3, [r7, #16]
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	689b      	ldr	r3, [r3, #8]
 800907e:	613b      	str	r3, [r7, #16]
 8009080:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009086:	2b00      	cmp	r3, #0
 8009088:	d004      	beq.n	8009094 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 800908a:	2301      	movs	r3, #1
 800908c:	77fb      	strb	r3, [r7, #31]
 800908e:	e002      	b.n	8009096 <HAL_SPI_Transmit+0x27e>
 8009090:	0801b0a0 	.word	0x0801b0a0
  }

error:
 8009094:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2201      	movs	r2, #1
 800909a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2200      	movs	r2, #0
 80090a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80090a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3720      	adds	r7, #32
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b088      	sub	sp, #32
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	60b9      	str	r1, [r7, #8]
 80090ba:	603b      	str	r3, [r7, #0]
 80090bc:	4613      	mov	r3, r2
 80090be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80090c0:	f7fb fd84 	bl	8004bcc <HAL_GetTick>
 80090c4:	4602      	mov	r2, r0
 80090c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c8:	1a9b      	subs	r3, r3, r2
 80090ca:	683a      	ldr	r2, [r7, #0]
 80090cc:	4413      	add	r3, r2
 80090ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80090d0:	f7fb fd7c 	bl	8004bcc <HAL_GetTick>
 80090d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80090d6:	4b39      	ldr	r3, [pc, #228]	; (80091bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	015b      	lsls	r3, r3, #5
 80090dc:	0d1b      	lsrs	r3, r3, #20
 80090de:	69fa      	ldr	r2, [r7, #28]
 80090e0:	fb02 f303 	mul.w	r3, r2, r3
 80090e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80090e6:	e054      	b.n	8009192 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ee:	d050      	beq.n	8009192 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80090f0:	f7fb fd6c 	bl	8004bcc <HAL_GetTick>
 80090f4:	4602      	mov	r2, r0
 80090f6:	69bb      	ldr	r3, [r7, #24]
 80090f8:	1ad3      	subs	r3, r2, r3
 80090fa:	69fa      	ldr	r2, [r7, #28]
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d902      	bls.n	8009106 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009100:	69fb      	ldr	r3, [r7, #28]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d13d      	bne.n	8009182 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	685a      	ldr	r2, [r3, #4]
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009114:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800911e:	d111      	bne.n	8009144 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	689b      	ldr	r3, [r3, #8]
 8009124:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009128:	d004      	beq.n	8009134 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009132:	d107      	bne.n	8009144 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009142:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009148:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800914c:	d10f      	bne.n	800916e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800915c:	601a      	str	r2, [r3, #0]
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800916c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2201      	movs	r2, #1
 8009172:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2200      	movs	r2, #0
 800917a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800917e:	2303      	movs	r3, #3
 8009180:	e017      	b.n	80091b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d101      	bne.n	800918c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009188:	2300      	movs	r3, #0
 800918a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	3b01      	subs	r3, #1
 8009190:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	689a      	ldr	r2, [r3, #8]
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	4013      	ands	r3, r2
 800919c:	68ba      	ldr	r2, [r7, #8]
 800919e:	429a      	cmp	r2, r3
 80091a0:	bf0c      	ite	eq
 80091a2:	2301      	moveq	r3, #1
 80091a4:	2300      	movne	r3, #0
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	461a      	mov	r2, r3
 80091aa:	79fb      	ldrb	r3, [r7, #7]
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d19b      	bne.n	80090e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80091b0:	2300      	movs	r3, #0
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3720      	adds	r7, #32
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	20000008 	.word	0x20000008

080091c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b088      	sub	sp, #32
 80091c4:	af02      	add	r7, sp, #8
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	60b9      	str	r1, [r7, #8]
 80091ca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80091cc:	4b1b      	ldr	r3, [pc, #108]	; (800923c <SPI_EndRxTxTransaction+0x7c>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a1b      	ldr	r2, [pc, #108]	; (8009240 <SPI_EndRxTxTransaction+0x80>)
 80091d2:	fba2 2303 	umull	r2, r3, r2, r3
 80091d6:	0d5b      	lsrs	r3, r3, #21
 80091d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80091dc:	fb02 f303 	mul.w	r3, r2, r3
 80091e0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80091ea:	d112      	bne.n	8009212 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	9300      	str	r3, [sp, #0]
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	2200      	movs	r2, #0
 80091f4:	2180      	movs	r1, #128	; 0x80
 80091f6:	68f8      	ldr	r0, [r7, #12]
 80091f8:	f7ff ff5a 	bl	80090b0 <SPI_WaitFlagStateUntilTimeout>
 80091fc:	4603      	mov	r3, r0
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d016      	beq.n	8009230 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009206:	f043 0220 	orr.w	r2, r3, #32
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800920e:	2303      	movs	r3, #3
 8009210:	e00f      	b.n	8009232 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d00a      	beq.n	800922e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	3b01      	subs	r3, #1
 800921c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009228:	2b80      	cmp	r3, #128	; 0x80
 800922a:	d0f2      	beq.n	8009212 <SPI_EndRxTxTransaction+0x52>
 800922c:	e000      	b.n	8009230 <SPI_EndRxTxTransaction+0x70>
        break;
 800922e:	bf00      	nop
  }

  return HAL_OK;
 8009230:	2300      	movs	r3, #0
}
 8009232:	4618      	mov	r0, r3
 8009234:	3718      	adds	r7, #24
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
 800923a:	bf00      	nop
 800923c:	20000008 	.word	0x20000008
 8009240:	165e9f81 	.word	0x165e9f81

08009244 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b082      	sub	sp, #8
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d101      	bne.n	8009256 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009252:	2301      	movs	r3, #1
 8009254:	e0c5      	b.n	80093e2 <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a64      	ldr	r2, [pc, #400]	; (80093ec <HAL_TIM_Base_Init+0x1a8>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d045      	beq.n	80092ec <HAL_TIM_Base_Init+0xa8>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009268:	d040      	beq.n	80092ec <HAL_TIM_Base_Init+0xa8>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4a60      	ldr	r2, [pc, #384]	; (80093f0 <HAL_TIM_Base_Init+0x1ac>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d03b      	beq.n	80092ec <HAL_TIM_Base_Init+0xa8>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4a5e      	ldr	r2, [pc, #376]	; (80093f4 <HAL_TIM_Base_Init+0x1b0>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d036      	beq.n	80092ec <HAL_TIM_Base_Init+0xa8>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4a5d      	ldr	r2, [pc, #372]	; (80093f8 <HAL_TIM_Base_Init+0x1b4>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d031      	beq.n	80092ec <HAL_TIM_Base_Init+0xa8>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a5b      	ldr	r2, [pc, #364]	; (80093fc <HAL_TIM_Base_Init+0x1b8>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d02c      	beq.n	80092ec <HAL_TIM_Base_Init+0xa8>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4a5a      	ldr	r2, [pc, #360]	; (8009400 <HAL_TIM_Base_Init+0x1bc>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d027      	beq.n	80092ec <HAL_TIM_Base_Init+0xa8>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a58      	ldr	r2, [pc, #352]	; (8009404 <HAL_TIM_Base_Init+0x1c0>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d022      	beq.n	80092ec <HAL_TIM_Base_Init+0xa8>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a57      	ldr	r2, [pc, #348]	; (8009408 <HAL_TIM_Base_Init+0x1c4>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d01d      	beq.n	80092ec <HAL_TIM_Base_Init+0xa8>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a55      	ldr	r2, [pc, #340]	; (800940c <HAL_TIM_Base_Init+0x1c8>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d018      	beq.n	80092ec <HAL_TIM_Base_Init+0xa8>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4a54      	ldr	r2, [pc, #336]	; (8009410 <HAL_TIM_Base_Init+0x1cc>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d013      	beq.n	80092ec <HAL_TIM_Base_Init+0xa8>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a52      	ldr	r2, [pc, #328]	; (8009414 <HAL_TIM_Base_Init+0x1d0>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d00e      	beq.n	80092ec <HAL_TIM_Base_Init+0xa8>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a51      	ldr	r2, [pc, #324]	; (8009418 <HAL_TIM_Base_Init+0x1d4>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d009      	beq.n	80092ec <HAL_TIM_Base_Init+0xa8>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a4f      	ldr	r2, [pc, #316]	; (800941c <HAL_TIM_Base_Init+0x1d8>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d004      	beq.n	80092ec <HAL_TIM_Base_Init+0xa8>
 80092e2:	f240 1113 	movw	r1, #275	; 0x113
 80092e6:	484e      	ldr	r0, [pc, #312]	; (8009420 <HAL_TIM_Base_Init+0x1dc>)
 80092e8:	f7f9 f947 	bl	800257a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d014      	beq.n	800931e <HAL_TIM_Base_Init+0xda>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	2b10      	cmp	r3, #16
 80092fa:	d010      	beq.n	800931e <HAL_TIM_Base_Init+0xda>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	689b      	ldr	r3, [r3, #8]
 8009300:	2b20      	cmp	r3, #32
 8009302:	d00c      	beq.n	800931e <HAL_TIM_Base_Init+0xda>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	689b      	ldr	r3, [r3, #8]
 8009308:	2b40      	cmp	r3, #64	; 0x40
 800930a:	d008      	beq.n	800931e <HAL_TIM_Base_Init+0xda>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	2b60      	cmp	r3, #96	; 0x60
 8009312:	d004      	beq.n	800931e <HAL_TIM_Base_Init+0xda>
 8009314:	f44f 718a 	mov.w	r1, #276	; 0x114
 8009318:	4841      	ldr	r0, [pc, #260]	; (8009420 <HAL_TIM_Base_Init+0x1dc>)
 800931a:	f7f9 f92e 	bl	800257a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	691b      	ldr	r3, [r3, #16]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00e      	beq.n	8009344 <HAL_TIM_Base_Init+0x100>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	691b      	ldr	r3, [r3, #16]
 800932a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800932e:	d009      	beq.n	8009344 <HAL_TIM_Base_Init+0x100>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	691b      	ldr	r3, [r3, #16]
 8009334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009338:	d004      	beq.n	8009344 <HAL_TIM_Base_Init+0x100>
 800933a:	f240 1115 	movw	r1, #277	; 0x115
 800933e:	4838      	ldr	r0, [pc, #224]	; (8009420 <HAL_TIM_Base_Init+0x1dc>)
 8009340:	f7f9 f91b 	bl	800257a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	699b      	ldr	r3, [r3, #24]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d008      	beq.n	800935e <HAL_TIM_Base_Init+0x11a>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	699b      	ldr	r3, [r3, #24]
 8009350:	2b80      	cmp	r3, #128	; 0x80
 8009352:	d004      	beq.n	800935e <HAL_TIM_Base_Init+0x11a>
 8009354:	f44f 718b 	mov.w	r1, #278	; 0x116
 8009358:	4831      	ldr	r0, [pc, #196]	; (8009420 <HAL_TIM_Base_Init+0x1dc>)
 800935a:	f7f9 f90e 	bl	800257a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009364:	b2db      	uxtb	r3, r3
 8009366:	2b00      	cmp	r3, #0
 8009368:	d106      	bne.n	8009378 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2200      	movs	r2, #0
 800936e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f7fb fa88 	bl	8004888 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2202      	movs	r2, #2
 800937c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	3304      	adds	r3, #4
 8009388:	4619      	mov	r1, r3
 800938a:	4610      	mov	r0, r2
 800938c:	f001 fef8 	bl	800b180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2201      	movs	r2, #1
 8009394:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2201      	movs	r2, #1
 80093a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2201      	movs	r2, #1
 80093ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2201      	movs	r2, #1
 80093b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2201      	movs	r2, #1
 80093bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2201      	movs	r2, #1
 80093c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2201      	movs	r2, #1
 80093cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2201      	movs	r2, #1
 80093d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2201      	movs	r2, #1
 80093dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80093e0:	2300      	movs	r3, #0
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3708      	adds	r7, #8
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
 80093ea:	bf00      	nop
 80093ec:	40010000 	.word	0x40010000
 80093f0:	40000400 	.word	0x40000400
 80093f4:	40000800 	.word	0x40000800
 80093f8:	40000c00 	.word	0x40000c00
 80093fc:	40001000 	.word	0x40001000
 8009400:	40001400 	.word	0x40001400
 8009404:	40010400 	.word	0x40010400
 8009408:	40014000 	.word	0x40014000
 800940c:	40014400 	.word	0x40014400
 8009410:	40014800 	.word	0x40014800
 8009414:	40001800 	.word	0x40001800
 8009418:	40001c00 	.word	0x40001c00
 800941c:	40002000 	.word	0x40002000
 8009420:	0801b0d8 	.word	0x0801b0d8

08009424 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d101      	bne.n	8009436 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009432:	2301      	movs	r3, #1
 8009434:	e0c5      	b.n	80095c2 <HAL_TIM_PWM_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4a64      	ldr	r2, [pc, #400]	; (80095cc <HAL_TIM_PWM_Init+0x1a8>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d045      	beq.n	80094cc <HAL_TIM_PWM_Init+0xa8>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009448:	d040      	beq.n	80094cc <HAL_TIM_PWM_Init+0xa8>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4a60      	ldr	r2, [pc, #384]	; (80095d0 <HAL_TIM_PWM_Init+0x1ac>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d03b      	beq.n	80094cc <HAL_TIM_PWM_Init+0xa8>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a5e      	ldr	r2, [pc, #376]	; (80095d4 <HAL_TIM_PWM_Init+0x1b0>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d036      	beq.n	80094cc <HAL_TIM_PWM_Init+0xa8>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a5d      	ldr	r2, [pc, #372]	; (80095d8 <HAL_TIM_PWM_Init+0x1b4>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d031      	beq.n	80094cc <HAL_TIM_PWM_Init+0xa8>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a5b      	ldr	r2, [pc, #364]	; (80095dc <HAL_TIM_PWM_Init+0x1b8>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d02c      	beq.n	80094cc <HAL_TIM_PWM_Init+0xa8>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4a5a      	ldr	r2, [pc, #360]	; (80095e0 <HAL_TIM_PWM_Init+0x1bc>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d027      	beq.n	80094cc <HAL_TIM_PWM_Init+0xa8>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a58      	ldr	r2, [pc, #352]	; (80095e4 <HAL_TIM_PWM_Init+0x1c0>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d022      	beq.n	80094cc <HAL_TIM_PWM_Init+0xa8>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a57      	ldr	r2, [pc, #348]	; (80095e8 <HAL_TIM_PWM_Init+0x1c4>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d01d      	beq.n	80094cc <HAL_TIM_PWM_Init+0xa8>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4a55      	ldr	r2, [pc, #340]	; (80095ec <HAL_TIM_PWM_Init+0x1c8>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d018      	beq.n	80094cc <HAL_TIM_PWM_Init+0xa8>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a54      	ldr	r2, [pc, #336]	; (80095f0 <HAL_TIM_PWM_Init+0x1cc>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d013      	beq.n	80094cc <HAL_TIM_PWM_Init+0xa8>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a52      	ldr	r2, [pc, #328]	; (80095f4 <HAL_TIM_PWM_Init+0x1d0>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d00e      	beq.n	80094cc <HAL_TIM_PWM_Init+0xa8>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a51      	ldr	r2, [pc, #324]	; (80095f8 <HAL_TIM_PWM_Init+0x1d4>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d009      	beq.n	80094cc <HAL_TIM_PWM_Init+0xa8>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a4f      	ldr	r2, [pc, #316]	; (80095fc <HAL_TIM_PWM_Init+0x1d8>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d004      	beq.n	80094cc <HAL_TIM_PWM_Init+0xa8>
 80094c2:	f240 5129 	movw	r1, #1321	; 0x529
 80094c6:	484e      	ldr	r0, [pc, #312]	; (8009600 <HAL_TIM_PWM_Init+0x1dc>)
 80094c8:	f7f9 f857 	bl	800257a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d014      	beq.n	80094fe <HAL_TIM_PWM_Init+0xda>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	689b      	ldr	r3, [r3, #8]
 80094d8:	2b10      	cmp	r3, #16
 80094da:	d010      	beq.n	80094fe <HAL_TIM_PWM_Init+0xda>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	689b      	ldr	r3, [r3, #8]
 80094e0:	2b20      	cmp	r3, #32
 80094e2:	d00c      	beq.n	80094fe <HAL_TIM_PWM_Init+0xda>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	2b40      	cmp	r3, #64	; 0x40
 80094ea:	d008      	beq.n	80094fe <HAL_TIM_PWM_Init+0xda>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	689b      	ldr	r3, [r3, #8]
 80094f0:	2b60      	cmp	r3, #96	; 0x60
 80094f2:	d004      	beq.n	80094fe <HAL_TIM_PWM_Init+0xda>
 80094f4:	f240 512a 	movw	r1, #1322	; 0x52a
 80094f8:	4841      	ldr	r0, [pc, #260]	; (8009600 <HAL_TIM_PWM_Init+0x1dc>)
 80094fa:	f7f9 f83e 	bl	800257a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	691b      	ldr	r3, [r3, #16]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d00e      	beq.n	8009524 <HAL_TIM_PWM_Init+0x100>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	691b      	ldr	r3, [r3, #16]
 800950a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800950e:	d009      	beq.n	8009524 <HAL_TIM_PWM_Init+0x100>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	691b      	ldr	r3, [r3, #16]
 8009514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009518:	d004      	beq.n	8009524 <HAL_TIM_PWM_Init+0x100>
 800951a:	f240 512b 	movw	r1, #1323	; 0x52b
 800951e:	4838      	ldr	r0, [pc, #224]	; (8009600 <HAL_TIM_PWM_Init+0x1dc>)
 8009520:	f7f9 f82b 	bl	800257a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	699b      	ldr	r3, [r3, #24]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d008      	beq.n	800953e <HAL_TIM_PWM_Init+0x11a>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	699b      	ldr	r3, [r3, #24]
 8009530:	2b80      	cmp	r3, #128	; 0x80
 8009532:	d004      	beq.n	800953e <HAL_TIM_PWM_Init+0x11a>
 8009534:	f240 512c 	movw	r1, #1324	; 0x52c
 8009538:	4831      	ldr	r0, [pc, #196]	; (8009600 <HAL_TIM_PWM_Init+0x1dc>)
 800953a:	f7f9 f81e 	bl	800257a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009544:	b2db      	uxtb	r3, r3
 8009546:	2b00      	cmp	r3, #0
 8009548:	d106      	bne.n	8009558 <HAL_TIM_PWM_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2200      	movs	r2, #0
 800954e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 f856 	bl	8009604 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2202      	movs	r2, #2
 800955c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681a      	ldr	r2, [r3, #0]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	3304      	adds	r3, #4
 8009568:	4619      	mov	r1, r3
 800956a:	4610      	mov	r0, r2
 800956c:	f001 fe08 	bl	800b180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2201      	movs	r2, #1
 8009574:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2201      	movs	r2, #1
 800957c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2201      	movs	r2, #1
 8009584:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2201      	movs	r2, #1
 800958c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2201      	movs	r2, #1
 8009594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2201      	movs	r2, #1
 800959c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2201      	movs	r2, #1
 80095a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2201      	movs	r2, #1
 80095ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2201      	movs	r2, #1
 80095b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2201      	movs	r2, #1
 80095bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80095c0:	2300      	movs	r3, #0
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3708      	adds	r7, #8
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}
 80095ca:	bf00      	nop
 80095cc:	40010000 	.word	0x40010000
 80095d0:	40000400 	.word	0x40000400
 80095d4:	40000800 	.word	0x40000800
 80095d8:	40000c00 	.word	0x40000c00
 80095dc:	40001000 	.word	0x40001000
 80095e0:	40001400 	.word	0x40001400
 80095e4:	40010400 	.word	0x40010400
 80095e8:	40014000 	.word	0x40014000
 80095ec:	40014400 	.word	0x40014400
 80095f0:	40014800 	.word	0x40014800
 80095f4:	40001800 	.word	0x40001800
 80095f8:	40001c00 	.word	0x40001c00
 80095fc:	40002000 	.word	0x40002000
 8009600:	0801b0d8 	.word	0x0801b0d8

08009604 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800960c:	bf00      	nop
 800960e:	370c      	adds	r7, #12
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr

08009618 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4a84      	ldr	r2, [pc, #528]	; (8009838 <HAL_TIM_PWM_Start+0x220>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d10f      	bne.n	800964c <HAL_TIM_PWM_Start+0x34>
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	2b00      	cmp	r3, #0
 8009630:	f000 809f 	beq.w	8009772 <HAL_TIM_PWM_Start+0x15a>
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	2b04      	cmp	r3, #4
 8009638:	f000 809b 	beq.w	8009772 <HAL_TIM_PWM_Start+0x15a>
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	2b08      	cmp	r3, #8
 8009640:	f000 8097 	beq.w	8009772 <HAL_TIM_PWM_Start+0x15a>
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	2b0c      	cmp	r3, #12
 8009648:	f000 8093 	beq.w	8009772 <HAL_TIM_PWM_Start+0x15a>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009654:	d10e      	bne.n	8009674 <HAL_TIM_PWM_Start+0x5c>
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	2b00      	cmp	r3, #0
 800965a:	f000 808a 	beq.w	8009772 <HAL_TIM_PWM_Start+0x15a>
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	2b04      	cmp	r3, #4
 8009662:	f000 8086 	beq.w	8009772 <HAL_TIM_PWM_Start+0x15a>
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	2b08      	cmp	r3, #8
 800966a:	f000 8082 	beq.w	8009772 <HAL_TIM_PWM_Start+0x15a>
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	2b0c      	cmp	r3, #12
 8009672:	d07e      	beq.n	8009772 <HAL_TIM_PWM_Start+0x15a>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a70      	ldr	r2, [pc, #448]	; (800983c <HAL_TIM_PWM_Start+0x224>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d10b      	bne.n	8009696 <HAL_TIM_PWM_Start+0x7e>
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d076      	beq.n	8009772 <HAL_TIM_PWM_Start+0x15a>
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	2b04      	cmp	r3, #4
 8009688:	d073      	beq.n	8009772 <HAL_TIM_PWM_Start+0x15a>
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	2b08      	cmp	r3, #8
 800968e:	d070      	beq.n	8009772 <HAL_TIM_PWM_Start+0x15a>
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	2b0c      	cmp	r3, #12
 8009694:	d06d      	beq.n	8009772 <HAL_TIM_PWM_Start+0x15a>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a69      	ldr	r2, [pc, #420]	; (8009840 <HAL_TIM_PWM_Start+0x228>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d10b      	bne.n	80096b8 <HAL_TIM_PWM_Start+0xa0>
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d065      	beq.n	8009772 <HAL_TIM_PWM_Start+0x15a>
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	2b04      	cmp	r3, #4
 80096aa:	d062      	beq.n	8009772 <HAL_TIM_PWM_Start+0x15a>
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	2b08      	cmp	r3, #8
 80096b0:	d05f      	beq.n	8009772 <HAL_TIM_PWM_Start+0x15a>
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	2b0c      	cmp	r3, #12
 80096b6:	d05c      	beq.n	8009772 <HAL_TIM_PWM_Start+0x15a>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a61      	ldr	r2, [pc, #388]	; (8009844 <HAL_TIM_PWM_Start+0x22c>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d10b      	bne.n	80096da <HAL_TIM_PWM_Start+0xc2>
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d054      	beq.n	8009772 <HAL_TIM_PWM_Start+0x15a>
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	2b04      	cmp	r3, #4
 80096cc:	d051      	beq.n	8009772 <HAL_TIM_PWM_Start+0x15a>
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	2b08      	cmp	r3, #8
 80096d2:	d04e      	beq.n	8009772 <HAL_TIM_PWM_Start+0x15a>
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	2b0c      	cmp	r3, #12
 80096d8:	d04b      	beq.n	8009772 <HAL_TIM_PWM_Start+0x15a>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4a5a      	ldr	r2, [pc, #360]	; (8009848 <HAL_TIM_PWM_Start+0x230>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d10b      	bne.n	80096fc <HAL_TIM_PWM_Start+0xe4>
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d043      	beq.n	8009772 <HAL_TIM_PWM_Start+0x15a>
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	2b04      	cmp	r3, #4
 80096ee:	d040      	beq.n	8009772 <HAL_TIM_PWM_Start+0x15a>
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	2b08      	cmp	r3, #8
 80096f4:	d03d      	beq.n	8009772 <HAL_TIM_PWM_Start+0x15a>
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	2b0c      	cmp	r3, #12
 80096fa:	d03a      	beq.n	8009772 <HAL_TIM_PWM_Start+0x15a>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a52      	ldr	r2, [pc, #328]	; (800984c <HAL_TIM_PWM_Start+0x234>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d105      	bne.n	8009712 <HAL_TIM_PWM_Start+0xfa>
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d032      	beq.n	8009772 <HAL_TIM_PWM_Start+0x15a>
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	2b04      	cmp	r3, #4
 8009710:	d02f      	beq.n	8009772 <HAL_TIM_PWM_Start+0x15a>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a4e      	ldr	r2, [pc, #312]	; (8009850 <HAL_TIM_PWM_Start+0x238>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d102      	bne.n	8009722 <HAL_TIM_PWM_Start+0x10a>
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d027      	beq.n	8009772 <HAL_TIM_PWM_Start+0x15a>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4a4b      	ldr	r2, [pc, #300]	; (8009854 <HAL_TIM_PWM_Start+0x23c>)
 8009728:	4293      	cmp	r3, r2
 800972a:	d102      	bne.n	8009732 <HAL_TIM_PWM_Start+0x11a>
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d01f      	beq.n	8009772 <HAL_TIM_PWM_Start+0x15a>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4a48      	ldr	r2, [pc, #288]	; (8009858 <HAL_TIM_PWM_Start+0x240>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d105      	bne.n	8009748 <HAL_TIM_PWM_Start+0x130>
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d017      	beq.n	8009772 <HAL_TIM_PWM_Start+0x15a>
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	2b04      	cmp	r3, #4
 8009746:	d014      	beq.n	8009772 <HAL_TIM_PWM_Start+0x15a>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a43      	ldr	r2, [pc, #268]	; (800985c <HAL_TIM_PWM_Start+0x244>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d102      	bne.n	8009758 <HAL_TIM_PWM_Start+0x140>
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d00c      	beq.n	8009772 <HAL_TIM_PWM_Start+0x15a>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a40      	ldr	r2, [pc, #256]	; (8009860 <HAL_TIM_PWM_Start+0x248>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d102      	bne.n	8009768 <HAL_TIM_PWM_Start+0x150>
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d004      	beq.n	8009772 <HAL_TIM_PWM_Start+0x15a>
 8009768:	f240 51af 	movw	r1, #1455	; 0x5af
 800976c:	483d      	ldr	r0, [pc, #244]	; (8009864 <HAL_TIM_PWM_Start+0x24c>)
 800976e:	f7f8 ff04 	bl	800257a <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d109      	bne.n	800978c <HAL_TIM_PWM_Start+0x174>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800977e:	b2db      	uxtb	r3, r3
 8009780:	2b01      	cmp	r3, #1
 8009782:	bf14      	ite	ne
 8009784:	2301      	movne	r3, #1
 8009786:	2300      	moveq	r3, #0
 8009788:	b2db      	uxtb	r3, r3
 800978a:	e022      	b.n	80097d2 <HAL_TIM_PWM_Start+0x1ba>
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	2b04      	cmp	r3, #4
 8009790:	d109      	bne.n	80097a6 <HAL_TIM_PWM_Start+0x18e>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009798:	b2db      	uxtb	r3, r3
 800979a:	2b01      	cmp	r3, #1
 800979c:	bf14      	ite	ne
 800979e:	2301      	movne	r3, #1
 80097a0:	2300      	moveq	r3, #0
 80097a2:	b2db      	uxtb	r3, r3
 80097a4:	e015      	b.n	80097d2 <HAL_TIM_PWM_Start+0x1ba>
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	2b08      	cmp	r3, #8
 80097aa:	d109      	bne.n	80097c0 <HAL_TIM_PWM_Start+0x1a8>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	bf14      	ite	ne
 80097b8:	2301      	movne	r3, #1
 80097ba:	2300      	moveq	r3, #0
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	e008      	b.n	80097d2 <HAL_TIM_PWM_Start+0x1ba>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	bf14      	ite	ne
 80097cc:	2301      	movne	r3, #1
 80097ce:	2300      	moveq	r3, #0
 80097d0:	b2db      	uxtb	r3, r3
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d001      	beq.n	80097da <HAL_TIM_PWM_Start+0x1c2>
  {
    return HAL_ERROR;
 80097d6:	2301      	movs	r3, #1
 80097d8:	e094      	b.n	8009904 <HAL_TIM_PWM_Start+0x2ec>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d104      	bne.n	80097ea <HAL_TIM_PWM_Start+0x1d2>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2202      	movs	r2, #2
 80097e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097e8:	e013      	b.n	8009812 <HAL_TIM_PWM_Start+0x1fa>
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	2b04      	cmp	r3, #4
 80097ee:	d104      	bne.n	80097fa <HAL_TIM_PWM_Start+0x1e2>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2202      	movs	r2, #2
 80097f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097f8:	e00b      	b.n	8009812 <HAL_TIM_PWM_Start+0x1fa>
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	2b08      	cmp	r3, #8
 80097fe:	d104      	bne.n	800980a <HAL_TIM_PWM_Start+0x1f2>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2202      	movs	r2, #2
 8009804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009808:	e003      	b.n	8009812 <HAL_TIM_PWM_Start+0x1fa>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2202      	movs	r2, #2
 800980e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	2201      	movs	r2, #1
 8009818:	6839      	ldr	r1, [r7, #0]
 800981a:	4618      	mov	r0, r3
 800981c:	f002 f94e 	bl	800babc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	4a04      	ldr	r2, [pc, #16]	; (8009838 <HAL_TIM_PWM_Start+0x220>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d004      	beq.n	8009834 <HAL_TIM_PWM_Start+0x21c>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4a06      	ldr	r2, [pc, #24]	; (8009848 <HAL_TIM_PWM_Start+0x230>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d119      	bne.n	8009868 <HAL_TIM_PWM_Start+0x250>
 8009834:	2301      	movs	r3, #1
 8009836:	e018      	b.n	800986a <HAL_TIM_PWM_Start+0x252>
 8009838:	40010000 	.word	0x40010000
 800983c:	40000400 	.word	0x40000400
 8009840:	40000800 	.word	0x40000800
 8009844:	40000c00 	.word	0x40000c00
 8009848:	40010400 	.word	0x40010400
 800984c:	40014000 	.word	0x40014000
 8009850:	40014400 	.word	0x40014400
 8009854:	40014800 	.word	0x40014800
 8009858:	40001800 	.word	0x40001800
 800985c:	40001c00 	.word	0x40001c00
 8009860:	40002000 	.word	0x40002000
 8009864:	0801b0d8 	.word	0x0801b0d8
 8009868:	2300      	movs	r3, #0
 800986a:	2b00      	cmp	r3, #0
 800986c:	d007      	beq.n	800987e <HAL_TIM_PWM_Start+0x266>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800987c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4a22      	ldr	r2, [pc, #136]	; (800990c <HAL_TIM_PWM_Start+0x2f4>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d022      	beq.n	80098ce <HAL_TIM_PWM_Start+0x2b6>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009890:	d01d      	beq.n	80098ce <HAL_TIM_PWM_Start+0x2b6>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4a1e      	ldr	r2, [pc, #120]	; (8009910 <HAL_TIM_PWM_Start+0x2f8>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d018      	beq.n	80098ce <HAL_TIM_PWM_Start+0x2b6>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a1c      	ldr	r2, [pc, #112]	; (8009914 <HAL_TIM_PWM_Start+0x2fc>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d013      	beq.n	80098ce <HAL_TIM_PWM_Start+0x2b6>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4a1b      	ldr	r2, [pc, #108]	; (8009918 <HAL_TIM_PWM_Start+0x300>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d00e      	beq.n	80098ce <HAL_TIM_PWM_Start+0x2b6>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a19      	ldr	r2, [pc, #100]	; (800991c <HAL_TIM_PWM_Start+0x304>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d009      	beq.n	80098ce <HAL_TIM_PWM_Start+0x2b6>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4a18      	ldr	r2, [pc, #96]	; (8009920 <HAL_TIM_PWM_Start+0x308>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d004      	beq.n	80098ce <HAL_TIM_PWM_Start+0x2b6>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4a16      	ldr	r2, [pc, #88]	; (8009924 <HAL_TIM_PWM_Start+0x30c>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d111      	bne.n	80098f2 <HAL_TIM_PWM_Start+0x2da>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	f003 0307 	and.w	r3, r3, #7
 80098d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	2b06      	cmp	r3, #6
 80098de:	d010      	beq.n	8009902 <HAL_TIM_PWM_Start+0x2ea>
    {
      __HAL_TIM_ENABLE(htim);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	681a      	ldr	r2, [r3, #0]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f042 0201 	orr.w	r2, r2, #1
 80098ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098f0:	e007      	b.n	8009902 <HAL_TIM_PWM_Start+0x2ea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	681a      	ldr	r2, [r3, #0]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f042 0201 	orr.w	r2, r2, #1
 8009900:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009902:	2300      	movs	r3, #0
}
 8009904:	4618      	mov	r0, r3
 8009906:	3710      	adds	r7, #16
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}
 800990c:	40010000 	.word	0x40010000
 8009910:	40000400 	.word	0x40000400
 8009914:	40000800 	.word	0x40000800
 8009918:	40000c00 	.word	0x40000c00
 800991c:	40010400 	.word	0x40010400
 8009920:	40014000 	.word	0x40014000
 8009924:	40001800 	.word	0x40001800

08009928 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b082      	sub	sp, #8
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d101      	bne.n	800993a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009936:	2301      	movs	r3, #1
 8009938:	e0c5      	b.n	8009ac6 <HAL_TIM_IC_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a64      	ldr	r2, [pc, #400]	; (8009ad0 <HAL_TIM_IC_Init+0x1a8>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d045      	beq.n	80099d0 <HAL_TIM_IC_Init+0xa8>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800994c:	d040      	beq.n	80099d0 <HAL_TIM_IC_Init+0xa8>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4a60      	ldr	r2, [pc, #384]	; (8009ad4 <HAL_TIM_IC_Init+0x1ac>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d03b      	beq.n	80099d0 <HAL_TIM_IC_Init+0xa8>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4a5e      	ldr	r2, [pc, #376]	; (8009ad8 <HAL_TIM_IC_Init+0x1b0>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d036      	beq.n	80099d0 <HAL_TIM_IC_Init+0xa8>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a5d      	ldr	r2, [pc, #372]	; (8009adc <HAL_TIM_IC_Init+0x1b4>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d031      	beq.n	80099d0 <HAL_TIM_IC_Init+0xa8>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a5b      	ldr	r2, [pc, #364]	; (8009ae0 <HAL_TIM_IC_Init+0x1b8>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d02c      	beq.n	80099d0 <HAL_TIM_IC_Init+0xa8>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4a5a      	ldr	r2, [pc, #360]	; (8009ae4 <HAL_TIM_IC_Init+0x1bc>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d027      	beq.n	80099d0 <HAL_TIM_IC_Init+0xa8>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	4a58      	ldr	r2, [pc, #352]	; (8009ae8 <HAL_TIM_IC_Init+0x1c0>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d022      	beq.n	80099d0 <HAL_TIM_IC_Init+0xa8>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4a57      	ldr	r2, [pc, #348]	; (8009aec <HAL_TIM_IC_Init+0x1c4>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d01d      	beq.n	80099d0 <HAL_TIM_IC_Init+0xa8>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4a55      	ldr	r2, [pc, #340]	; (8009af0 <HAL_TIM_IC_Init+0x1c8>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d018      	beq.n	80099d0 <HAL_TIM_IC_Init+0xa8>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	4a54      	ldr	r2, [pc, #336]	; (8009af4 <HAL_TIM_IC_Init+0x1cc>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d013      	beq.n	80099d0 <HAL_TIM_IC_Init+0xa8>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4a52      	ldr	r2, [pc, #328]	; (8009af8 <HAL_TIM_IC_Init+0x1d0>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d00e      	beq.n	80099d0 <HAL_TIM_IC_Init+0xa8>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4a51      	ldr	r2, [pc, #324]	; (8009afc <HAL_TIM_IC_Init+0x1d4>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d009      	beq.n	80099d0 <HAL_TIM_IC_Init+0xa8>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4a4f      	ldr	r2, [pc, #316]	; (8009b00 <HAL_TIM_IC_Init+0x1d8>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d004      	beq.n	80099d0 <HAL_TIM_IC_Init+0xa8>
 80099c6:	f240 71bf 	movw	r1, #1983	; 0x7bf
 80099ca:	484e      	ldr	r0, [pc, #312]	; (8009b04 <HAL_TIM_IC_Init+0x1dc>)
 80099cc:	f7f8 fdd5 	bl	800257a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	689b      	ldr	r3, [r3, #8]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d014      	beq.n	8009a02 <HAL_TIM_IC_Init+0xda>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	2b10      	cmp	r3, #16
 80099de:	d010      	beq.n	8009a02 <HAL_TIM_IC_Init+0xda>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	689b      	ldr	r3, [r3, #8]
 80099e4:	2b20      	cmp	r3, #32
 80099e6:	d00c      	beq.n	8009a02 <HAL_TIM_IC_Init+0xda>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	689b      	ldr	r3, [r3, #8]
 80099ec:	2b40      	cmp	r3, #64	; 0x40
 80099ee:	d008      	beq.n	8009a02 <HAL_TIM_IC_Init+0xda>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	689b      	ldr	r3, [r3, #8]
 80099f4:	2b60      	cmp	r3, #96	; 0x60
 80099f6:	d004      	beq.n	8009a02 <HAL_TIM_IC_Init+0xda>
 80099f8:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
 80099fc:	4841      	ldr	r0, [pc, #260]	; (8009b04 <HAL_TIM_IC_Init+0x1dc>)
 80099fe:	f7f8 fdbc 	bl	800257a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	691b      	ldr	r3, [r3, #16]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d00e      	beq.n	8009a28 <HAL_TIM_IC_Init+0x100>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	691b      	ldr	r3, [r3, #16]
 8009a0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a12:	d009      	beq.n	8009a28 <HAL_TIM_IC_Init+0x100>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	691b      	ldr	r3, [r3, #16]
 8009a18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a1c:	d004      	beq.n	8009a28 <HAL_TIM_IC_Init+0x100>
 8009a1e:	f240 71c1 	movw	r1, #1985	; 0x7c1
 8009a22:	4838      	ldr	r0, [pc, #224]	; (8009b04 <HAL_TIM_IC_Init+0x1dc>)
 8009a24:	f7f8 fda9 	bl	800257a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	699b      	ldr	r3, [r3, #24]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d008      	beq.n	8009a42 <HAL_TIM_IC_Init+0x11a>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	699b      	ldr	r3, [r3, #24]
 8009a34:	2b80      	cmp	r3, #128	; 0x80
 8009a36:	d004      	beq.n	8009a42 <HAL_TIM_IC_Init+0x11a>
 8009a38:	f240 71c2 	movw	r1, #1986	; 0x7c2
 8009a3c:	4831      	ldr	r0, [pc, #196]	; (8009b04 <HAL_TIM_IC_Init+0x1dc>)
 8009a3e:	f7f8 fd9c 	bl	800257a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a48:	b2db      	uxtb	r3, r3
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d106      	bne.n	8009a5c <HAL_TIM_IC_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2200      	movs	r2, #0
 8009a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f000 f856 	bl	8009b08 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2202      	movs	r2, #2
 8009a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	3304      	adds	r3, #4
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	4610      	mov	r0, r2
 8009a70:	f001 fb86 	bl	800b180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2201      	movs	r2, #1
 8009a78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2201      	movs	r2, #1
 8009a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2201      	movs	r2, #1
 8009a88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2201      	movs	r2, #1
 8009a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2201      	movs	r2, #1
 8009a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2201      	movs	r2, #1
 8009ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ac4:	2300      	movs	r3, #0
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3708      	adds	r7, #8
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop
 8009ad0:	40010000 	.word	0x40010000
 8009ad4:	40000400 	.word	0x40000400
 8009ad8:	40000800 	.word	0x40000800
 8009adc:	40000c00 	.word	0x40000c00
 8009ae0:	40001000 	.word	0x40001000
 8009ae4:	40001400 	.word	0x40001400
 8009ae8:	40010400 	.word	0x40010400
 8009aec:	40014000 	.word	0x40014000
 8009af0:	40014400 	.word	0x40014400
 8009af4:	40014800 	.word	0x40014800
 8009af8:	40001800 	.word	0x40001800
 8009afc:	40001c00 	.word	0x40001c00
 8009b00:	40002000 	.word	0x40002000
 8009b04:	0801b0d8 	.word	0x0801b0d8

08009b08 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b083      	sub	sp, #12
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009b10:	bf00      	nop
 8009b12:	370c      	adds	r7, #12
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr

08009b1c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b084      	sub	sp, #16
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b26:	2300      	movs	r3, #0
 8009b28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d104      	bne.n	8009b3a <HAL_TIM_IC_Start_IT+0x1e>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	e013      	b.n	8009b62 <HAL_TIM_IC_Start_IT+0x46>
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	2b04      	cmp	r3, #4
 8009b3e:	d104      	bne.n	8009b4a <HAL_TIM_IC_Start_IT+0x2e>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009b46:	b2db      	uxtb	r3, r3
 8009b48:	e00b      	b.n	8009b62 <HAL_TIM_IC_Start_IT+0x46>
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	2b08      	cmp	r3, #8
 8009b4e:	d104      	bne.n	8009b5a <HAL_TIM_IC_Start_IT+0x3e>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	e003      	b.n	8009b62 <HAL_TIM_IC_Start_IT+0x46>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b60:	b2db      	uxtb	r3, r3
 8009b62:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d104      	bne.n	8009b74 <HAL_TIM_IC_Start_IT+0x58>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009b70:	b2db      	uxtb	r3, r3
 8009b72:	e013      	b.n	8009b9c <HAL_TIM_IC_Start_IT+0x80>
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	2b04      	cmp	r3, #4
 8009b78:	d104      	bne.n	8009b84 <HAL_TIM_IC_Start_IT+0x68>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009b80:	b2db      	uxtb	r3, r3
 8009b82:	e00b      	b.n	8009b9c <HAL_TIM_IC_Start_IT+0x80>
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	2b08      	cmp	r3, #8
 8009b88:	d104      	bne.n	8009b94 <HAL_TIM_IC_Start_IT+0x78>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	e003      	b.n	8009b9c <HAL_TIM_IC_Start_IT+0x80>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b9a:	b2db      	uxtb	r3, r3
 8009b9c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a95      	ldr	r2, [pc, #596]	; (8009df8 <HAL_TIM_IC_Start_IT+0x2dc>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d10f      	bne.n	8009bc8 <HAL_TIM_IC_Start_IT+0xac>
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	f000 809f 	beq.w	8009cee <HAL_TIM_IC_Start_IT+0x1d2>
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	2b04      	cmp	r3, #4
 8009bb4:	f000 809b 	beq.w	8009cee <HAL_TIM_IC_Start_IT+0x1d2>
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	2b08      	cmp	r3, #8
 8009bbc:	f000 8097 	beq.w	8009cee <HAL_TIM_IC_Start_IT+0x1d2>
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	2b0c      	cmp	r3, #12
 8009bc4:	f000 8093 	beq.w	8009cee <HAL_TIM_IC_Start_IT+0x1d2>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bd0:	d10e      	bne.n	8009bf0 <HAL_TIM_IC_Start_IT+0xd4>
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	f000 808a 	beq.w	8009cee <HAL_TIM_IC_Start_IT+0x1d2>
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	2b04      	cmp	r3, #4
 8009bde:	f000 8086 	beq.w	8009cee <HAL_TIM_IC_Start_IT+0x1d2>
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	2b08      	cmp	r3, #8
 8009be6:	f000 8082 	beq.w	8009cee <HAL_TIM_IC_Start_IT+0x1d2>
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	2b0c      	cmp	r3, #12
 8009bee:	d07e      	beq.n	8009cee <HAL_TIM_IC_Start_IT+0x1d2>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4a81      	ldr	r2, [pc, #516]	; (8009dfc <HAL_TIM_IC_Start_IT+0x2e0>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d10b      	bne.n	8009c12 <HAL_TIM_IC_Start_IT+0xf6>
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d076      	beq.n	8009cee <HAL_TIM_IC_Start_IT+0x1d2>
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	2b04      	cmp	r3, #4
 8009c04:	d073      	beq.n	8009cee <HAL_TIM_IC_Start_IT+0x1d2>
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	2b08      	cmp	r3, #8
 8009c0a:	d070      	beq.n	8009cee <HAL_TIM_IC_Start_IT+0x1d2>
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	2b0c      	cmp	r3, #12
 8009c10:	d06d      	beq.n	8009cee <HAL_TIM_IC_Start_IT+0x1d2>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4a7a      	ldr	r2, [pc, #488]	; (8009e00 <HAL_TIM_IC_Start_IT+0x2e4>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d10b      	bne.n	8009c34 <HAL_TIM_IC_Start_IT+0x118>
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d065      	beq.n	8009cee <HAL_TIM_IC_Start_IT+0x1d2>
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	2b04      	cmp	r3, #4
 8009c26:	d062      	beq.n	8009cee <HAL_TIM_IC_Start_IT+0x1d2>
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	2b08      	cmp	r3, #8
 8009c2c:	d05f      	beq.n	8009cee <HAL_TIM_IC_Start_IT+0x1d2>
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	2b0c      	cmp	r3, #12
 8009c32:	d05c      	beq.n	8009cee <HAL_TIM_IC_Start_IT+0x1d2>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4a72      	ldr	r2, [pc, #456]	; (8009e04 <HAL_TIM_IC_Start_IT+0x2e8>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d10b      	bne.n	8009c56 <HAL_TIM_IC_Start_IT+0x13a>
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d054      	beq.n	8009cee <HAL_TIM_IC_Start_IT+0x1d2>
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	2b04      	cmp	r3, #4
 8009c48:	d051      	beq.n	8009cee <HAL_TIM_IC_Start_IT+0x1d2>
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	2b08      	cmp	r3, #8
 8009c4e:	d04e      	beq.n	8009cee <HAL_TIM_IC_Start_IT+0x1d2>
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	2b0c      	cmp	r3, #12
 8009c54:	d04b      	beq.n	8009cee <HAL_TIM_IC_Start_IT+0x1d2>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4a6b      	ldr	r2, [pc, #428]	; (8009e08 <HAL_TIM_IC_Start_IT+0x2ec>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d10b      	bne.n	8009c78 <HAL_TIM_IC_Start_IT+0x15c>
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d043      	beq.n	8009cee <HAL_TIM_IC_Start_IT+0x1d2>
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	2b04      	cmp	r3, #4
 8009c6a:	d040      	beq.n	8009cee <HAL_TIM_IC_Start_IT+0x1d2>
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	2b08      	cmp	r3, #8
 8009c70:	d03d      	beq.n	8009cee <HAL_TIM_IC_Start_IT+0x1d2>
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	2b0c      	cmp	r3, #12
 8009c76:	d03a      	beq.n	8009cee <HAL_TIM_IC_Start_IT+0x1d2>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a63      	ldr	r2, [pc, #396]	; (8009e0c <HAL_TIM_IC_Start_IT+0x2f0>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d105      	bne.n	8009c8e <HAL_TIM_IC_Start_IT+0x172>
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d032      	beq.n	8009cee <HAL_TIM_IC_Start_IT+0x1d2>
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	2b04      	cmp	r3, #4
 8009c8c:	d02f      	beq.n	8009cee <HAL_TIM_IC_Start_IT+0x1d2>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4a5f      	ldr	r2, [pc, #380]	; (8009e10 <HAL_TIM_IC_Start_IT+0x2f4>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d102      	bne.n	8009c9e <HAL_TIM_IC_Start_IT+0x182>
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d027      	beq.n	8009cee <HAL_TIM_IC_Start_IT+0x1d2>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4a5c      	ldr	r2, [pc, #368]	; (8009e14 <HAL_TIM_IC_Start_IT+0x2f8>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d102      	bne.n	8009cae <HAL_TIM_IC_Start_IT+0x192>
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d01f      	beq.n	8009cee <HAL_TIM_IC_Start_IT+0x1d2>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	4a59      	ldr	r2, [pc, #356]	; (8009e18 <HAL_TIM_IC_Start_IT+0x2fc>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d105      	bne.n	8009cc4 <HAL_TIM_IC_Start_IT+0x1a8>
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d017      	beq.n	8009cee <HAL_TIM_IC_Start_IT+0x1d2>
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	2b04      	cmp	r3, #4
 8009cc2:	d014      	beq.n	8009cee <HAL_TIM_IC_Start_IT+0x1d2>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4a54      	ldr	r2, [pc, #336]	; (8009e1c <HAL_TIM_IC_Start_IT+0x300>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d102      	bne.n	8009cd4 <HAL_TIM_IC_Start_IT+0x1b8>
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d00c      	beq.n	8009cee <HAL_TIM_IC_Start_IT+0x1d2>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4a51      	ldr	r2, [pc, #324]	; (8009e20 <HAL_TIM_IC_Start_IT+0x304>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d102      	bne.n	8009ce4 <HAL_TIM_IC_Start_IT+0x1c8>
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d004      	beq.n	8009cee <HAL_TIM_IC_Start_IT+0x1d2>
 8009ce4:	f640 019b 	movw	r1, #2203	; 0x89b
 8009ce8:	484e      	ldr	r0, [pc, #312]	; (8009e24 <HAL_TIM_IC_Start_IT+0x308>)
 8009cea:	f7f8 fc46 	bl	800257a <assert_failed>

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8009cee:	7bbb      	ldrb	r3, [r7, #14]
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	d102      	bne.n	8009cfa <HAL_TIM_IC_Start_IT+0x1de>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009cf4:	7b7b      	ldrb	r3, [r7, #13]
 8009cf6:	2b01      	cmp	r3, #1
 8009cf8:	d001      	beq.n	8009cfe <HAL_TIM_IC_Start_IT+0x1e2>
  {
    return HAL_ERROR;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	e0e4      	b.n	8009ec8 <HAL_TIM_IC_Start_IT+0x3ac>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d104      	bne.n	8009d0e <HAL_TIM_IC_Start_IT+0x1f2>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2202      	movs	r2, #2
 8009d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d0c:	e013      	b.n	8009d36 <HAL_TIM_IC_Start_IT+0x21a>
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	2b04      	cmp	r3, #4
 8009d12:	d104      	bne.n	8009d1e <HAL_TIM_IC_Start_IT+0x202>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2202      	movs	r2, #2
 8009d18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d1c:	e00b      	b.n	8009d36 <HAL_TIM_IC_Start_IT+0x21a>
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	2b08      	cmp	r3, #8
 8009d22:	d104      	bne.n	8009d2e <HAL_TIM_IC_Start_IT+0x212>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2202      	movs	r2, #2
 8009d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d2c:	e003      	b.n	8009d36 <HAL_TIM_IC_Start_IT+0x21a>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2202      	movs	r2, #2
 8009d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d104      	bne.n	8009d46 <HAL_TIM_IC_Start_IT+0x22a>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2202      	movs	r2, #2
 8009d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009d44:	e013      	b.n	8009d6e <HAL_TIM_IC_Start_IT+0x252>
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	2b04      	cmp	r3, #4
 8009d4a:	d104      	bne.n	8009d56 <HAL_TIM_IC_Start_IT+0x23a>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2202      	movs	r2, #2
 8009d50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009d54:	e00b      	b.n	8009d6e <HAL_TIM_IC_Start_IT+0x252>
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	2b08      	cmp	r3, #8
 8009d5a:	d104      	bne.n	8009d66 <HAL_TIM_IC_Start_IT+0x24a>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2202      	movs	r2, #2
 8009d60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d64:	e003      	b.n	8009d6e <HAL_TIM_IC_Start_IT+0x252>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2202      	movs	r2, #2
 8009d6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	2b0c      	cmp	r3, #12
 8009d72:	d859      	bhi.n	8009e28 <HAL_TIM_IC_Start_IT+0x30c>
 8009d74:	a201      	add	r2, pc, #4	; (adr r2, 8009d7c <HAL_TIM_IC_Start_IT+0x260>)
 8009d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d7a:	bf00      	nop
 8009d7c:	08009db1 	.word	0x08009db1
 8009d80:	08009e29 	.word	0x08009e29
 8009d84:	08009e29 	.word	0x08009e29
 8009d88:	08009e29 	.word	0x08009e29
 8009d8c:	08009dc3 	.word	0x08009dc3
 8009d90:	08009e29 	.word	0x08009e29
 8009d94:	08009e29 	.word	0x08009e29
 8009d98:	08009e29 	.word	0x08009e29
 8009d9c:	08009dd5 	.word	0x08009dd5
 8009da0:	08009e29 	.word	0x08009e29
 8009da4:	08009e29 	.word	0x08009e29
 8009da8:	08009e29 	.word	0x08009e29
 8009dac:	08009de7 	.word	0x08009de7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	68da      	ldr	r2, [r3, #12]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f042 0202 	orr.w	r2, r2, #2
 8009dbe:	60da      	str	r2, [r3, #12]
      break;
 8009dc0:	e035      	b.n	8009e2e <HAL_TIM_IC_Start_IT+0x312>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	68da      	ldr	r2, [r3, #12]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f042 0204 	orr.w	r2, r2, #4
 8009dd0:	60da      	str	r2, [r3, #12]
      break;
 8009dd2:	e02c      	b.n	8009e2e <HAL_TIM_IC_Start_IT+0x312>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	68da      	ldr	r2, [r3, #12]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f042 0208 	orr.w	r2, r2, #8
 8009de2:	60da      	str	r2, [r3, #12]
      break;
 8009de4:	e023      	b.n	8009e2e <HAL_TIM_IC_Start_IT+0x312>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	68da      	ldr	r2, [r3, #12]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f042 0210 	orr.w	r2, r2, #16
 8009df4:	60da      	str	r2, [r3, #12]
      break;
 8009df6:	e01a      	b.n	8009e2e <HAL_TIM_IC_Start_IT+0x312>
 8009df8:	40010000 	.word	0x40010000
 8009dfc:	40000400 	.word	0x40000400
 8009e00:	40000800 	.word	0x40000800
 8009e04:	40000c00 	.word	0x40000c00
 8009e08:	40010400 	.word	0x40010400
 8009e0c:	40014000 	.word	0x40014000
 8009e10:	40014400 	.word	0x40014400
 8009e14:	40014800 	.word	0x40014800
 8009e18:	40001800 	.word	0x40001800
 8009e1c:	40001c00 	.word	0x40001c00
 8009e20:	40002000 	.word	0x40002000
 8009e24:	0801b0d8 	.word	0x0801b0d8
    }

    default:
      status = HAL_ERROR;
 8009e28:	2301      	movs	r3, #1
 8009e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8009e2c:	bf00      	nop
  }

  if (status == HAL_OK)
 8009e2e:	7bfb      	ldrb	r3, [r7, #15]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d148      	bne.n	8009ec6 <HAL_TIM_IC_Start_IT+0x3aa>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	2201      	movs	r2, #1
 8009e3a:	6839      	ldr	r1, [r7, #0]
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f001 fe3d 	bl	800babc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4a22      	ldr	r2, [pc, #136]	; (8009ed0 <HAL_TIM_IC_Start_IT+0x3b4>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d022      	beq.n	8009e92 <HAL_TIM_IC_Start_IT+0x376>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e54:	d01d      	beq.n	8009e92 <HAL_TIM_IC_Start_IT+0x376>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4a1e      	ldr	r2, [pc, #120]	; (8009ed4 <HAL_TIM_IC_Start_IT+0x3b8>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d018      	beq.n	8009e92 <HAL_TIM_IC_Start_IT+0x376>
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	4a1c      	ldr	r2, [pc, #112]	; (8009ed8 <HAL_TIM_IC_Start_IT+0x3bc>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d013      	beq.n	8009e92 <HAL_TIM_IC_Start_IT+0x376>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4a1b      	ldr	r2, [pc, #108]	; (8009edc <HAL_TIM_IC_Start_IT+0x3c0>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d00e      	beq.n	8009e92 <HAL_TIM_IC_Start_IT+0x376>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4a19      	ldr	r2, [pc, #100]	; (8009ee0 <HAL_TIM_IC_Start_IT+0x3c4>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d009      	beq.n	8009e92 <HAL_TIM_IC_Start_IT+0x376>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4a18      	ldr	r2, [pc, #96]	; (8009ee4 <HAL_TIM_IC_Start_IT+0x3c8>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d004      	beq.n	8009e92 <HAL_TIM_IC_Start_IT+0x376>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a16      	ldr	r2, [pc, #88]	; (8009ee8 <HAL_TIM_IC_Start_IT+0x3cc>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d111      	bne.n	8009eb6 <HAL_TIM_IC_Start_IT+0x39a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	689b      	ldr	r3, [r3, #8]
 8009e98:	f003 0307 	and.w	r3, r3, #7
 8009e9c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	2b06      	cmp	r3, #6
 8009ea2:	d010      	beq.n	8009ec6 <HAL_TIM_IC_Start_IT+0x3aa>
      {
        __HAL_TIM_ENABLE(htim);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f042 0201 	orr.w	r2, r2, #1
 8009eb2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009eb4:	e007      	b.n	8009ec6 <HAL_TIM_IC_Start_IT+0x3aa>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f042 0201 	orr.w	r2, r2, #1
 8009ec4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8009ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3710      	adds	r7, #16
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}
 8009ed0:	40010000 	.word	0x40010000
 8009ed4:	40000400 	.word	0x40000400
 8009ed8:	40000800 	.word	0x40000800
 8009edc:	40000c00 	.word	0x40000c00
 8009ee0:	40010400 	.word	0x40010400
 8009ee4:	40014000 	.word	0x40014000
 8009ee8:	40001800 	.word	0x40001800

08009eec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b082      	sub	sp, #8
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	691b      	ldr	r3, [r3, #16]
 8009efa:	f003 0302 	and.w	r3, r3, #2
 8009efe:	2b02      	cmp	r3, #2
 8009f00:	d122      	bne.n	8009f48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	f003 0302 	and.w	r3, r3, #2
 8009f0c:	2b02      	cmp	r3, #2
 8009f0e:	d11b      	bne.n	8009f48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f06f 0202 	mvn.w	r2, #2
 8009f18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	699b      	ldr	r3, [r3, #24]
 8009f26:	f003 0303 	and.w	r3, r3, #3
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d003      	beq.n	8009f36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f7f6 fff6 	bl	8000f20 <HAL_TIM_IC_CaptureCallback>
 8009f34:	e005      	b.n	8009f42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f001 f904 	bl	800b144 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f001 f90b 	bl	800b158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2200      	movs	r2, #0
 8009f46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	691b      	ldr	r3, [r3, #16]
 8009f4e:	f003 0304 	and.w	r3, r3, #4
 8009f52:	2b04      	cmp	r3, #4
 8009f54:	d122      	bne.n	8009f9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	68db      	ldr	r3, [r3, #12]
 8009f5c:	f003 0304 	and.w	r3, r3, #4
 8009f60:	2b04      	cmp	r3, #4
 8009f62:	d11b      	bne.n	8009f9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f06f 0204 	mvn.w	r2, #4
 8009f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2202      	movs	r2, #2
 8009f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	699b      	ldr	r3, [r3, #24]
 8009f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d003      	beq.n	8009f8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f7f6 ffcc 	bl	8000f20 <HAL_TIM_IC_CaptureCallback>
 8009f88:	e005      	b.n	8009f96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f001 f8da 	bl	800b144 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f001 f8e1 	bl	800b158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	691b      	ldr	r3, [r3, #16]
 8009fa2:	f003 0308 	and.w	r3, r3, #8
 8009fa6:	2b08      	cmp	r3, #8
 8009fa8:	d122      	bne.n	8009ff0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	68db      	ldr	r3, [r3, #12]
 8009fb0:	f003 0308 	and.w	r3, r3, #8
 8009fb4:	2b08      	cmp	r3, #8
 8009fb6:	d11b      	bne.n	8009ff0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f06f 0208 	mvn.w	r2, #8
 8009fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2204      	movs	r2, #4
 8009fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	69db      	ldr	r3, [r3, #28]
 8009fce:	f003 0303 	and.w	r3, r3, #3
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d003      	beq.n	8009fde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f7f6 ffa2 	bl	8000f20 <HAL_TIM_IC_CaptureCallback>
 8009fdc:	e005      	b.n	8009fea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f001 f8b0 	bl	800b144 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f001 f8b7 	bl	800b158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2200      	movs	r2, #0
 8009fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	691b      	ldr	r3, [r3, #16]
 8009ff6:	f003 0310 	and.w	r3, r3, #16
 8009ffa:	2b10      	cmp	r3, #16
 8009ffc:	d122      	bne.n	800a044 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	68db      	ldr	r3, [r3, #12]
 800a004:	f003 0310 	and.w	r3, r3, #16
 800a008:	2b10      	cmp	r3, #16
 800a00a:	d11b      	bne.n	800a044 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f06f 0210 	mvn.w	r2, #16
 800a014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2208      	movs	r2, #8
 800a01a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	69db      	ldr	r3, [r3, #28]
 800a022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a026:	2b00      	cmp	r3, #0
 800a028:	d003      	beq.n	800a032 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f7f6 ff78 	bl	8000f20 <HAL_TIM_IC_CaptureCallback>
 800a030:	e005      	b.n	800a03e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f001 f886 	bl	800b144 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f001 f88d 	bl	800b158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2200      	movs	r2, #0
 800a042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	691b      	ldr	r3, [r3, #16]
 800a04a:	f003 0301 	and.w	r3, r3, #1
 800a04e:	2b01      	cmp	r3, #1
 800a050:	d10e      	bne.n	800a070 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	68db      	ldr	r3, [r3, #12]
 800a058:	f003 0301 	and.w	r3, r3, #1
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	d107      	bne.n	800a070 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f06f 0201 	mvn.w	r2, #1
 800a068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f001 f860 	bl	800b130 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	691b      	ldr	r3, [r3, #16]
 800a076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a07a:	2b80      	cmp	r3, #128	; 0x80
 800a07c:	d10e      	bne.n	800a09c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	68db      	ldr	r3, [r3, #12]
 800a084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a088:	2b80      	cmp	r3, #128	; 0x80
 800a08a:	d107      	bne.n	800a09c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f001 fe7c 	bl	800bd94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	691b      	ldr	r3, [r3, #16]
 800a0a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0a6:	2b40      	cmp	r3, #64	; 0x40
 800a0a8:	d10e      	bne.n	800a0c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	68db      	ldr	r3, [r3, #12]
 800a0b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0b4:	2b40      	cmp	r3, #64	; 0x40
 800a0b6:	d107      	bne.n	800a0c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a0c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f001 f852 	bl	800b16c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	691b      	ldr	r3, [r3, #16]
 800a0ce:	f003 0320 	and.w	r3, r3, #32
 800a0d2:	2b20      	cmp	r3, #32
 800a0d4:	d10e      	bne.n	800a0f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	68db      	ldr	r3, [r3, #12]
 800a0dc:	f003 0320 	and.w	r3, r3, #32
 800a0e0:	2b20      	cmp	r3, #32
 800a0e2:	d107      	bne.n	800a0f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f06f 0220 	mvn.w	r2, #32
 800a0ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f001 fe46 	bl	800bd80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a0f4:	bf00      	nop
 800a0f6:	3708      	adds	r7, #8
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b086      	sub	sp, #24
 800a100:	af00      	add	r7, sp, #0
 800a102:	60f8      	str	r0, [r7, #12]
 800a104:	60b9      	str	r1, [r7, #8]
 800a106:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a108:	2300      	movs	r3, #0
 800a10a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4a7a      	ldr	r2, [pc, #488]	; (800a2fc <HAL_TIM_IC_ConfigChannel+0x200>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d03b      	beq.n	800a18e <HAL_TIM_IC_ConfigChannel+0x92>
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a11e:	d036      	beq.n	800a18e <HAL_TIM_IC_ConfigChannel+0x92>
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	4a76      	ldr	r2, [pc, #472]	; (800a300 <HAL_TIM_IC_ConfigChannel+0x204>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d031      	beq.n	800a18e <HAL_TIM_IC_ConfigChannel+0x92>
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	4a75      	ldr	r2, [pc, #468]	; (800a304 <HAL_TIM_IC_ConfigChannel+0x208>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d02c      	beq.n	800a18e <HAL_TIM_IC_ConfigChannel+0x92>
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	4a73      	ldr	r2, [pc, #460]	; (800a308 <HAL_TIM_IC_ConfigChannel+0x20c>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d027      	beq.n	800a18e <HAL_TIM_IC_ConfigChannel+0x92>
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	4a72      	ldr	r2, [pc, #456]	; (800a30c <HAL_TIM_IC_ConfigChannel+0x210>)
 800a144:	4293      	cmp	r3, r2
 800a146:	d022      	beq.n	800a18e <HAL_TIM_IC_ConfigChannel+0x92>
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4a70      	ldr	r2, [pc, #448]	; (800a310 <HAL_TIM_IC_ConfigChannel+0x214>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d01d      	beq.n	800a18e <HAL_TIM_IC_ConfigChannel+0x92>
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4a6f      	ldr	r2, [pc, #444]	; (800a314 <HAL_TIM_IC_ConfigChannel+0x218>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d018      	beq.n	800a18e <HAL_TIM_IC_ConfigChannel+0x92>
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a6d      	ldr	r2, [pc, #436]	; (800a318 <HAL_TIM_IC_ConfigChannel+0x21c>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d013      	beq.n	800a18e <HAL_TIM_IC_ConfigChannel+0x92>
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4a6c      	ldr	r2, [pc, #432]	; (800a31c <HAL_TIM_IC_ConfigChannel+0x220>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d00e      	beq.n	800a18e <HAL_TIM_IC_ConfigChannel+0x92>
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	4a6a      	ldr	r2, [pc, #424]	; (800a320 <HAL_TIM_IC_ConfigChannel+0x224>)
 800a176:	4293      	cmp	r3, r2
 800a178:	d009      	beq.n	800a18e <HAL_TIM_IC_ConfigChannel+0x92>
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	4a69      	ldr	r2, [pc, #420]	; (800a324 <HAL_TIM_IC_ConfigChannel+0x228>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d004      	beq.n	800a18e <HAL_TIM_IC_ConfigChannel+0x92>
 800a184:	f241 0112 	movw	r1, #4114	; 0x1012
 800a188:	4867      	ldr	r0, [pc, #412]	; (800a328 <HAL_TIM_IC_ConfigChannel+0x22c>)
 800a18a:	f7f8 f9f6 	bl	800257a <assert_failed>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d00c      	beq.n	800a1b0 <HAL_TIM_IC_ConfigChannel+0xb4>
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	2b02      	cmp	r3, #2
 800a19c:	d008      	beq.n	800a1b0 <HAL_TIM_IC_ConfigChannel+0xb4>
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	2b0a      	cmp	r3, #10
 800a1a4:	d004      	beq.n	800a1b0 <HAL_TIM_IC_ConfigChannel+0xb4>
 800a1a6:	f241 0113 	movw	r1, #4115	; 0x1013
 800a1aa:	485f      	ldr	r0, [pc, #380]	; (800a328 <HAL_TIM_IC_ConfigChannel+0x22c>)
 800a1ac:	f7f8 f9e5 	bl	800257a <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	2b01      	cmp	r3, #1
 800a1b6:	d00c      	beq.n	800a1d2 <HAL_TIM_IC_ConfigChannel+0xd6>
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	2b02      	cmp	r3, #2
 800a1be:	d008      	beq.n	800a1d2 <HAL_TIM_IC_ConfigChannel+0xd6>
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	2b03      	cmp	r3, #3
 800a1c6:	d004      	beq.n	800a1d2 <HAL_TIM_IC_ConfigChannel+0xd6>
 800a1c8:	f241 0114 	movw	r1, #4116	; 0x1014
 800a1cc:	4856      	ldr	r0, [pc, #344]	; (800a328 <HAL_TIM_IC_ConfigChannel+0x22c>)
 800a1ce:	f7f8 f9d4 	bl	800257a <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d010      	beq.n	800a1fc <HAL_TIM_IC_ConfigChannel+0x100>
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	2b04      	cmp	r3, #4
 800a1e0:	d00c      	beq.n	800a1fc <HAL_TIM_IC_ConfigChannel+0x100>
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	689b      	ldr	r3, [r3, #8]
 800a1e6:	2b08      	cmp	r3, #8
 800a1e8:	d008      	beq.n	800a1fc <HAL_TIM_IC_ConfigChannel+0x100>
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	689b      	ldr	r3, [r3, #8]
 800a1ee:	2b0c      	cmp	r3, #12
 800a1f0:	d004      	beq.n	800a1fc <HAL_TIM_IC_ConfigChannel+0x100>
 800a1f2:	f241 0115 	movw	r1, #4117	; 0x1015
 800a1f6:	484c      	ldr	r0, [pc, #304]	; (800a328 <HAL_TIM_IC_ConfigChannel+0x22c>)
 800a1f8:	f7f8 f9bf 	bl	800257a <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	68db      	ldr	r3, [r3, #12]
 800a200:	2b0f      	cmp	r3, #15
 800a202:	d904      	bls.n	800a20e <HAL_TIM_IC_ConfigChannel+0x112>
 800a204:	f241 0116 	movw	r1, #4118	; 0x1016
 800a208:	4847      	ldr	r0, [pc, #284]	; (800a328 <HAL_TIM_IC_ConfigChannel+0x22c>)
 800a20a:	f7f8 f9b6 	bl	800257a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a214:	2b01      	cmp	r3, #1
 800a216:	d101      	bne.n	800a21c <HAL_TIM_IC_ConfigChannel+0x120>
 800a218:	2302      	movs	r3, #2
 800a21a:	e113      	b.n	800a444 <HAL_TIM_IC_ConfigChannel+0x348>
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2201      	movs	r2, #1
 800a220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d11b      	bne.n	800a262 <HAL_TIM_IC_ConfigChannel+0x166>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	6818      	ldr	r0, [r3, #0]
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	6819      	ldr	r1, [r3, #0]
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	685a      	ldr	r2, [r3, #4]
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	68db      	ldr	r3, [r3, #12]
 800a23a:	f001 fa7b 	bl	800b734 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	699a      	ldr	r2, [r3, #24]
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f022 020c 	bic.w	r2, r2, #12
 800a24c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	6999      	ldr	r1, [r3, #24]
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	689a      	ldr	r2, [r3, #8]
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	430a      	orrs	r2, r1
 800a25e:	619a      	str	r2, [r3, #24]
 800a260:	e0eb      	b.n	800a43a <HAL_TIM_IC_ConfigChannel+0x33e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2b04      	cmp	r3, #4
 800a266:	d161      	bne.n	800a32c <HAL_TIM_IC_ConfigChannel+0x230>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4a23      	ldr	r2, [pc, #140]	; (800a2fc <HAL_TIM_IC_ConfigChannel+0x200>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d027      	beq.n	800a2c2 <HAL_TIM_IC_ConfigChannel+0x1c6>
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a27a:	d022      	beq.n	800a2c2 <HAL_TIM_IC_ConfigChannel+0x1c6>
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a1f      	ldr	r2, [pc, #124]	; (800a300 <HAL_TIM_IC_ConfigChannel+0x204>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d01d      	beq.n	800a2c2 <HAL_TIM_IC_ConfigChannel+0x1c6>
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	4a1e      	ldr	r2, [pc, #120]	; (800a304 <HAL_TIM_IC_ConfigChannel+0x208>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d018      	beq.n	800a2c2 <HAL_TIM_IC_ConfigChannel+0x1c6>
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4a1c      	ldr	r2, [pc, #112]	; (800a308 <HAL_TIM_IC_ConfigChannel+0x20c>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d013      	beq.n	800a2c2 <HAL_TIM_IC_ConfigChannel+0x1c6>
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4a1b      	ldr	r2, [pc, #108]	; (800a30c <HAL_TIM_IC_ConfigChannel+0x210>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d00e      	beq.n	800a2c2 <HAL_TIM_IC_ConfigChannel+0x1c6>
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a19      	ldr	r2, [pc, #100]	; (800a310 <HAL_TIM_IC_ConfigChannel+0x214>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d009      	beq.n	800a2c2 <HAL_TIM_IC_ConfigChannel+0x1c6>
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4a1a      	ldr	r2, [pc, #104]	; (800a31c <HAL_TIM_IC_ConfigChannel+0x220>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d004      	beq.n	800a2c2 <HAL_TIM_IC_ConfigChannel+0x1c6>
 800a2b8:	f241 012c 	movw	r1, #4140	; 0x102c
 800a2bc:	481a      	ldr	r0, [pc, #104]	; (800a328 <HAL_TIM_IC_ConfigChannel+0x22c>)
 800a2be:	f7f8 f95c 	bl	800257a <assert_failed>

    TIM_TI2_SetConfig(htim->Instance,
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	6818      	ldr	r0, [r3, #0]
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	6819      	ldr	r1, [r3, #0]
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	685a      	ldr	r2, [r3, #4]
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	68db      	ldr	r3, [r3, #12]
 800a2d2:	f001 fad2 	bl	800b87a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	699a      	ldr	r2, [r3, #24]
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a2e4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	6999      	ldr	r1, [r3, #24]
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	689b      	ldr	r3, [r3, #8]
 800a2f0:	021a      	lsls	r2, r3, #8
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	430a      	orrs	r2, r1
 800a2f8:	619a      	str	r2, [r3, #24]
 800a2fa:	e09e      	b.n	800a43a <HAL_TIM_IC_ConfigChannel+0x33e>
 800a2fc:	40010000 	.word	0x40010000
 800a300:	40000400 	.word	0x40000400
 800a304:	40000800 	.word	0x40000800
 800a308:	40000c00 	.word	0x40000c00
 800a30c:	40010400 	.word	0x40010400
 800a310:	40014000 	.word	0x40014000
 800a314:	40014400 	.word	0x40014400
 800a318:	40014800 	.word	0x40014800
 800a31c:	40001800 	.word	0x40001800
 800a320:	40001c00 	.word	0x40001c00
 800a324:	40002000 	.word	0x40002000
 800a328:	0801b0d8 	.word	0x0801b0d8
  }
  else if (Channel == TIM_CHANNEL_3)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2b08      	cmp	r3, #8
 800a330:	d13e      	bne.n	800a3b0 <HAL_TIM_IC_ConfigChannel+0x2b4>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	4a45      	ldr	r2, [pc, #276]	; (800a44c <HAL_TIM_IC_ConfigChannel+0x350>)
 800a338:	4293      	cmp	r3, r2
 800a33a:	d01d      	beq.n	800a378 <HAL_TIM_IC_ConfigChannel+0x27c>
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a344:	d018      	beq.n	800a378 <HAL_TIM_IC_ConfigChannel+0x27c>
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	4a41      	ldr	r2, [pc, #260]	; (800a450 <HAL_TIM_IC_ConfigChannel+0x354>)
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d013      	beq.n	800a378 <HAL_TIM_IC_ConfigChannel+0x27c>
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	4a3f      	ldr	r2, [pc, #252]	; (800a454 <HAL_TIM_IC_ConfigChannel+0x358>)
 800a356:	4293      	cmp	r3, r2
 800a358:	d00e      	beq.n	800a378 <HAL_TIM_IC_ConfigChannel+0x27c>
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4a3e      	ldr	r2, [pc, #248]	; (800a458 <HAL_TIM_IC_ConfigChannel+0x35c>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d009      	beq.n	800a378 <HAL_TIM_IC_ConfigChannel+0x27c>
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a3c      	ldr	r2, [pc, #240]	; (800a45c <HAL_TIM_IC_ConfigChannel+0x360>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d004      	beq.n	800a378 <HAL_TIM_IC_ConfigChannel+0x27c>
 800a36e:	f241 013c 	movw	r1, #4156	; 0x103c
 800a372:	483b      	ldr	r0, [pc, #236]	; (800a460 <HAL_TIM_IC_ConfigChannel+0x364>)
 800a374:	f7f8 f901 	bl	800257a <assert_failed>

    TIM_TI3_SetConfig(htim->Instance,
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	6818      	ldr	r0, [r3, #0]
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	6819      	ldr	r1, [r3, #0]
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	685a      	ldr	r2, [r3, #4]
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	68db      	ldr	r3, [r3, #12]
 800a388:	f001 fae4 	bl	800b954 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	69da      	ldr	r2, [r3, #28]
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f022 020c 	bic.w	r2, r2, #12
 800a39a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	69d9      	ldr	r1, [r3, #28]
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	689a      	ldr	r2, [r3, #8]
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	430a      	orrs	r2, r1
 800a3ac:	61da      	str	r2, [r3, #28]
 800a3ae:	e044      	b.n	800a43a <HAL_TIM_IC_ConfigChannel+0x33e>
  }
  else if (Channel == TIM_CHANNEL_4)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2b0c      	cmp	r3, #12
 800a3b4:	d13f      	bne.n	800a436 <HAL_TIM_IC_ConfigChannel+0x33a>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4a24      	ldr	r2, [pc, #144]	; (800a44c <HAL_TIM_IC_ConfigChannel+0x350>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d01d      	beq.n	800a3fc <HAL_TIM_IC_ConfigChannel+0x300>
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3c8:	d018      	beq.n	800a3fc <HAL_TIM_IC_ConfigChannel+0x300>
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	4a20      	ldr	r2, [pc, #128]	; (800a450 <HAL_TIM_IC_ConfigChannel+0x354>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d013      	beq.n	800a3fc <HAL_TIM_IC_ConfigChannel+0x300>
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	4a1e      	ldr	r2, [pc, #120]	; (800a454 <HAL_TIM_IC_ConfigChannel+0x358>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d00e      	beq.n	800a3fc <HAL_TIM_IC_ConfigChannel+0x300>
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	4a1d      	ldr	r2, [pc, #116]	; (800a458 <HAL_TIM_IC_ConfigChannel+0x35c>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d009      	beq.n	800a3fc <HAL_TIM_IC_ConfigChannel+0x300>
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4a1b      	ldr	r2, [pc, #108]	; (800a45c <HAL_TIM_IC_ConfigChannel+0x360>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d004      	beq.n	800a3fc <HAL_TIM_IC_ConfigChannel+0x300>
 800a3f2:	f241 014c 	movw	r1, #4172	; 0x104c
 800a3f6:	481a      	ldr	r0, [pc, #104]	; (800a460 <HAL_TIM_IC_ConfigChannel+0x364>)
 800a3f8:	f7f8 f8bf 	bl	800257a <assert_failed>

    TIM_TI4_SetConfig(htim->Instance,
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	6818      	ldr	r0, [r3, #0]
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	6819      	ldr	r1, [r3, #0]
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	685a      	ldr	r2, [r3, #4]
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	68db      	ldr	r3, [r3, #12]
 800a40c:	f001 fade 	bl	800b9cc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	69da      	ldr	r2, [r3, #28]
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a41e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	69d9      	ldr	r1, [r3, #28]
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	689b      	ldr	r3, [r3, #8]
 800a42a:	021a      	lsls	r2, r3, #8
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	430a      	orrs	r2, r1
 800a432:	61da      	str	r2, [r3, #28]
 800a434:	e001      	b.n	800a43a <HAL_TIM_IC_ConfigChannel+0x33e>
  }
  else
  {
    status = HAL_ERROR;
 800a436:	2301      	movs	r3, #1
 800a438:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	2200      	movs	r2, #0
 800a43e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a442:	7dfb      	ldrb	r3, [r7, #23]
}
 800a444:	4618      	mov	r0, r3
 800a446:	3718      	adds	r7, #24
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}
 800a44c:	40010000 	.word	0x40010000
 800a450:	40000400 	.word	0x40000400
 800a454:	40000800 	.word	0x40000800
 800a458:	40000c00 	.word	0x40000c00
 800a45c:	40010400 	.word	0x40010400
 800a460:	0801b0d8 	.word	0x0801b0d8

0800a464 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b086      	sub	sp, #24
 800a468:	af00      	add	r7, sp, #0
 800a46a:	60f8      	str	r0, [r7, #12]
 800a46c:	60b9      	str	r1, [r7, #8]
 800a46e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a470:	2300      	movs	r3, #0
 800a472:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d010      	beq.n	800a49c <HAL_TIM_PWM_ConfigChannel+0x38>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2b04      	cmp	r3, #4
 800a47e:	d00d      	beq.n	800a49c <HAL_TIM_PWM_ConfigChannel+0x38>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2b08      	cmp	r3, #8
 800a484:	d00a      	beq.n	800a49c <HAL_TIM_PWM_ConfigChannel+0x38>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2b0c      	cmp	r3, #12
 800a48a:	d007      	beq.n	800a49c <HAL_TIM_PWM_ConfigChannel+0x38>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2b3c      	cmp	r3, #60	; 0x3c
 800a490:	d004      	beq.n	800a49c <HAL_TIM_PWM_ConfigChannel+0x38>
 800a492:	f241 0177 	movw	r1, #4215	; 0x1077
 800a496:	4883      	ldr	r0, [pc, #524]	; (800a6a4 <HAL_TIM_PWM_ConfigChannel+0x240>)
 800a498:	f7f8 f86f 	bl	800257a <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	2b60      	cmp	r3, #96	; 0x60
 800a4a2:	d008      	beq.n	800a4b6 <HAL_TIM_PWM_ConfigChannel+0x52>
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	2b70      	cmp	r3, #112	; 0x70
 800a4aa:	d004      	beq.n	800a4b6 <HAL_TIM_PWM_ConfigChannel+0x52>
 800a4ac:	f241 0178 	movw	r1, #4216	; 0x1078
 800a4b0:	487c      	ldr	r0, [pc, #496]	; (800a6a4 <HAL_TIM_PWM_ConfigChannel+0x240>)
 800a4b2:	f7f8 f862 	bl	800257a <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	689b      	ldr	r3, [r3, #8]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d008      	beq.n	800a4d0 <HAL_TIM_PWM_ConfigChannel+0x6c>
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	689b      	ldr	r3, [r3, #8]
 800a4c2:	2b02      	cmp	r3, #2
 800a4c4:	d004      	beq.n	800a4d0 <HAL_TIM_PWM_ConfigChannel+0x6c>
 800a4c6:	f241 0179 	movw	r1, #4217	; 0x1079
 800a4ca:	4876      	ldr	r0, [pc, #472]	; (800a6a4 <HAL_TIM_PWM_ConfigChannel+0x240>)
 800a4cc:	f7f8 f855 	bl	800257a <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	691b      	ldr	r3, [r3, #16]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d008      	beq.n	800a4ea <HAL_TIM_PWM_ConfigChannel+0x86>
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	691b      	ldr	r3, [r3, #16]
 800a4dc:	2b04      	cmp	r3, #4
 800a4de:	d004      	beq.n	800a4ea <HAL_TIM_PWM_ConfigChannel+0x86>
 800a4e0:	f241 017a 	movw	r1, #4218	; 0x107a
 800a4e4:	486f      	ldr	r0, [pc, #444]	; (800a6a4 <HAL_TIM_PWM_ConfigChannel+0x240>)
 800a4e6:	f7f8 f848 	bl	800257a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	d101      	bne.n	800a4f8 <HAL_TIM_PWM_ConfigChannel+0x94>
 800a4f4:	2302      	movs	r3, #2
 800a4f6:	e17c      	b.n	800a7f2 <HAL_TIM_PWM_ConfigChannel+0x38e>
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2201      	movs	r2, #1
 800a4fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2b0c      	cmp	r3, #12
 800a504:	f200 816d 	bhi.w	800a7e2 <HAL_TIM_PWM_ConfigChannel+0x37e>
 800a508:	a201      	add	r2, pc, #4	; (adr r2, 800a510 <HAL_TIM_PWM_ConfigChannel+0xac>)
 800a50a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a50e:	bf00      	nop
 800a510:	0800a545 	.word	0x0800a545
 800a514:	0800a7e3 	.word	0x0800a7e3
 800a518:	0800a7e3 	.word	0x0800a7e3
 800a51c:	0800a7e3 	.word	0x0800a7e3
 800a520:	0800a607 	.word	0x0800a607
 800a524:	0800a7e3 	.word	0x0800a7e3
 800a528:	0800a7e3 	.word	0x0800a7e3
 800a52c:	0800a7e3 	.word	0x0800a7e3
 800a530:	0800a6d5 	.word	0x0800a6d5
 800a534:	0800a7e3 	.word	0x0800a7e3
 800a538:	0800a7e3 	.word	0x0800a7e3
 800a53c:	0800a7e3 	.word	0x0800a7e3
 800a540:	0800a75b 	.word	0x0800a75b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4a57      	ldr	r2, [pc, #348]	; (800a6a8 <HAL_TIM_PWM_ConfigChannel+0x244>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d03b      	beq.n	800a5c6 <HAL_TIM_PWM_ConfigChannel+0x162>
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a556:	d036      	beq.n	800a5c6 <HAL_TIM_PWM_ConfigChannel+0x162>
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4a53      	ldr	r2, [pc, #332]	; (800a6ac <HAL_TIM_PWM_ConfigChannel+0x248>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d031      	beq.n	800a5c6 <HAL_TIM_PWM_ConfigChannel+0x162>
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	4a52      	ldr	r2, [pc, #328]	; (800a6b0 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d02c      	beq.n	800a5c6 <HAL_TIM_PWM_ConfigChannel+0x162>
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	4a50      	ldr	r2, [pc, #320]	; (800a6b4 <HAL_TIM_PWM_ConfigChannel+0x250>)
 800a572:	4293      	cmp	r3, r2
 800a574:	d027      	beq.n	800a5c6 <HAL_TIM_PWM_ConfigChannel+0x162>
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	4a4f      	ldr	r2, [pc, #316]	; (800a6b8 <HAL_TIM_PWM_ConfigChannel+0x254>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d022      	beq.n	800a5c6 <HAL_TIM_PWM_ConfigChannel+0x162>
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4a4d      	ldr	r2, [pc, #308]	; (800a6bc <HAL_TIM_PWM_ConfigChannel+0x258>)
 800a586:	4293      	cmp	r3, r2
 800a588:	d01d      	beq.n	800a5c6 <HAL_TIM_PWM_ConfigChannel+0x162>
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	4a4c      	ldr	r2, [pc, #304]	; (800a6c0 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d018      	beq.n	800a5c6 <HAL_TIM_PWM_ConfigChannel+0x162>
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4a4a      	ldr	r2, [pc, #296]	; (800a6c4 <HAL_TIM_PWM_ConfigChannel+0x260>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d013      	beq.n	800a5c6 <HAL_TIM_PWM_ConfigChannel+0x162>
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	4a49      	ldr	r2, [pc, #292]	; (800a6c8 <HAL_TIM_PWM_ConfigChannel+0x264>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d00e      	beq.n	800a5c6 <HAL_TIM_PWM_ConfigChannel+0x162>
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4a47      	ldr	r2, [pc, #284]	; (800a6cc <HAL_TIM_PWM_ConfigChannel+0x268>)
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d009      	beq.n	800a5c6 <HAL_TIM_PWM_ConfigChannel+0x162>
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	4a46      	ldr	r2, [pc, #280]	; (800a6d0 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d004      	beq.n	800a5c6 <HAL_TIM_PWM_ConfigChannel+0x162>
 800a5bc:	f241 0184 	movw	r1, #4228	; 0x1084
 800a5c0:	4838      	ldr	r0, [pc, #224]	; (800a6a4 <HAL_TIM_PWM_ConfigChannel+0x240>)
 800a5c2:	f7f7 ffda 	bl	800257a <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	68b9      	ldr	r1, [r7, #8]
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f000 fe77 	bl	800b2c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	699a      	ldr	r2, [r3, #24]
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f042 0208 	orr.w	r2, r2, #8
 800a5e0:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	699a      	ldr	r2, [r3, #24]
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f022 0204 	bic.w	r2, r2, #4
 800a5f0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	6999      	ldr	r1, [r3, #24]
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	691a      	ldr	r2, [r3, #16]
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	430a      	orrs	r2, r1
 800a602:	619a      	str	r2, [r3, #24]
      break;
 800a604:	e0f0      	b.n	800a7e8 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	4a27      	ldr	r2, [pc, #156]	; (800a6a8 <HAL_TIM_PWM_ConfigChannel+0x244>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d027      	beq.n	800a660 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a618:	d022      	beq.n	800a660 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	4a23      	ldr	r2, [pc, #140]	; (800a6ac <HAL_TIM_PWM_ConfigChannel+0x248>)
 800a620:	4293      	cmp	r3, r2
 800a622:	d01d      	beq.n	800a660 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	4a21      	ldr	r2, [pc, #132]	; (800a6b0 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d018      	beq.n	800a660 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	4a20      	ldr	r2, [pc, #128]	; (800a6b4 <HAL_TIM_PWM_ConfigChannel+0x250>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d013      	beq.n	800a660 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	4a1e      	ldr	r2, [pc, #120]	; (800a6b8 <HAL_TIM_PWM_ConfigChannel+0x254>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d00e      	beq.n	800a660 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	4a1d      	ldr	r2, [pc, #116]	; (800a6bc <HAL_TIM_PWM_ConfigChannel+0x258>)
 800a648:	4293      	cmp	r3, r2
 800a64a:	d009      	beq.n	800a660 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	4a1d      	ldr	r2, [pc, #116]	; (800a6c8 <HAL_TIM_PWM_ConfigChannel+0x264>)
 800a652:	4293      	cmp	r3, r2
 800a654:	d004      	beq.n	800a660 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800a656:	f241 0195 	movw	r1, #4245	; 0x1095
 800a65a:	4812      	ldr	r0, [pc, #72]	; (800a6a4 <HAL_TIM_PWM_ConfigChannel+0x240>)
 800a65c:	f7f7 ff8d 	bl	800257a <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	68b9      	ldr	r1, [r7, #8]
 800a666:	4618      	mov	r0, r3
 800a668:	f000 fec4 	bl	800b3f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	699a      	ldr	r2, [r3, #24]
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a67a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	699a      	ldr	r2, [r3, #24]
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a68a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	6999      	ldr	r1, [r3, #24]
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	691b      	ldr	r3, [r3, #16]
 800a696:	021a      	lsls	r2, r3, #8
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	430a      	orrs	r2, r1
 800a69e:	619a      	str	r2, [r3, #24]
      break;
 800a6a0:	e0a2      	b.n	800a7e8 <HAL_TIM_PWM_ConfigChannel+0x384>
 800a6a2:	bf00      	nop
 800a6a4:	0801b0d8 	.word	0x0801b0d8
 800a6a8:	40010000 	.word	0x40010000
 800a6ac:	40000400 	.word	0x40000400
 800a6b0:	40000800 	.word	0x40000800
 800a6b4:	40000c00 	.word	0x40000c00
 800a6b8:	40010400 	.word	0x40010400
 800a6bc:	40014000 	.word	0x40014000
 800a6c0:	40014400 	.word	0x40014400
 800a6c4:	40014800 	.word	0x40014800
 800a6c8:	40001800 	.word	0x40001800
 800a6cc:	40001c00 	.word	0x40001c00
 800a6d0:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	4a48      	ldr	r2, [pc, #288]	; (800a7fc <HAL_TIM_PWM_ConfigChannel+0x398>)
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	d01d      	beq.n	800a71a <HAL_TIM_PWM_ConfigChannel+0x2b6>
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6e6:	d018      	beq.n	800a71a <HAL_TIM_PWM_ConfigChannel+0x2b6>
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	4a44      	ldr	r2, [pc, #272]	; (800a800 <HAL_TIM_PWM_ConfigChannel+0x39c>)
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d013      	beq.n	800a71a <HAL_TIM_PWM_ConfigChannel+0x2b6>
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	4a43      	ldr	r2, [pc, #268]	; (800a804 <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d00e      	beq.n	800a71a <HAL_TIM_PWM_ConfigChannel+0x2b6>
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	4a41      	ldr	r2, [pc, #260]	; (800a808 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 800a702:	4293      	cmp	r3, r2
 800a704:	d009      	beq.n	800a71a <HAL_TIM_PWM_ConfigChannel+0x2b6>
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	4a40      	ldr	r2, [pc, #256]	; (800a80c <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d004      	beq.n	800a71a <HAL_TIM_PWM_ConfigChannel+0x2b6>
 800a710:	f241 01a6 	movw	r1, #4262	; 0x10a6
 800a714:	483e      	ldr	r0, [pc, #248]	; (800a810 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 800a716:	f7f7 ff30 	bl	800257a <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	68b9      	ldr	r1, [r7, #8]
 800a720:	4618      	mov	r0, r3
 800a722:	f000 ff05 	bl	800b530 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	69da      	ldr	r2, [r3, #28]
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f042 0208 	orr.w	r2, r2, #8
 800a734:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	69da      	ldr	r2, [r3, #28]
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f022 0204 	bic.w	r2, r2, #4
 800a744:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	69d9      	ldr	r1, [r3, #28]
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	691a      	ldr	r2, [r3, #16]
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	430a      	orrs	r2, r1
 800a756:	61da      	str	r2, [r3, #28]
      break;
 800a758:	e046      	b.n	800a7e8 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	4a27      	ldr	r2, [pc, #156]	; (800a7fc <HAL_TIM_PWM_ConfigChannel+0x398>)
 800a760:	4293      	cmp	r3, r2
 800a762:	d01d      	beq.n	800a7a0 <HAL_TIM_PWM_ConfigChannel+0x33c>
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a76c:	d018      	beq.n	800a7a0 <HAL_TIM_PWM_ConfigChannel+0x33c>
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	4a23      	ldr	r2, [pc, #140]	; (800a800 <HAL_TIM_PWM_ConfigChannel+0x39c>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d013      	beq.n	800a7a0 <HAL_TIM_PWM_ConfigChannel+0x33c>
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4a21      	ldr	r2, [pc, #132]	; (800a804 <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	d00e      	beq.n	800a7a0 <HAL_TIM_PWM_ConfigChannel+0x33c>
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	4a20      	ldr	r2, [pc, #128]	; (800a808 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 800a788:	4293      	cmp	r3, r2
 800a78a:	d009      	beq.n	800a7a0 <HAL_TIM_PWM_ConfigChannel+0x33c>
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4a1e      	ldr	r2, [pc, #120]	; (800a80c <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 800a792:	4293      	cmp	r3, r2
 800a794:	d004      	beq.n	800a7a0 <HAL_TIM_PWM_ConfigChannel+0x33c>
 800a796:	f241 01b7 	movw	r1, #4279	; 0x10b7
 800a79a:	481d      	ldr	r0, [pc, #116]	; (800a810 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 800a79c:	f7f7 feed 	bl	800257a <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	68b9      	ldr	r1, [r7, #8]
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f000 ff60 	bl	800b66c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	69da      	ldr	r2, [r3, #28]
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a7ba:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	69da      	ldr	r2, [r3, #28]
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a7ca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	69d9      	ldr	r1, [r3, #28]
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	691b      	ldr	r3, [r3, #16]
 800a7d6:	021a      	lsls	r2, r3, #8
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	430a      	orrs	r2, r1
 800a7de:	61da      	str	r2, [r3, #28]
      break;
 800a7e0:	e002      	b.n	800a7e8 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    default:
      status = HAL_ERROR;
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	75fb      	strb	r3, [r7, #23]
      break;
 800a7e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a7f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3718      	adds	r7, #24
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
 800a7fa:	bf00      	nop
 800a7fc:	40010000 	.word	0x40010000
 800a800:	40000400 	.word	0x40000400
 800a804:	40000800 	.word	0x40000800
 800a808:	40000c00 	.word	0x40000c00
 800a80c:	40010400 	.word	0x40010400
 800a810:	0801b0d8 	.word	0x0801b0d8

0800a814 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b084      	sub	sp, #16
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a81e:	2300      	movs	r3, #0
 800a820:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a828:	2b01      	cmp	r3, #1
 800a82a:	d101      	bne.n	800a830 <HAL_TIM_ConfigClockSource+0x1c>
 800a82c:	2302      	movs	r3, #2
 800a82e:	e35c      	b.n	800aeea <HAL_TIM_ConfigClockSource+0x6d6>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2201      	movs	r2, #1
 800a834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2202      	movs	r2, #2
 800a83c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a848:	d029      	beq.n	800a89e <HAL_TIM_ConfigClockSource+0x8a>
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a852:	d024      	beq.n	800a89e <HAL_TIM_ConfigClockSource+0x8a>
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d020      	beq.n	800a89e <HAL_TIM_ConfigClockSource+0x8a>
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	2b10      	cmp	r3, #16
 800a862:	d01c      	beq.n	800a89e <HAL_TIM_ConfigClockSource+0x8a>
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	2b20      	cmp	r3, #32
 800a86a:	d018      	beq.n	800a89e <HAL_TIM_ConfigClockSource+0x8a>
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	2b30      	cmp	r3, #48	; 0x30
 800a872:	d014      	beq.n	800a89e <HAL_TIM_ConfigClockSource+0x8a>
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	2b40      	cmp	r3, #64	; 0x40
 800a87a:	d010      	beq.n	800a89e <HAL_TIM_ConfigClockSource+0x8a>
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	2b50      	cmp	r3, #80	; 0x50
 800a882:	d00c      	beq.n	800a89e <HAL_TIM_ConfigClockSource+0x8a>
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	2b60      	cmp	r3, #96	; 0x60
 800a88a:	d008      	beq.n	800a89e <HAL_TIM_ConfigClockSource+0x8a>
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	2b70      	cmp	r3, #112	; 0x70
 800a892:	d004      	beq.n	800a89e <HAL_TIM_ConfigClockSource+0x8a>
 800a894:	f241 41bb 	movw	r1, #5307	; 0x14bb
 800a898:	4893      	ldr	r0, [pc, #588]	; (800aae8 <HAL_TIM_ConfigClockSource+0x2d4>)
 800a89a:	f7f7 fe6e 	bl	800257a <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	689b      	ldr	r3, [r3, #8]
 800a8a4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a8ac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a8b4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	68ba      	ldr	r2, [r7, #8]
 800a8bc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8c6:	f000 812b 	beq.w	800ab20 <HAL_TIM_ConfigClockSource+0x30c>
 800a8ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8ce:	f200 82ff 	bhi.w	800aed0 <HAL_TIM_ConfigClockSource+0x6bc>
 800a8d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8d6:	d02e      	beq.n	800a936 <HAL_TIM_ConfigClockSource+0x122>
 800a8d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8dc:	f200 82f8 	bhi.w	800aed0 <HAL_TIM_ConfigClockSource+0x6bc>
 800a8e0:	2b70      	cmp	r3, #112	; 0x70
 800a8e2:	f000 8082 	beq.w	800a9ea <HAL_TIM_ConfigClockSource+0x1d6>
 800a8e6:	2b70      	cmp	r3, #112	; 0x70
 800a8e8:	f200 82f2 	bhi.w	800aed0 <HAL_TIM_ConfigClockSource+0x6bc>
 800a8ec:	2b60      	cmp	r3, #96	; 0x60
 800a8ee:	f000 81e8 	beq.w	800acc2 <HAL_TIM_ConfigClockSource+0x4ae>
 800a8f2:	2b60      	cmp	r3, #96	; 0x60
 800a8f4:	f200 82ec 	bhi.w	800aed0 <HAL_TIM_ConfigClockSource+0x6bc>
 800a8f8:	2b50      	cmp	r3, #80	; 0x50
 800a8fa:	f000 8182 	beq.w	800ac02 <HAL_TIM_ConfigClockSource+0x3ee>
 800a8fe:	2b50      	cmp	r3, #80	; 0x50
 800a900:	f200 82e6 	bhi.w	800aed0 <HAL_TIM_ConfigClockSource+0x6bc>
 800a904:	2b40      	cmp	r3, #64	; 0x40
 800a906:	f000 824d 	beq.w	800ada4 <HAL_TIM_ConfigClockSource+0x590>
 800a90a:	2b40      	cmp	r3, #64	; 0x40
 800a90c:	f200 82e0 	bhi.w	800aed0 <HAL_TIM_ConfigClockSource+0x6bc>
 800a910:	2b30      	cmp	r3, #48	; 0x30
 800a912:	f000 82a7 	beq.w	800ae64 <HAL_TIM_ConfigClockSource+0x650>
 800a916:	2b30      	cmp	r3, #48	; 0x30
 800a918:	f200 82da 	bhi.w	800aed0 <HAL_TIM_ConfigClockSource+0x6bc>
 800a91c:	2b20      	cmp	r3, #32
 800a91e:	f000 82a1 	beq.w	800ae64 <HAL_TIM_ConfigClockSource+0x650>
 800a922:	2b20      	cmp	r3, #32
 800a924:	f200 82d4 	bhi.w	800aed0 <HAL_TIM_ConfigClockSource+0x6bc>
 800a928:	2b00      	cmp	r3, #0
 800a92a:	f000 829b 	beq.w	800ae64 <HAL_TIM_ConfigClockSource+0x650>
 800a92e:	2b10      	cmp	r3, #16
 800a930:	f000 8298 	beq.w	800ae64 <HAL_TIM_ConfigClockSource+0x650>
 800a934:	e2cc      	b.n	800aed0 <HAL_TIM_ConfigClockSource+0x6bc>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	4a6c      	ldr	r2, [pc, #432]	; (800aaec <HAL_TIM_ConfigClockSource+0x2d8>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	f000 82ca 	beq.w	800aed6 <HAL_TIM_ConfigClockSource+0x6c2>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a94a:	f000 82c4 	beq.w	800aed6 <HAL_TIM_ConfigClockSource+0x6c2>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	4a67      	ldr	r2, [pc, #412]	; (800aaf0 <HAL_TIM_ConfigClockSource+0x2dc>)
 800a954:	4293      	cmp	r3, r2
 800a956:	f000 82be 	beq.w	800aed6 <HAL_TIM_ConfigClockSource+0x6c2>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	4a65      	ldr	r2, [pc, #404]	; (800aaf4 <HAL_TIM_ConfigClockSource+0x2e0>)
 800a960:	4293      	cmp	r3, r2
 800a962:	f000 82b8 	beq.w	800aed6 <HAL_TIM_ConfigClockSource+0x6c2>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	4a63      	ldr	r2, [pc, #396]	; (800aaf8 <HAL_TIM_ConfigClockSource+0x2e4>)
 800a96c:	4293      	cmp	r3, r2
 800a96e:	f000 82b2 	beq.w	800aed6 <HAL_TIM_ConfigClockSource+0x6c2>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	4a61      	ldr	r2, [pc, #388]	; (800aafc <HAL_TIM_ConfigClockSource+0x2e8>)
 800a978:	4293      	cmp	r3, r2
 800a97a:	f000 82ac 	beq.w	800aed6 <HAL_TIM_ConfigClockSource+0x6c2>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	4a5f      	ldr	r2, [pc, #380]	; (800ab00 <HAL_TIM_ConfigClockSource+0x2ec>)
 800a984:	4293      	cmp	r3, r2
 800a986:	f000 82a6 	beq.w	800aed6 <HAL_TIM_ConfigClockSource+0x6c2>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	4a5d      	ldr	r2, [pc, #372]	; (800ab04 <HAL_TIM_ConfigClockSource+0x2f0>)
 800a990:	4293      	cmp	r3, r2
 800a992:	f000 82a0 	beq.w	800aed6 <HAL_TIM_ConfigClockSource+0x6c2>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	4a5b      	ldr	r2, [pc, #364]	; (800ab08 <HAL_TIM_ConfigClockSource+0x2f4>)
 800a99c:	4293      	cmp	r3, r2
 800a99e:	f000 829a 	beq.w	800aed6 <HAL_TIM_ConfigClockSource+0x6c2>
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	4a59      	ldr	r2, [pc, #356]	; (800ab0c <HAL_TIM_ConfigClockSource+0x2f8>)
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	f000 8294 	beq.w	800aed6 <HAL_TIM_ConfigClockSource+0x6c2>
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	4a57      	ldr	r2, [pc, #348]	; (800ab10 <HAL_TIM_ConfigClockSource+0x2fc>)
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	f000 828e 	beq.w	800aed6 <HAL_TIM_ConfigClockSource+0x6c2>
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	4a55      	ldr	r2, [pc, #340]	; (800ab14 <HAL_TIM_ConfigClockSource+0x300>)
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	f000 8288 	beq.w	800aed6 <HAL_TIM_ConfigClockSource+0x6c2>
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	4a53      	ldr	r2, [pc, #332]	; (800ab18 <HAL_TIM_ConfigClockSource+0x304>)
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	f000 8282 	beq.w	800aed6 <HAL_TIM_ConfigClockSource+0x6c2>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	4a51      	ldr	r2, [pc, #324]	; (800ab1c <HAL_TIM_ConfigClockSource+0x308>)
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	f000 827c 	beq.w	800aed6 <HAL_TIM_ConfigClockSource+0x6c2>
 800a9de:	f241 41c7 	movw	r1, #5319	; 0x14c7
 800a9e2:	4841      	ldr	r0, [pc, #260]	; (800aae8 <HAL_TIM_ConfigClockSource+0x2d4>)
 800a9e4:	f7f7 fdc9 	bl	800257a <assert_failed>
      break;
 800a9e8:	e275      	b.n	800aed6 <HAL_TIM_ConfigClockSource+0x6c2>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4a3f      	ldr	r2, [pc, #252]	; (800aaec <HAL_TIM_ConfigClockSource+0x2d8>)
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d027      	beq.n	800aa44 <HAL_TIM_ConfigClockSource+0x230>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9fc:	d022      	beq.n	800aa44 <HAL_TIM_ConfigClockSource+0x230>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	4a3b      	ldr	r2, [pc, #236]	; (800aaf0 <HAL_TIM_ConfigClockSource+0x2dc>)
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d01d      	beq.n	800aa44 <HAL_TIM_ConfigClockSource+0x230>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	4a39      	ldr	r2, [pc, #228]	; (800aaf4 <HAL_TIM_ConfigClockSource+0x2e0>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d018      	beq.n	800aa44 <HAL_TIM_ConfigClockSource+0x230>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	4a38      	ldr	r2, [pc, #224]	; (800aaf8 <HAL_TIM_ConfigClockSource+0x2e4>)
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	d013      	beq.n	800aa44 <HAL_TIM_ConfigClockSource+0x230>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4a38      	ldr	r2, [pc, #224]	; (800ab04 <HAL_TIM_ConfigClockSource+0x2f0>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d00e      	beq.n	800aa44 <HAL_TIM_ConfigClockSource+0x230>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	4a37      	ldr	r2, [pc, #220]	; (800ab08 <HAL_TIM_ConfigClockSource+0x2f4>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d009      	beq.n	800aa44 <HAL_TIM_ConfigClockSource+0x230>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4a37      	ldr	r2, [pc, #220]	; (800ab14 <HAL_TIM_ConfigClockSource+0x300>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d004      	beq.n	800aa44 <HAL_TIM_ConfigClockSource+0x230>
 800aa3a:	f241 41ce 	movw	r1, #5326	; 0x14ce
 800aa3e:	482a      	ldr	r0, [pc, #168]	; (800aae8 <HAL_TIM_ConfigClockSource+0x2d4>)
 800aa40:	f7f7 fd9b 	bl	800257a <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	689b      	ldr	r3, [r3, #8]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d013      	beq.n	800aa74 <HAL_TIM_ConfigClockSource+0x260>
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	689b      	ldr	r3, [r3, #8]
 800aa50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa54:	d00e      	beq.n	800aa74 <HAL_TIM_ConfigClockSource+0x260>
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	689b      	ldr	r3, [r3, #8]
 800aa5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa5e:	d009      	beq.n	800aa74 <HAL_TIM_ConfigClockSource+0x260>
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	689b      	ldr	r3, [r3, #8]
 800aa64:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aa68:	d004      	beq.n	800aa74 <HAL_TIM_ConfigClockSource+0x260>
 800aa6a:	f241 41d1 	movw	r1, #5329	; 0x14d1
 800aa6e:	481e      	ldr	r0, [pc, #120]	; (800aae8 <HAL_TIM_ConfigClockSource+0x2d4>)
 800aa70:	f7f7 fd83 	bl	800257a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa7c:	d014      	beq.n	800aaa8 <HAL_TIM_ConfigClockSource+0x294>
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	685b      	ldr	r3, [r3, #4]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d010      	beq.n	800aaa8 <HAL_TIM_ConfigClockSource+0x294>
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d00c      	beq.n	800aaa8 <HAL_TIM_ConfigClockSource+0x294>
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	685b      	ldr	r3, [r3, #4]
 800aa92:	2b02      	cmp	r3, #2
 800aa94:	d008      	beq.n	800aaa8 <HAL_TIM_ConfigClockSource+0x294>
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	2b0a      	cmp	r3, #10
 800aa9c:	d004      	beq.n	800aaa8 <HAL_TIM_ConfigClockSource+0x294>
 800aa9e:	f241 41d2 	movw	r1, #5330	; 0x14d2
 800aaa2:	4811      	ldr	r0, [pc, #68]	; (800aae8 <HAL_TIM_ConfigClockSource+0x2d4>)
 800aaa4:	f7f7 fd69 	bl	800257a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	68db      	ldr	r3, [r3, #12]
 800aaac:	2b0f      	cmp	r3, #15
 800aaae:	d904      	bls.n	800aaba <HAL_TIM_ConfigClockSource+0x2a6>
 800aab0:	f241 41d3 	movw	r1, #5331	; 0x14d3
 800aab4:	480c      	ldr	r0, [pc, #48]	; (800aae8 <HAL_TIM_ConfigClockSource+0x2d4>)
 800aab6:	f7f7 fd60 	bl	800257a <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6818      	ldr	r0, [r3, #0]
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	6899      	ldr	r1, [r3, #8]
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	685a      	ldr	r2, [r3, #4]
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	68db      	ldr	r3, [r3, #12]
 800aaca:	f000 ffd7 	bl	800ba7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	689b      	ldr	r3, [r3, #8]
 800aad4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800aadc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	68ba      	ldr	r2, [r7, #8]
 800aae4:	609a      	str	r2, [r3, #8]
      break;
 800aae6:	e1f7      	b.n	800aed8 <HAL_TIM_ConfigClockSource+0x6c4>
 800aae8:	0801b0d8 	.word	0x0801b0d8
 800aaec:	40010000 	.word	0x40010000
 800aaf0:	40000400 	.word	0x40000400
 800aaf4:	40000800 	.word	0x40000800
 800aaf8:	40000c00 	.word	0x40000c00
 800aafc:	40001000 	.word	0x40001000
 800ab00:	40001400 	.word	0x40001400
 800ab04:	40010400 	.word	0x40010400
 800ab08:	40014000 	.word	0x40014000
 800ab0c:	40014400 	.word	0x40014400
 800ab10:	40014800 	.word	0x40014800
 800ab14:	40001800 	.word	0x40001800
 800ab18:	40001c00 	.word	0x40001c00
 800ab1c:	40002000 	.word	0x40002000
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	4a97      	ldr	r2, [pc, #604]	; (800ad84 <HAL_TIM_ConfigClockSource+0x570>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d01d      	beq.n	800ab66 <HAL_TIM_ConfigClockSource+0x352>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab32:	d018      	beq.n	800ab66 <HAL_TIM_ConfigClockSource+0x352>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	4a93      	ldr	r2, [pc, #588]	; (800ad88 <HAL_TIM_ConfigClockSource+0x574>)
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	d013      	beq.n	800ab66 <HAL_TIM_ConfigClockSource+0x352>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	4a92      	ldr	r2, [pc, #584]	; (800ad8c <HAL_TIM_ConfigClockSource+0x578>)
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d00e      	beq.n	800ab66 <HAL_TIM_ConfigClockSource+0x352>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4a90      	ldr	r2, [pc, #576]	; (800ad90 <HAL_TIM_ConfigClockSource+0x57c>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d009      	beq.n	800ab66 <HAL_TIM_ConfigClockSource+0x352>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	4a8f      	ldr	r2, [pc, #572]	; (800ad94 <HAL_TIM_ConfigClockSource+0x580>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d004      	beq.n	800ab66 <HAL_TIM_ConfigClockSource+0x352>
 800ab5c:	f241 41e6 	movw	r1, #5350	; 0x14e6
 800ab60:	488d      	ldr	r0, [pc, #564]	; (800ad98 <HAL_TIM_ConfigClockSource+0x584>)
 800ab62:	f7f7 fd0a 	bl	800257a <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	689b      	ldr	r3, [r3, #8]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d013      	beq.n	800ab96 <HAL_TIM_ConfigClockSource+0x382>
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	689b      	ldr	r3, [r3, #8]
 800ab72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab76:	d00e      	beq.n	800ab96 <HAL_TIM_ConfigClockSource+0x382>
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	689b      	ldr	r3, [r3, #8]
 800ab7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab80:	d009      	beq.n	800ab96 <HAL_TIM_ConfigClockSource+0x382>
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	689b      	ldr	r3, [r3, #8]
 800ab86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ab8a:	d004      	beq.n	800ab96 <HAL_TIM_ConfigClockSource+0x382>
 800ab8c:	f241 41e9 	movw	r1, #5353	; 0x14e9
 800ab90:	4881      	ldr	r0, [pc, #516]	; (800ad98 <HAL_TIM_ConfigClockSource+0x584>)
 800ab92:	f7f7 fcf2 	bl	800257a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab9e:	d014      	beq.n	800abca <HAL_TIM_ConfigClockSource+0x3b6>
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	685b      	ldr	r3, [r3, #4]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d010      	beq.n	800abca <HAL_TIM_ConfigClockSource+0x3b6>
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	685b      	ldr	r3, [r3, #4]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d00c      	beq.n	800abca <HAL_TIM_ConfigClockSource+0x3b6>
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	685b      	ldr	r3, [r3, #4]
 800abb4:	2b02      	cmp	r3, #2
 800abb6:	d008      	beq.n	800abca <HAL_TIM_ConfigClockSource+0x3b6>
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	685b      	ldr	r3, [r3, #4]
 800abbc:	2b0a      	cmp	r3, #10
 800abbe:	d004      	beq.n	800abca <HAL_TIM_ConfigClockSource+0x3b6>
 800abc0:	f241 41ea 	movw	r1, #5354	; 0x14ea
 800abc4:	4874      	ldr	r0, [pc, #464]	; (800ad98 <HAL_TIM_ConfigClockSource+0x584>)
 800abc6:	f7f7 fcd8 	bl	800257a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	68db      	ldr	r3, [r3, #12]
 800abce:	2b0f      	cmp	r3, #15
 800abd0:	d904      	bls.n	800abdc <HAL_TIM_ConfigClockSource+0x3c8>
 800abd2:	f241 41eb 	movw	r1, #5355	; 0x14eb
 800abd6:	4870      	ldr	r0, [pc, #448]	; (800ad98 <HAL_TIM_ConfigClockSource+0x584>)
 800abd8:	f7f7 fccf 	bl	800257a <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6818      	ldr	r0, [r3, #0]
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	6899      	ldr	r1, [r3, #8]
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	685a      	ldr	r2, [r3, #4]
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	68db      	ldr	r3, [r3, #12]
 800abec:	f000 ff46 	bl	800ba7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	689a      	ldr	r2, [r3, #8]
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800abfe:	609a      	str	r2, [r3, #8]
      break;
 800ac00:	e16a      	b.n	800aed8 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	4a5f      	ldr	r2, [pc, #380]	; (800ad84 <HAL_TIM_ConfigClockSource+0x570>)
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d027      	beq.n	800ac5c <HAL_TIM_ConfigClockSource+0x448>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac14:	d022      	beq.n	800ac5c <HAL_TIM_ConfigClockSource+0x448>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4a5b      	ldr	r2, [pc, #364]	; (800ad88 <HAL_TIM_ConfigClockSource+0x574>)
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d01d      	beq.n	800ac5c <HAL_TIM_ConfigClockSource+0x448>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4a59      	ldr	r2, [pc, #356]	; (800ad8c <HAL_TIM_ConfigClockSource+0x578>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d018      	beq.n	800ac5c <HAL_TIM_ConfigClockSource+0x448>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	4a58      	ldr	r2, [pc, #352]	; (800ad90 <HAL_TIM_ConfigClockSource+0x57c>)
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d013      	beq.n	800ac5c <HAL_TIM_ConfigClockSource+0x448>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	4a56      	ldr	r2, [pc, #344]	; (800ad94 <HAL_TIM_ConfigClockSource+0x580>)
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	d00e      	beq.n	800ac5c <HAL_TIM_ConfigClockSource+0x448>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	4a56      	ldr	r2, [pc, #344]	; (800ad9c <HAL_TIM_ConfigClockSource+0x588>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d009      	beq.n	800ac5c <HAL_TIM_ConfigClockSource+0x448>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	4a54      	ldr	r2, [pc, #336]	; (800ada0 <HAL_TIM_ConfigClockSource+0x58c>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d004      	beq.n	800ac5c <HAL_TIM_ConfigClockSource+0x448>
 800ac52:	f241 41fa 	movw	r1, #5370	; 0x14fa
 800ac56:	4850      	ldr	r0, [pc, #320]	; (800ad98 <HAL_TIM_ConfigClockSource+0x584>)
 800ac58:	f7f7 fc8f 	bl	800257a <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac64:	d014      	beq.n	800ac90 <HAL_TIM_ConfigClockSource+0x47c>
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	685b      	ldr	r3, [r3, #4]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d010      	beq.n	800ac90 <HAL_TIM_ConfigClockSource+0x47c>
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	685b      	ldr	r3, [r3, #4]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d00c      	beq.n	800ac90 <HAL_TIM_ConfigClockSource+0x47c>
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	685b      	ldr	r3, [r3, #4]
 800ac7a:	2b02      	cmp	r3, #2
 800ac7c:	d008      	beq.n	800ac90 <HAL_TIM_ConfigClockSource+0x47c>
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	685b      	ldr	r3, [r3, #4]
 800ac82:	2b0a      	cmp	r3, #10
 800ac84:	d004      	beq.n	800ac90 <HAL_TIM_ConfigClockSource+0x47c>
 800ac86:	f241 41fd 	movw	r1, #5373	; 0x14fd
 800ac8a:	4843      	ldr	r0, [pc, #268]	; (800ad98 <HAL_TIM_ConfigClockSource+0x584>)
 800ac8c:	f7f7 fc75 	bl	800257a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	68db      	ldr	r3, [r3, #12]
 800ac94:	2b0f      	cmp	r3, #15
 800ac96:	d904      	bls.n	800aca2 <HAL_TIM_ConfigClockSource+0x48e>
 800ac98:	f241 41fe 	movw	r1, #5374	; 0x14fe
 800ac9c:	483e      	ldr	r0, [pc, #248]	; (800ad98 <HAL_TIM_ConfigClockSource+0x584>)
 800ac9e:	f7f7 fc6c 	bl	800257a <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6818      	ldr	r0, [r3, #0]
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	6859      	ldr	r1, [r3, #4]
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	68db      	ldr	r3, [r3, #12]
 800acae:	461a      	mov	r2, r3
 800acb0:	f000 fdb4 	bl	800b81c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	2150      	movs	r1, #80	; 0x50
 800acba:	4618      	mov	r0, r3
 800acbc:	f000 fec3 	bl	800ba46 <TIM_ITRx_SetConfig>
      break;
 800acc0:	e10a      	b.n	800aed8 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	4a2f      	ldr	r2, [pc, #188]	; (800ad84 <HAL_TIM_ConfigClockSource+0x570>)
 800acc8:	4293      	cmp	r3, r2
 800acca:	d027      	beq.n	800ad1c <HAL_TIM_ConfigClockSource+0x508>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acd4:	d022      	beq.n	800ad1c <HAL_TIM_ConfigClockSource+0x508>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	4a2b      	ldr	r2, [pc, #172]	; (800ad88 <HAL_TIM_ConfigClockSource+0x574>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d01d      	beq.n	800ad1c <HAL_TIM_ConfigClockSource+0x508>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4a29      	ldr	r2, [pc, #164]	; (800ad8c <HAL_TIM_ConfigClockSource+0x578>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d018      	beq.n	800ad1c <HAL_TIM_ConfigClockSource+0x508>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	4a28      	ldr	r2, [pc, #160]	; (800ad90 <HAL_TIM_ConfigClockSource+0x57c>)
 800acf0:	4293      	cmp	r3, r2
 800acf2:	d013      	beq.n	800ad1c <HAL_TIM_ConfigClockSource+0x508>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	4a26      	ldr	r2, [pc, #152]	; (800ad94 <HAL_TIM_ConfigClockSource+0x580>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d00e      	beq.n	800ad1c <HAL_TIM_ConfigClockSource+0x508>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	4a26      	ldr	r2, [pc, #152]	; (800ad9c <HAL_TIM_ConfigClockSource+0x588>)
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d009      	beq.n	800ad1c <HAL_TIM_ConfigClockSource+0x508>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4a24      	ldr	r2, [pc, #144]	; (800ada0 <HAL_TIM_ConfigClockSource+0x58c>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d004      	beq.n	800ad1c <HAL_TIM_ConfigClockSource+0x508>
 800ad12:	f241 510a 	movw	r1, #5386	; 0x150a
 800ad16:	4820      	ldr	r0, [pc, #128]	; (800ad98 <HAL_TIM_ConfigClockSource+0x584>)
 800ad18:	f7f7 fc2f 	bl	800257a <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad24:	d014      	beq.n	800ad50 <HAL_TIM_ConfigClockSource+0x53c>
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d010      	beq.n	800ad50 <HAL_TIM_ConfigClockSource+0x53c>
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	685b      	ldr	r3, [r3, #4]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d00c      	beq.n	800ad50 <HAL_TIM_ConfigClockSource+0x53c>
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	2b02      	cmp	r3, #2
 800ad3c:	d008      	beq.n	800ad50 <HAL_TIM_ConfigClockSource+0x53c>
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	2b0a      	cmp	r3, #10
 800ad44:	d004      	beq.n	800ad50 <HAL_TIM_ConfigClockSource+0x53c>
 800ad46:	f241 510d 	movw	r1, #5389	; 0x150d
 800ad4a:	4813      	ldr	r0, [pc, #76]	; (800ad98 <HAL_TIM_ConfigClockSource+0x584>)
 800ad4c:	f7f7 fc15 	bl	800257a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	68db      	ldr	r3, [r3, #12]
 800ad54:	2b0f      	cmp	r3, #15
 800ad56:	d904      	bls.n	800ad62 <HAL_TIM_ConfigClockSource+0x54e>
 800ad58:	f241 510e 	movw	r1, #5390	; 0x150e
 800ad5c:	480e      	ldr	r0, [pc, #56]	; (800ad98 <HAL_TIM_ConfigClockSource+0x584>)
 800ad5e:	f7f7 fc0c 	bl	800257a <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6818      	ldr	r0, [r3, #0]
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	6859      	ldr	r1, [r3, #4]
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	68db      	ldr	r3, [r3, #12]
 800ad6e:	461a      	mov	r2, r3
 800ad70:	f000 fdc0 	bl	800b8f4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	2160      	movs	r1, #96	; 0x60
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f000 fe63 	bl	800ba46 <TIM_ITRx_SetConfig>
      break;
 800ad80:	e0aa      	b.n	800aed8 <HAL_TIM_ConfigClockSource+0x6c4>
 800ad82:	bf00      	nop
 800ad84:	40010000 	.word	0x40010000
 800ad88:	40000400 	.word	0x40000400
 800ad8c:	40000800 	.word	0x40000800
 800ad90:	40000c00 	.word	0x40000c00
 800ad94:	40010400 	.word	0x40010400
 800ad98:	0801b0d8 	.word	0x0801b0d8
 800ad9c:	40014000 	.word	0x40014000
 800ada0:	40001800 	.word	0x40001800
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	4a52      	ldr	r2, [pc, #328]	; (800aef4 <HAL_TIM_ConfigClockSource+0x6e0>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d027      	beq.n	800adfe <HAL_TIM_ConfigClockSource+0x5ea>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adb6:	d022      	beq.n	800adfe <HAL_TIM_ConfigClockSource+0x5ea>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4a4e      	ldr	r2, [pc, #312]	; (800aef8 <HAL_TIM_ConfigClockSource+0x6e4>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d01d      	beq.n	800adfe <HAL_TIM_ConfigClockSource+0x5ea>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4a4d      	ldr	r2, [pc, #308]	; (800aefc <HAL_TIM_ConfigClockSource+0x6e8>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d018      	beq.n	800adfe <HAL_TIM_ConfigClockSource+0x5ea>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4a4b      	ldr	r2, [pc, #300]	; (800af00 <HAL_TIM_ConfigClockSource+0x6ec>)
 800add2:	4293      	cmp	r3, r2
 800add4:	d013      	beq.n	800adfe <HAL_TIM_ConfigClockSource+0x5ea>
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4a4a      	ldr	r2, [pc, #296]	; (800af04 <HAL_TIM_ConfigClockSource+0x6f0>)
 800addc:	4293      	cmp	r3, r2
 800adde:	d00e      	beq.n	800adfe <HAL_TIM_ConfigClockSource+0x5ea>
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	4a48      	ldr	r2, [pc, #288]	; (800af08 <HAL_TIM_ConfigClockSource+0x6f4>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d009      	beq.n	800adfe <HAL_TIM_ConfigClockSource+0x5ea>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	4a47      	ldr	r2, [pc, #284]	; (800af0c <HAL_TIM_ConfigClockSource+0x6f8>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d004      	beq.n	800adfe <HAL_TIM_ConfigClockSource+0x5ea>
 800adf4:	f241 511a 	movw	r1, #5402	; 0x151a
 800adf8:	4845      	ldr	r0, [pc, #276]	; (800af10 <HAL_TIM_ConfigClockSource+0x6fc>)
 800adfa:	f7f7 fbbe 	bl	800257a <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	685b      	ldr	r3, [r3, #4]
 800ae02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae06:	d014      	beq.n	800ae32 <HAL_TIM_ConfigClockSource+0x61e>
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d010      	beq.n	800ae32 <HAL_TIM_ConfigClockSource+0x61e>
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d00c      	beq.n	800ae32 <HAL_TIM_ConfigClockSource+0x61e>
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	685b      	ldr	r3, [r3, #4]
 800ae1c:	2b02      	cmp	r3, #2
 800ae1e:	d008      	beq.n	800ae32 <HAL_TIM_ConfigClockSource+0x61e>
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	685b      	ldr	r3, [r3, #4]
 800ae24:	2b0a      	cmp	r3, #10
 800ae26:	d004      	beq.n	800ae32 <HAL_TIM_ConfigClockSource+0x61e>
 800ae28:	f241 511d 	movw	r1, #5405	; 0x151d
 800ae2c:	4838      	ldr	r0, [pc, #224]	; (800af10 <HAL_TIM_ConfigClockSource+0x6fc>)
 800ae2e:	f7f7 fba4 	bl	800257a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	68db      	ldr	r3, [r3, #12]
 800ae36:	2b0f      	cmp	r3, #15
 800ae38:	d904      	bls.n	800ae44 <HAL_TIM_ConfigClockSource+0x630>
 800ae3a:	f241 511e 	movw	r1, #5406	; 0x151e
 800ae3e:	4834      	ldr	r0, [pc, #208]	; (800af10 <HAL_TIM_ConfigClockSource+0x6fc>)
 800ae40:	f7f7 fb9b 	bl	800257a <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6818      	ldr	r0, [r3, #0]
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	6859      	ldr	r1, [r3, #4]
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	68db      	ldr	r3, [r3, #12]
 800ae50:	461a      	mov	r2, r3
 800ae52:	f000 fce3 	bl	800b81c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	2140      	movs	r1, #64	; 0x40
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f000 fdf2 	bl	800ba46 <TIM_ITRx_SetConfig>
      break;
 800ae62:	e039      	b.n	800aed8 <HAL_TIM_ConfigClockSource+0x6c4>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	4a22      	ldr	r2, [pc, #136]	; (800aef4 <HAL_TIM_ConfigClockSource+0x6e0>)
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d027      	beq.n	800aebe <HAL_TIM_ConfigClockSource+0x6aa>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae76:	d022      	beq.n	800aebe <HAL_TIM_ConfigClockSource+0x6aa>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4a1e      	ldr	r2, [pc, #120]	; (800aef8 <HAL_TIM_ConfigClockSource+0x6e4>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d01d      	beq.n	800aebe <HAL_TIM_ConfigClockSource+0x6aa>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	4a1d      	ldr	r2, [pc, #116]	; (800aefc <HAL_TIM_ConfigClockSource+0x6e8>)
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	d018      	beq.n	800aebe <HAL_TIM_ConfigClockSource+0x6aa>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	4a1b      	ldr	r2, [pc, #108]	; (800af00 <HAL_TIM_ConfigClockSource+0x6ec>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d013      	beq.n	800aebe <HAL_TIM_ConfigClockSource+0x6aa>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	4a1a      	ldr	r2, [pc, #104]	; (800af04 <HAL_TIM_ConfigClockSource+0x6f0>)
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d00e      	beq.n	800aebe <HAL_TIM_ConfigClockSource+0x6aa>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	4a18      	ldr	r2, [pc, #96]	; (800af08 <HAL_TIM_ConfigClockSource+0x6f4>)
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d009      	beq.n	800aebe <HAL_TIM_ConfigClockSource+0x6aa>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4a17      	ldr	r2, [pc, #92]	; (800af0c <HAL_TIM_ConfigClockSource+0x6f8>)
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d004      	beq.n	800aebe <HAL_TIM_ConfigClockSource+0x6aa>
 800aeb4:	f241 512d 	movw	r1, #5421	; 0x152d
 800aeb8:	4815      	ldr	r0, [pc, #84]	; (800af10 <HAL_TIM_ConfigClockSource+0x6fc>)
 800aeba:	f7f7 fb5e 	bl	800257a <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681a      	ldr	r2, [r3, #0]
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	4619      	mov	r1, r3
 800aec8:	4610      	mov	r0, r2
 800aeca:	f000 fdbc 	bl	800ba46 <TIM_ITRx_SetConfig>
      break;
 800aece:	e003      	b.n	800aed8 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    default:
      status = HAL_ERROR;
 800aed0:	2301      	movs	r3, #1
 800aed2:	73fb      	strb	r3, [r7, #15]
      break;
 800aed4:	e000      	b.n	800aed8 <HAL_TIM_ConfigClockSource+0x6c4>
      break;
 800aed6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2201      	movs	r2, #1
 800aedc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2200      	movs	r2, #0
 800aee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aee8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	3710      	adds	r7, #16
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}
 800aef2:	bf00      	nop
 800aef4:	40010000 	.word	0x40010000
 800aef8:	40000400 	.word	0x40000400
 800aefc:	40000800 	.word	0x40000800
 800af00:	40000c00 	.word	0x40000c00
 800af04:	40010400 	.word	0x40010400
 800af08:	40014000 	.word	0x40014000
 800af0c:	40001800 	.word	0x40001800
 800af10:	0801b0d8 	.word	0x0801b0d8

0800af14 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b084      	sub	sp, #16
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800af1e:	2300      	movs	r3, #0
 800af20:	60fb      	str	r3, [r7, #12]
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	2b0c      	cmp	r3, #12
 800af26:	f200 80e5 	bhi.w	800b0f4 <HAL_TIM_ReadCapturedValue+0x1e0>
 800af2a:	a201      	add	r2, pc, #4	; (adr r2, 800af30 <HAL_TIM_ReadCapturedValue+0x1c>)
 800af2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af30:	0800af65 	.word	0x0800af65
 800af34:	0800b0f5 	.word	0x0800b0f5
 800af38:	0800b0f5 	.word	0x0800b0f5
 800af3c:	0800b0f5 	.word	0x0800b0f5
 800af40:	0800aff1 	.word	0x0800aff1
 800af44:	0800b0f5 	.word	0x0800b0f5
 800af48:	0800b0f5 	.word	0x0800b0f5
 800af4c:	0800b0f5 	.word	0x0800b0f5
 800af50:	0800b055 	.word	0x0800b055
 800af54:	0800b0f5 	.word	0x0800b0f5
 800af58:	0800b0f5 	.word	0x0800b0f5
 800af5c:	0800b0f5 	.word	0x0800b0f5
 800af60:	0800b0a5 	.word	0x0800b0a5
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	4a65      	ldr	r2, [pc, #404]	; (800b100 <HAL_TIM_ReadCapturedValue+0x1ec>)
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d03b      	beq.n	800afe6 <HAL_TIM_ReadCapturedValue+0xd2>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af76:	d036      	beq.n	800afe6 <HAL_TIM_ReadCapturedValue+0xd2>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	4a61      	ldr	r2, [pc, #388]	; (800b104 <HAL_TIM_ReadCapturedValue+0x1f0>)
 800af7e:	4293      	cmp	r3, r2
 800af80:	d031      	beq.n	800afe6 <HAL_TIM_ReadCapturedValue+0xd2>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	4a60      	ldr	r2, [pc, #384]	; (800b108 <HAL_TIM_ReadCapturedValue+0x1f4>)
 800af88:	4293      	cmp	r3, r2
 800af8a:	d02c      	beq.n	800afe6 <HAL_TIM_ReadCapturedValue+0xd2>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4a5e      	ldr	r2, [pc, #376]	; (800b10c <HAL_TIM_ReadCapturedValue+0x1f8>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d027      	beq.n	800afe6 <HAL_TIM_ReadCapturedValue+0xd2>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	4a5d      	ldr	r2, [pc, #372]	; (800b110 <HAL_TIM_ReadCapturedValue+0x1fc>)
 800af9c:	4293      	cmp	r3, r2
 800af9e:	d022      	beq.n	800afe6 <HAL_TIM_ReadCapturedValue+0xd2>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	4a5b      	ldr	r2, [pc, #364]	; (800b114 <HAL_TIM_ReadCapturedValue+0x200>)
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d01d      	beq.n	800afe6 <HAL_TIM_ReadCapturedValue+0xd2>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	4a5a      	ldr	r2, [pc, #360]	; (800b118 <HAL_TIM_ReadCapturedValue+0x204>)
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d018      	beq.n	800afe6 <HAL_TIM_ReadCapturedValue+0xd2>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	4a58      	ldr	r2, [pc, #352]	; (800b11c <HAL_TIM_ReadCapturedValue+0x208>)
 800afba:	4293      	cmp	r3, r2
 800afbc:	d013      	beq.n	800afe6 <HAL_TIM_ReadCapturedValue+0xd2>
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	4a57      	ldr	r2, [pc, #348]	; (800b120 <HAL_TIM_ReadCapturedValue+0x20c>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d00e      	beq.n	800afe6 <HAL_TIM_ReadCapturedValue+0xd2>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	4a55      	ldr	r2, [pc, #340]	; (800b124 <HAL_TIM_ReadCapturedValue+0x210>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d009      	beq.n	800afe6 <HAL_TIM_ReadCapturedValue+0xd2>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4a54      	ldr	r2, [pc, #336]	; (800b128 <HAL_TIM_ReadCapturedValue+0x214>)
 800afd8:	4293      	cmp	r3, r2
 800afda:	d004      	beq.n	800afe6 <HAL_TIM_ReadCapturedValue+0xd2>
 800afdc:	f241 51c6 	movw	r1, #5574	; 0x15c6
 800afe0:	4852      	ldr	r0, [pc, #328]	; (800b12c <HAL_TIM_ReadCapturedValue+0x218>)
 800afe2:	f7f7 faca 	bl	800257a <assert_failed>

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afec:	60fb      	str	r3, [r7, #12]

      break;
 800afee:	e082      	b.n	800b0f6 <HAL_TIM_ReadCapturedValue+0x1e2>
    }
    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	4a42      	ldr	r2, [pc, #264]	; (800b100 <HAL_TIM_ReadCapturedValue+0x1ec>)
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d027      	beq.n	800b04a <HAL_TIM_ReadCapturedValue+0x136>
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b002:	d022      	beq.n	800b04a <HAL_TIM_ReadCapturedValue+0x136>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	4a3e      	ldr	r2, [pc, #248]	; (800b104 <HAL_TIM_ReadCapturedValue+0x1f0>)
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d01d      	beq.n	800b04a <HAL_TIM_ReadCapturedValue+0x136>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	4a3d      	ldr	r2, [pc, #244]	; (800b108 <HAL_TIM_ReadCapturedValue+0x1f4>)
 800b014:	4293      	cmp	r3, r2
 800b016:	d018      	beq.n	800b04a <HAL_TIM_ReadCapturedValue+0x136>
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	4a3b      	ldr	r2, [pc, #236]	; (800b10c <HAL_TIM_ReadCapturedValue+0x1f8>)
 800b01e:	4293      	cmp	r3, r2
 800b020:	d013      	beq.n	800b04a <HAL_TIM_ReadCapturedValue+0x136>
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	4a3a      	ldr	r2, [pc, #232]	; (800b110 <HAL_TIM_ReadCapturedValue+0x1fc>)
 800b028:	4293      	cmp	r3, r2
 800b02a:	d00e      	beq.n	800b04a <HAL_TIM_ReadCapturedValue+0x136>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4a38      	ldr	r2, [pc, #224]	; (800b114 <HAL_TIM_ReadCapturedValue+0x200>)
 800b032:	4293      	cmp	r3, r2
 800b034:	d009      	beq.n	800b04a <HAL_TIM_ReadCapturedValue+0x136>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	4a39      	ldr	r2, [pc, #228]	; (800b120 <HAL_TIM_ReadCapturedValue+0x20c>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d004      	beq.n	800b04a <HAL_TIM_ReadCapturedValue+0x136>
 800b040:	f241 51d0 	movw	r1, #5584	; 0x15d0
 800b044:	4839      	ldr	r0, [pc, #228]	; (800b12c <HAL_TIM_ReadCapturedValue+0x218>)
 800b046:	f7f7 fa98 	bl	800257a <assert_failed>

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b050:	60fb      	str	r3, [r7, #12]

      break;
 800b052:	e050      	b.n	800b0f6 <HAL_TIM_ReadCapturedValue+0x1e2>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	4a29      	ldr	r2, [pc, #164]	; (800b100 <HAL_TIM_ReadCapturedValue+0x1ec>)
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d01d      	beq.n	800b09a <HAL_TIM_ReadCapturedValue+0x186>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b066:	d018      	beq.n	800b09a <HAL_TIM_ReadCapturedValue+0x186>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4a25      	ldr	r2, [pc, #148]	; (800b104 <HAL_TIM_ReadCapturedValue+0x1f0>)
 800b06e:	4293      	cmp	r3, r2
 800b070:	d013      	beq.n	800b09a <HAL_TIM_ReadCapturedValue+0x186>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	4a24      	ldr	r2, [pc, #144]	; (800b108 <HAL_TIM_ReadCapturedValue+0x1f4>)
 800b078:	4293      	cmp	r3, r2
 800b07a:	d00e      	beq.n	800b09a <HAL_TIM_ReadCapturedValue+0x186>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4a22      	ldr	r2, [pc, #136]	; (800b10c <HAL_TIM_ReadCapturedValue+0x1f8>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d009      	beq.n	800b09a <HAL_TIM_ReadCapturedValue+0x186>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	4a21      	ldr	r2, [pc, #132]	; (800b110 <HAL_TIM_ReadCapturedValue+0x1fc>)
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d004      	beq.n	800b09a <HAL_TIM_ReadCapturedValue+0x186>
 800b090:	f241 51db 	movw	r1, #5595	; 0x15db
 800b094:	4825      	ldr	r0, [pc, #148]	; (800b12c <HAL_TIM_ReadCapturedValue+0x218>)
 800b096:	f7f7 fa70 	bl	800257a <assert_failed>

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0a0:	60fb      	str	r3, [r7, #12]

      break;
 800b0a2:	e028      	b.n	800b0f6 <HAL_TIM_ReadCapturedValue+0x1e2>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	4a15      	ldr	r2, [pc, #84]	; (800b100 <HAL_TIM_ReadCapturedValue+0x1ec>)
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d01d      	beq.n	800b0ea <HAL_TIM_ReadCapturedValue+0x1d6>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0b6:	d018      	beq.n	800b0ea <HAL_TIM_ReadCapturedValue+0x1d6>
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	4a11      	ldr	r2, [pc, #68]	; (800b104 <HAL_TIM_ReadCapturedValue+0x1f0>)
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	d013      	beq.n	800b0ea <HAL_TIM_ReadCapturedValue+0x1d6>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	4a10      	ldr	r2, [pc, #64]	; (800b108 <HAL_TIM_ReadCapturedValue+0x1f4>)
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	d00e      	beq.n	800b0ea <HAL_TIM_ReadCapturedValue+0x1d6>
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	4a0e      	ldr	r2, [pc, #56]	; (800b10c <HAL_TIM_ReadCapturedValue+0x1f8>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d009      	beq.n	800b0ea <HAL_TIM_ReadCapturedValue+0x1d6>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	4a0d      	ldr	r2, [pc, #52]	; (800b110 <HAL_TIM_ReadCapturedValue+0x1fc>)
 800b0dc:	4293      	cmp	r3, r2
 800b0de:	d004      	beq.n	800b0ea <HAL_TIM_ReadCapturedValue+0x1d6>
 800b0e0:	f241 51e6 	movw	r1, #5606	; 0x15e6
 800b0e4:	4811      	ldr	r0, [pc, #68]	; (800b12c <HAL_TIM_ReadCapturedValue+0x218>)
 800b0e6:	f7f7 fa48 	bl	800257a <assert_failed>

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0f0:	60fb      	str	r3, [r7, #12]

      break;
 800b0f2:	e000      	b.n	800b0f6 <HAL_TIM_ReadCapturedValue+0x1e2>
    }

    default:
      break;
 800b0f4:	bf00      	nop
  }

  return tmpreg;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3710      	adds	r7, #16
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}
 800b100:	40010000 	.word	0x40010000
 800b104:	40000400 	.word	0x40000400
 800b108:	40000800 	.word	0x40000800
 800b10c:	40000c00 	.word	0x40000c00
 800b110:	40010400 	.word	0x40010400
 800b114:	40014000 	.word	0x40014000
 800b118:	40014400 	.word	0x40014400
 800b11c:	40014800 	.word	0x40014800
 800b120:	40001800 	.word	0x40001800
 800b124:	40001c00 	.word	0x40001c00
 800b128:	40002000 	.word	0x40002000
 800b12c:	0801b0d8 	.word	0x0801b0d8

0800b130 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b130:	b480      	push	{r7}
 800b132:	b083      	sub	sp, #12
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b138:	bf00      	nop
 800b13a:	370c      	adds	r7, #12
 800b13c:	46bd      	mov	sp, r7
 800b13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b142:	4770      	bx	lr

0800b144 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b144:	b480      	push	{r7}
 800b146:	b083      	sub	sp, #12
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b14c:	bf00      	nop
 800b14e:	370c      	adds	r7, #12
 800b150:	46bd      	mov	sp, r7
 800b152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b156:	4770      	bx	lr

0800b158 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b158:	b480      	push	{r7}
 800b15a:	b083      	sub	sp, #12
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b160:	bf00      	nop
 800b162:	370c      	adds	r7, #12
 800b164:	46bd      	mov	sp, r7
 800b166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16a:	4770      	bx	lr

0800b16c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b16c:	b480      	push	{r7}
 800b16e:	b083      	sub	sp, #12
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b174:	bf00      	nop
 800b176:	370c      	adds	r7, #12
 800b178:	46bd      	mov	sp, r7
 800b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17e:	4770      	bx	lr

0800b180 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b180:	b480      	push	{r7}
 800b182:	b085      	sub	sp, #20
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	4a40      	ldr	r2, [pc, #256]	; (800b294 <TIM_Base_SetConfig+0x114>)
 800b194:	4293      	cmp	r3, r2
 800b196:	d013      	beq.n	800b1c0 <TIM_Base_SetConfig+0x40>
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b19e:	d00f      	beq.n	800b1c0 <TIM_Base_SetConfig+0x40>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	4a3d      	ldr	r2, [pc, #244]	; (800b298 <TIM_Base_SetConfig+0x118>)
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	d00b      	beq.n	800b1c0 <TIM_Base_SetConfig+0x40>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	4a3c      	ldr	r2, [pc, #240]	; (800b29c <TIM_Base_SetConfig+0x11c>)
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d007      	beq.n	800b1c0 <TIM_Base_SetConfig+0x40>
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	4a3b      	ldr	r2, [pc, #236]	; (800b2a0 <TIM_Base_SetConfig+0x120>)
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	d003      	beq.n	800b1c0 <TIM_Base_SetConfig+0x40>
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	4a3a      	ldr	r2, [pc, #232]	; (800b2a4 <TIM_Base_SetConfig+0x124>)
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	d108      	bne.n	800b1d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	68fa      	ldr	r2, [r7, #12]
 800b1ce:	4313      	orrs	r3, r2
 800b1d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	4a2f      	ldr	r2, [pc, #188]	; (800b294 <TIM_Base_SetConfig+0x114>)
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d02b      	beq.n	800b232 <TIM_Base_SetConfig+0xb2>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1e0:	d027      	beq.n	800b232 <TIM_Base_SetConfig+0xb2>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	4a2c      	ldr	r2, [pc, #176]	; (800b298 <TIM_Base_SetConfig+0x118>)
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d023      	beq.n	800b232 <TIM_Base_SetConfig+0xb2>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	4a2b      	ldr	r2, [pc, #172]	; (800b29c <TIM_Base_SetConfig+0x11c>)
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d01f      	beq.n	800b232 <TIM_Base_SetConfig+0xb2>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	4a2a      	ldr	r2, [pc, #168]	; (800b2a0 <TIM_Base_SetConfig+0x120>)
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d01b      	beq.n	800b232 <TIM_Base_SetConfig+0xb2>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	4a29      	ldr	r2, [pc, #164]	; (800b2a4 <TIM_Base_SetConfig+0x124>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d017      	beq.n	800b232 <TIM_Base_SetConfig+0xb2>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	4a28      	ldr	r2, [pc, #160]	; (800b2a8 <TIM_Base_SetConfig+0x128>)
 800b206:	4293      	cmp	r3, r2
 800b208:	d013      	beq.n	800b232 <TIM_Base_SetConfig+0xb2>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	4a27      	ldr	r2, [pc, #156]	; (800b2ac <TIM_Base_SetConfig+0x12c>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	d00f      	beq.n	800b232 <TIM_Base_SetConfig+0xb2>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	4a26      	ldr	r2, [pc, #152]	; (800b2b0 <TIM_Base_SetConfig+0x130>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d00b      	beq.n	800b232 <TIM_Base_SetConfig+0xb2>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	4a25      	ldr	r2, [pc, #148]	; (800b2b4 <TIM_Base_SetConfig+0x134>)
 800b21e:	4293      	cmp	r3, r2
 800b220:	d007      	beq.n	800b232 <TIM_Base_SetConfig+0xb2>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	4a24      	ldr	r2, [pc, #144]	; (800b2b8 <TIM_Base_SetConfig+0x138>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d003      	beq.n	800b232 <TIM_Base_SetConfig+0xb2>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	4a23      	ldr	r2, [pc, #140]	; (800b2bc <TIM_Base_SetConfig+0x13c>)
 800b22e:	4293      	cmp	r3, r2
 800b230:	d108      	bne.n	800b244 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b238:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	68db      	ldr	r3, [r3, #12]
 800b23e:	68fa      	ldr	r2, [r7, #12]
 800b240:	4313      	orrs	r3, r2
 800b242:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	695b      	ldr	r3, [r3, #20]
 800b24e:	4313      	orrs	r3, r2
 800b250:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	68fa      	ldr	r2, [r7, #12]
 800b256:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	689a      	ldr	r2, [r3, #8]
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	681a      	ldr	r2, [r3, #0]
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	4a0a      	ldr	r2, [pc, #40]	; (800b294 <TIM_Base_SetConfig+0x114>)
 800b26c:	4293      	cmp	r3, r2
 800b26e:	d003      	beq.n	800b278 <TIM_Base_SetConfig+0xf8>
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	4a0c      	ldr	r2, [pc, #48]	; (800b2a4 <TIM_Base_SetConfig+0x124>)
 800b274:	4293      	cmp	r3, r2
 800b276:	d103      	bne.n	800b280 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	691a      	ldr	r2, [r3, #16]
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2201      	movs	r2, #1
 800b284:	615a      	str	r2, [r3, #20]
}
 800b286:	bf00      	nop
 800b288:	3714      	adds	r7, #20
 800b28a:	46bd      	mov	sp, r7
 800b28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b290:	4770      	bx	lr
 800b292:	bf00      	nop
 800b294:	40010000 	.word	0x40010000
 800b298:	40000400 	.word	0x40000400
 800b29c:	40000800 	.word	0x40000800
 800b2a0:	40000c00 	.word	0x40000c00
 800b2a4:	40010400 	.word	0x40010400
 800b2a8:	40014000 	.word	0x40014000
 800b2ac:	40014400 	.word	0x40014400
 800b2b0:	40014800 	.word	0x40014800
 800b2b4:	40001800 	.word	0x40001800
 800b2b8:	40001c00 	.word	0x40001c00
 800b2bc:	40002000 	.word	0x40002000

0800b2c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b086      	sub	sp, #24
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6a1b      	ldr	r3, [r3, #32]
 800b2ce:	f023 0201 	bic.w	r2, r3, #1
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6a1b      	ldr	r3, [r3, #32]
 800b2da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	685b      	ldr	r3, [r3, #4]
 800b2e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	699b      	ldr	r3, [r3, #24]
 800b2e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	f023 0303 	bic.w	r3, r3, #3
 800b2f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	68fa      	ldr	r2, [r7, #12]
 800b2fe:	4313      	orrs	r3, r2
 800b300:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	f023 0302 	bic.w	r3, r3, #2
 800b308:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	689b      	ldr	r3, [r3, #8]
 800b30e:	697a      	ldr	r2, [r7, #20]
 800b310:	4313      	orrs	r3, r2
 800b312:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	4a34      	ldr	r2, [pc, #208]	; (800b3e8 <TIM_OC1_SetConfig+0x128>)
 800b318:	4293      	cmp	r3, r2
 800b31a:	d003      	beq.n	800b324 <TIM_OC1_SetConfig+0x64>
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	4a33      	ldr	r2, [pc, #204]	; (800b3ec <TIM_OC1_SetConfig+0x12c>)
 800b320:	4293      	cmp	r3, r2
 800b322:	d119      	bne.n	800b358 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	68db      	ldr	r3, [r3, #12]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d008      	beq.n	800b33e <TIM_OC1_SetConfig+0x7e>
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	68db      	ldr	r3, [r3, #12]
 800b330:	2b08      	cmp	r3, #8
 800b332:	d004      	beq.n	800b33e <TIM_OC1_SetConfig+0x7e>
 800b334:	f641 21cb 	movw	r1, #6859	; 0x1acb
 800b338:	482d      	ldr	r0, [pc, #180]	; (800b3f0 <TIM_OC1_SetConfig+0x130>)
 800b33a:	f7f7 f91e 	bl	800257a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	f023 0308 	bic.w	r3, r3, #8
 800b344:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	68db      	ldr	r3, [r3, #12]
 800b34a:	697a      	ldr	r2, [r7, #20]
 800b34c:	4313      	orrs	r3, r2
 800b34e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	f023 0304 	bic.w	r3, r3, #4
 800b356:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	4a23      	ldr	r2, [pc, #140]	; (800b3e8 <TIM_OC1_SetConfig+0x128>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d003      	beq.n	800b368 <TIM_OC1_SetConfig+0xa8>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	4a22      	ldr	r2, [pc, #136]	; (800b3ec <TIM_OC1_SetConfig+0x12c>)
 800b364:	4293      	cmp	r3, r2
 800b366:	d12d      	bne.n	800b3c4 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	699b      	ldr	r3, [r3, #24]
 800b36c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b370:	d008      	beq.n	800b384 <TIM_OC1_SetConfig+0xc4>
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	699b      	ldr	r3, [r3, #24]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d004      	beq.n	800b384 <TIM_OC1_SetConfig+0xc4>
 800b37a:	f641 21d8 	movw	r1, #6872	; 0x1ad8
 800b37e:	481c      	ldr	r0, [pc, #112]	; (800b3f0 <TIM_OC1_SetConfig+0x130>)
 800b380:	f7f7 f8fb 	bl	800257a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	695b      	ldr	r3, [r3, #20]
 800b388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b38c:	d008      	beq.n	800b3a0 <TIM_OC1_SetConfig+0xe0>
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	695b      	ldr	r3, [r3, #20]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d004      	beq.n	800b3a0 <TIM_OC1_SetConfig+0xe0>
 800b396:	f641 21d9 	movw	r1, #6873	; 0x1ad9
 800b39a:	4815      	ldr	r0, [pc, #84]	; (800b3f0 <TIM_OC1_SetConfig+0x130>)
 800b39c:	f7f7 f8ed 	bl	800257a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b3a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b3a8:	693b      	ldr	r3, [r7, #16]
 800b3aa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b3ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	695b      	ldr	r3, [r3, #20]
 800b3b4:	693a      	ldr	r2, [r7, #16]
 800b3b6:	4313      	orrs	r3, r2
 800b3b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	699b      	ldr	r3, [r3, #24]
 800b3be:	693a      	ldr	r2, [r7, #16]
 800b3c0:	4313      	orrs	r3, r2
 800b3c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	693a      	ldr	r2, [r7, #16]
 800b3c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	68fa      	ldr	r2, [r7, #12]
 800b3ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	685a      	ldr	r2, [r3, #4]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	697a      	ldr	r2, [r7, #20]
 800b3dc:	621a      	str	r2, [r3, #32]
}
 800b3de:	bf00      	nop
 800b3e0:	3718      	adds	r7, #24
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
 800b3e6:	bf00      	nop
 800b3e8:	40010000 	.word	0x40010000
 800b3ec:	40010400 	.word	0x40010400
 800b3f0:	0801b0d8 	.word	0x0801b0d8

0800b3f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b086      	sub	sp, #24
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6a1b      	ldr	r3, [r3, #32]
 800b402:	f023 0210 	bic.w	r2, r3, #16
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6a1b      	ldr	r3, [r3, #32]
 800b40e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	685b      	ldr	r3, [r3, #4]
 800b414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	699b      	ldr	r3, [r3, #24]
 800b41a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b42a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	021b      	lsls	r3, r3, #8
 800b432:	68fa      	ldr	r2, [r7, #12]
 800b434:	4313      	orrs	r3, r2
 800b436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	f023 0320 	bic.w	r3, r3, #32
 800b43e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	689b      	ldr	r3, [r3, #8]
 800b444:	011b      	lsls	r3, r3, #4
 800b446:	697a      	ldr	r2, [r7, #20]
 800b448:	4313      	orrs	r3, r2
 800b44a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	4a35      	ldr	r2, [pc, #212]	; (800b524 <TIM_OC2_SetConfig+0x130>)
 800b450:	4293      	cmp	r3, r2
 800b452:	d003      	beq.n	800b45c <TIM_OC2_SetConfig+0x68>
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	4a34      	ldr	r2, [pc, #208]	; (800b528 <TIM_OC2_SetConfig+0x134>)
 800b458:	4293      	cmp	r3, r2
 800b45a:	d11a      	bne.n	800b492 <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	68db      	ldr	r3, [r3, #12]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d008      	beq.n	800b476 <TIM_OC2_SetConfig+0x82>
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	68db      	ldr	r3, [r3, #12]
 800b468:	2b08      	cmp	r3, #8
 800b46a:	d004      	beq.n	800b476 <TIM_OC2_SetConfig+0x82>
 800b46c:	f641 3116 	movw	r1, #6934	; 0x1b16
 800b470:	482e      	ldr	r0, [pc, #184]	; (800b52c <TIM_OC2_SetConfig+0x138>)
 800b472:	f7f7 f882 	bl	800257a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b476:	697b      	ldr	r3, [r7, #20]
 800b478:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b47c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	68db      	ldr	r3, [r3, #12]
 800b482:	011b      	lsls	r3, r3, #4
 800b484:	697a      	ldr	r2, [r7, #20]
 800b486:	4313      	orrs	r3, r2
 800b488:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b490:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	4a23      	ldr	r2, [pc, #140]	; (800b524 <TIM_OC2_SetConfig+0x130>)
 800b496:	4293      	cmp	r3, r2
 800b498:	d003      	beq.n	800b4a2 <TIM_OC2_SetConfig+0xae>
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	4a22      	ldr	r2, [pc, #136]	; (800b528 <TIM_OC2_SetConfig+0x134>)
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d12f      	bne.n	800b502 <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	699b      	ldr	r3, [r3, #24]
 800b4a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4aa:	d008      	beq.n	800b4be <TIM_OC2_SetConfig+0xca>
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	699b      	ldr	r3, [r3, #24]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d004      	beq.n	800b4be <TIM_OC2_SetConfig+0xca>
 800b4b4:	f641 3124 	movw	r1, #6948	; 0x1b24
 800b4b8:	481c      	ldr	r0, [pc, #112]	; (800b52c <TIM_OC2_SetConfig+0x138>)
 800b4ba:	f7f7 f85e 	bl	800257a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	695b      	ldr	r3, [r3, #20]
 800b4c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4c6:	d008      	beq.n	800b4da <TIM_OC2_SetConfig+0xe6>
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	695b      	ldr	r3, [r3, #20]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d004      	beq.n	800b4da <TIM_OC2_SetConfig+0xe6>
 800b4d0:	f641 3125 	movw	r1, #6949	; 0x1b25
 800b4d4:	4815      	ldr	r0, [pc, #84]	; (800b52c <TIM_OC2_SetConfig+0x138>)
 800b4d6:	f7f7 f850 	bl	800257a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b4da:	693b      	ldr	r3, [r7, #16]
 800b4dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b4e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b4e2:	693b      	ldr	r3, [r7, #16]
 800b4e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b4e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	695b      	ldr	r3, [r3, #20]
 800b4ee:	009b      	lsls	r3, r3, #2
 800b4f0:	693a      	ldr	r2, [r7, #16]
 800b4f2:	4313      	orrs	r3, r2
 800b4f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	699b      	ldr	r3, [r3, #24]
 800b4fa:	009b      	lsls	r3, r3, #2
 800b4fc:	693a      	ldr	r2, [r7, #16]
 800b4fe:	4313      	orrs	r3, r2
 800b500:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	693a      	ldr	r2, [r7, #16]
 800b506:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	68fa      	ldr	r2, [r7, #12]
 800b50c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	685a      	ldr	r2, [r3, #4]
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	697a      	ldr	r2, [r7, #20]
 800b51a:	621a      	str	r2, [r3, #32]
}
 800b51c:	bf00      	nop
 800b51e:	3718      	adds	r7, #24
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}
 800b524:	40010000 	.word	0x40010000
 800b528:	40010400 	.word	0x40010400
 800b52c:	0801b0d8 	.word	0x0801b0d8

0800b530 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b086      	sub	sp, #24
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
 800b538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6a1b      	ldr	r3, [r3, #32]
 800b53e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6a1b      	ldr	r3, [r3, #32]
 800b54a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	685b      	ldr	r3, [r3, #4]
 800b550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	69db      	ldr	r3, [r3, #28]
 800b556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b55e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	f023 0303 	bic.w	r3, r3, #3
 800b566:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	68fa      	ldr	r2, [r7, #12]
 800b56e:	4313      	orrs	r3, r2
 800b570:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b578:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	689b      	ldr	r3, [r3, #8]
 800b57e:	021b      	lsls	r3, r3, #8
 800b580:	697a      	ldr	r2, [r7, #20]
 800b582:	4313      	orrs	r3, r2
 800b584:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	4a35      	ldr	r2, [pc, #212]	; (800b660 <TIM_OC3_SetConfig+0x130>)
 800b58a:	4293      	cmp	r3, r2
 800b58c:	d003      	beq.n	800b596 <TIM_OC3_SetConfig+0x66>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	4a34      	ldr	r2, [pc, #208]	; (800b664 <TIM_OC3_SetConfig+0x134>)
 800b592:	4293      	cmp	r3, r2
 800b594:	d11a      	bne.n	800b5cc <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	68db      	ldr	r3, [r3, #12]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d008      	beq.n	800b5b0 <TIM_OC3_SetConfig+0x80>
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	68db      	ldr	r3, [r3, #12]
 800b5a2:	2b08      	cmp	r3, #8
 800b5a4:	d004      	beq.n	800b5b0 <TIM_OC3_SetConfig+0x80>
 800b5a6:	f641 3161 	movw	r1, #7009	; 0x1b61
 800b5aa:	482f      	ldr	r0, [pc, #188]	; (800b668 <TIM_OC3_SetConfig+0x138>)
 800b5ac:	f7f6 ffe5 	bl	800257a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b5b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	68db      	ldr	r3, [r3, #12]
 800b5bc:	021b      	lsls	r3, r3, #8
 800b5be:	697a      	ldr	r2, [r7, #20]
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b5c4:	697b      	ldr	r3, [r7, #20]
 800b5c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b5ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	4a24      	ldr	r2, [pc, #144]	; (800b660 <TIM_OC3_SetConfig+0x130>)
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d003      	beq.n	800b5dc <TIM_OC3_SetConfig+0xac>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	4a23      	ldr	r2, [pc, #140]	; (800b664 <TIM_OC3_SetConfig+0x134>)
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	d12f      	bne.n	800b63c <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	699b      	ldr	r3, [r3, #24]
 800b5e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5e4:	d008      	beq.n	800b5f8 <TIM_OC3_SetConfig+0xc8>
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	699b      	ldr	r3, [r3, #24]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d004      	beq.n	800b5f8 <TIM_OC3_SetConfig+0xc8>
 800b5ee:	f641 316e 	movw	r1, #7022	; 0x1b6e
 800b5f2:	481d      	ldr	r0, [pc, #116]	; (800b668 <TIM_OC3_SetConfig+0x138>)
 800b5f4:	f7f6 ffc1 	bl	800257a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	695b      	ldr	r3, [r3, #20]
 800b5fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b600:	d008      	beq.n	800b614 <TIM_OC3_SetConfig+0xe4>
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	695b      	ldr	r3, [r3, #20]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d004      	beq.n	800b614 <TIM_OC3_SetConfig+0xe4>
 800b60a:	f641 316f 	movw	r1, #7023	; 0x1b6f
 800b60e:	4816      	ldr	r0, [pc, #88]	; (800b668 <TIM_OC3_SetConfig+0x138>)
 800b610:	f7f6 ffb3 	bl	800257a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b61a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b622:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	695b      	ldr	r3, [r3, #20]
 800b628:	011b      	lsls	r3, r3, #4
 800b62a:	693a      	ldr	r2, [r7, #16]
 800b62c:	4313      	orrs	r3, r2
 800b62e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	699b      	ldr	r3, [r3, #24]
 800b634:	011b      	lsls	r3, r3, #4
 800b636:	693a      	ldr	r2, [r7, #16]
 800b638:	4313      	orrs	r3, r2
 800b63a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	693a      	ldr	r2, [r7, #16]
 800b640:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	68fa      	ldr	r2, [r7, #12]
 800b646:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	685a      	ldr	r2, [r3, #4]
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	697a      	ldr	r2, [r7, #20]
 800b654:	621a      	str	r2, [r3, #32]
}
 800b656:	bf00      	nop
 800b658:	3718      	adds	r7, #24
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}
 800b65e:	bf00      	nop
 800b660:	40010000 	.word	0x40010000
 800b664:	40010400 	.word	0x40010400
 800b668:	0801b0d8 	.word	0x0801b0d8

0800b66c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b086      	sub	sp, #24
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6a1b      	ldr	r3, [r3, #32]
 800b67a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6a1b      	ldr	r3, [r3, #32]
 800b686:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	685b      	ldr	r3, [r3, #4]
 800b68c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	69db      	ldr	r3, [r3, #28]
 800b692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b69a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b6a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	021b      	lsls	r3, r3, #8
 800b6aa:	68fa      	ldr	r2, [r7, #12]
 800b6ac:	4313      	orrs	r3, r2
 800b6ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b6b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	689b      	ldr	r3, [r3, #8]
 800b6bc:	031b      	lsls	r3, r3, #12
 800b6be:	693a      	ldr	r2, [r7, #16]
 800b6c0:	4313      	orrs	r3, r2
 800b6c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	4a18      	ldr	r2, [pc, #96]	; (800b728 <TIM_OC4_SetConfig+0xbc>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d003      	beq.n	800b6d4 <TIM_OC4_SetConfig+0x68>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	4a17      	ldr	r2, [pc, #92]	; (800b72c <TIM_OC4_SetConfig+0xc0>)
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	d117      	bne.n	800b704 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	695b      	ldr	r3, [r3, #20]
 800b6d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6dc:	d008      	beq.n	800b6f0 <TIM_OC4_SetConfig+0x84>
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	695b      	ldr	r3, [r3, #20]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d004      	beq.n	800b6f0 <TIM_OC4_SetConfig+0x84>
 800b6e6:	f641 31ad 	movw	r1, #7085	; 0x1bad
 800b6ea:	4811      	ldr	r0, [pc, #68]	; (800b730 <TIM_OC4_SetConfig+0xc4>)
 800b6ec:	f7f6 ff45 	bl	800257a <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b6f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	695b      	ldr	r3, [r3, #20]
 800b6fc:	019b      	lsls	r3, r3, #6
 800b6fe:	697a      	ldr	r2, [r7, #20]
 800b700:	4313      	orrs	r3, r2
 800b702:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	697a      	ldr	r2, [r7, #20]
 800b708:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	68fa      	ldr	r2, [r7, #12]
 800b70e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	685a      	ldr	r2, [r3, #4]
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	693a      	ldr	r2, [r7, #16]
 800b71c:	621a      	str	r2, [r3, #32]
}
 800b71e:	bf00      	nop
 800b720:	3718      	adds	r7, #24
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
 800b726:	bf00      	nop
 800b728:	40010000 	.word	0x40010000
 800b72c:	40010400 	.word	0x40010400
 800b730:	0801b0d8 	.word	0x0801b0d8

0800b734 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b734:	b480      	push	{r7}
 800b736:	b087      	sub	sp, #28
 800b738:	af00      	add	r7, sp, #0
 800b73a:	60f8      	str	r0, [r7, #12]
 800b73c:	60b9      	str	r1, [r7, #8]
 800b73e:	607a      	str	r2, [r7, #4]
 800b740:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	6a1b      	ldr	r3, [r3, #32]
 800b746:	f023 0201 	bic.w	r2, r3, #1
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	699b      	ldr	r3, [r3, #24]
 800b752:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	6a1b      	ldr	r3, [r3, #32]
 800b758:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	4a28      	ldr	r2, [pc, #160]	; (800b800 <TIM_TI1_SetConfig+0xcc>)
 800b75e:	4293      	cmp	r3, r2
 800b760:	d01b      	beq.n	800b79a <TIM_TI1_SetConfig+0x66>
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b768:	d017      	beq.n	800b79a <TIM_TI1_SetConfig+0x66>
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	4a25      	ldr	r2, [pc, #148]	; (800b804 <TIM_TI1_SetConfig+0xd0>)
 800b76e:	4293      	cmp	r3, r2
 800b770:	d013      	beq.n	800b79a <TIM_TI1_SetConfig+0x66>
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	4a24      	ldr	r2, [pc, #144]	; (800b808 <TIM_TI1_SetConfig+0xd4>)
 800b776:	4293      	cmp	r3, r2
 800b778:	d00f      	beq.n	800b79a <TIM_TI1_SetConfig+0x66>
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	4a23      	ldr	r2, [pc, #140]	; (800b80c <TIM_TI1_SetConfig+0xd8>)
 800b77e:	4293      	cmp	r3, r2
 800b780:	d00b      	beq.n	800b79a <TIM_TI1_SetConfig+0x66>
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	4a22      	ldr	r2, [pc, #136]	; (800b810 <TIM_TI1_SetConfig+0xdc>)
 800b786:	4293      	cmp	r3, r2
 800b788:	d007      	beq.n	800b79a <TIM_TI1_SetConfig+0x66>
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	4a21      	ldr	r2, [pc, #132]	; (800b814 <TIM_TI1_SetConfig+0xe0>)
 800b78e:	4293      	cmp	r3, r2
 800b790:	d003      	beq.n	800b79a <TIM_TI1_SetConfig+0x66>
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	4a20      	ldr	r2, [pc, #128]	; (800b818 <TIM_TI1_SetConfig+0xe4>)
 800b796:	4293      	cmp	r3, r2
 800b798:	d101      	bne.n	800b79e <TIM_TI1_SetConfig+0x6a>
 800b79a:	2301      	movs	r3, #1
 800b79c:	e000      	b.n	800b7a0 <TIM_TI1_SetConfig+0x6c>
 800b79e:	2300      	movs	r3, #0
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d008      	beq.n	800b7b6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	f023 0303 	bic.w	r3, r3, #3
 800b7aa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800b7ac:	697a      	ldr	r2, [r7, #20]
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	4313      	orrs	r3, r2
 800b7b2:	617b      	str	r3, [r7, #20]
 800b7b4:	e003      	b.n	800b7be <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	f043 0301 	orr.w	r3, r3, #1
 800b7bc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b7c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	011b      	lsls	r3, r3, #4
 800b7ca:	b2db      	uxtb	r3, r3
 800b7cc:	697a      	ldr	r2, [r7, #20]
 800b7ce:	4313      	orrs	r3, r2
 800b7d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b7d2:	693b      	ldr	r3, [r7, #16]
 800b7d4:	f023 030a 	bic.w	r3, r3, #10
 800b7d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	f003 030a 	and.w	r3, r3, #10
 800b7e0:	693a      	ldr	r2, [r7, #16]
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	697a      	ldr	r2, [r7, #20]
 800b7ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	693a      	ldr	r2, [r7, #16]
 800b7f0:	621a      	str	r2, [r3, #32]
}
 800b7f2:	bf00      	nop
 800b7f4:	371c      	adds	r7, #28
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fc:	4770      	bx	lr
 800b7fe:	bf00      	nop
 800b800:	40010000 	.word	0x40010000
 800b804:	40000400 	.word	0x40000400
 800b808:	40000800 	.word	0x40000800
 800b80c:	40000c00 	.word	0x40000c00
 800b810:	40010400 	.word	0x40010400
 800b814:	40014000 	.word	0x40014000
 800b818:	40001800 	.word	0x40001800

0800b81c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b087      	sub	sp, #28
 800b820:	af00      	add	r7, sp, #0
 800b822:	60f8      	str	r0, [r7, #12]
 800b824:	60b9      	str	r1, [r7, #8]
 800b826:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	6a1b      	ldr	r3, [r3, #32]
 800b82c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	6a1b      	ldr	r3, [r3, #32]
 800b832:	f023 0201 	bic.w	r2, r3, #1
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	699b      	ldr	r3, [r3, #24]
 800b83e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b846:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	011b      	lsls	r3, r3, #4
 800b84c:	693a      	ldr	r2, [r7, #16]
 800b84e:	4313      	orrs	r3, r2
 800b850:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	f023 030a 	bic.w	r3, r3, #10
 800b858:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b85a:	697a      	ldr	r2, [r7, #20]
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	4313      	orrs	r3, r2
 800b860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	693a      	ldr	r2, [r7, #16]
 800b866:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	697a      	ldr	r2, [r7, #20]
 800b86c:	621a      	str	r2, [r3, #32]
}
 800b86e:	bf00      	nop
 800b870:	371c      	adds	r7, #28
 800b872:	46bd      	mov	sp, r7
 800b874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b878:	4770      	bx	lr

0800b87a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b87a:	b480      	push	{r7}
 800b87c:	b087      	sub	sp, #28
 800b87e:	af00      	add	r7, sp, #0
 800b880:	60f8      	str	r0, [r7, #12]
 800b882:	60b9      	str	r1, [r7, #8]
 800b884:	607a      	str	r2, [r7, #4]
 800b886:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	6a1b      	ldr	r3, [r3, #32]
 800b88c:	f023 0210 	bic.w	r2, r3, #16
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	699b      	ldr	r3, [r3, #24]
 800b898:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	6a1b      	ldr	r3, [r3, #32]
 800b89e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b8a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	021b      	lsls	r3, r3, #8
 800b8ac:	697a      	ldr	r2, [r7, #20]
 800b8ae:	4313      	orrs	r3, r2
 800b8b0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b8b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	031b      	lsls	r3, r3, #12
 800b8be:	b29b      	uxth	r3, r3
 800b8c0:	697a      	ldr	r2, [r7, #20]
 800b8c2:	4313      	orrs	r3, r2
 800b8c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b8cc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	011b      	lsls	r3, r3, #4
 800b8d2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b8d6:	693a      	ldr	r2, [r7, #16]
 800b8d8:	4313      	orrs	r3, r2
 800b8da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	697a      	ldr	r2, [r7, #20]
 800b8e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	693a      	ldr	r2, [r7, #16]
 800b8e6:	621a      	str	r2, [r3, #32]
}
 800b8e8:	bf00      	nop
 800b8ea:	371c      	adds	r7, #28
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f2:	4770      	bx	lr

0800b8f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b8f4:	b480      	push	{r7}
 800b8f6:	b087      	sub	sp, #28
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	60f8      	str	r0, [r7, #12]
 800b8fc:	60b9      	str	r1, [r7, #8]
 800b8fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	6a1b      	ldr	r3, [r3, #32]
 800b904:	f023 0210 	bic.w	r2, r3, #16
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	699b      	ldr	r3, [r3, #24]
 800b910:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	6a1b      	ldr	r3, [r3, #32]
 800b916:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b91e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	031b      	lsls	r3, r3, #12
 800b924:	697a      	ldr	r2, [r7, #20]
 800b926:	4313      	orrs	r3, r2
 800b928:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b930:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	011b      	lsls	r3, r3, #4
 800b936:	693a      	ldr	r2, [r7, #16]
 800b938:	4313      	orrs	r3, r2
 800b93a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	697a      	ldr	r2, [r7, #20]
 800b940:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	693a      	ldr	r2, [r7, #16]
 800b946:	621a      	str	r2, [r3, #32]
}
 800b948:	bf00      	nop
 800b94a:	371c      	adds	r7, #28
 800b94c:	46bd      	mov	sp, r7
 800b94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b952:	4770      	bx	lr

0800b954 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b954:	b480      	push	{r7}
 800b956:	b087      	sub	sp, #28
 800b958:	af00      	add	r7, sp, #0
 800b95a:	60f8      	str	r0, [r7, #12]
 800b95c:	60b9      	str	r1, [r7, #8]
 800b95e:	607a      	str	r2, [r7, #4]
 800b960:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	6a1b      	ldr	r3, [r3, #32]
 800b966:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	69db      	ldr	r3, [r3, #28]
 800b972:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	6a1b      	ldr	r3, [r3, #32]
 800b978:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	f023 0303 	bic.w	r3, r3, #3
 800b980:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800b982:	697a      	ldr	r2, [r7, #20]
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	4313      	orrs	r3, r2
 800b988:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b990:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	011b      	lsls	r3, r3, #4
 800b996:	b2db      	uxtb	r3, r3
 800b998:	697a      	ldr	r2, [r7, #20]
 800b99a:	4313      	orrs	r3, r2
 800b99c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800b99e:	693b      	ldr	r3, [r7, #16]
 800b9a0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800b9a4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	021b      	lsls	r3, r3, #8
 800b9aa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800b9ae:	693a      	ldr	r2, [r7, #16]
 800b9b0:	4313      	orrs	r3, r2
 800b9b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	697a      	ldr	r2, [r7, #20]
 800b9b8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	693a      	ldr	r2, [r7, #16]
 800b9be:	621a      	str	r2, [r3, #32]
}
 800b9c0:	bf00      	nop
 800b9c2:	371c      	adds	r7, #28
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ca:	4770      	bx	lr

0800b9cc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b087      	sub	sp, #28
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	60f8      	str	r0, [r7, #12]
 800b9d4:	60b9      	str	r1, [r7, #8]
 800b9d6:	607a      	str	r2, [r7, #4]
 800b9d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	6a1b      	ldr	r3, [r3, #32]
 800b9de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	69db      	ldr	r3, [r3, #28]
 800b9ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	6a1b      	ldr	r3, [r3, #32]
 800b9f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b9f8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	021b      	lsls	r3, r3, #8
 800b9fe:	697a      	ldr	r2, [r7, #20]
 800ba00:	4313      	orrs	r3, r2
 800ba02:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ba0a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	031b      	lsls	r3, r3, #12
 800ba10:	b29b      	uxth	r3, r3
 800ba12:	697a      	ldr	r2, [r7, #20]
 800ba14:	4313      	orrs	r3, r2
 800ba16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800ba1e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	031b      	lsls	r3, r3, #12
 800ba24:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800ba28:	693a      	ldr	r2, [r7, #16]
 800ba2a:	4313      	orrs	r3, r2
 800ba2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	697a      	ldr	r2, [r7, #20]
 800ba32:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	693a      	ldr	r2, [r7, #16]
 800ba38:	621a      	str	r2, [r3, #32]
}
 800ba3a:	bf00      	nop
 800ba3c:	371c      	adds	r7, #28
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba44:	4770      	bx	lr

0800ba46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ba46:	b480      	push	{r7}
 800ba48:	b085      	sub	sp, #20
 800ba4a:	af00      	add	r7, sp, #0
 800ba4c:	6078      	str	r0, [r7, #4]
 800ba4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	689b      	ldr	r3, [r3, #8]
 800ba54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ba5e:	683a      	ldr	r2, [r7, #0]
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	4313      	orrs	r3, r2
 800ba64:	f043 0307 	orr.w	r3, r3, #7
 800ba68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	68fa      	ldr	r2, [r7, #12]
 800ba6e:	609a      	str	r2, [r3, #8]
}
 800ba70:	bf00      	nop
 800ba72:	3714      	adds	r7, #20
 800ba74:	46bd      	mov	sp, r7
 800ba76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7a:	4770      	bx	lr

0800ba7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	b087      	sub	sp, #28
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	60f8      	str	r0, [r7, #12]
 800ba84:	60b9      	str	r1, [r7, #8]
 800ba86:	607a      	str	r2, [r7, #4]
 800ba88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	689b      	ldr	r3, [r3, #8]
 800ba8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ba96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	021a      	lsls	r2, r3, #8
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	431a      	orrs	r2, r3
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	4313      	orrs	r3, r2
 800baa4:	697a      	ldr	r2, [r7, #20]
 800baa6:	4313      	orrs	r3, r2
 800baa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	697a      	ldr	r2, [r7, #20]
 800baae:	609a      	str	r2, [r3, #8]
}
 800bab0:	bf00      	nop
 800bab2:	371c      	adds	r7, #28
 800bab4:	46bd      	mov	sp, r7
 800bab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baba:	4770      	bx	lr

0800babc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b086      	sub	sp, #24
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	60f8      	str	r0, [r7, #12]
 800bac4:	60b9      	str	r1, [r7, #8]
 800bac6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	4a32      	ldr	r2, [pc, #200]	; (800bb94 <TIM_CCxChannelCmd+0xd8>)
 800bacc:	4293      	cmp	r3, r2
 800bace:	d030      	beq.n	800bb32 <TIM_CCxChannelCmd+0x76>
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bad6:	d02c      	beq.n	800bb32 <TIM_CCxChannelCmd+0x76>
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	4a2f      	ldr	r2, [pc, #188]	; (800bb98 <TIM_CCxChannelCmd+0xdc>)
 800badc:	4293      	cmp	r3, r2
 800bade:	d028      	beq.n	800bb32 <TIM_CCxChannelCmd+0x76>
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	4a2e      	ldr	r2, [pc, #184]	; (800bb9c <TIM_CCxChannelCmd+0xe0>)
 800bae4:	4293      	cmp	r3, r2
 800bae6:	d024      	beq.n	800bb32 <TIM_CCxChannelCmd+0x76>
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	4a2d      	ldr	r2, [pc, #180]	; (800bba0 <TIM_CCxChannelCmd+0xe4>)
 800baec:	4293      	cmp	r3, r2
 800baee:	d020      	beq.n	800bb32 <TIM_CCxChannelCmd+0x76>
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	4a2c      	ldr	r2, [pc, #176]	; (800bba4 <TIM_CCxChannelCmd+0xe8>)
 800baf4:	4293      	cmp	r3, r2
 800baf6:	d01c      	beq.n	800bb32 <TIM_CCxChannelCmd+0x76>
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	4a2b      	ldr	r2, [pc, #172]	; (800bba8 <TIM_CCxChannelCmd+0xec>)
 800bafc:	4293      	cmp	r3, r2
 800bafe:	d018      	beq.n	800bb32 <TIM_CCxChannelCmd+0x76>
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	4a2a      	ldr	r2, [pc, #168]	; (800bbac <TIM_CCxChannelCmd+0xf0>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d014      	beq.n	800bb32 <TIM_CCxChannelCmd+0x76>
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	4a29      	ldr	r2, [pc, #164]	; (800bbb0 <TIM_CCxChannelCmd+0xf4>)
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d010      	beq.n	800bb32 <TIM_CCxChannelCmd+0x76>
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	4a28      	ldr	r2, [pc, #160]	; (800bbb4 <TIM_CCxChannelCmd+0xf8>)
 800bb14:	4293      	cmp	r3, r2
 800bb16:	d00c      	beq.n	800bb32 <TIM_CCxChannelCmd+0x76>
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	4a27      	ldr	r2, [pc, #156]	; (800bbb8 <TIM_CCxChannelCmd+0xfc>)
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	d008      	beq.n	800bb32 <TIM_CCxChannelCmd+0x76>
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	4a26      	ldr	r2, [pc, #152]	; (800bbbc <TIM_CCxChannelCmd+0x100>)
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d004      	beq.n	800bb32 <TIM_CCxChannelCmd+0x76>
 800bb28:	f641 5198 	movw	r1, #7576	; 0x1d98
 800bb2c:	4824      	ldr	r0, [pc, #144]	; (800bbc0 <TIM_CCxChannelCmd+0x104>)
 800bb2e:	f7f6 fd24 	bl	800257a <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d010      	beq.n	800bb5a <TIM_CCxChannelCmd+0x9e>
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	2b04      	cmp	r3, #4
 800bb3c:	d00d      	beq.n	800bb5a <TIM_CCxChannelCmd+0x9e>
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	2b08      	cmp	r3, #8
 800bb42:	d00a      	beq.n	800bb5a <TIM_CCxChannelCmd+0x9e>
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	2b0c      	cmp	r3, #12
 800bb48:	d007      	beq.n	800bb5a <TIM_CCxChannelCmd+0x9e>
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	2b3c      	cmp	r3, #60	; 0x3c
 800bb4e:	d004      	beq.n	800bb5a <TIM_CCxChannelCmd+0x9e>
 800bb50:	f641 5199 	movw	r1, #7577	; 0x1d99
 800bb54:	481a      	ldr	r0, [pc, #104]	; (800bbc0 <TIM_CCxChannelCmd+0x104>)
 800bb56:	f7f6 fd10 	bl	800257a <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	f003 031f 	and.w	r3, r3, #31
 800bb60:	2201      	movs	r2, #1
 800bb62:	fa02 f303 	lsl.w	r3, r2, r3
 800bb66:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	6a1a      	ldr	r2, [r3, #32]
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	43db      	mvns	r3, r3
 800bb70:	401a      	ands	r2, r3
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	6a1a      	ldr	r2, [r3, #32]
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	f003 031f 	and.w	r3, r3, #31
 800bb80:	6879      	ldr	r1, [r7, #4]
 800bb82:	fa01 f303 	lsl.w	r3, r1, r3
 800bb86:	431a      	orrs	r2, r3
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	621a      	str	r2, [r3, #32]
}
 800bb8c:	bf00      	nop
 800bb8e:	3718      	adds	r7, #24
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}
 800bb94:	40010000 	.word	0x40010000
 800bb98:	40000400 	.word	0x40000400
 800bb9c:	40000800 	.word	0x40000800
 800bba0:	40000c00 	.word	0x40000c00
 800bba4:	40010400 	.word	0x40010400
 800bba8:	40014000 	.word	0x40014000
 800bbac:	40014400 	.word	0x40014400
 800bbb0:	40014800 	.word	0x40014800
 800bbb4:	40001800 	.word	0x40001800
 800bbb8:	40001c00 	.word	0x40001c00
 800bbbc:	40002000 	.word	0x40002000
 800bbc0:	0801b0d8 	.word	0x0801b0d8

0800bbc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b084      	sub	sp, #16
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
 800bbcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	4a61      	ldr	r2, [pc, #388]	; (800bd58 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	d027      	beq.n	800bc28 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbe0:	d022      	beq.n	800bc28 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	4a5d      	ldr	r2, [pc, #372]	; (800bd5c <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800bbe8:	4293      	cmp	r3, r2
 800bbea:	d01d      	beq.n	800bc28 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	4a5b      	ldr	r2, [pc, #364]	; (800bd60 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800bbf2:	4293      	cmp	r3, r2
 800bbf4:	d018      	beq.n	800bc28 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	4a5a      	ldr	r2, [pc, #360]	; (800bd64 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 800bbfc:	4293      	cmp	r3, r2
 800bbfe:	d013      	beq.n	800bc28 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	4a58      	ldr	r2, [pc, #352]	; (800bd68 <HAL_TIMEx_MasterConfigSynchronization+0x1a4>)
 800bc06:	4293      	cmp	r3, r2
 800bc08:	d00e      	beq.n	800bc28 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	4a57      	ldr	r2, [pc, #348]	; (800bd6c <HAL_TIMEx_MasterConfigSynchronization+0x1a8>)
 800bc10:	4293      	cmp	r3, r2
 800bc12:	d009      	beq.n	800bc28 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	4a55      	ldr	r2, [pc, #340]	; (800bd70 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 800bc1a:	4293      	cmp	r3, r2
 800bc1c:	d004      	beq.n	800bc28 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800bc1e:	f240 71b1 	movw	r1, #1969	; 0x7b1
 800bc22:	4854      	ldr	r0, [pc, #336]	; (800bd74 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800bc24:	f7f6 fca9 	bl	800257a <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d020      	beq.n	800bc72 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	2b10      	cmp	r3, #16
 800bc36:	d01c      	beq.n	800bc72 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	2b20      	cmp	r3, #32
 800bc3e:	d018      	beq.n	800bc72 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	2b30      	cmp	r3, #48	; 0x30
 800bc46:	d014      	beq.n	800bc72 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	2b40      	cmp	r3, #64	; 0x40
 800bc4e:	d010      	beq.n	800bc72 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	2b50      	cmp	r3, #80	; 0x50
 800bc56:	d00c      	beq.n	800bc72 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	2b60      	cmp	r3, #96	; 0x60
 800bc5e:	d008      	beq.n	800bc72 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	2b70      	cmp	r3, #112	; 0x70
 800bc66:	d004      	beq.n	800bc72 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800bc68:	f240 71b2 	movw	r1, #1970	; 0x7b2
 800bc6c:	4841      	ldr	r0, [pc, #260]	; (800bd74 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800bc6e:	f7f6 fc84 	bl	800257a <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	685b      	ldr	r3, [r3, #4]
 800bc76:	2b80      	cmp	r3, #128	; 0x80
 800bc78:	d008      	beq.n	800bc8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	685b      	ldr	r3, [r3, #4]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d004      	beq.n	800bc8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc82:	f240 71b3 	movw	r1, #1971	; 0x7b3
 800bc86:	483b      	ldr	r0, [pc, #236]	; (800bd74 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800bc88:	f7f6 fc77 	bl	800257a <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc92:	2b01      	cmp	r3, #1
 800bc94:	d101      	bne.n	800bc9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bc96:	2302      	movs	r3, #2
 800bc98:	e05a      	b.n	800bd50 <HAL_TIMEx_MasterConfigSynchronization+0x18c>
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2201      	movs	r2, #1
 800bc9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2202      	movs	r2, #2
 800bca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	685b      	ldr	r3, [r3, #4]
 800bcb0:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	689b      	ldr	r3, [r3, #8]
 800bcb8:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcc0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	68fa      	ldr	r2, [r7, #12]
 800bcc8:	4313      	orrs	r3, r2
 800bcca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	68fa      	ldr	r2, [r7, #12]
 800bcd2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	4a1f      	ldr	r2, [pc, #124]	; (800bd58 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d022      	beq.n	800bd24 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bce6:	d01d      	beq.n	800bd24 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	4a1b      	ldr	r2, [pc, #108]	; (800bd5c <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d018      	beq.n	800bd24 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	4a1a      	ldr	r2, [pc, #104]	; (800bd60 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800bcf8:	4293      	cmp	r3, r2
 800bcfa:	d013      	beq.n	800bd24 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	4a18      	ldr	r2, [pc, #96]	; (800bd64 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 800bd02:	4293      	cmp	r3, r2
 800bd04:	d00e      	beq.n	800bd24 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	4a19      	ldr	r2, [pc, #100]	; (800bd70 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 800bd0c:	4293      	cmp	r3, r2
 800bd0e:	d009      	beq.n	800bd24 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	4a18      	ldr	r2, [pc, #96]	; (800bd78 <HAL_TIMEx_MasterConfigSynchronization+0x1b4>)
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d004      	beq.n	800bd24 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	4a17      	ldr	r2, [pc, #92]	; (800bd7c <HAL_TIMEx_MasterConfigSynchronization+0x1b8>)
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d10c      	bne.n	800bd3e <HAL_TIMEx_MasterConfigSynchronization+0x17a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd2a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	685b      	ldr	r3, [r3, #4]
 800bd30:	68ba      	ldr	r2, [r7, #8]
 800bd32:	4313      	orrs	r3, r2
 800bd34:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	68ba      	ldr	r2, [r7, #8]
 800bd3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2201      	movs	r2, #1
 800bd42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bd4e:	2300      	movs	r3, #0
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3710      	adds	r7, #16
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}
 800bd58:	40010000 	.word	0x40010000
 800bd5c:	40000400 	.word	0x40000400
 800bd60:	40000800 	.word	0x40000800
 800bd64:	40000c00 	.word	0x40000c00
 800bd68:	40001000 	.word	0x40001000
 800bd6c:	40001400 	.word	0x40001400
 800bd70:	40010400 	.word	0x40010400
 800bd74:	0801b110 	.word	0x0801b110
 800bd78:	40014000 	.word	0x40014000
 800bd7c:	40001800 	.word	0x40001800

0800bd80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bd80:	b480      	push	{r7}
 800bd82:	b083      	sub	sp, #12
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bd88:	bf00      	nop
 800bd8a:	370c      	adds	r7, #12
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd92:	4770      	bx	lr

0800bd94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bd94:	b480      	push	{r7}
 800bd96:	b083      	sub	sp, #12
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bd9c:	bf00      	nop
 800bd9e:	370c      	adds	r7, #12
 800bda0:	46bd      	mov	sp, r7
 800bda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda6:	4770      	bx	lr

0800bda8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b082      	sub	sp, #8
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d101      	bne.n	800bdba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	e0be      	b.n	800bf38 <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	699b      	ldr	r3, [r3, #24]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d031      	beq.n	800be26 <HAL_UART_Init+0x7e>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	4a5e      	ldr	r2, [pc, #376]	; (800bf40 <HAL_UART_Init+0x198>)
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	d013      	beq.n	800bdf4 <HAL_UART_Init+0x4c>
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	4a5c      	ldr	r2, [pc, #368]	; (800bf44 <HAL_UART_Init+0x19c>)
 800bdd2:	4293      	cmp	r3, r2
 800bdd4:	d00e      	beq.n	800bdf4 <HAL_UART_Init+0x4c>
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	4a5b      	ldr	r2, [pc, #364]	; (800bf48 <HAL_UART_Init+0x1a0>)
 800bddc:	4293      	cmp	r3, r2
 800bdde:	d009      	beq.n	800bdf4 <HAL_UART_Init+0x4c>
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	4a59      	ldr	r2, [pc, #356]	; (800bf4c <HAL_UART_Init+0x1a4>)
 800bde6:	4293      	cmp	r3, r2
 800bde8:	d004      	beq.n	800bdf4 <HAL_UART_Init+0x4c>
 800bdea:	f44f 71b9 	mov.w	r1, #370	; 0x172
 800bdee:	4858      	ldr	r0, [pc, #352]	; (800bf50 <HAL_UART_Init+0x1a8>)
 800bdf0:	f7f6 fbc3 	bl	800257a <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	699b      	ldr	r3, [r3, #24]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d041      	beq.n	800be80 <HAL_UART_Init+0xd8>
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	699b      	ldr	r3, [r3, #24]
 800be00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be04:	d03c      	beq.n	800be80 <HAL_UART_Init+0xd8>
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	699b      	ldr	r3, [r3, #24]
 800be0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be0e:	d037      	beq.n	800be80 <HAL_UART_Init+0xd8>
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	699b      	ldr	r3, [r3, #24]
 800be14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800be18:	d032      	beq.n	800be80 <HAL_UART_Init+0xd8>
 800be1a:	f240 1173 	movw	r1, #371	; 0x173
 800be1e:	484c      	ldr	r0, [pc, #304]	; (800bf50 <HAL_UART_Init+0x1a8>)
 800be20:	f7f6 fbab 	bl	800257a <assert_failed>
 800be24:	e02c      	b.n	800be80 <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	4a45      	ldr	r2, [pc, #276]	; (800bf40 <HAL_UART_Init+0x198>)
 800be2c:	4293      	cmp	r3, r2
 800be2e:	d027      	beq.n	800be80 <HAL_UART_Init+0xd8>
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	4a43      	ldr	r2, [pc, #268]	; (800bf44 <HAL_UART_Init+0x19c>)
 800be36:	4293      	cmp	r3, r2
 800be38:	d022      	beq.n	800be80 <HAL_UART_Init+0xd8>
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	4a42      	ldr	r2, [pc, #264]	; (800bf48 <HAL_UART_Init+0x1a0>)
 800be40:	4293      	cmp	r3, r2
 800be42:	d01d      	beq.n	800be80 <HAL_UART_Init+0xd8>
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	4a42      	ldr	r2, [pc, #264]	; (800bf54 <HAL_UART_Init+0x1ac>)
 800be4a:	4293      	cmp	r3, r2
 800be4c:	d018      	beq.n	800be80 <HAL_UART_Init+0xd8>
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	4a41      	ldr	r2, [pc, #260]	; (800bf58 <HAL_UART_Init+0x1b0>)
 800be54:	4293      	cmp	r3, r2
 800be56:	d013      	beq.n	800be80 <HAL_UART_Init+0xd8>
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	4a3b      	ldr	r2, [pc, #236]	; (800bf4c <HAL_UART_Init+0x1a4>)
 800be5e:	4293      	cmp	r3, r2
 800be60:	d00e      	beq.n	800be80 <HAL_UART_Init+0xd8>
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	4a3d      	ldr	r2, [pc, #244]	; (800bf5c <HAL_UART_Init+0x1b4>)
 800be68:	4293      	cmp	r3, r2
 800be6a:	d009      	beq.n	800be80 <HAL_UART_Init+0xd8>
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	4a3b      	ldr	r2, [pc, #236]	; (800bf60 <HAL_UART_Init+0x1b8>)
 800be72:	4293      	cmp	r3, r2
 800be74:	d004      	beq.n	800be80 <HAL_UART_Init+0xd8>
 800be76:	f240 1177 	movw	r1, #375	; 0x177
 800be7a:	4835      	ldr	r0, [pc, #212]	; (800bf50 <HAL_UART_Init+0x1a8>)
 800be7c:	f7f6 fb7d 	bl	800257a <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	689b      	ldr	r3, [r3, #8]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d009      	beq.n	800be9c <HAL_UART_Init+0xf4>
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	689b      	ldr	r3, [r3, #8]
 800be8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be90:	d004      	beq.n	800be9c <HAL_UART_Init+0xf4>
 800be92:	f240 1179 	movw	r1, #377	; 0x179
 800be96:	482e      	ldr	r0, [pc, #184]	; (800bf50 <HAL_UART_Init+0x1a8>)
 800be98:	f7f6 fb6f 	bl	800257a <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	69db      	ldr	r3, [r3, #28]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d009      	beq.n	800beb8 <HAL_UART_Init+0x110>
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	69db      	ldr	r3, [r3, #28]
 800bea8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800beac:	d004      	beq.n	800beb8 <HAL_UART_Init+0x110>
 800beae:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 800beb2:	4827      	ldr	r0, [pc, #156]	; (800bf50 <HAL_UART_Init+0x1a8>)
 800beb4:	f7f6 fb61 	bl	800257a <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bebe:	b2db      	uxtb	r3, r3
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d106      	bne.n	800bed2 <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2200      	movs	r2, #0
 800bec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f7f8 fda5 	bl	8004a1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2224      	movs	r2, #36	; 0x24
 800bed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	68da      	ldr	r2, [r3, #12]
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bee8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f000 f83a 	bl	800bf64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	691a      	ldr	r2, [r3, #16]
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800befe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	695a      	ldr	r2, [r3, #20]
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bf0e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	68da      	ldr	r2, [r3, #12]
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bf1e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2200      	movs	r2, #0
 800bf24:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	2220      	movs	r2, #32
 800bf2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2220      	movs	r2, #32
 800bf32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800bf36:	2300      	movs	r3, #0
}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	3708      	adds	r7, #8
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}
 800bf40:	40011000 	.word	0x40011000
 800bf44:	40004400 	.word	0x40004400
 800bf48:	40004800 	.word	0x40004800
 800bf4c:	40011400 	.word	0x40011400
 800bf50:	0801b14c 	.word	0x0801b14c
 800bf54:	40004c00 	.word	0x40004c00
 800bf58:	40005000 	.word	0x40005000
 800bf5c:	40007800 	.word	0x40007800
 800bf60:	40007c00 	.word	0x40007c00

0800bf64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bf64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf68:	b09f      	sub	sp, #124	; 0x7c
 800bf6a:	af00      	add	r7, sp, #0
 800bf6c:	66f8      	str	r0, [r7, #108]	; 0x6c
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800bf6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf70:	685a      	ldr	r2, [r3, #4]
 800bf72:	4b9b      	ldr	r3, [pc, #620]	; (800c1e0 <UART_SetConfig+0x27c>)
 800bf74:	429a      	cmp	r2, r3
 800bf76:	d904      	bls.n	800bf82 <UART_SetConfig+0x1e>
 800bf78:	f640 6156 	movw	r1, #3670	; 0xe56
 800bf7c:	4899      	ldr	r0, [pc, #612]	; (800c1e4 <UART_SetConfig+0x280>)
 800bf7e:	f7f6 fafc 	bl	800257a <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800bf82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf84:	68db      	ldr	r3, [r3, #12]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d009      	beq.n	800bf9e <UART_SetConfig+0x3a>
 800bf8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf8c:	68db      	ldr	r3, [r3, #12]
 800bf8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf92:	d004      	beq.n	800bf9e <UART_SetConfig+0x3a>
 800bf94:	f640 6157 	movw	r1, #3671	; 0xe57
 800bf98:	4892      	ldr	r0, [pc, #584]	; (800c1e4 <UART_SetConfig+0x280>)
 800bf9a:	f7f6 faee 	bl	800257a <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800bf9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfa0:	691b      	ldr	r3, [r3, #16]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d00e      	beq.n	800bfc4 <UART_SetConfig+0x60>
 800bfa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfa8:	691b      	ldr	r3, [r3, #16]
 800bfaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bfae:	d009      	beq.n	800bfc4 <UART_SetConfig+0x60>
 800bfb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfb2:	691b      	ldr	r3, [r3, #16]
 800bfb4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800bfb8:	d004      	beq.n	800bfc4 <UART_SetConfig+0x60>
 800bfba:	f640 6158 	movw	r1, #3672	; 0xe58
 800bfbe:	4889      	ldr	r0, [pc, #548]	; (800c1e4 <UART_SetConfig+0x280>)
 800bfc0:	f7f6 fadb 	bl	800257a <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800bfc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfc6:	695a      	ldr	r2, [r3, #20]
 800bfc8:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800bfcc:	4013      	ands	r3, r2
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d103      	bne.n	800bfda <UART_SetConfig+0x76>
 800bfd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfd4:	695b      	ldr	r3, [r3, #20]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d104      	bne.n	800bfe4 <UART_SetConfig+0x80>
 800bfda:	f640 6159 	movw	r1, #3673	; 0xe59
 800bfde:	4881      	ldr	r0, [pc, #516]	; (800c1e4 <UART_SetConfig+0x280>)
 800bfe0:	f7f6 facb 	bl	800257a <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bfe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	691b      	ldr	r3, [r3, #16]
 800bfea:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bfee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bff0:	68d9      	ldr	r1, [r3, #12]
 800bff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bff4:	681a      	ldr	r2, [r3, #0]
 800bff6:	ea40 0301 	orr.w	r3, r0, r1
 800bffa:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bffe:	689a      	ldr	r2, [r3, #8]
 800c000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c002:	691b      	ldr	r3, [r3, #16]
 800c004:	431a      	orrs	r2, r3
 800c006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c008:	695b      	ldr	r3, [r3, #20]
 800c00a:	431a      	orrs	r2, r3
 800c00c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c00e:	69db      	ldr	r3, [r3, #28]
 800c010:	4313      	orrs	r3, r2
 800c012:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800c014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	68db      	ldr	r3, [r3, #12]
 800c01a:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c01e:	f021 010c 	bic.w	r1, r1, #12
 800c022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c024:	681a      	ldr	r2, [r3, #0]
 800c026:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c028:	430b      	orrs	r3, r1
 800c02a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c02c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	695b      	ldr	r3, [r3, #20]
 800c032:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c038:	6999      	ldr	r1, [r3, #24]
 800c03a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c03c:	681a      	ldr	r2, [r3, #0]
 800c03e:	ea40 0301 	orr.w	r3, r0, r1
 800c042:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c044:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c046:	681a      	ldr	r2, [r3, #0]
 800c048:	4b67      	ldr	r3, [pc, #412]	; (800c1e8 <UART_SetConfig+0x284>)
 800c04a:	429a      	cmp	r2, r3
 800c04c:	d004      	beq.n	800c058 <UART_SetConfig+0xf4>
 800c04e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c050:	681a      	ldr	r2, [r3, #0]
 800c052:	4b66      	ldr	r3, [pc, #408]	; (800c1ec <UART_SetConfig+0x288>)
 800c054:	429a      	cmp	r2, r3
 800c056:	d103      	bne.n	800c060 <UART_SetConfig+0xfc>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c058:	f7fb fcf0 	bl	8007a3c <HAL_RCC_GetPCLK2Freq>
 800c05c:	6778      	str	r0, [r7, #116]	; 0x74
 800c05e:	e002      	b.n	800c066 <UART_SetConfig+0x102>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c060:	f7fb fcd8 	bl	8007a14 <HAL_RCC_GetPCLK1Freq>
 800c064:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c068:	69db      	ldr	r3, [r3, #28]
 800c06a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c06e:	f040 80c1 	bne.w	800c1f4 <UART_SetConfig+0x290>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c072:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c074:	461c      	mov	r4, r3
 800c076:	f04f 0500 	mov.w	r5, #0
 800c07a:	4622      	mov	r2, r4
 800c07c:	462b      	mov	r3, r5
 800c07e:	1891      	adds	r1, r2, r2
 800c080:	6439      	str	r1, [r7, #64]	; 0x40
 800c082:	415b      	adcs	r3, r3
 800c084:	647b      	str	r3, [r7, #68]	; 0x44
 800c086:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c08a:	1912      	adds	r2, r2, r4
 800c08c:	eb45 0303 	adc.w	r3, r5, r3
 800c090:	f04f 0000 	mov.w	r0, #0
 800c094:	f04f 0100 	mov.w	r1, #0
 800c098:	00d9      	lsls	r1, r3, #3
 800c09a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c09e:	00d0      	lsls	r0, r2, #3
 800c0a0:	4602      	mov	r2, r0
 800c0a2:	460b      	mov	r3, r1
 800c0a4:	1911      	adds	r1, r2, r4
 800c0a6:	6639      	str	r1, [r7, #96]	; 0x60
 800c0a8:	416b      	adcs	r3, r5
 800c0aa:	667b      	str	r3, [r7, #100]	; 0x64
 800c0ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c0ae:	685b      	ldr	r3, [r3, #4]
 800c0b0:	461a      	mov	r2, r3
 800c0b2:	f04f 0300 	mov.w	r3, #0
 800c0b6:	1891      	adds	r1, r2, r2
 800c0b8:	63b9      	str	r1, [r7, #56]	; 0x38
 800c0ba:	415b      	adcs	r3, r3
 800c0bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0be:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c0c2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800c0c6:	f7f4 fd77 	bl	8000bb8 <__aeabi_uldivmod>
 800c0ca:	4602      	mov	r2, r0
 800c0cc:	460b      	mov	r3, r1
 800c0ce:	4b48      	ldr	r3, [pc, #288]	; (800c1f0 <UART_SetConfig+0x28c>)
 800c0d0:	fba3 2302 	umull	r2, r3, r3, r2
 800c0d4:	095b      	lsrs	r3, r3, #5
 800c0d6:	011e      	lsls	r6, r3, #4
 800c0d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c0da:	461c      	mov	r4, r3
 800c0dc:	f04f 0500 	mov.w	r5, #0
 800c0e0:	4622      	mov	r2, r4
 800c0e2:	462b      	mov	r3, r5
 800c0e4:	1891      	adds	r1, r2, r2
 800c0e6:	6339      	str	r1, [r7, #48]	; 0x30
 800c0e8:	415b      	adcs	r3, r3
 800c0ea:	637b      	str	r3, [r7, #52]	; 0x34
 800c0ec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800c0f0:	1912      	adds	r2, r2, r4
 800c0f2:	eb45 0303 	adc.w	r3, r5, r3
 800c0f6:	f04f 0000 	mov.w	r0, #0
 800c0fa:	f04f 0100 	mov.w	r1, #0
 800c0fe:	00d9      	lsls	r1, r3, #3
 800c100:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c104:	00d0      	lsls	r0, r2, #3
 800c106:	4602      	mov	r2, r0
 800c108:	460b      	mov	r3, r1
 800c10a:	1911      	adds	r1, r2, r4
 800c10c:	65b9      	str	r1, [r7, #88]	; 0x58
 800c10e:	416b      	adcs	r3, r5
 800c110:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c114:	685b      	ldr	r3, [r3, #4]
 800c116:	461a      	mov	r2, r3
 800c118:	f04f 0300 	mov.w	r3, #0
 800c11c:	1891      	adds	r1, r2, r2
 800c11e:	62b9      	str	r1, [r7, #40]	; 0x28
 800c120:	415b      	adcs	r3, r3
 800c122:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c124:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c128:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800c12c:	f7f4 fd44 	bl	8000bb8 <__aeabi_uldivmod>
 800c130:	4602      	mov	r2, r0
 800c132:	460b      	mov	r3, r1
 800c134:	4b2e      	ldr	r3, [pc, #184]	; (800c1f0 <UART_SetConfig+0x28c>)
 800c136:	fba3 1302 	umull	r1, r3, r3, r2
 800c13a:	095b      	lsrs	r3, r3, #5
 800c13c:	2164      	movs	r1, #100	; 0x64
 800c13e:	fb01 f303 	mul.w	r3, r1, r3
 800c142:	1ad3      	subs	r3, r2, r3
 800c144:	00db      	lsls	r3, r3, #3
 800c146:	3332      	adds	r3, #50	; 0x32
 800c148:	4a29      	ldr	r2, [pc, #164]	; (800c1f0 <UART_SetConfig+0x28c>)
 800c14a:	fba2 2303 	umull	r2, r3, r2, r3
 800c14e:	095b      	lsrs	r3, r3, #5
 800c150:	005b      	lsls	r3, r3, #1
 800c152:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c156:	441e      	add	r6, r3
 800c158:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c15a:	4618      	mov	r0, r3
 800c15c:	f04f 0100 	mov.w	r1, #0
 800c160:	4602      	mov	r2, r0
 800c162:	460b      	mov	r3, r1
 800c164:	1894      	adds	r4, r2, r2
 800c166:	623c      	str	r4, [r7, #32]
 800c168:	415b      	adcs	r3, r3
 800c16a:	627b      	str	r3, [r7, #36]	; 0x24
 800c16c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c170:	1812      	adds	r2, r2, r0
 800c172:	eb41 0303 	adc.w	r3, r1, r3
 800c176:	f04f 0400 	mov.w	r4, #0
 800c17a:	f04f 0500 	mov.w	r5, #0
 800c17e:	00dd      	lsls	r5, r3, #3
 800c180:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c184:	00d4      	lsls	r4, r2, #3
 800c186:	4622      	mov	r2, r4
 800c188:	462b      	mov	r3, r5
 800c18a:	1814      	adds	r4, r2, r0
 800c18c:	653c      	str	r4, [r7, #80]	; 0x50
 800c18e:	414b      	adcs	r3, r1
 800c190:	657b      	str	r3, [r7, #84]	; 0x54
 800c192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c194:	685b      	ldr	r3, [r3, #4]
 800c196:	461a      	mov	r2, r3
 800c198:	f04f 0300 	mov.w	r3, #0
 800c19c:	1891      	adds	r1, r2, r2
 800c19e:	61b9      	str	r1, [r7, #24]
 800c1a0:	415b      	adcs	r3, r3
 800c1a2:	61fb      	str	r3, [r7, #28]
 800c1a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c1a8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800c1ac:	f7f4 fd04 	bl	8000bb8 <__aeabi_uldivmod>
 800c1b0:	4602      	mov	r2, r0
 800c1b2:	460b      	mov	r3, r1
 800c1b4:	4b0e      	ldr	r3, [pc, #56]	; (800c1f0 <UART_SetConfig+0x28c>)
 800c1b6:	fba3 1302 	umull	r1, r3, r3, r2
 800c1ba:	095b      	lsrs	r3, r3, #5
 800c1bc:	2164      	movs	r1, #100	; 0x64
 800c1be:	fb01 f303 	mul.w	r3, r1, r3
 800c1c2:	1ad3      	subs	r3, r2, r3
 800c1c4:	00db      	lsls	r3, r3, #3
 800c1c6:	3332      	adds	r3, #50	; 0x32
 800c1c8:	4a09      	ldr	r2, [pc, #36]	; (800c1f0 <UART_SetConfig+0x28c>)
 800c1ca:	fba2 2303 	umull	r2, r3, r2, r3
 800c1ce:	095b      	lsrs	r3, r3, #5
 800c1d0:	f003 0207 	and.w	r2, r3, #7
 800c1d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	4432      	add	r2, r6
 800c1da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c1dc:	e0c4      	b.n	800c368 <UART_SetConfig+0x404>
 800c1de:	bf00      	nop
 800c1e0:	00a037a0 	.word	0x00a037a0
 800c1e4:	0801b14c 	.word	0x0801b14c
 800c1e8:	40011000 	.word	0x40011000
 800c1ec:	40011400 	.word	0x40011400
 800c1f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c1f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c1f6:	461c      	mov	r4, r3
 800c1f8:	f04f 0500 	mov.w	r5, #0
 800c1fc:	4622      	mov	r2, r4
 800c1fe:	462b      	mov	r3, r5
 800c200:	1891      	adds	r1, r2, r2
 800c202:	6139      	str	r1, [r7, #16]
 800c204:	415b      	adcs	r3, r3
 800c206:	617b      	str	r3, [r7, #20]
 800c208:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c20c:	1912      	adds	r2, r2, r4
 800c20e:	eb45 0303 	adc.w	r3, r5, r3
 800c212:	f04f 0000 	mov.w	r0, #0
 800c216:	f04f 0100 	mov.w	r1, #0
 800c21a:	00d9      	lsls	r1, r3, #3
 800c21c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c220:	00d0      	lsls	r0, r2, #3
 800c222:	4602      	mov	r2, r0
 800c224:	460b      	mov	r3, r1
 800c226:	eb12 0804 	adds.w	r8, r2, r4
 800c22a:	eb43 0905 	adc.w	r9, r3, r5
 800c22e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c230:	685b      	ldr	r3, [r3, #4]
 800c232:	4618      	mov	r0, r3
 800c234:	f04f 0100 	mov.w	r1, #0
 800c238:	f04f 0200 	mov.w	r2, #0
 800c23c:	f04f 0300 	mov.w	r3, #0
 800c240:	008b      	lsls	r3, r1, #2
 800c242:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c246:	0082      	lsls	r2, r0, #2
 800c248:	4640      	mov	r0, r8
 800c24a:	4649      	mov	r1, r9
 800c24c:	f7f4 fcb4 	bl	8000bb8 <__aeabi_uldivmod>
 800c250:	4602      	mov	r2, r0
 800c252:	460b      	mov	r3, r1
 800c254:	4b47      	ldr	r3, [pc, #284]	; (800c374 <UART_SetConfig+0x410>)
 800c256:	fba3 2302 	umull	r2, r3, r3, r2
 800c25a:	095b      	lsrs	r3, r3, #5
 800c25c:	011e      	lsls	r6, r3, #4
 800c25e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c260:	4618      	mov	r0, r3
 800c262:	f04f 0100 	mov.w	r1, #0
 800c266:	4602      	mov	r2, r0
 800c268:	460b      	mov	r3, r1
 800c26a:	1894      	adds	r4, r2, r2
 800c26c:	60bc      	str	r4, [r7, #8]
 800c26e:	415b      	adcs	r3, r3
 800c270:	60fb      	str	r3, [r7, #12]
 800c272:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c276:	1812      	adds	r2, r2, r0
 800c278:	eb41 0303 	adc.w	r3, r1, r3
 800c27c:	f04f 0400 	mov.w	r4, #0
 800c280:	f04f 0500 	mov.w	r5, #0
 800c284:	00dd      	lsls	r5, r3, #3
 800c286:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c28a:	00d4      	lsls	r4, r2, #3
 800c28c:	4622      	mov	r2, r4
 800c28e:	462b      	mov	r3, r5
 800c290:	1814      	adds	r4, r2, r0
 800c292:	64bc      	str	r4, [r7, #72]	; 0x48
 800c294:	414b      	adcs	r3, r1
 800c296:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c29a:	685b      	ldr	r3, [r3, #4]
 800c29c:	4618      	mov	r0, r3
 800c29e:	f04f 0100 	mov.w	r1, #0
 800c2a2:	f04f 0200 	mov.w	r2, #0
 800c2a6:	f04f 0300 	mov.w	r3, #0
 800c2aa:	008b      	lsls	r3, r1, #2
 800c2ac:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c2b0:	0082      	lsls	r2, r0, #2
 800c2b2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c2b6:	f7f4 fc7f 	bl	8000bb8 <__aeabi_uldivmod>
 800c2ba:	4602      	mov	r2, r0
 800c2bc:	460b      	mov	r3, r1
 800c2be:	4b2d      	ldr	r3, [pc, #180]	; (800c374 <UART_SetConfig+0x410>)
 800c2c0:	fba3 1302 	umull	r1, r3, r3, r2
 800c2c4:	095b      	lsrs	r3, r3, #5
 800c2c6:	2164      	movs	r1, #100	; 0x64
 800c2c8:	fb01 f303 	mul.w	r3, r1, r3
 800c2cc:	1ad3      	subs	r3, r2, r3
 800c2ce:	011b      	lsls	r3, r3, #4
 800c2d0:	3332      	adds	r3, #50	; 0x32
 800c2d2:	4a28      	ldr	r2, [pc, #160]	; (800c374 <UART_SetConfig+0x410>)
 800c2d4:	fba2 2303 	umull	r2, r3, r2, r3
 800c2d8:	095b      	lsrs	r3, r3, #5
 800c2da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c2de:	441e      	add	r6, r3
 800c2e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f04f 0100 	mov.w	r1, #0
 800c2e8:	4602      	mov	r2, r0
 800c2ea:	460b      	mov	r3, r1
 800c2ec:	1894      	adds	r4, r2, r2
 800c2ee:	603c      	str	r4, [r7, #0]
 800c2f0:	415b      	adcs	r3, r3
 800c2f2:	607b      	str	r3, [r7, #4]
 800c2f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2f8:	1812      	adds	r2, r2, r0
 800c2fa:	eb41 0303 	adc.w	r3, r1, r3
 800c2fe:	f04f 0400 	mov.w	r4, #0
 800c302:	f04f 0500 	mov.w	r5, #0
 800c306:	00dd      	lsls	r5, r3, #3
 800c308:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c30c:	00d4      	lsls	r4, r2, #3
 800c30e:	4622      	mov	r2, r4
 800c310:	462b      	mov	r3, r5
 800c312:	eb12 0a00 	adds.w	sl, r2, r0
 800c316:	eb43 0b01 	adc.w	fp, r3, r1
 800c31a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c31c:	685b      	ldr	r3, [r3, #4]
 800c31e:	4618      	mov	r0, r3
 800c320:	f04f 0100 	mov.w	r1, #0
 800c324:	f04f 0200 	mov.w	r2, #0
 800c328:	f04f 0300 	mov.w	r3, #0
 800c32c:	008b      	lsls	r3, r1, #2
 800c32e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c332:	0082      	lsls	r2, r0, #2
 800c334:	4650      	mov	r0, sl
 800c336:	4659      	mov	r1, fp
 800c338:	f7f4 fc3e 	bl	8000bb8 <__aeabi_uldivmod>
 800c33c:	4602      	mov	r2, r0
 800c33e:	460b      	mov	r3, r1
 800c340:	4b0c      	ldr	r3, [pc, #48]	; (800c374 <UART_SetConfig+0x410>)
 800c342:	fba3 1302 	umull	r1, r3, r3, r2
 800c346:	095b      	lsrs	r3, r3, #5
 800c348:	2164      	movs	r1, #100	; 0x64
 800c34a:	fb01 f303 	mul.w	r3, r1, r3
 800c34e:	1ad3      	subs	r3, r2, r3
 800c350:	011b      	lsls	r3, r3, #4
 800c352:	3332      	adds	r3, #50	; 0x32
 800c354:	4a07      	ldr	r2, [pc, #28]	; (800c374 <UART_SetConfig+0x410>)
 800c356:	fba2 2303 	umull	r2, r3, r2, r3
 800c35a:	095b      	lsrs	r3, r3, #5
 800c35c:	f003 020f 	and.w	r2, r3, #15
 800c360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	4432      	add	r2, r6
 800c366:	609a      	str	r2, [r3, #8]
}
 800c368:	bf00      	nop
 800c36a:	377c      	adds	r7, #124	; 0x7c
 800c36c:	46bd      	mov	sp, r7
 800c36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c372:	bf00      	nop
 800c374:	51eb851f 	.word	0x51eb851f

0800c378 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b084      	sub	sp, #16
 800c37c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800c37e:	4b8d      	ldr	r3, [pc, #564]	; (800c5b4 <MX_LWIP_Init+0x23c>)
 800c380:	22c0      	movs	r2, #192	; 0xc0
 800c382:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800c384:	4b8b      	ldr	r3, [pc, #556]	; (800c5b4 <MX_LWIP_Init+0x23c>)
 800c386:	22a8      	movs	r2, #168	; 0xa8
 800c388:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800c38a:	4b8a      	ldr	r3, [pc, #552]	; (800c5b4 <MX_LWIP_Init+0x23c>)
 800c38c:	2200      	movs	r2, #0
 800c38e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 11;
 800c390:	4b88      	ldr	r3, [pc, #544]	; (800c5b4 <MX_LWIP_Init+0x23c>)
 800c392:	220b      	movs	r2, #11
 800c394:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800c396:	4b88      	ldr	r3, [pc, #544]	; (800c5b8 <MX_LWIP_Init+0x240>)
 800c398:	22ff      	movs	r2, #255	; 0xff
 800c39a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800c39c:	4b86      	ldr	r3, [pc, #536]	; (800c5b8 <MX_LWIP_Init+0x240>)
 800c39e:	22ff      	movs	r2, #255	; 0xff
 800c3a0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800c3a2:	4b85      	ldr	r3, [pc, #532]	; (800c5b8 <MX_LWIP_Init+0x240>)
 800c3a4:	22ff      	movs	r2, #255	; 0xff
 800c3a6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800c3a8:	4b83      	ldr	r3, [pc, #524]	; (800c5b8 <MX_LWIP_Init+0x240>)
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800c3ae:	4b83      	ldr	r3, [pc, #524]	; (800c5bc <MX_LWIP_Init+0x244>)
 800c3b0:	22c0      	movs	r2, #192	; 0xc0
 800c3b2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800c3b4:	4b81      	ldr	r3, [pc, #516]	; (800c5bc <MX_LWIP_Init+0x244>)
 800c3b6:	22a8      	movs	r2, #168	; 0xa8
 800c3b8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800c3ba:	4b80      	ldr	r3, [pc, #512]	; (800c5bc <MX_LWIP_Init+0x244>)
 800c3bc:	2200      	movs	r2, #0
 800c3be:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800c3c0:	4b7e      	ldr	r3, [pc, #504]	; (800c5bc <MX_LWIP_Init+0x244>)
 800c3c2:	2201      	movs	r2, #1
 800c3c4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800c3c6:	f000 fcff 	bl	800cdc8 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800c3ca:	4b7a      	ldr	r3, [pc, #488]	; (800c5b4 <MX_LWIP_Init+0x23c>)
 800c3cc:	781b      	ldrb	r3, [r3, #0]
 800c3ce:	061a      	lsls	r2, r3, #24
 800c3d0:	4b78      	ldr	r3, [pc, #480]	; (800c5b4 <MX_LWIP_Init+0x23c>)
 800c3d2:	785b      	ldrb	r3, [r3, #1]
 800c3d4:	041b      	lsls	r3, r3, #16
 800c3d6:	431a      	orrs	r2, r3
 800c3d8:	4b76      	ldr	r3, [pc, #472]	; (800c5b4 <MX_LWIP_Init+0x23c>)
 800c3da:	789b      	ldrb	r3, [r3, #2]
 800c3dc:	021b      	lsls	r3, r3, #8
 800c3de:	4313      	orrs	r3, r2
 800c3e0:	4a74      	ldr	r2, [pc, #464]	; (800c5b4 <MX_LWIP_Init+0x23c>)
 800c3e2:	78d2      	ldrb	r2, [r2, #3]
 800c3e4:	4313      	orrs	r3, r2
 800c3e6:	061a      	lsls	r2, r3, #24
 800c3e8:	4b72      	ldr	r3, [pc, #456]	; (800c5b4 <MX_LWIP_Init+0x23c>)
 800c3ea:	781b      	ldrb	r3, [r3, #0]
 800c3ec:	0619      	lsls	r1, r3, #24
 800c3ee:	4b71      	ldr	r3, [pc, #452]	; (800c5b4 <MX_LWIP_Init+0x23c>)
 800c3f0:	785b      	ldrb	r3, [r3, #1]
 800c3f2:	041b      	lsls	r3, r3, #16
 800c3f4:	4319      	orrs	r1, r3
 800c3f6:	4b6f      	ldr	r3, [pc, #444]	; (800c5b4 <MX_LWIP_Init+0x23c>)
 800c3f8:	789b      	ldrb	r3, [r3, #2]
 800c3fa:	021b      	lsls	r3, r3, #8
 800c3fc:	430b      	orrs	r3, r1
 800c3fe:	496d      	ldr	r1, [pc, #436]	; (800c5b4 <MX_LWIP_Init+0x23c>)
 800c400:	78c9      	ldrb	r1, [r1, #3]
 800c402:	430b      	orrs	r3, r1
 800c404:	021b      	lsls	r3, r3, #8
 800c406:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c40a:	431a      	orrs	r2, r3
 800c40c:	4b69      	ldr	r3, [pc, #420]	; (800c5b4 <MX_LWIP_Init+0x23c>)
 800c40e:	781b      	ldrb	r3, [r3, #0]
 800c410:	0619      	lsls	r1, r3, #24
 800c412:	4b68      	ldr	r3, [pc, #416]	; (800c5b4 <MX_LWIP_Init+0x23c>)
 800c414:	785b      	ldrb	r3, [r3, #1]
 800c416:	041b      	lsls	r3, r3, #16
 800c418:	4319      	orrs	r1, r3
 800c41a:	4b66      	ldr	r3, [pc, #408]	; (800c5b4 <MX_LWIP_Init+0x23c>)
 800c41c:	789b      	ldrb	r3, [r3, #2]
 800c41e:	021b      	lsls	r3, r3, #8
 800c420:	430b      	orrs	r3, r1
 800c422:	4964      	ldr	r1, [pc, #400]	; (800c5b4 <MX_LWIP_Init+0x23c>)
 800c424:	78c9      	ldrb	r1, [r1, #3]
 800c426:	430b      	orrs	r3, r1
 800c428:	0a1b      	lsrs	r3, r3, #8
 800c42a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c42e:	431a      	orrs	r2, r3
 800c430:	4b60      	ldr	r3, [pc, #384]	; (800c5b4 <MX_LWIP_Init+0x23c>)
 800c432:	781b      	ldrb	r3, [r3, #0]
 800c434:	0619      	lsls	r1, r3, #24
 800c436:	4b5f      	ldr	r3, [pc, #380]	; (800c5b4 <MX_LWIP_Init+0x23c>)
 800c438:	785b      	ldrb	r3, [r3, #1]
 800c43a:	041b      	lsls	r3, r3, #16
 800c43c:	4319      	orrs	r1, r3
 800c43e:	4b5d      	ldr	r3, [pc, #372]	; (800c5b4 <MX_LWIP_Init+0x23c>)
 800c440:	789b      	ldrb	r3, [r3, #2]
 800c442:	021b      	lsls	r3, r3, #8
 800c444:	430b      	orrs	r3, r1
 800c446:	495b      	ldr	r1, [pc, #364]	; (800c5b4 <MX_LWIP_Init+0x23c>)
 800c448:	78c9      	ldrb	r1, [r1, #3]
 800c44a:	430b      	orrs	r3, r1
 800c44c:	0e1b      	lsrs	r3, r3, #24
 800c44e:	4313      	orrs	r3, r2
 800c450:	4a5b      	ldr	r2, [pc, #364]	; (800c5c0 <MX_LWIP_Init+0x248>)
 800c452:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800c454:	4b58      	ldr	r3, [pc, #352]	; (800c5b8 <MX_LWIP_Init+0x240>)
 800c456:	781b      	ldrb	r3, [r3, #0]
 800c458:	061a      	lsls	r2, r3, #24
 800c45a:	4b57      	ldr	r3, [pc, #348]	; (800c5b8 <MX_LWIP_Init+0x240>)
 800c45c:	785b      	ldrb	r3, [r3, #1]
 800c45e:	041b      	lsls	r3, r3, #16
 800c460:	431a      	orrs	r2, r3
 800c462:	4b55      	ldr	r3, [pc, #340]	; (800c5b8 <MX_LWIP_Init+0x240>)
 800c464:	789b      	ldrb	r3, [r3, #2]
 800c466:	021b      	lsls	r3, r3, #8
 800c468:	4313      	orrs	r3, r2
 800c46a:	4a53      	ldr	r2, [pc, #332]	; (800c5b8 <MX_LWIP_Init+0x240>)
 800c46c:	78d2      	ldrb	r2, [r2, #3]
 800c46e:	4313      	orrs	r3, r2
 800c470:	061a      	lsls	r2, r3, #24
 800c472:	4b51      	ldr	r3, [pc, #324]	; (800c5b8 <MX_LWIP_Init+0x240>)
 800c474:	781b      	ldrb	r3, [r3, #0]
 800c476:	0619      	lsls	r1, r3, #24
 800c478:	4b4f      	ldr	r3, [pc, #316]	; (800c5b8 <MX_LWIP_Init+0x240>)
 800c47a:	785b      	ldrb	r3, [r3, #1]
 800c47c:	041b      	lsls	r3, r3, #16
 800c47e:	4319      	orrs	r1, r3
 800c480:	4b4d      	ldr	r3, [pc, #308]	; (800c5b8 <MX_LWIP_Init+0x240>)
 800c482:	789b      	ldrb	r3, [r3, #2]
 800c484:	021b      	lsls	r3, r3, #8
 800c486:	430b      	orrs	r3, r1
 800c488:	494b      	ldr	r1, [pc, #300]	; (800c5b8 <MX_LWIP_Init+0x240>)
 800c48a:	78c9      	ldrb	r1, [r1, #3]
 800c48c:	430b      	orrs	r3, r1
 800c48e:	021b      	lsls	r3, r3, #8
 800c490:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c494:	431a      	orrs	r2, r3
 800c496:	4b48      	ldr	r3, [pc, #288]	; (800c5b8 <MX_LWIP_Init+0x240>)
 800c498:	781b      	ldrb	r3, [r3, #0]
 800c49a:	0619      	lsls	r1, r3, #24
 800c49c:	4b46      	ldr	r3, [pc, #280]	; (800c5b8 <MX_LWIP_Init+0x240>)
 800c49e:	785b      	ldrb	r3, [r3, #1]
 800c4a0:	041b      	lsls	r3, r3, #16
 800c4a2:	4319      	orrs	r1, r3
 800c4a4:	4b44      	ldr	r3, [pc, #272]	; (800c5b8 <MX_LWIP_Init+0x240>)
 800c4a6:	789b      	ldrb	r3, [r3, #2]
 800c4a8:	021b      	lsls	r3, r3, #8
 800c4aa:	430b      	orrs	r3, r1
 800c4ac:	4942      	ldr	r1, [pc, #264]	; (800c5b8 <MX_LWIP_Init+0x240>)
 800c4ae:	78c9      	ldrb	r1, [r1, #3]
 800c4b0:	430b      	orrs	r3, r1
 800c4b2:	0a1b      	lsrs	r3, r3, #8
 800c4b4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c4b8:	431a      	orrs	r2, r3
 800c4ba:	4b3f      	ldr	r3, [pc, #252]	; (800c5b8 <MX_LWIP_Init+0x240>)
 800c4bc:	781b      	ldrb	r3, [r3, #0]
 800c4be:	0619      	lsls	r1, r3, #24
 800c4c0:	4b3d      	ldr	r3, [pc, #244]	; (800c5b8 <MX_LWIP_Init+0x240>)
 800c4c2:	785b      	ldrb	r3, [r3, #1]
 800c4c4:	041b      	lsls	r3, r3, #16
 800c4c6:	4319      	orrs	r1, r3
 800c4c8:	4b3b      	ldr	r3, [pc, #236]	; (800c5b8 <MX_LWIP_Init+0x240>)
 800c4ca:	789b      	ldrb	r3, [r3, #2]
 800c4cc:	021b      	lsls	r3, r3, #8
 800c4ce:	430b      	orrs	r3, r1
 800c4d0:	4939      	ldr	r1, [pc, #228]	; (800c5b8 <MX_LWIP_Init+0x240>)
 800c4d2:	78c9      	ldrb	r1, [r1, #3]
 800c4d4:	430b      	orrs	r3, r1
 800c4d6:	0e1b      	lsrs	r3, r3, #24
 800c4d8:	4313      	orrs	r3, r2
 800c4da:	4a3a      	ldr	r2, [pc, #232]	; (800c5c4 <MX_LWIP_Init+0x24c>)
 800c4dc:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800c4de:	4b37      	ldr	r3, [pc, #220]	; (800c5bc <MX_LWIP_Init+0x244>)
 800c4e0:	781b      	ldrb	r3, [r3, #0]
 800c4e2:	061a      	lsls	r2, r3, #24
 800c4e4:	4b35      	ldr	r3, [pc, #212]	; (800c5bc <MX_LWIP_Init+0x244>)
 800c4e6:	785b      	ldrb	r3, [r3, #1]
 800c4e8:	041b      	lsls	r3, r3, #16
 800c4ea:	431a      	orrs	r2, r3
 800c4ec:	4b33      	ldr	r3, [pc, #204]	; (800c5bc <MX_LWIP_Init+0x244>)
 800c4ee:	789b      	ldrb	r3, [r3, #2]
 800c4f0:	021b      	lsls	r3, r3, #8
 800c4f2:	4313      	orrs	r3, r2
 800c4f4:	4a31      	ldr	r2, [pc, #196]	; (800c5bc <MX_LWIP_Init+0x244>)
 800c4f6:	78d2      	ldrb	r2, [r2, #3]
 800c4f8:	4313      	orrs	r3, r2
 800c4fa:	061a      	lsls	r2, r3, #24
 800c4fc:	4b2f      	ldr	r3, [pc, #188]	; (800c5bc <MX_LWIP_Init+0x244>)
 800c4fe:	781b      	ldrb	r3, [r3, #0]
 800c500:	0619      	lsls	r1, r3, #24
 800c502:	4b2e      	ldr	r3, [pc, #184]	; (800c5bc <MX_LWIP_Init+0x244>)
 800c504:	785b      	ldrb	r3, [r3, #1]
 800c506:	041b      	lsls	r3, r3, #16
 800c508:	4319      	orrs	r1, r3
 800c50a:	4b2c      	ldr	r3, [pc, #176]	; (800c5bc <MX_LWIP_Init+0x244>)
 800c50c:	789b      	ldrb	r3, [r3, #2]
 800c50e:	021b      	lsls	r3, r3, #8
 800c510:	430b      	orrs	r3, r1
 800c512:	492a      	ldr	r1, [pc, #168]	; (800c5bc <MX_LWIP_Init+0x244>)
 800c514:	78c9      	ldrb	r1, [r1, #3]
 800c516:	430b      	orrs	r3, r1
 800c518:	021b      	lsls	r3, r3, #8
 800c51a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c51e:	431a      	orrs	r2, r3
 800c520:	4b26      	ldr	r3, [pc, #152]	; (800c5bc <MX_LWIP_Init+0x244>)
 800c522:	781b      	ldrb	r3, [r3, #0]
 800c524:	0619      	lsls	r1, r3, #24
 800c526:	4b25      	ldr	r3, [pc, #148]	; (800c5bc <MX_LWIP_Init+0x244>)
 800c528:	785b      	ldrb	r3, [r3, #1]
 800c52a:	041b      	lsls	r3, r3, #16
 800c52c:	4319      	orrs	r1, r3
 800c52e:	4b23      	ldr	r3, [pc, #140]	; (800c5bc <MX_LWIP_Init+0x244>)
 800c530:	789b      	ldrb	r3, [r3, #2]
 800c532:	021b      	lsls	r3, r3, #8
 800c534:	430b      	orrs	r3, r1
 800c536:	4921      	ldr	r1, [pc, #132]	; (800c5bc <MX_LWIP_Init+0x244>)
 800c538:	78c9      	ldrb	r1, [r1, #3]
 800c53a:	430b      	orrs	r3, r1
 800c53c:	0a1b      	lsrs	r3, r3, #8
 800c53e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c542:	431a      	orrs	r2, r3
 800c544:	4b1d      	ldr	r3, [pc, #116]	; (800c5bc <MX_LWIP_Init+0x244>)
 800c546:	781b      	ldrb	r3, [r3, #0]
 800c548:	0619      	lsls	r1, r3, #24
 800c54a:	4b1c      	ldr	r3, [pc, #112]	; (800c5bc <MX_LWIP_Init+0x244>)
 800c54c:	785b      	ldrb	r3, [r3, #1]
 800c54e:	041b      	lsls	r3, r3, #16
 800c550:	4319      	orrs	r1, r3
 800c552:	4b1a      	ldr	r3, [pc, #104]	; (800c5bc <MX_LWIP_Init+0x244>)
 800c554:	789b      	ldrb	r3, [r3, #2]
 800c556:	021b      	lsls	r3, r3, #8
 800c558:	430b      	orrs	r3, r1
 800c55a:	4918      	ldr	r1, [pc, #96]	; (800c5bc <MX_LWIP_Init+0x244>)
 800c55c:	78c9      	ldrb	r1, [r1, #3]
 800c55e:	430b      	orrs	r3, r1
 800c560:	0e1b      	lsrs	r3, r3, #24
 800c562:	4313      	orrs	r3, r2
 800c564:	4a18      	ldr	r2, [pc, #96]	; (800c5c8 <MX_LWIP_Init+0x250>)
 800c566:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800c568:	4b18      	ldr	r3, [pc, #96]	; (800c5cc <MX_LWIP_Init+0x254>)
 800c56a:	9302      	str	r3, [sp, #8]
 800c56c:	4b18      	ldr	r3, [pc, #96]	; (800c5d0 <MX_LWIP_Init+0x258>)
 800c56e:	9301      	str	r3, [sp, #4]
 800c570:	2300      	movs	r3, #0
 800c572:	9300      	str	r3, [sp, #0]
 800c574:	4b14      	ldr	r3, [pc, #80]	; (800c5c8 <MX_LWIP_Init+0x250>)
 800c576:	4a13      	ldr	r2, [pc, #76]	; (800c5c4 <MX_LWIP_Init+0x24c>)
 800c578:	4911      	ldr	r1, [pc, #68]	; (800c5c0 <MX_LWIP_Init+0x248>)
 800c57a:	4816      	ldr	r0, [pc, #88]	; (800c5d4 <MX_LWIP_Init+0x25c>)
 800c57c:	f001 f8ca 	bl	800d714 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800c580:	4814      	ldr	r0, [pc, #80]	; (800c5d4 <MX_LWIP_Init+0x25c>)
 800c582:	f001 fa79 	bl	800da78 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800c586:	4b13      	ldr	r3, [pc, #76]	; (800c5d4 <MX_LWIP_Init+0x25c>)
 800c588:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c58c:	089b      	lsrs	r3, r3, #2
 800c58e:	f003 0301 	and.w	r3, r3, #1
 800c592:	b2db      	uxtb	r3, r3
 800c594:	2b00      	cmp	r3, #0
 800c596:	d003      	beq.n	800c5a0 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800c598:	480e      	ldr	r0, [pc, #56]	; (800c5d4 <MX_LWIP_Init+0x25c>)
 800c59a:	f001 fa7d 	bl	800da98 <netif_set_up>
 800c59e:	e002      	b.n	800c5a6 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800c5a0:	480c      	ldr	r0, [pc, #48]	; (800c5d4 <MX_LWIP_Init+0x25c>)
 800c5a2:	f001 fae5 	bl	800db70 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800c5a6:	490c      	ldr	r1, [pc, #48]	; (800c5d8 <MX_LWIP_Init+0x260>)
 800c5a8:	480a      	ldr	r0, [pc, #40]	; (800c5d4 <MX_LWIP_Init+0x25c>)
 800c5aa:	f001 fb13 	bl	800dbd4 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800c5ae:	bf00      	nop
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}
 800c5b4:	20000d0c 	.word	0x20000d0c
 800c5b8:	20000d08 	.word	0x20000d08
 800c5bc:	20000d00 	.word	0x20000d00
 800c5c0:	20000d04 	.word	0x20000d04
 800c5c4:	20000d10 	.word	0x20000d10
 800c5c8:	20000d14 	.word	0x20000d14
 800c5cc:	08017705 	.word	0x08017705
 800c5d0:	0800cbb9 	.word	0x0800cbb9
 800c5d4:	200009ec 	.word	0x200009ec
 800c5d8:	0800cc25 	.word	0x0800cc25

0800c5dc <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b08e      	sub	sp, #56	; 0x38
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c5e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	601a      	str	r2, [r3, #0]
 800c5ec:	605a      	str	r2, [r3, #4]
 800c5ee:	609a      	str	r2, [r3, #8]
 800c5f0:	60da      	str	r2, [r3, #12]
 800c5f2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	4a59      	ldr	r2, [pc, #356]	; (800c760 <HAL_ETH_MspInit+0x184>)
 800c5fa:	4293      	cmp	r3, r2
 800c5fc:	f040 80ac 	bne.w	800c758 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800c600:	2300      	movs	r3, #0
 800c602:	623b      	str	r3, [r7, #32]
 800c604:	4b57      	ldr	r3, [pc, #348]	; (800c764 <HAL_ETH_MspInit+0x188>)
 800c606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c608:	4a56      	ldr	r2, [pc, #344]	; (800c764 <HAL_ETH_MspInit+0x188>)
 800c60a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c60e:	6313      	str	r3, [r2, #48]	; 0x30
 800c610:	4b54      	ldr	r3, [pc, #336]	; (800c764 <HAL_ETH_MspInit+0x188>)
 800c612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c618:	623b      	str	r3, [r7, #32]
 800c61a:	6a3b      	ldr	r3, [r7, #32]
 800c61c:	2300      	movs	r3, #0
 800c61e:	61fb      	str	r3, [r7, #28]
 800c620:	4b50      	ldr	r3, [pc, #320]	; (800c764 <HAL_ETH_MspInit+0x188>)
 800c622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c624:	4a4f      	ldr	r2, [pc, #316]	; (800c764 <HAL_ETH_MspInit+0x188>)
 800c626:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c62a:	6313      	str	r3, [r2, #48]	; 0x30
 800c62c:	4b4d      	ldr	r3, [pc, #308]	; (800c764 <HAL_ETH_MspInit+0x188>)
 800c62e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c630:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c634:	61fb      	str	r3, [r7, #28]
 800c636:	69fb      	ldr	r3, [r7, #28]
 800c638:	2300      	movs	r3, #0
 800c63a:	61bb      	str	r3, [r7, #24]
 800c63c:	4b49      	ldr	r3, [pc, #292]	; (800c764 <HAL_ETH_MspInit+0x188>)
 800c63e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c640:	4a48      	ldr	r2, [pc, #288]	; (800c764 <HAL_ETH_MspInit+0x188>)
 800c642:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c646:	6313      	str	r3, [r2, #48]	; 0x30
 800c648:	4b46      	ldr	r3, [pc, #280]	; (800c764 <HAL_ETH_MspInit+0x188>)
 800c64a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c64c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c650:	61bb      	str	r3, [r7, #24]
 800c652:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c654:	2300      	movs	r3, #0
 800c656:	617b      	str	r3, [r7, #20]
 800c658:	4b42      	ldr	r3, [pc, #264]	; (800c764 <HAL_ETH_MspInit+0x188>)
 800c65a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c65c:	4a41      	ldr	r2, [pc, #260]	; (800c764 <HAL_ETH_MspInit+0x188>)
 800c65e:	f043 0304 	orr.w	r3, r3, #4
 800c662:	6313      	str	r3, [r2, #48]	; 0x30
 800c664:	4b3f      	ldr	r3, [pc, #252]	; (800c764 <HAL_ETH_MspInit+0x188>)
 800c666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c668:	f003 0304 	and.w	r3, r3, #4
 800c66c:	617b      	str	r3, [r7, #20]
 800c66e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c670:	2300      	movs	r3, #0
 800c672:	613b      	str	r3, [r7, #16]
 800c674:	4b3b      	ldr	r3, [pc, #236]	; (800c764 <HAL_ETH_MspInit+0x188>)
 800c676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c678:	4a3a      	ldr	r2, [pc, #232]	; (800c764 <HAL_ETH_MspInit+0x188>)
 800c67a:	f043 0301 	orr.w	r3, r3, #1
 800c67e:	6313      	str	r3, [r2, #48]	; 0x30
 800c680:	4b38      	ldr	r3, [pc, #224]	; (800c764 <HAL_ETH_MspInit+0x188>)
 800c682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c684:	f003 0301 	and.w	r3, r3, #1
 800c688:	613b      	str	r3, [r7, #16]
 800c68a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c68c:	2300      	movs	r3, #0
 800c68e:	60fb      	str	r3, [r7, #12]
 800c690:	4b34      	ldr	r3, [pc, #208]	; (800c764 <HAL_ETH_MspInit+0x188>)
 800c692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c694:	4a33      	ldr	r2, [pc, #204]	; (800c764 <HAL_ETH_MspInit+0x188>)
 800c696:	f043 0302 	orr.w	r3, r3, #2
 800c69a:	6313      	str	r3, [r2, #48]	; 0x30
 800c69c:	4b31      	ldr	r3, [pc, #196]	; (800c764 <HAL_ETH_MspInit+0x188>)
 800c69e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6a0:	f003 0302 	and.w	r3, r3, #2
 800c6a4:	60fb      	str	r3, [r7, #12]
 800c6a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	60bb      	str	r3, [r7, #8]
 800c6ac:	4b2d      	ldr	r3, [pc, #180]	; (800c764 <HAL_ETH_MspInit+0x188>)
 800c6ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6b0:	4a2c      	ldr	r2, [pc, #176]	; (800c764 <HAL_ETH_MspInit+0x188>)
 800c6b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6b6:	6313      	str	r3, [r2, #48]	; 0x30
 800c6b8:	4b2a      	ldr	r3, [pc, #168]	; (800c764 <HAL_ETH_MspInit+0x188>)
 800c6ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6c0:	60bb      	str	r3, [r7, #8]
 800c6c2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800c6c4:	2332      	movs	r3, #50	; 0x32
 800c6c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c6c8:	2302      	movs	r3, #2
 800c6ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c6d0:	2303      	movs	r3, #3
 800c6d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c6d4:	230b      	movs	r3, #11
 800c6d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c6d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c6dc:	4619      	mov	r1, r3
 800c6de:	4822      	ldr	r0, [pc, #136]	; (800c768 <HAL_ETH_MspInit+0x18c>)
 800c6e0:	f7f9 ffd4 	bl	800668c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800c6e4:	2386      	movs	r3, #134	; 0x86
 800c6e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c6e8:	2302      	movs	r3, #2
 800c6ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c6f0:	2303      	movs	r3, #3
 800c6f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c6f4:	230b      	movs	r3, #11
 800c6f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c6f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c6fc:	4619      	mov	r1, r3
 800c6fe:	481b      	ldr	r0, [pc, #108]	; (800c76c <HAL_ETH_MspInit+0x190>)
 800c700:	f7f9 ffc4 	bl	800668c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800c704:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c708:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c70a:	2302      	movs	r3, #2
 800c70c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c70e:	2300      	movs	r3, #0
 800c710:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c712:	2303      	movs	r3, #3
 800c714:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c716:	230b      	movs	r3, #11
 800c718:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800c71a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c71e:	4619      	mov	r1, r3
 800c720:	4813      	ldr	r0, [pc, #76]	; (800c770 <HAL_ETH_MspInit+0x194>)
 800c722:	f7f9 ffb3 	bl	800668c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800c726:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c72a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c72c:	2302      	movs	r3, #2
 800c72e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c730:	2300      	movs	r3, #0
 800c732:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c734:	2303      	movs	r3, #3
 800c736:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c738:	230b      	movs	r3, #11
 800c73a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c73c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c740:	4619      	mov	r1, r3
 800c742:	480c      	ldr	r0, [pc, #48]	; (800c774 <HAL_ETH_MspInit+0x198>)
 800c744:	f7f9 ffa2 	bl	800668c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 800c748:	2200      	movs	r2, #0
 800c74a:	2100      	movs	r1, #0
 800c74c:	203d      	movs	r0, #61	; 0x3d
 800c74e:	f7f8 fb5d 	bl	8004e0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800c752:	203d      	movs	r0, #61	; 0x3d
 800c754:	f7f8 fb86 	bl	8004e64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800c758:	bf00      	nop
 800c75a:	3738      	adds	r7, #56	; 0x38
 800c75c:	46bd      	mov	sp, r7
 800c75e:	bd80      	pop	{r7, pc}
 800c760:	40028000 	.word	0x40028000
 800c764:	40023800 	.word	0x40023800
 800c768:	40020800 	.word	0x40020800
 800c76c:	40020000 	.word	0x40020000
 800c770:	40020400 	.word	0x40020400
 800c774:	40021800 	.word	0x40021800

0800c778 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b086      	sub	sp, #24
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800c780:	2300      	movs	r3, #0
 800c782:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800c784:	4b4d      	ldr	r3, [pc, #308]	; (800c8bc <low_level_init+0x144>)
 800c786:	4a4e      	ldr	r2, [pc, #312]	; (800c8c0 <low_level_init+0x148>)
 800c788:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800c78a:	4b4c      	ldr	r3, [pc, #304]	; (800c8bc <low_level_init+0x144>)
 800c78c:	2201      	movs	r2, #1
 800c78e:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800c790:	4b4a      	ldr	r3, [pc, #296]	; (800c8bc <low_level_init+0x144>)
 800c792:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c796:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800c798:	4b48      	ldr	r3, [pc, #288]	; (800c8bc <low_level_init+0x144>)
 800c79a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c79e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800c7a0:	4b46      	ldr	r3, [pc, #280]	; (800c8bc <low_level_init+0x144>)
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800c7aa:	2380      	movs	r3, #128	; 0x80
 800c7ac:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800c7ae:	23e1      	movs	r3, #225	; 0xe1
 800c7b0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800c7be:	4a3f      	ldr	r2, [pc, #252]	; (800c8bc <low_level_init+0x144>)
 800c7c0:	f107 0308 	add.w	r3, r7, #8
 800c7c4:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800c7c6:	4b3d      	ldr	r3, [pc, #244]	; (800c8bc <low_level_init+0x144>)
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800c7cc:	4b3b      	ldr	r3, [pc, #236]	; (800c8bc <low_level_init+0x144>)
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800c7d2:	4b3a      	ldr	r3, [pc, #232]	; (800c8bc <low_level_init+0x144>)
 800c7d4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800c7d8:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800c7da:	4838      	ldr	r0, [pc, #224]	; (800c8bc <low_level_init+0x144>)
 800c7dc:	f7f8 fb66 	bl	8004eac <HAL_ETH_Init>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 800c7e4:	7dfb      	ldrb	r3, [r7, #23]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d108      	bne.n	800c7fc <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c7f0:	f043 0304 	orr.w	r3, r3, #4
 800c7f4:	b2da      	uxtb	r2, r3
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800c7fc:	2304      	movs	r3, #4
 800c7fe:	4a31      	ldr	r2, [pc, #196]	; (800c8c4 <low_level_init+0x14c>)
 800c800:	4931      	ldr	r1, [pc, #196]	; (800c8c8 <low_level_init+0x150>)
 800c802:	482e      	ldr	r0, [pc, #184]	; (800c8bc <low_level_init+0x144>)
 800c804:	f7f8 fd3e 	bl	8005284 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800c808:	2304      	movs	r3, #4
 800c80a:	4a30      	ldr	r2, [pc, #192]	; (800c8cc <low_level_init+0x154>)
 800c80c:	4930      	ldr	r1, [pc, #192]	; (800c8d0 <low_level_init+0x158>)
 800c80e:	482b      	ldr	r0, [pc, #172]	; (800c8bc <low_level_init+0x144>)
 800c810:	f7f8 fda1 	bl	8005356 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2206      	movs	r2, #6
 800c818:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800c81c:	4b27      	ldr	r3, [pc, #156]	; (800c8bc <low_level_init+0x144>)
 800c81e:	695b      	ldr	r3, [r3, #20]
 800c820:	781a      	ldrb	r2, [r3, #0]
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800c828:	4b24      	ldr	r3, [pc, #144]	; (800c8bc <low_level_init+0x144>)
 800c82a:	695b      	ldr	r3, [r3, #20]
 800c82c:	785a      	ldrb	r2, [r3, #1]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800c834:	4b21      	ldr	r3, [pc, #132]	; (800c8bc <low_level_init+0x144>)
 800c836:	695b      	ldr	r3, [r3, #20]
 800c838:	789a      	ldrb	r2, [r3, #2]
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800c840:	4b1e      	ldr	r3, [pc, #120]	; (800c8bc <low_level_init+0x144>)
 800c842:	695b      	ldr	r3, [r3, #20]
 800c844:	78da      	ldrb	r2, [r3, #3]
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800c84c:	4b1b      	ldr	r3, [pc, #108]	; (800c8bc <low_level_init+0x144>)
 800c84e:	695b      	ldr	r3, [r3, #20]
 800c850:	791a      	ldrb	r2, [r3, #4]
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800c858:	4b18      	ldr	r3, [pc, #96]	; (800c8bc <low_level_init+0x144>)
 800c85a:	695b      	ldr	r3, [r3, #20]
 800c85c:	795a      	ldrb	r2, [r3, #5]
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800c86a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c872:	f043 030a 	orr.w	r3, r3, #10
 800c876:	b2da      	uxtb	r2, r3
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800c87e:	480f      	ldr	r0, [pc, #60]	; (800c8bc <low_level_init+0x144>)
 800c880:	f7f9 f8b0 	bl	80059e4 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800c884:	f107 0310 	add.w	r3, r7, #16
 800c888:	461a      	mov	r2, r3
 800c88a:	211d      	movs	r1, #29
 800c88c:	480b      	ldr	r0, [pc, #44]	; (800c8bc <low_level_init+0x144>)
 800c88e:	f7f8 ffc3 	bl	8005818 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800c892:	693b      	ldr	r3, [r7, #16]
 800c894:	f043 030b 	orr.w	r3, r3, #11
 800c898:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800c89a:	693b      	ldr	r3, [r7, #16]
 800c89c:	461a      	mov	r2, r3
 800c89e:	211d      	movs	r1, #29
 800c8a0:	4806      	ldr	r0, [pc, #24]	; (800c8bc <low_level_init+0x144>)
 800c8a2:	f7f9 f82d 	bl	8005900 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800c8a6:	f107 0310 	add.w	r3, r7, #16
 800c8aa:	461a      	mov	r2, r3
 800c8ac:	211d      	movs	r1, #29
 800c8ae:	4803      	ldr	r0, [pc, #12]	; (800c8bc <low_level_init+0x144>)
 800c8b0:	f7f8 ffb2 	bl	8005818 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800c8b4:	bf00      	nop
 800c8b6:	3718      	adds	r7, #24
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}
 800c8bc:	200025e8 	.word	0x200025e8
 800c8c0:	40028000 	.word	0x40028000
 800c8c4:	20002630 	.word	0x20002630
 800c8c8:	20000d18 	.word	0x20000d18
 800c8cc:	20000d98 	.word	0x20000d98
 800c8d0:	20002568 	.word	0x20002568

0800c8d4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b08a      	sub	sp, #40	; 0x28
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
 800c8dc:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800c8de:	4b4b      	ldr	r3, [pc, #300]	; (800ca0c <low_level_output+0x138>)
 800c8e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8e2:	689b      	ldr	r3, [r3, #8]
 800c8e4:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800c8f6:	4b45      	ldr	r3, [pc, #276]	; (800ca0c <low_level_output+0x138>)
 800c8f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8fa:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	623b      	str	r3, [r7, #32]
 800c904:	e05a      	b.n	800c9bc <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800c906:	69bb      	ldr	r3, [r7, #24]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	da03      	bge.n	800c916 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800c90e:	23f8      	movs	r3, #248	; 0xf8
 800c910:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800c914:	e05c      	b.n	800c9d0 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800c916:	6a3b      	ldr	r3, [r7, #32]
 800c918:	895b      	ldrh	r3, [r3, #10]
 800c91a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800c91c:	2300      	movs	r3, #0
 800c91e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800c920:	e02f      	b.n	800c982 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800c922:	69fa      	ldr	r2, [r7, #28]
 800c924:	693b      	ldr	r3, [r7, #16]
 800c926:	18d0      	adds	r0, r2, r3
 800c928:	6a3b      	ldr	r3, [r7, #32]
 800c92a:	685a      	ldr	r2, [r3, #4]
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	18d1      	adds	r1, r2, r3
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800c936:	3304      	adds	r3, #4
 800c938:	461a      	mov	r2, r3
 800c93a:	f00b fa5d 	bl	8017df8 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800c93e:	69bb      	ldr	r3, [r7, #24]
 800c940:	68db      	ldr	r3, [r3, #12]
 800c942:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800c944:	69bb      	ldr	r3, [r7, #24]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	da03      	bge.n	800c954 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800c94c:	23f8      	movs	r3, #248	; 0xf8
 800c94e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800c952:	e03d      	b.n	800c9d0 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800c954:	69bb      	ldr	r3, [r7, #24]
 800c956:	689b      	ldr	r3, [r3, #8]
 800c958:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800c95a:	693a      	ldr	r2, [r7, #16]
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	4413      	add	r3, r2
 800c960:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800c964:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800c966:	68ba      	ldr	r2, [r7, #8]
 800c968:	693b      	ldr	r3, [r7, #16]
 800c96a:	1ad3      	subs	r3, r2, r3
 800c96c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800c970:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800c972:	697a      	ldr	r2, [r7, #20]
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	1ad3      	subs	r3, r2, r3
 800c978:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800c97c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800c97e:	2300      	movs	r3, #0
 800c980:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800c982:	68fa      	ldr	r2, [r7, #12]
 800c984:	693b      	ldr	r3, [r7, #16]
 800c986:	4413      	add	r3, r2
 800c988:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800c98c:	4293      	cmp	r3, r2
 800c98e:	d8c8      	bhi.n	800c922 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800c990:	69fa      	ldr	r2, [r7, #28]
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	18d0      	adds	r0, r2, r3
 800c996:	6a3b      	ldr	r3, [r7, #32]
 800c998:	685a      	ldr	r2, [r3, #4]
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	4413      	add	r3, r2
 800c99e:	68fa      	ldr	r2, [r7, #12]
 800c9a0:	4619      	mov	r1, r3
 800c9a2:	f00b fa29 	bl	8017df8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800c9a6:	693a      	ldr	r2, [r7, #16]
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	4413      	add	r3, r2
 800c9ac:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800c9ae:	697a      	ldr	r2, [r7, #20]
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	4413      	add	r3, r2
 800c9b4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800c9b6:	6a3b      	ldr	r3, [r7, #32]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	623b      	str	r3, [r7, #32]
 800c9bc:	6a3b      	ldr	r3, [r7, #32]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d1a1      	bne.n	800c906 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800c9c2:	6979      	ldr	r1, [r7, #20]
 800c9c4:	4811      	ldr	r0, [pc, #68]	; (800ca0c <low_level_output+0x138>)
 800c9c6:	f7f8 fd33 	bl	8005430 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800c9d0:	4b0e      	ldr	r3, [pc, #56]	; (800ca0c <low_level_output+0x138>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9d8:	3314      	adds	r3, #20
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	f003 0320 	and.w	r3, r3, #32
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d00d      	beq.n	800ca00 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800c9e4:	4b09      	ldr	r3, [pc, #36]	; (800ca0c <low_level_output+0x138>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9ec:	3314      	adds	r3, #20
 800c9ee:	2220      	movs	r2, #32
 800c9f0:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800c9f2:	4b06      	ldr	r3, [pc, #24]	; (800ca0c <low_level_output+0x138>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9fa:	3304      	adds	r3, #4
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800ca00:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ca04:	4618      	mov	r0, r3
 800ca06:	3728      	adds	r7, #40	; 0x28
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}
 800ca0c:	200025e8 	.word	0x200025e8

0800ca10 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b08c      	sub	sp, #48	; 0x30
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800ca18:	2300      	movs	r3, #0
 800ca1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800ca20:	2300      	movs	r3, #0
 800ca22:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800ca24:	2300      	movs	r3, #0
 800ca26:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800ca30:	2300      	movs	r3, #0
 800ca32:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 800ca34:	484f      	ldr	r0, [pc, #316]	; (800cb74 <low_level_input+0x164>)
 800ca36:	f7f8 fde5 	bl	8005604 <HAL_ETH_GetReceivedFrame>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d001      	beq.n	800ca44 <low_level_input+0x34>

    return NULL;
 800ca40:	2300      	movs	r3, #0
 800ca42:	e092      	b.n	800cb6a <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800ca44:	4b4b      	ldr	r3, [pc, #300]	; (800cb74 <low_level_input+0x164>)
 800ca46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca48:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800ca4a:	4b4a      	ldr	r3, [pc, #296]	; (800cb74 <low_level_input+0x164>)
 800ca4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca4e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800ca50:	89fb      	ldrh	r3, [r7, #14]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d007      	beq.n	800ca66 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800ca56:	89fb      	ldrh	r3, [r7, #14]
 800ca58:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800ca5c:	4619      	mov	r1, r3
 800ca5e:	2000      	movs	r0, #0
 800ca60:	f001 f954 	bl	800dd0c <pbuf_alloc>
 800ca64:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800ca66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d04b      	beq.n	800cb04 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800ca6c:	4b41      	ldr	r3, [pc, #260]	; (800cb74 <low_level_input+0x164>)
 800ca6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca70:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800ca72:	2300      	movs	r3, #0
 800ca74:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800ca76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca78:	62bb      	str	r3, [r7, #40]	; 0x28
 800ca7a:	e040      	b.n	800cafe <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800ca7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca7e:	895b      	ldrh	r3, [r3, #10]
 800ca80:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800ca82:	2300      	movs	r3, #0
 800ca84:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800ca86:	e021      	b.n	800cacc <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800ca88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca8a:	685a      	ldr	r2, [r3, #4]
 800ca8c:	69bb      	ldr	r3, [r7, #24]
 800ca8e:	18d0      	adds	r0, r2, r3
 800ca90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca92:	69fb      	ldr	r3, [r7, #28]
 800ca94:	18d1      	adds	r1, r2, r3
 800ca96:	69fb      	ldr	r3, [r7, #28]
 800ca98:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800ca9c:	3304      	adds	r3, #4
 800ca9e:	461a      	mov	r2, r3
 800caa0:	f00b f9aa 	bl	8017df8 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800caa4:	6a3b      	ldr	r3, [r7, #32]
 800caa6:	68db      	ldr	r3, [r3, #12]
 800caa8:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800caaa:	6a3b      	ldr	r3, [r7, #32]
 800caac:	689b      	ldr	r3, [r3, #8]
 800caae:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800cab0:	69fa      	ldr	r2, [r7, #28]
 800cab2:	697b      	ldr	r3, [r7, #20]
 800cab4:	4413      	add	r3, r2
 800cab6:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800caba:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800cabc:	69ba      	ldr	r2, [r7, #24]
 800cabe:	69fb      	ldr	r3, [r7, #28]
 800cac0:	1ad3      	subs	r3, r2, r3
 800cac2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800cac6:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800cac8:	2300      	movs	r3, #0
 800caca:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800cacc:	697a      	ldr	r2, [r7, #20]
 800cace:	69fb      	ldr	r3, [r7, #28]
 800cad0:	4413      	add	r3, r2
 800cad2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800cad6:	4293      	cmp	r3, r2
 800cad8:	d8d6      	bhi.n	800ca88 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800cada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cadc:	685a      	ldr	r2, [r3, #4]
 800cade:	69bb      	ldr	r3, [r7, #24]
 800cae0:	18d0      	adds	r0, r2, r3
 800cae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cae4:	69fb      	ldr	r3, [r7, #28]
 800cae6:	4413      	add	r3, r2
 800cae8:	697a      	ldr	r2, [r7, #20]
 800caea:	4619      	mov	r1, r3
 800caec:	f00b f984 	bl	8017df8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800caf0:	69fa      	ldr	r2, [r7, #28]
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	4413      	add	r3, r2
 800caf6:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800caf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	62bb      	str	r3, [r7, #40]	; 0x28
 800cafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d1bb      	bne.n	800ca7c <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800cb04:	4b1b      	ldr	r3, [pc, #108]	; (800cb74 <low_level_input+0x164>)
 800cb06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb08:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	613b      	str	r3, [r7, #16]
 800cb0e:	e00b      	b.n	800cb28 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800cb10:	6a3b      	ldr	r3, [r7, #32]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800cb18:	6a3b      	ldr	r3, [r7, #32]
 800cb1a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800cb1c:	6a3b      	ldr	r3, [r7, #32]
 800cb1e:	68db      	ldr	r3, [r3, #12]
 800cb20:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800cb22:	693b      	ldr	r3, [r7, #16]
 800cb24:	3301      	adds	r3, #1
 800cb26:	613b      	str	r3, [r7, #16]
 800cb28:	4b12      	ldr	r3, [pc, #72]	; (800cb74 <low_level_input+0x164>)
 800cb2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb2c:	693a      	ldr	r2, [r7, #16]
 800cb2e:	429a      	cmp	r2, r3
 800cb30:	d3ee      	bcc.n	800cb10 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800cb32:	4b10      	ldr	r3, [pc, #64]	; (800cb74 <low_level_input+0x164>)
 800cb34:	2200      	movs	r2, #0
 800cb36:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800cb38:	4b0e      	ldr	r3, [pc, #56]	; (800cb74 <low_level_input+0x164>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb40:	3314      	adds	r3, #20
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d00d      	beq.n	800cb68 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800cb4c:	4b09      	ldr	r3, [pc, #36]	; (800cb74 <low_level_input+0x164>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb54:	3314      	adds	r3, #20
 800cb56:	2280      	movs	r2, #128	; 0x80
 800cb58:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800cb5a:	4b06      	ldr	r3, [pc, #24]	; (800cb74 <low_level_input+0x164>)
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb62:	3308      	adds	r3, #8
 800cb64:	2200      	movs	r2, #0
 800cb66:	601a      	str	r2, [r3, #0]
  }
  return p;
 800cb68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	3730      	adds	r7, #48	; 0x30
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}
 800cb72:	bf00      	nop
 800cb74:	200025e8 	.word	0x200025e8

0800cb78 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b084      	sub	sp, #16
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	f7ff ff45 	bl	800ca10 <low_level_input>
 800cb86:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d010      	beq.n	800cbb0 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	691b      	ldr	r3, [r3, #16]
 800cb92:	6879      	ldr	r1, [r7, #4]
 800cb94:	68f8      	ldr	r0, [r7, #12]
 800cb96:	4798      	blx	r3
 800cb98:	4603      	mov	r3, r0
 800cb9a:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 800cb9c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d006      	beq.n	800cbb2 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800cba4:	68f8      	ldr	r0, [r7, #12]
 800cba6:	f001 fb95 	bl	800e2d4 <pbuf_free>
    p = NULL;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	60fb      	str	r3, [r7, #12]
 800cbae:	e000      	b.n	800cbb2 <ethernetif_input+0x3a>
  if (p == NULL) return;
 800cbb0:	bf00      	nop
  }
}
 800cbb2:	3710      	adds	r7, #16
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}

0800cbb8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b082      	sub	sp, #8
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d106      	bne.n	800cbd4 <ethernetif_init+0x1c>
 800cbc6:	4b0e      	ldr	r3, [pc, #56]	; (800cc00 <ethernetif_init+0x48>)
 800cbc8:	f240 2217 	movw	r2, #535	; 0x217
 800cbcc:	490d      	ldr	r1, [pc, #52]	; (800cc04 <ethernetif_init+0x4c>)
 800cbce:	480e      	ldr	r0, [pc, #56]	; (800cc08 <ethernetif_init+0x50>)
 800cbd0:	f00b f9ec 	bl	8017fac <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2273      	movs	r2, #115	; 0x73
 800cbd8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2274      	movs	r2, #116	; 0x74
 800cbe0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	4a09      	ldr	r2, [pc, #36]	; (800cc0c <ethernetif_init+0x54>)
 800cbe8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	4a08      	ldr	r2, [pc, #32]	; (800cc10 <ethernetif_init+0x58>)
 800cbee:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800cbf0:	6878      	ldr	r0, [r7, #4]
 800cbf2:	f7ff fdc1 	bl	800c778 <low_level_init>

  return ERR_OK;
 800cbf6:	2300      	movs	r3, #0
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	3708      	adds	r7, #8
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}
 800cc00:	0801b188 	.word	0x0801b188
 800cc04:	0801b1a4 	.word	0x0801b1a4
 800cc08:	0801b1b4 	.word	0x0801b1b4
 800cc0c:	08015aa5 	.word	0x08015aa5
 800cc10:	0800c8d5 	.word	0x0800c8d5

0800cc14 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800cc18:	f7f7 ffd8 	bl	8004bcc <HAL_GetTick>
 800cc1c:	4603      	mov	r3, r0
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	bd80      	pop	{r7, pc}
	...

0800cc24 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b084      	sub	sp, #16
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800cc30:	2300      	movs	r3, #0
 800cc32:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cc3a:	089b      	lsrs	r3, r3, #2
 800cc3c:	f003 0301 	and.w	r3, r3, #1
 800cc40:	b2db      	uxtb	r3, r3
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d079      	beq.n	800cd3a <ethernetif_update_config+0x116>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800cc46:	4b42      	ldr	r3, [pc, #264]	; (800cd50 <ethernetif_update_config+0x12c>)
 800cc48:	685b      	ldr	r3, [r3, #4]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d03f      	beq.n	800ccce <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800cc4e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800cc52:	2100      	movs	r1, #0
 800cc54:	483e      	ldr	r0, [pc, #248]	; (800cd50 <ethernetif_update_config+0x12c>)
 800cc56:	f7f8 fe53 	bl	8005900 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800cc5a:	f7f7 ffb7 	bl	8004bcc <HAL_GetTick>
 800cc5e:	4603      	mov	r3, r0
 800cc60:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800cc62:	f107 0308 	add.w	r3, r7, #8
 800cc66:	461a      	mov	r2, r3
 800cc68:	2101      	movs	r1, #1
 800cc6a:	4839      	ldr	r0, [pc, #228]	; (800cd50 <ethernetif_update_config+0x12c>)
 800cc6c:	f7f8 fdd4 	bl	8005818 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800cc70:	f7f7 ffac 	bl	8004bcc <HAL_GetTick>
 800cc74:	4602      	mov	r2, r0
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	1ad3      	subs	r3, r2, r3
 800cc7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cc7e:	d828      	bhi.n	800ccd2 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	f003 0320 	and.w	r3, r3, #32
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d0eb      	beq.n	800cc62 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800cc8a:	f107 0308 	add.w	r3, r7, #8
 800cc8e:	461a      	mov	r2, r3
 800cc90:	2110      	movs	r1, #16
 800cc92:	482f      	ldr	r0, [pc, #188]	; (800cd50 <ethernetif_update_config+0x12c>)
 800cc94:	f7f8 fdc0 	bl	8005818 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800cc98:	68bb      	ldr	r3, [r7, #8]
 800cc9a:	f003 0304 	and.w	r3, r3, #4
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d004      	beq.n	800ccac <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800cca2:	4b2b      	ldr	r3, [pc, #172]	; (800cd50 <ethernetif_update_config+0x12c>)
 800cca4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cca8:	60da      	str	r2, [r3, #12]
 800ccaa:	e002      	b.n	800ccb2 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800ccac:	4b28      	ldr	r3, [pc, #160]	; (800cd50 <ethernetif_update_config+0x12c>)
 800ccae:	2200      	movs	r2, #0
 800ccb0:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	f003 0302 	and.w	r3, r3, #2
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d003      	beq.n	800ccc4 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800ccbc:	4b24      	ldr	r3, [pc, #144]	; (800cd50 <ethernetif_update_config+0x12c>)
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	609a      	str	r2, [r3, #8]
 800ccc2:	e032      	b.n	800cd2a <ethernetif_update_config+0x106>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800ccc4:	4b22      	ldr	r3, [pc, #136]	; (800cd50 <ethernetif_update_config+0x12c>)
 800ccc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ccca:	609a      	str	r2, [r3, #8]
 800cccc:	e02d      	b.n	800cd2a <ethernetif_update_config+0x106>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800ccce:	bf00      	nop
 800ccd0:	e000      	b.n	800ccd4 <ethernetif_update_config+0xb0>
          goto error;
 800ccd2:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
 800ccd4:	4b1e      	ldr	r3, [pc, #120]	; (800cd50 <ethernetif_update_config+0x12c>)
 800ccd6:	689b      	ldr	r3, [r3, #8]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d009      	beq.n	800ccf0 <ethernetif_update_config+0xcc>
 800ccdc:	4b1c      	ldr	r3, [pc, #112]	; (800cd50 <ethernetif_update_config+0x12c>)
 800ccde:	689b      	ldr	r3, [r3, #8]
 800cce0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cce4:	d004      	beq.n	800ccf0 <ethernetif_update_config+0xcc>
 800cce6:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 800ccea:	481a      	ldr	r0, [pc, #104]	; (800cd54 <ethernetif_update_config+0x130>)
 800ccec:	f7f5 fc45 	bl	800257a <assert_failed>
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 800ccf0:	4b17      	ldr	r3, [pc, #92]	; (800cd50 <ethernetif_update_config+0x12c>)
 800ccf2:	68db      	ldr	r3, [r3, #12]
 800ccf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ccf8:	d008      	beq.n	800cd0c <ethernetif_update_config+0xe8>
 800ccfa:	4b15      	ldr	r3, [pc, #84]	; (800cd50 <ethernetif_update_config+0x12c>)
 800ccfc:	68db      	ldr	r3, [r3, #12]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d004      	beq.n	800cd0c <ethernetif_update_config+0xe8>
 800cd02:	f240 21c1 	movw	r1, #705	; 0x2c1
 800cd06:	4813      	ldr	r0, [pc, #76]	; (800cd54 <ethernetif_update_config+0x130>)
 800cd08:	f7f5 fc37 	bl	800257a <assert_failed>

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800cd0c:	4b10      	ldr	r3, [pc, #64]	; (800cd50 <ethernetif_update_config+0x12c>)
 800cd0e:	68db      	ldr	r3, [r3, #12]
 800cd10:	08db      	lsrs	r3, r3, #3
 800cd12:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800cd14:	4b0e      	ldr	r3, [pc, #56]	; (800cd50 <ethernetif_update_config+0x12c>)
 800cd16:	689b      	ldr	r3, [r3, #8]
 800cd18:	085b      	lsrs	r3, r3, #1
 800cd1a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800cd1c:	4313      	orrs	r3, r2
 800cd1e:	b29b      	uxth	r3, r3
 800cd20:	461a      	mov	r2, r3
 800cd22:	2100      	movs	r1, #0
 800cd24:	480a      	ldr	r0, [pc, #40]	; (800cd50 <ethernetif_update_config+0x12c>)
 800cd26:	f7f8 fdeb 	bl	8005900 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800cd2a:	2100      	movs	r1, #0
 800cd2c:	4808      	ldr	r0, [pc, #32]	; (800cd50 <ethernetif_update_config+0x12c>)
 800cd2e:	f7f8 feb7 	bl	8005aa0 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800cd32:	4807      	ldr	r0, [pc, #28]	; (800cd50 <ethernetif_update_config+0x12c>)
 800cd34:	f7f8 fe56 	bl	80059e4 <HAL_ETH_Start>
 800cd38:	e002      	b.n	800cd40 <ethernetif_update_config+0x11c>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800cd3a:	4805      	ldr	r0, [pc, #20]	; (800cd50 <ethernetif_update_config+0x12c>)
 800cd3c:	f7f8 fe81 	bl	8005a42 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	f000 f809 	bl	800cd58 <ethernetif_notify_conn_changed>
}
 800cd46:	bf00      	nop
 800cd48:	3710      	adds	r7, #16
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd80      	pop	{r7, pc}
 800cd4e:	bf00      	nop
 800cd50:	200025e8 	.word	0x200025e8
 800cd54:	0801b188 	.word	0x0801b188

0800cd58 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800cd58:	b480      	push	{r7}
 800cd5a:	b083      	sub	sp, #12
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800cd60:	bf00      	nop
 800cd62:	370c      	adds	r7, #12
 800cd64:	46bd      	mov	sp, r7
 800cd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6a:	4770      	bx	lr

0800cd6c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800cd6c:	b480      	push	{r7}
 800cd6e:	b083      	sub	sp, #12
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	4603      	mov	r3, r0
 800cd74:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800cd76:	88fb      	ldrh	r3, [r7, #6]
 800cd78:	021b      	lsls	r3, r3, #8
 800cd7a:	b21a      	sxth	r2, r3
 800cd7c:	88fb      	ldrh	r3, [r7, #6]
 800cd7e:	0a1b      	lsrs	r3, r3, #8
 800cd80:	b29b      	uxth	r3, r3
 800cd82:	b21b      	sxth	r3, r3
 800cd84:	4313      	orrs	r3, r2
 800cd86:	b21b      	sxth	r3, r3
 800cd88:	b29b      	uxth	r3, r3
}
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	370c      	adds	r7, #12
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd94:	4770      	bx	lr

0800cd96 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800cd96:	b480      	push	{r7}
 800cd98:	b083      	sub	sp, #12
 800cd9a:	af00      	add	r7, sp, #0
 800cd9c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	061a      	lsls	r2, r3, #24
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	021b      	lsls	r3, r3, #8
 800cda6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cdaa:	431a      	orrs	r2, r3
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	0a1b      	lsrs	r3, r3, #8
 800cdb0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cdb4:	431a      	orrs	r2, r3
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	0e1b      	lsrs	r3, r3, #24
 800cdba:	4313      	orrs	r3, r2
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	370c      	adds	r7, #12
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc6:	4770      	bx	lr

0800cdc8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b082      	sub	sp, #8
 800cdcc:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800cdd2:	f000 f8d5 	bl	800cf80 <mem_init>
  memp_init();
 800cdd6:	f000 fbdb 	bl	800d590 <memp_init>
  pbuf_init();
  netif_init();
 800cdda:	f000 fc93 	bl	800d704 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800cdde:	f008 f85b 	bl	8014e98 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800cde2:	f001 fda7 	bl	800e934 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800cde6:	f007 ffcd 	bl	8014d84 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800cdea:	bf00      	nop
 800cdec:	3708      	adds	r7, #8
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}
	...

0800cdf4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800cdf4:	b480      	push	{r7}
 800cdf6:	b083      	sub	sp, #12
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800cdfe:	4b05      	ldr	r3, [pc, #20]	; (800ce14 <ptr_to_mem+0x20>)
 800ce00:	681a      	ldr	r2, [r3, #0]
 800ce02:	88fb      	ldrh	r3, [r7, #6]
 800ce04:	4413      	add	r3, r2
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	370c      	adds	r7, #12
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce10:	4770      	bx	lr
 800ce12:	bf00      	nop
 800ce14:	20000a24 	.word	0x20000a24

0800ce18 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ce18:	b480      	push	{r7}
 800ce1a:	b083      	sub	sp, #12
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ce20:	4b05      	ldr	r3, [pc, #20]	; (800ce38 <mem_to_ptr+0x20>)
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	687a      	ldr	r2, [r7, #4]
 800ce26:	1ad3      	subs	r3, r2, r3
 800ce28:	b29b      	uxth	r3, r3
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	370c      	adds	r7, #12
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce34:	4770      	bx	lr
 800ce36:	bf00      	nop
 800ce38:	20000a24 	.word	0x20000a24

0800ce3c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ce3c:	b590      	push	{r4, r7, lr}
 800ce3e:	b085      	sub	sp, #20
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ce44:	4b45      	ldr	r3, [pc, #276]	; (800cf5c <plug_holes+0x120>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	687a      	ldr	r2, [r7, #4]
 800ce4a:	429a      	cmp	r2, r3
 800ce4c:	d206      	bcs.n	800ce5c <plug_holes+0x20>
 800ce4e:	4b44      	ldr	r3, [pc, #272]	; (800cf60 <plug_holes+0x124>)
 800ce50:	f240 12df 	movw	r2, #479	; 0x1df
 800ce54:	4943      	ldr	r1, [pc, #268]	; (800cf64 <plug_holes+0x128>)
 800ce56:	4844      	ldr	r0, [pc, #272]	; (800cf68 <plug_holes+0x12c>)
 800ce58:	f00b f8a8 	bl	8017fac <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ce5c:	4b43      	ldr	r3, [pc, #268]	; (800cf6c <plug_holes+0x130>)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	687a      	ldr	r2, [r7, #4]
 800ce62:	429a      	cmp	r2, r3
 800ce64:	d306      	bcc.n	800ce74 <plug_holes+0x38>
 800ce66:	4b3e      	ldr	r3, [pc, #248]	; (800cf60 <plug_holes+0x124>)
 800ce68:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ce6c:	4940      	ldr	r1, [pc, #256]	; (800cf70 <plug_holes+0x134>)
 800ce6e:	483e      	ldr	r0, [pc, #248]	; (800cf68 <plug_holes+0x12c>)
 800ce70:	f00b f89c 	bl	8017fac <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	791b      	ldrb	r3, [r3, #4]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d006      	beq.n	800ce8a <plug_holes+0x4e>
 800ce7c:	4b38      	ldr	r3, [pc, #224]	; (800cf60 <plug_holes+0x124>)
 800ce7e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ce82:	493c      	ldr	r1, [pc, #240]	; (800cf74 <plug_holes+0x138>)
 800ce84:	4838      	ldr	r0, [pc, #224]	; (800cf68 <plug_holes+0x12c>)
 800ce86:	f00b f891 	bl	8017fac <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	881b      	ldrh	r3, [r3, #0]
 800ce8e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ce92:	d906      	bls.n	800cea2 <plug_holes+0x66>
 800ce94:	4b32      	ldr	r3, [pc, #200]	; (800cf60 <plug_holes+0x124>)
 800ce96:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800ce9a:	4937      	ldr	r1, [pc, #220]	; (800cf78 <plug_holes+0x13c>)
 800ce9c:	4832      	ldr	r0, [pc, #200]	; (800cf68 <plug_holes+0x12c>)
 800ce9e:	f00b f885 	bl	8017fac <iprintf>

  nmem = ptr_to_mem(mem->next);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	881b      	ldrh	r3, [r3, #0]
 800cea6:	4618      	mov	r0, r3
 800cea8:	f7ff ffa4 	bl	800cdf4 <ptr_to_mem>
 800ceac:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ceae:	687a      	ldr	r2, [r7, #4]
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	d024      	beq.n	800cf00 <plug_holes+0xc4>
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	791b      	ldrb	r3, [r3, #4]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d120      	bne.n	800cf00 <plug_holes+0xc4>
 800cebe:	4b2b      	ldr	r3, [pc, #172]	; (800cf6c <plug_holes+0x130>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	68fa      	ldr	r2, [r7, #12]
 800cec4:	429a      	cmp	r2, r3
 800cec6:	d01b      	beq.n	800cf00 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800cec8:	4b2c      	ldr	r3, [pc, #176]	; (800cf7c <plug_holes+0x140>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	68fa      	ldr	r2, [r7, #12]
 800cece:	429a      	cmp	r2, r3
 800ced0:	d102      	bne.n	800ced8 <plug_holes+0x9c>
      lfree = mem;
 800ced2:	4a2a      	ldr	r2, [pc, #168]	; (800cf7c <plug_holes+0x140>)
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	881a      	ldrh	r2, [r3, #0]
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	881b      	ldrh	r3, [r3, #0]
 800cee4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cee8:	d00a      	beq.n	800cf00 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	881b      	ldrh	r3, [r3, #0]
 800ceee:	4618      	mov	r0, r3
 800cef0:	f7ff ff80 	bl	800cdf4 <ptr_to_mem>
 800cef4:	4604      	mov	r4, r0
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f7ff ff8e 	bl	800ce18 <mem_to_ptr>
 800cefc:	4603      	mov	r3, r0
 800cefe:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	885b      	ldrh	r3, [r3, #2]
 800cf04:	4618      	mov	r0, r3
 800cf06:	f7ff ff75 	bl	800cdf4 <ptr_to_mem>
 800cf0a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800cf0c:	68ba      	ldr	r2, [r7, #8]
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	429a      	cmp	r2, r3
 800cf12:	d01f      	beq.n	800cf54 <plug_holes+0x118>
 800cf14:	68bb      	ldr	r3, [r7, #8]
 800cf16:	791b      	ldrb	r3, [r3, #4]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d11b      	bne.n	800cf54 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800cf1c:	4b17      	ldr	r3, [pc, #92]	; (800cf7c <plug_holes+0x140>)
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	687a      	ldr	r2, [r7, #4]
 800cf22:	429a      	cmp	r2, r3
 800cf24:	d102      	bne.n	800cf2c <plug_holes+0xf0>
      lfree = pmem;
 800cf26:	4a15      	ldr	r2, [pc, #84]	; (800cf7c <plug_holes+0x140>)
 800cf28:	68bb      	ldr	r3, [r7, #8]
 800cf2a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	881a      	ldrh	r2, [r3, #0]
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	881b      	ldrh	r3, [r3, #0]
 800cf38:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cf3c:	d00a      	beq.n	800cf54 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	881b      	ldrh	r3, [r3, #0]
 800cf42:	4618      	mov	r0, r3
 800cf44:	f7ff ff56 	bl	800cdf4 <ptr_to_mem>
 800cf48:	4604      	mov	r4, r0
 800cf4a:	68b8      	ldr	r0, [r7, #8]
 800cf4c:	f7ff ff64 	bl	800ce18 <mem_to_ptr>
 800cf50:	4603      	mov	r3, r0
 800cf52:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800cf54:	bf00      	nop
 800cf56:	3714      	adds	r7, #20
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd90      	pop	{r4, r7, pc}
 800cf5c:	20000a24 	.word	0x20000a24
 800cf60:	0801b1dc 	.word	0x0801b1dc
 800cf64:	0801b20c 	.word	0x0801b20c
 800cf68:	0801b224 	.word	0x0801b224
 800cf6c:	20000a28 	.word	0x20000a28
 800cf70:	0801b24c 	.word	0x0801b24c
 800cf74:	0801b268 	.word	0x0801b268
 800cf78:	0801b284 	.word	0x0801b284
 800cf7c:	20000a2c 	.word	0x20000a2c

0800cf80 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b082      	sub	sp, #8
 800cf84:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800cf86:	4b18      	ldr	r3, [pc, #96]	; (800cfe8 <mem_init+0x68>)
 800cf88:	3303      	adds	r3, #3
 800cf8a:	f023 0303 	bic.w	r3, r3, #3
 800cf8e:	461a      	mov	r2, r3
 800cf90:	4b16      	ldr	r3, [pc, #88]	; (800cfec <mem_init+0x6c>)
 800cf92:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800cf94:	4b15      	ldr	r3, [pc, #84]	; (800cfec <mem_init+0x6c>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800cfa0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800cfae:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800cfb2:	f7ff ff1f 	bl	800cdf4 <ptr_to_mem>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	4a0d      	ldr	r2, [pc, #52]	; (800cff0 <mem_init+0x70>)
 800cfba:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800cfbc:	4b0c      	ldr	r3, [pc, #48]	; (800cff0 <mem_init+0x70>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	2201      	movs	r2, #1
 800cfc2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800cfc4:	4b0a      	ldr	r3, [pc, #40]	; (800cff0 <mem_init+0x70>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800cfcc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800cfce:	4b08      	ldr	r3, [pc, #32]	; (800cff0 <mem_init+0x70>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800cfd6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800cfd8:	4b04      	ldr	r3, [pc, #16]	; (800cfec <mem_init+0x6c>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	4a05      	ldr	r2, [pc, #20]	; (800cff4 <mem_init+0x74>)
 800cfde:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800cfe0:	bf00      	nop
 800cfe2:	3708      	adds	r7, #8
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bd80      	pop	{r7, pc}
 800cfe8:	20003e18 	.word	0x20003e18
 800cfec:	20000a24 	.word	0x20000a24
 800cff0:	20000a28 	.word	0x20000a28
 800cff4:	20000a2c 	.word	0x20000a2c

0800cff8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b086      	sub	sp, #24
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d000:	6878      	ldr	r0, [r7, #4]
 800d002:	f7ff ff09 	bl	800ce18 <mem_to_ptr>
 800d006:	4603      	mov	r3, r0
 800d008:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	881b      	ldrh	r3, [r3, #0]
 800d00e:	4618      	mov	r0, r3
 800d010:	f7ff fef0 	bl	800cdf4 <ptr_to_mem>
 800d014:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	885b      	ldrh	r3, [r3, #2]
 800d01a:	4618      	mov	r0, r3
 800d01c:	f7ff feea 	bl	800cdf4 <ptr_to_mem>
 800d020:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	881b      	ldrh	r3, [r3, #0]
 800d026:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d02a:	d818      	bhi.n	800d05e <mem_link_valid+0x66>
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	885b      	ldrh	r3, [r3, #2]
 800d030:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d034:	d813      	bhi.n	800d05e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d03a:	8afa      	ldrh	r2, [r7, #22]
 800d03c:	429a      	cmp	r2, r3
 800d03e:	d004      	beq.n	800d04a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	881b      	ldrh	r3, [r3, #0]
 800d044:	8afa      	ldrh	r2, [r7, #22]
 800d046:	429a      	cmp	r2, r3
 800d048:	d109      	bne.n	800d05e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d04a:	4b08      	ldr	r3, [pc, #32]	; (800d06c <mem_link_valid+0x74>)
 800d04c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d04e:	693a      	ldr	r2, [r7, #16]
 800d050:	429a      	cmp	r2, r3
 800d052:	d006      	beq.n	800d062 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d054:	693b      	ldr	r3, [r7, #16]
 800d056:	885b      	ldrh	r3, [r3, #2]
 800d058:	8afa      	ldrh	r2, [r7, #22]
 800d05a:	429a      	cmp	r2, r3
 800d05c:	d001      	beq.n	800d062 <mem_link_valid+0x6a>
    return 0;
 800d05e:	2300      	movs	r3, #0
 800d060:	e000      	b.n	800d064 <mem_link_valid+0x6c>
  }
  return 1;
 800d062:	2301      	movs	r3, #1
}
 800d064:	4618      	mov	r0, r3
 800d066:	3718      	adds	r7, #24
 800d068:	46bd      	mov	sp, r7
 800d06a:	bd80      	pop	{r7, pc}
 800d06c:	20000a28 	.word	0x20000a28

0800d070 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b084      	sub	sp, #16
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d04c      	beq.n	800d118 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	f003 0303 	and.w	r3, r3, #3
 800d084:	2b00      	cmp	r3, #0
 800d086:	d007      	beq.n	800d098 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d088:	4b25      	ldr	r3, [pc, #148]	; (800d120 <mem_free+0xb0>)
 800d08a:	f240 2273 	movw	r2, #627	; 0x273
 800d08e:	4925      	ldr	r1, [pc, #148]	; (800d124 <mem_free+0xb4>)
 800d090:	4825      	ldr	r0, [pc, #148]	; (800d128 <mem_free+0xb8>)
 800d092:	f00a ff8b 	bl	8017fac <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800d096:	e040      	b.n	800d11a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	3b08      	subs	r3, #8
 800d09c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d09e:	4b23      	ldr	r3, [pc, #140]	; (800d12c <mem_free+0xbc>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	68fa      	ldr	r2, [r7, #12]
 800d0a4:	429a      	cmp	r2, r3
 800d0a6:	d306      	bcc.n	800d0b6 <mem_free+0x46>
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f103 020c 	add.w	r2, r3, #12
 800d0ae:	4b20      	ldr	r3, [pc, #128]	; (800d130 <mem_free+0xc0>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	429a      	cmp	r2, r3
 800d0b4:	d907      	bls.n	800d0c6 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d0b6:	4b1a      	ldr	r3, [pc, #104]	; (800d120 <mem_free+0xb0>)
 800d0b8:	f240 227f 	movw	r2, #639	; 0x27f
 800d0bc:	491d      	ldr	r1, [pc, #116]	; (800d134 <mem_free+0xc4>)
 800d0be:	481a      	ldr	r0, [pc, #104]	; (800d128 <mem_free+0xb8>)
 800d0c0:	f00a ff74 	bl	8017fac <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800d0c4:	e029      	b.n	800d11a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	791b      	ldrb	r3, [r3, #4]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d107      	bne.n	800d0de <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800d0ce:	4b14      	ldr	r3, [pc, #80]	; (800d120 <mem_free+0xb0>)
 800d0d0:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800d0d4:	4918      	ldr	r1, [pc, #96]	; (800d138 <mem_free+0xc8>)
 800d0d6:	4814      	ldr	r0, [pc, #80]	; (800d128 <mem_free+0xb8>)
 800d0d8:	f00a ff68 	bl	8017fac <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800d0dc:	e01d      	b.n	800d11a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800d0de:	68f8      	ldr	r0, [r7, #12]
 800d0e0:	f7ff ff8a 	bl	800cff8 <mem_link_valid>
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d107      	bne.n	800d0fa <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d0ea:	4b0d      	ldr	r3, [pc, #52]	; (800d120 <mem_free+0xb0>)
 800d0ec:	f240 2295 	movw	r2, #661	; 0x295
 800d0f0:	4912      	ldr	r1, [pc, #72]	; (800d13c <mem_free+0xcc>)
 800d0f2:	480d      	ldr	r0, [pc, #52]	; (800d128 <mem_free+0xb8>)
 800d0f4:	f00a ff5a 	bl	8017fac <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800d0f8:	e00f      	b.n	800d11a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d100:	4b0f      	ldr	r3, [pc, #60]	; (800d140 <mem_free+0xd0>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	68fa      	ldr	r2, [r7, #12]
 800d106:	429a      	cmp	r2, r3
 800d108:	d202      	bcs.n	800d110 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800d10a:	4a0d      	ldr	r2, [pc, #52]	; (800d140 <mem_free+0xd0>)
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800d110:	68f8      	ldr	r0, [r7, #12]
 800d112:	f7ff fe93 	bl	800ce3c <plug_holes>
 800d116:	e000      	b.n	800d11a <mem_free+0xaa>
    return;
 800d118:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800d11a:	3710      	adds	r7, #16
 800d11c:	46bd      	mov	sp, r7
 800d11e:	bd80      	pop	{r7, pc}
 800d120:	0801b1dc 	.word	0x0801b1dc
 800d124:	0801b2b0 	.word	0x0801b2b0
 800d128:	0801b224 	.word	0x0801b224
 800d12c:	20000a24 	.word	0x20000a24
 800d130:	20000a28 	.word	0x20000a28
 800d134:	0801b2d4 	.word	0x0801b2d4
 800d138:	0801b2f0 	.word	0x0801b2f0
 800d13c:	0801b318 	.word	0x0801b318
 800d140:	20000a2c 	.word	0x20000a2c

0800d144 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b088      	sub	sp, #32
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
 800d14c:	460b      	mov	r3, r1
 800d14e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d150:	887b      	ldrh	r3, [r7, #2]
 800d152:	3303      	adds	r3, #3
 800d154:	b29b      	uxth	r3, r3
 800d156:	f023 0303 	bic.w	r3, r3, #3
 800d15a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800d15c:	8bfb      	ldrh	r3, [r7, #30]
 800d15e:	2b0b      	cmp	r3, #11
 800d160:	d801      	bhi.n	800d166 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800d162:	230c      	movs	r3, #12
 800d164:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d166:	8bfb      	ldrh	r3, [r7, #30]
 800d168:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d16c:	d803      	bhi.n	800d176 <mem_trim+0x32>
 800d16e:	8bfa      	ldrh	r2, [r7, #30]
 800d170:	887b      	ldrh	r3, [r7, #2]
 800d172:	429a      	cmp	r2, r3
 800d174:	d201      	bcs.n	800d17a <mem_trim+0x36>
    return NULL;
 800d176:	2300      	movs	r3, #0
 800d178:	e0cc      	b.n	800d314 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800d17a:	4b68      	ldr	r3, [pc, #416]	; (800d31c <mem_trim+0x1d8>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	687a      	ldr	r2, [r7, #4]
 800d180:	429a      	cmp	r2, r3
 800d182:	d304      	bcc.n	800d18e <mem_trim+0x4a>
 800d184:	4b66      	ldr	r3, [pc, #408]	; (800d320 <mem_trim+0x1dc>)
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	687a      	ldr	r2, [r7, #4]
 800d18a:	429a      	cmp	r2, r3
 800d18c:	d306      	bcc.n	800d19c <mem_trim+0x58>
 800d18e:	4b65      	ldr	r3, [pc, #404]	; (800d324 <mem_trim+0x1e0>)
 800d190:	f240 22d1 	movw	r2, #721	; 0x2d1
 800d194:	4964      	ldr	r1, [pc, #400]	; (800d328 <mem_trim+0x1e4>)
 800d196:	4865      	ldr	r0, [pc, #404]	; (800d32c <mem_trim+0x1e8>)
 800d198:	f00a ff08 	bl	8017fac <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d19c:	4b5f      	ldr	r3, [pc, #380]	; (800d31c <mem_trim+0x1d8>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	687a      	ldr	r2, [r7, #4]
 800d1a2:	429a      	cmp	r2, r3
 800d1a4:	d304      	bcc.n	800d1b0 <mem_trim+0x6c>
 800d1a6:	4b5e      	ldr	r3, [pc, #376]	; (800d320 <mem_trim+0x1dc>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	687a      	ldr	r2, [r7, #4]
 800d1ac:	429a      	cmp	r2, r3
 800d1ae:	d301      	bcc.n	800d1b4 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	e0af      	b.n	800d314 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	3b08      	subs	r3, #8
 800d1b8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800d1ba:	69b8      	ldr	r0, [r7, #24]
 800d1bc:	f7ff fe2c 	bl	800ce18 <mem_to_ptr>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d1c4:	69bb      	ldr	r3, [r7, #24]
 800d1c6:	881a      	ldrh	r2, [r3, #0]
 800d1c8:	8afb      	ldrh	r3, [r7, #22]
 800d1ca:	1ad3      	subs	r3, r2, r3
 800d1cc:	b29b      	uxth	r3, r3
 800d1ce:	3b08      	subs	r3, #8
 800d1d0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800d1d2:	8bfa      	ldrh	r2, [r7, #30]
 800d1d4:	8abb      	ldrh	r3, [r7, #20]
 800d1d6:	429a      	cmp	r2, r3
 800d1d8:	d906      	bls.n	800d1e8 <mem_trim+0xa4>
 800d1da:	4b52      	ldr	r3, [pc, #328]	; (800d324 <mem_trim+0x1e0>)
 800d1dc:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800d1e0:	4953      	ldr	r1, [pc, #332]	; (800d330 <mem_trim+0x1ec>)
 800d1e2:	4852      	ldr	r0, [pc, #328]	; (800d32c <mem_trim+0x1e8>)
 800d1e4:	f00a fee2 	bl	8017fac <iprintf>
  if (newsize > size) {
 800d1e8:	8bfa      	ldrh	r2, [r7, #30]
 800d1ea:	8abb      	ldrh	r3, [r7, #20]
 800d1ec:	429a      	cmp	r2, r3
 800d1ee:	d901      	bls.n	800d1f4 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	e08f      	b.n	800d314 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800d1f4:	8bfa      	ldrh	r2, [r7, #30]
 800d1f6:	8abb      	ldrh	r3, [r7, #20]
 800d1f8:	429a      	cmp	r2, r3
 800d1fa:	d101      	bne.n	800d200 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	e089      	b.n	800d314 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800d200:	69bb      	ldr	r3, [r7, #24]
 800d202:	881b      	ldrh	r3, [r3, #0]
 800d204:	4618      	mov	r0, r3
 800d206:	f7ff fdf5 	bl	800cdf4 <ptr_to_mem>
 800d20a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800d20c:	693b      	ldr	r3, [r7, #16]
 800d20e:	791b      	ldrb	r3, [r3, #4]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d13f      	bne.n	800d294 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d214:	69bb      	ldr	r3, [r7, #24]
 800d216:	881b      	ldrh	r3, [r3, #0]
 800d218:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d21c:	d106      	bne.n	800d22c <mem_trim+0xe8>
 800d21e:	4b41      	ldr	r3, [pc, #260]	; (800d324 <mem_trim+0x1e0>)
 800d220:	f240 22f5 	movw	r2, #757	; 0x2f5
 800d224:	4943      	ldr	r1, [pc, #268]	; (800d334 <mem_trim+0x1f0>)
 800d226:	4841      	ldr	r0, [pc, #260]	; (800d32c <mem_trim+0x1e8>)
 800d228:	f00a fec0 	bl	8017fac <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800d22c:	693b      	ldr	r3, [r7, #16]
 800d22e:	881b      	ldrh	r3, [r3, #0]
 800d230:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d232:	8afa      	ldrh	r2, [r7, #22]
 800d234:	8bfb      	ldrh	r3, [r7, #30]
 800d236:	4413      	add	r3, r2
 800d238:	b29b      	uxth	r3, r3
 800d23a:	3308      	adds	r3, #8
 800d23c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800d23e:	4b3e      	ldr	r3, [pc, #248]	; (800d338 <mem_trim+0x1f4>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	693a      	ldr	r2, [r7, #16]
 800d244:	429a      	cmp	r2, r3
 800d246:	d106      	bne.n	800d256 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800d248:	89fb      	ldrh	r3, [r7, #14]
 800d24a:	4618      	mov	r0, r3
 800d24c:	f7ff fdd2 	bl	800cdf4 <ptr_to_mem>
 800d250:	4603      	mov	r3, r0
 800d252:	4a39      	ldr	r2, [pc, #228]	; (800d338 <mem_trim+0x1f4>)
 800d254:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800d256:	89fb      	ldrh	r3, [r7, #14]
 800d258:	4618      	mov	r0, r3
 800d25a:	f7ff fdcb 	bl	800cdf4 <ptr_to_mem>
 800d25e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800d260:	693b      	ldr	r3, [r7, #16]
 800d262:	2200      	movs	r2, #0
 800d264:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800d266:	693b      	ldr	r3, [r7, #16]
 800d268:	89ba      	ldrh	r2, [r7, #12]
 800d26a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800d26c:	693b      	ldr	r3, [r7, #16]
 800d26e:	8afa      	ldrh	r2, [r7, #22]
 800d270:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800d272:	69bb      	ldr	r3, [r7, #24]
 800d274:	89fa      	ldrh	r2, [r7, #14]
 800d276:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d278:	693b      	ldr	r3, [r7, #16]
 800d27a:	881b      	ldrh	r3, [r3, #0]
 800d27c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d280:	d047      	beq.n	800d312 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d282:	693b      	ldr	r3, [r7, #16]
 800d284:	881b      	ldrh	r3, [r3, #0]
 800d286:	4618      	mov	r0, r3
 800d288:	f7ff fdb4 	bl	800cdf4 <ptr_to_mem>
 800d28c:	4602      	mov	r2, r0
 800d28e:	89fb      	ldrh	r3, [r7, #14]
 800d290:	8053      	strh	r3, [r2, #2]
 800d292:	e03e      	b.n	800d312 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800d294:	8bfb      	ldrh	r3, [r7, #30]
 800d296:	f103 0214 	add.w	r2, r3, #20
 800d29a:	8abb      	ldrh	r3, [r7, #20]
 800d29c:	429a      	cmp	r2, r3
 800d29e:	d838      	bhi.n	800d312 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d2a0:	8afa      	ldrh	r2, [r7, #22]
 800d2a2:	8bfb      	ldrh	r3, [r7, #30]
 800d2a4:	4413      	add	r3, r2
 800d2a6:	b29b      	uxth	r3, r3
 800d2a8:	3308      	adds	r3, #8
 800d2aa:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d2ac:	69bb      	ldr	r3, [r7, #24]
 800d2ae:	881b      	ldrh	r3, [r3, #0]
 800d2b0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d2b4:	d106      	bne.n	800d2c4 <mem_trim+0x180>
 800d2b6:	4b1b      	ldr	r3, [pc, #108]	; (800d324 <mem_trim+0x1e0>)
 800d2b8:	f240 3216 	movw	r2, #790	; 0x316
 800d2bc:	491d      	ldr	r1, [pc, #116]	; (800d334 <mem_trim+0x1f0>)
 800d2be:	481b      	ldr	r0, [pc, #108]	; (800d32c <mem_trim+0x1e8>)
 800d2c0:	f00a fe74 	bl	8017fac <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800d2c4:	89fb      	ldrh	r3, [r7, #14]
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	f7ff fd94 	bl	800cdf4 <ptr_to_mem>
 800d2cc:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800d2ce:	4b1a      	ldr	r3, [pc, #104]	; (800d338 <mem_trim+0x1f4>)
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	693a      	ldr	r2, [r7, #16]
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d202      	bcs.n	800d2de <mem_trim+0x19a>
      lfree = mem2;
 800d2d8:	4a17      	ldr	r2, [pc, #92]	; (800d338 <mem_trim+0x1f4>)
 800d2da:	693b      	ldr	r3, [r7, #16]
 800d2dc:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800d2de:	693b      	ldr	r3, [r7, #16]
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800d2e4:	69bb      	ldr	r3, [r7, #24]
 800d2e6:	881a      	ldrh	r2, [r3, #0]
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800d2ec:	693b      	ldr	r3, [r7, #16]
 800d2ee:	8afa      	ldrh	r2, [r7, #22]
 800d2f0:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800d2f2:	69bb      	ldr	r3, [r7, #24]
 800d2f4:	89fa      	ldrh	r2, [r7, #14]
 800d2f6:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d2f8:	693b      	ldr	r3, [r7, #16]
 800d2fa:	881b      	ldrh	r3, [r3, #0]
 800d2fc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d300:	d007      	beq.n	800d312 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d302:	693b      	ldr	r3, [r7, #16]
 800d304:	881b      	ldrh	r3, [r3, #0]
 800d306:	4618      	mov	r0, r3
 800d308:	f7ff fd74 	bl	800cdf4 <ptr_to_mem>
 800d30c:	4602      	mov	r2, r0
 800d30e:	89fb      	ldrh	r3, [r7, #14]
 800d310:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800d312:	687b      	ldr	r3, [r7, #4]
}
 800d314:	4618      	mov	r0, r3
 800d316:	3720      	adds	r7, #32
 800d318:	46bd      	mov	sp, r7
 800d31a:	bd80      	pop	{r7, pc}
 800d31c:	20000a24 	.word	0x20000a24
 800d320:	20000a28 	.word	0x20000a28
 800d324:	0801b1dc 	.word	0x0801b1dc
 800d328:	0801b34c 	.word	0x0801b34c
 800d32c:	0801b224 	.word	0x0801b224
 800d330:	0801b364 	.word	0x0801b364
 800d334:	0801b384 	.word	0x0801b384
 800d338:	20000a2c 	.word	0x20000a2c

0800d33c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b088      	sub	sp, #32
 800d340:	af00      	add	r7, sp, #0
 800d342:	4603      	mov	r3, r0
 800d344:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800d346:	88fb      	ldrh	r3, [r7, #6]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d101      	bne.n	800d350 <mem_malloc+0x14>
    return NULL;
 800d34c:	2300      	movs	r3, #0
 800d34e:	e0d9      	b.n	800d504 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800d350:	88fb      	ldrh	r3, [r7, #6]
 800d352:	3303      	adds	r3, #3
 800d354:	b29b      	uxth	r3, r3
 800d356:	f023 0303 	bic.w	r3, r3, #3
 800d35a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800d35c:	8bbb      	ldrh	r3, [r7, #28]
 800d35e:	2b0b      	cmp	r3, #11
 800d360:	d801      	bhi.n	800d366 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800d362:	230c      	movs	r3, #12
 800d364:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d366:	8bbb      	ldrh	r3, [r7, #28]
 800d368:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d36c:	d803      	bhi.n	800d376 <mem_malloc+0x3a>
 800d36e:	8bba      	ldrh	r2, [r7, #28]
 800d370:	88fb      	ldrh	r3, [r7, #6]
 800d372:	429a      	cmp	r2, r3
 800d374:	d201      	bcs.n	800d37a <mem_malloc+0x3e>
    return NULL;
 800d376:	2300      	movs	r3, #0
 800d378:	e0c4      	b.n	800d504 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d37a:	4b64      	ldr	r3, [pc, #400]	; (800d50c <mem_malloc+0x1d0>)
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	4618      	mov	r0, r3
 800d380:	f7ff fd4a 	bl	800ce18 <mem_to_ptr>
 800d384:	4603      	mov	r3, r0
 800d386:	83fb      	strh	r3, [r7, #30]
 800d388:	e0b4      	b.n	800d4f4 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800d38a:	8bfb      	ldrh	r3, [r7, #30]
 800d38c:	4618      	mov	r0, r3
 800d38e:	f7ff fd31 	bl	800cdf4 <ptr_to_mem>
 800d392:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800d394:	697b      	ldr	r3, [r7, #20]
 800d396:	791b      	ldrb	r3, [r3, #4]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	f040 80a4 	bne.w	800d4e6 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d39e:	697b      	ldr	r3, [r7, #20]
 800d3a0:	881b      	ldrh	r3, [r3, #0]
 800d3a2:	461a      	mov	r2, r3
 800d3a4:	8bfb      	ldrh	r3, [r7, #30]
 800d3a6:	1ad3      	subs	r3, r2, r3
 800d3a8:	f1a3 0208 	sub.w	r2, r3, #8
 800d3ac:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800d3ae:	429a      	cmp	r2, r3
 800d3b0:	f0c0 8099 	bcc.w	800d4e6 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d3b4:	697b      	ldr	r3, [r7, #20]
 800d3b6:	881b      	ldrh	r3, [r3, #0]
 800d3b8:	461a      	mov	r2, r3
 800d3ba:	8bfb      	ldrh	r3, [r7, #30]
 800d3bc:	1ad3      	subs	r3, r2, r3
 800d3be:	f1a3 0208 	sub.w	r2, r3, #8
 800d3c2:	8bbb      	ldrh	r3, [r7, #28]
 800d3c4:	3314      	adds	r3, #20
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d333      	bcc.n	800d432 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d3ca:	8bfa      	ldrh	r2, [r7, #30]
 800d3cc:	8bbb      	ldrh	r3, [r7, #28]
 800d3ce:	4413      	add	r3, r2
 800d3d0:	b29b      	uxth	r3, r3
 800d3d2:	3308      	adds	r3, #8
 800d3d4:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d3d6:	8a7b      	ldrh	r3, [r7, #18]
 800d3d8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d3dc:	d106      	bne.n	800d3ec <mem_malloc+0xb0>
 800d3de:	4b4c      	ldr	r3, [pc, #304]	; (800d510 <mem_malloc+0x1d4>)
 800d3e0:	f240 3287 	movw	r2, #903	; 0x387
 800d3e4:	494b      	ldr	r1, [pc, #300]	; (800d514 <mem_malloc+0x1d8>)
 800d3e6:	484c      	ldr	r0, [pc, #304]	; (800d518 <mem_malloc+0x1dc>)
 800d3e8:	f00a fde0 	bl	8017fac <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d3ec:	8a7b      	ldrh	r3, [r7, #18]
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	f7ff fd00 	bl	800cdf4 <ptr_to_mem>
 800d3f4:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d3fc:	697b      	ldr	r3, [r7, #20]
 800d3fe:	881a      	ldrh	r2, [r3, #0]
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	8bfa      	ldrh	r2, [r7, #30]
 800d408:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d40a:	697b      	ldr	r3, [r7, #20]
 800d40c:	8a7a      	ldrh	r2, [r7, #18]
 800d40e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d410:	697b      	ldr	r3, [r7, #20]
 800d412:	2201      	movs	r2, #1
 800d414:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	881b      	ldrh	r3, [r3, #0]
 800d41a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d41e:	d00b      	beq.n	800d438 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	881b      	ldrh	r3, [r3, #0]
 800d424:	4618      	mov	r0, r3
 800d426:	f7ff fce5 	bl	800cdf4 <ptr_to_mem>
 800d42a:	4602      	mov	r2, r0
 800d42c:	8a7b      	ldrh	r3, [r7, #18]
 800d42e:	8053      	strh	r3, [r2, #2]
 800d430:	e002      	b.n	800d438 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d432:	697b      	ldr	r3, [r7, #20]
 800d434:	2201      	movs	r2, #1
 800d436:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d438:	4b34      	ldr	r3, [pc, #208]	; (800d50c <mem_malloc+0x1d0>)
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	697a      	ldr	r2, [r7, #20]
 800d43e:	429a      	cmp	r2, r3
 800d440:	d127      	bne.n	800d492 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800d442:	4b32      	ldr	r3, [pc, #200]	; (800d50c <mem_malloc+0x1d0>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d448:	e005      	b.n	800d456 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d44a:	69bb      	ldr	r3, [r7, #24]
 800d44c:	881b      	ldrh	r3, [r3, #0]
 800d44e:	4618      	mov	r0, r3
 800d450:	f7ff fcd0 	bl	800cdf4 <ptr_to_mem>
 800d454:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d456:	69bb      	ldr	r3, [r7, #24]
 800d458:	791b      	ldrb	r3, [r3, #4]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d004      	beq.n	800d468 <mem_malloc+0x12c>
 800d45e:	4b2f      	ldr	r3, [pc, #188]	; (800d51c <mem_malloc+0x1e0>)
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	69ba      	ldr	r2, [r7, #24]
 800d464:	429a      	cmp	r2, r3
 800d466:	d1f0      	bne.n	800d44a <mem_malloc+0x10e>
          }
          lfree = cur;
 800d468:	4a28      	ldr	r2, [pc, #160]	; (800d50c <mem_malloc+0x1d0>)
 800d46a:	69bb      	ldr	r3, [r7, #24]
 800d46c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d46e:	4b27      	ldr	r3, [pc, #156]	; (800d50c <mem_malloc+0x1d0>)
 800d470:	681a      	ldr	r2, [r3, #0]
 800d472:	4b2a      	ldr	r3, [pc, #168]	; (800d51c <mem_malloc+0x1e0>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	429a      	cmp	r2, r3
 800d478:	d00b      	beq.n	800d492 <mem_malloc+0x156>
 800d47a:	4b24      	ldr	r3, [pc, #144]	; (800d50c <mem_malloc+0x1d0>)
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	791b      	ldrb	r3, [r3, #4]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d006      	beq.n	800d492 <mem_malloc+0x156>
 800d484:	4b22      	ldr	r3, [pc, #136]	; (800d510 <mem_malloc+0x1d4>)
 800d486:	f240 32b5 	movw	r2, #949	; 0x3b5
 800d48a:	4925      	ldr	r1, [pc, #148]	; (800d520 <mem_malloc+0x1e4>)
 800d48c:	4822      	ldr	r0, [pc, #136]	; (800d518 <mem_malloc+0x1dc>)
 800d48e:	f00a fd8d 	bl	8017fac <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d492:	8bba      	ldrh	r2, [r7, #28]
 800d494:	697b      	ldr	r3, [r7, #20]
 800d496:	4413      	add	r3, r2
 800d498:	3308      	adds	r3, #8
 800d49a:	4a20      	ldr	r2, [pc, #128]	; (800d51c <mem_malloc+0x1e0>)
 800d49c:	6812      	ldr	r2, [r2, #0]
 800d49e:	4293      	cmp	r3, r2
 800d4a0:	d906      	bls.n	800d4b0 <mem_malloc+0x174>
 800d4a2:	4b1b      	ldr	r3, [pc, #108]	; (800d510 <mem_malloc+0x1d4>)
 800d4a4:	f240 32b9 	movw	r2, #953	; 0x3b9
 800d4a8:	491e      	ldr	r1, [pc, #120]	; (800d524 <mem_malloc+0x1e8>)
 800d4aa:	481b      	ldr	r0, [pc, #108]	; (800d518 <mem_malloc+0x1dc>)
 800d4ac:	f00a fd7e 	bl	8017fac <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d4b0:	697b      	ldr	r3, [r7, #20]
 800d4b2:	f003 0303 	and.w	r3, r3, #3
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d006      	beq.n	800d4c8 <mem_malloc+0x18c>
 800d4ba:	4b15      	ldr	r3, [pc, #84]	; (800d510 <mem_malloc+0x1d4>)
 800d4bc:	f240 32bb 	movw	r2, #955	; 0x3bb
 800d4c0:	4919      	ldr	r1, [pc, #100]	; (800d528 <mem_malloc+0x1ec>)
 800d4c2:	4815      	ldr	r0, [pc, #84]	; (800d518 <mem_malloc+0x1dc>)
 800d4c4:	f00a fd72 	bl	8017fac <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d4c8:	697b      	ldr	r3, [r7, #20]
 800d4ca:	f003 0303 	and.w	r3, r3, #3
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d006      	beq.n	800d4e0 <mem_malloc+0x1a4>
 800d4d2:	4b0f      	ldr	r3, [pc, #60]	; (800d510 <mem_malloc+0x1d4>)
 800d4d4:	f240 32bd 	movw	r2, #957	; 0x3bd
 800d4d8:	4914      	ldr	r1, [pc, #80]	; (800d52c <mem_malloc+0x1f0>)
 800d4da:	480f      	ldr	r0, [pc, #60]	; (800d518 <mem_malloc+0x1dc>)
 800d4dc:	f00a fd66 	bl	8017fac <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d4e0:	697b      	ldr	r3, [r7, #20]
 800d4e2:	3308      	adds	r3, #8
 800d4e4:	e00e      	b.n	800d504 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800d4e6:	8bfb      	ldrh	r3, [r7, #30]
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f7ff fc83 	bl	800cdf4 <ptr_to_mem>
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	881b      	ldrh	r3, [r3, #0]
 800d4f2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d4f4:	8bfa      	ldrh	r2, [r7, #30]
 800d4f6:	8bbb      	ldrh	r3, [r7, #28]
 800d4f8:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	f4ff af44 	bcc.w	800d38a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d502:	2300      	movs	r3, #0
}
 800d504:	4618      	mov	r0, r3
 800d506:	3720      	adds	r7, #32
 800d508:	46bd      	mov	sp, r7
 800d50a:	bd80      	pop	{r7, pc}
 800d50c:	20000a2c 	.word	0x20000a2c
 800d510:	0801b1dc 	.word	0x0801b1dc
 800d514:	0801b384 	.word	0x0801b384
 800d518:	0801b224 	.word	0x0801b224
 800d51c:	20000a28 	.word	0x20000a28
 800d520:	0801b398 	.word	0x0801b398
 800d524:	0801b3b4 	.word	0x0801b3b4
 800d528:	0801b3e4 	.word	0x0801b3e4
 800d52c:	0801b414 	.word	0x0801b414

0800d530 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d530:	b480      	push	{r7}
 800d532:	b085      	sub	sp, #20
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	689b      	ldr	r3, [r3, #8]
 800d53c:	2200      	movs	r2, #0
 800d53e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	685b      	ldr	r3, [r3, #4]
 800d544:	3303      	adds	r3, #3
 800d546:	f023 0303 	bic.w	r3, r3, #3
 800d54a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d54c:	2300      	movs	r3, #0
 800d54e:	60fb      	str	r3, [r7, #12]
 800d550:	e011      	b.n	800d576 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	689b      	ldr	r3, [r3, #8]
 800d556:	681a      	ldr	r2, [r3, #0]
 800d558:	68bb      	ldr	r3, [r7, #8]
 800d55a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	689b      	ldr	r3, [r3, #8]
 800d560:	68ba      	ldr	r2, [r7, #8]
 800d562:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	881b      	ldrh	r3, [r3, #0]
 800d568:	461a      	mov	r2, r3
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	4413      	add	r3, r2
 800d56e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	3301      	adds	r3, #1
 800d574:	60fb      	str	r3, [r7, #12]
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	885b      	ldrh	r3, [r3, #2]
 800d57a:	461a      	mov	r2, r3
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	4293      	cmp	r3, r2
 800d580:	dbe7      	blt.n	800d552 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d582:	bf00      	nop
 800d584:	bf00      	nop
 800d586:	3714      	adds	r7, #20
 800d588:	46bd      	mov	sp, r7
 800d58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58e:	4770      	bx	lr

0800d590 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b082      	sub	sp, #8
 800d594:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d596:	2300      	movs	r3, #0
 800d598:	80fb      	strh	r3, [r7, #6]
 800d59a:	e009      	b.n	800d5b0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d59c:	88fb      	ldrh	r3, [r7, #6]
 800d59e:	4a08      	ldr	r2, [pc, #32]	; (800d5c0 <memp_init+0x30>)
 800d5a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	f7ff ffc3 	bl	800d530 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d5aa:	88fb      	ldrh	r3, [r7, #6]
 800d5ac:	3301      	adds	r3, #1
 800d5ae:	80fb      	strh	r3, [r7, #6]
 800d5b0:	88fb      	ldrh	r3, [r7, #6]
 800d5b2:	2b08      	cmp	r3, #8
 800d5b4:	d9f2      	bls.n	800d59c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d5b6:	bf00      	nop
 800d5b8:	bf00      	nop
 800d5ba:	3708      	adds	r7, #8
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bd80      	pop	{r7, pc}
 800d5c0:	0801de0c 	.word	0x0801de0c

0800d5c4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b084      	sub	sp, #16
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	689b      	ldr	r3, [r3, #8]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d012      	beq.n	800d600 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	689b      	ldr	r3, [r3, #8]
 800d5de:	68fa      	ldr	r2, [r7, #12]
 800d5e0:	6812      	ldr	r2, [r2, #0]
 800d5e2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	f003 0303 	and.w	r3, r3, #3
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d006      	beq.n	800d5fc <do_memp_malloc_pool+0x38>
 800d5ee:	4b07      	ldr	r3, [pc, #28]	; (800d60c <do_memp_malloc_pool+0x48>)
 800d5f0:	f44f 728c 	mov.w	r2, #280	; 0x118
 800d5f4:	4906      	ldr	r1, [pc, #24]	; (800d610 <do_memp_malloc_pool+0x4c>)
 800d5f6:	4807      	ldr	r0, [pc, #28]	; (800d614 <do_memp_malloc_pool+0x50>)
 800d5f8:	f00a fcd8 	bl	8017fac <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	e000      	b.n	800d602 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d600:	2300      	movs	r3, #0
}
 800d602:	4618      	mov	r0, r3
 800d604:	3710      	adds	r7, #16
 800d606:	46bd      	mov	sp, r7
 800d608:	bd80      	pop	{r7, pc}
 800d60a:	bf00      	nop
 800d60c:	0801b438 	.word	0x0801b438
 800d610:	0801b468 	.word	0x0801b468
 800d614:	0801b48c 	.word	0x0801b48c

0800d618 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b084      	sub	sp, #16
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	4603      	mov	r3, r0
 800d620:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d622:	79fb      	ldrb	r3, [r7, #7]
 800d624:	2b08      	cmp	r3, #8
 800d626:	d908      	bls.n	800d63a <memp_malloc+0x22>
 800d628:	4b0a      	ldr	r3, [pc, #40]	; (800d654 <memp_malloc+0x3c>)
 800d62a:	f240 1257 	movw	r2, #343	; 0x157
 800d62e:	490a      	ldr	r1, [pc, #40]	; (800d658 <memp_malloc+0x40>)
 800d630:	480a      	ldr	r0, [pc, #40]	; (800d65c <memp_malloc+0x44>)
 800d632:	f00a fcbb 	bl	8017fac <iprintf>
 800d636:	2300      	movs	r3, #0
 800d638:	e008      	b.n	800d64c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d63a:	79fb      	ldrb	r3, [r7, #7]
 800d63c:	4a08      	ldr	r2, [pc, #32]	; (800d660 <memp_malloc+0x48>)
 800d63e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d642:	4618      	mov	r0, r3
 800d644:	f7ff ffbe 	bl	800d5c4 <do_memp_malloc_pool>
 800d648:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d64a:	68fb      	ldr	r3, [r7, #12]
}
 800d64c:	4618      	mov	r0, r3
 800d64e:	3710      	adds	r7, #16
 800d650:	46bd      	mov	sp, r7
 800d652:	bd80      	pop	{r7, pc}
 800d654:	0801b438 	.word	0x0801b438
 800d658:	0801b4c8 	.word	0x0801b4c8
 800d65c:	0801b48c 	.word	0x0801b48c
 800d660:	0801de0c 	.word	0x0801de0c

0800d664 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b084      	sub	sp, #16
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d66e:	683b      	ldr	r3, [r7, #0]
 800d670:	f003 0303 	and.w	r3, r3, #3
 800d674:	2b00      	cmp	r3, #0
 800d676:	d006      	beq.n	800d686 <do_memp_free_pool+0x22>
 800d678:	4b0a      	ldr	r3, [pc, #40]	; (800d6a4 <do_memp_free_pool+0x40>)
 800d67a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800d67e:	490a      	ldr	r1, [pc, #40]	; (800d6a8 <do_memp_free_pool+0x44>)
 800d680:	480a      	ldr	r0, [pc, #40]	; (800d6ac <do_memp_free_pool+0x48>)
 800d682:	f00a fc93 	bl	8017fac <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	689b      	ldr	r3, [r3, #8]
 800d68e:	681a      	ldr	r2, [r3, #0]
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	689b      	ldr	r3, [r3, #8]
 800d698:	68fa      	ldr	r2, [r7, #12]
 800d69a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800d69c:	bf00      	nop
 800d69e:	3710      	adds	r7, #16
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}
 800d6a4:	0801b438 	.word	0x0801b438
 800d6a8:	0801b4e8 	.word	0x0801b4e8
 800d6ac:	0801b48c 	.word	0x0801b48c

0800d6b0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b082      	sub	sp, #8
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	6039      	str	r1, [r7, #0]
 800d6ba:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d6bc:	79fb      	ldrb	r3, [r7, #7]
 800d6be:	2b08      	cmp	r3, #8
 800d6c0:	d907      	bls.n	800d6d2 <memp_free+0x22>
 800d6c2:	4b0c      	ldr	r3, [pc, #48]	; (800d6f4 <memp_free+0x44>)
 800d6c4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800d6c8:	490b      	ldr	r1, [pc, #44]	; (800d6f8 <memp_free+0x48>)
 800d6ca:	480c      	ldr	r0, [pc, #48]	; (800d6fc <memp_free+0x4c>)
 800d6cc:	f00a fc6e 	bl	8017fac <iprintf>
 800d6d0:	e00c      	b.n	800d6ec <memp_free+0x3c>

  if (mem == NULL) {
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d008      	beq.n	800d6ea <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d6d8:	79fb      	ldrb	r3, [r7, #7]
 800d6da:	4a09      	ldr	r2, [pc, #36]	; (800d700 <memp_free+0x50>)
 800d6dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6e0:	6839      	ldr	r1, [r7, #0]
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f7ff ffbe 	bl	800d664 <do_memp_free_pool>
 800d6e8:	e000      	b.n	800d6ec <memp_free+0x3c>
    return;
 800d6ea:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d6ec:	3708      	adds	r7, #8
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}
 800d6f2:	bf00      	nop
 800d6f4:	0801b438 	.word	0x0801b438
 800d6f8:	0801b508 	.word	0x0801b508
 800d6fc:	0801b48c 	.word	0x0801b48c
 800d700:	0801de0c 	.word	0x0801de0c

0800d704 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d704:	b480      	push	{r7}
 800d706:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d708:	bf00      	nop
 800d70a:	46bd      	mov	sp, r7
 800d70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d710:	4770      	bx	lr
	...

0800d714 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b086      	sub	sp, #24
 800d718:	af00      	add	r7, sp, #0
 800d71a:	60f8      	str	r0, [r7, #12]
 800d71c:	60b9      	str	r1, [r7, #8]
 800d71e:	607a      	str	r2, [r7, #4]
 800d720:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d108      	bne.n	800d73a <netif_add+0x26>
 800d728:	4b57      	ldr	r3, [pc, #348]	; (800d888 <netif_add+0x174>)
 800d72a:	f240 1227 	movw	r2, #295	; 0x127
 800d72e:	4957      	ldr	r1, [pc, #348]	; (800d88c <netif_add+0x178>)
 800d730:	4857      	ldr	r0, [pc, #348]	; (800d890 <netif_add+0x17c>)
 800d732:	f00a fc3b 	bl	8017fac <iprintf>
 800d736:	2300      	movs	r3, #0
 800d738:	e0a2      	b.n	800d880 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d108      	bne.n	800d752 <netif_add+0x3e>
 800d740:	4b51      	ldr	r3, [pc, #324]	; (800d888 <netif_add+0x174>)
 800d742:	f44f 7294 	mov.w	r2, #296	; 0x128
 800d746:	4953      	ldr	r1, [pc, #332]	; (800d894 <netif_add+0x180>)
 800d748:	4851      	ldr	r0, [pc, #324]	; (800d890 <netif_add+0x17c>)
 800d74a:	f00a fc2f 	bl	8017fac <iprintf>
 800d74e:	2300      	movs	r3, #0
 800d750:	e096      	b.n	800d880 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d101      	bne.n	800d75c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d758:	4b4f      	ldr	r3, [pc, #316]	; (800d898 <netif_add+0x184>)
 800d75a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d101      	bne.n	800d766 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d762:	4b4d      	ldr	r3, [pc, #308]	; (800d898 <netif_add+0x184>)
 800d764:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d101      	bne.n	800d770 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d76c:	4b4a      	ldr	r3, [pc, #296]	; (800d898 <netif_add+0x184>)
 800d76e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	2200      	movs	r2, #0
 800d774:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	2200      	movs	r2, #0
 800d77a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	2200      	movs	r2, #0
 800d780:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	4a45      	ldr	r2, [pc, #276]	; (800d89c <netif_add+0x188>)
 800d786:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	2200      	movs	r2, #0
 800d78c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	2200      	movs	r2, #0
 800d792:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	2200      	movs	r2, #0
 800d79a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	6a3a      	ldr	r2, [r7, #32]
 800d7a0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d7a2:	4b3f      	ldr	r3, [pc, #252]	; (800d8a0 <netif_add+0x18c>)
 800d7a4:	781a      	ldrb	r2, [r3, #0]
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7b0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	687a      	ldr	r2, [r7, #4]
 800d7b6:	68b9      	ldr	r1, [r7, #8]
 800d7b8:	68f8      	ldr	r0, [r7, #12]
 800d7ba:	f000 f913 	bl	800d9e4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c0:	68f8      	ldr	r0, [r7, #12]
 800d7c2:	4798      	blx	r3
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d001      	beq.n	800d7ce <netif_add+0xba>
    return NULL;
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	e058      	b.n	800d880 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d7d4:	2bff      	cmp	r3, #255	; 0xff
 800d7d6:	d103      	bne.n	800d7e0 <netif_add+0xcc>
        netif->num = 0;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	2200      	movs	r2, #0
 800d7dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d7e4:	4b2f      	ldr	r3, [pc, #188]	; (800d8a4 <netif_add+0x190>)
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	617b      	str	r3, [r7, #20]
 800d7ea:	e02b      	b.n	800d844 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d7ec:	697a      	ldr	r2, [r7, #20]
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	429a      	cmp	r2, r3
 800d7f2:	d106      	bne.n	800d802 <netif_add+0xee>
 800d7f4:	4b24      	ldr	r3, [pc, #144]	; (800d888 <netif_add+0x174>)
 800d7f6:	f240 128b 	movw	r2, #395	; 0x18b
 800d7fa:	492b      	ldr	r1, [pc, #172]	; (800d8a8 <netif_add+0x194>)
 800d7fc:	4824      	ldr	r0, [pc, #144]	; (800d890 <netif_add+0x17c>)
 800d7fe:	f00a fbd5 	bl	8017fac <iprintf>
        num_netifs++;
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	3301      	adds	r3, #1
 800d806:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d808:	693b      	ldr	r3, [r7, #16]
 800d80a:	2bff      	cmp	r3, #255	; 0xff
 800d80c:	dd06      	ble.n	800d81c <netif_add+0x108>
 800d80e:	4b1e      	ldr	r3, [pc, #120]	; (800d888 <netif_add+0x174>)
 800d810:	f240 128d 	movw	r2, #397	; 0x18d
 800d814:	4925      	ldr	r1, [pc, #148]	; (800d8ac <netif_add+0x198>)
 800d816:	481e      	ldr	r0, [pc, #120]	; (800d890 <netif_add+0x17c>)
 800d818:	f00a fbc8 	bl	8017fac <iprintf>
        if (netif2->num == netif->num) {
 800d81c:	697b      	ldr	r3, [r7, #20]
 800d81e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d828:	429a      	cmp	r2, r3
 800d82a:	d108      	bne.n	800d83e <netif_add+0x12a>
          netif->num++;
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d832:	3301      	adds	r3, #1
 800d834:	b2da      	uxtb	r2, r3
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800d83c:	e005      	b.n	800d84a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d83e:	697b      	ldr	r3, [r7, #20]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	617b      	str	r3, [r7, #20]
 800d844:	697b      	ldr	r3, [r7, #20]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d1d0      	bne.n	800d7ec <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800d84a:	697b      	ldr	r3, [r7, #20]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d1be      	bne.n	800d7ce <netif_add+0xba>
  }
  if (netif->num == 254) {
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d856:	2bfe      	cmp	r3, #254	; 0xfe
 800d858:	d103      	bne.n	800d862 <netif_add+0x14e>
    netif_num = 0;
 800d85a:	4b11      	ldr	r3, [pc, #68]	; (800d8a0 <netif_add+0x18c>)
 800d85c:	2200      	movs	r2, #0
 800d85e:	701a      	strb	r2, [r3, #0]
 800d860:	e006      	b.n	800d870 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d868:	3301      	adds	r3, #1
 800d86a:	b2da      	uxtb	r2, r3
 800d86c:	4b0c      	ldr	r3, [pc, #48]	; (800d8a0 <netif_add+0x18c>)
 800d86e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d870:	4b0c      	ldr	r3, [pc, #48]	; (800d8a4 <netif_add+0x190>)
 800d872:	681a      	ldr	r2, [r3, #0]
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d878:	4a0a      	ldr	r2, [pc, #40]	; (800d8a4 <netif_add+0x190>)
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800d87e:	68fb      	ldr	r3, [r7, #12]
}
 800d880:	4618      	mov	r0, r3
 800d882:	3718      	adds	r7, #24
 800d884:	46bd      	mov	sp, r7
 800d886:	bd80      	pop	{r7, pc}
 800d888:	0801b524 	.word	0x0801b524
 800d88c:	0801b5b8 	.word	0x0801b5b8
 800d890:	0801b574 	.word	0x0801b574
 800d894:	0801b5d4 	.word	0x0801b5d4
 800d898:	0801de70 	.word	0x0801de70
 800d89c:	0800dbf7 	.word	0x0800dbf7
 800d8a0:	20000a54 	.word	0x20000a54
 800d8a4:	200094f4 	.word	0x200094f4
 800d8a8:	0801b5f8 	.word	0x0801b5f8
 800d8ac:	0801b60c 	.word	0x0801b60c

0800d8b0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b082      	sub	sp, #8
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
 800d8b8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d8ba:	6839      	ldr	r1, [r7, #0]
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f002 ff39 	bl	8010734 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800d8c2:	6839      	ldr	r1, [r7, #0]
 800d8c4:	6878      	ldr	r0, [r7, #4]
 800d8c6:	f007 fc71 	bl	80151ac <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800d8ca:	bf00      	nop
 800d8cc:	3708      	adds	r7, #8
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}
	...

0800d8d4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b086      	sub	sp, #24
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	60f8      	str	r0, [r7, #12]
 800d8dc:	60b9      	str	r1, [r7, #8]
 800d8de:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800d8e0:	68bb      	ldr	r3, [r7, #8]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d106      	bne.n	800d8f4 <netif_do_set_ipaddr+0x20>
 800d8e6:	4b1d      	ldr	r3, [pc, #116]	; (800d95c <netif_do_set_ipaddr+0x88>)
 800d8e8:	f240 12cb 	movw	r2, #459	; 0x1cb
 800d8ec:	491c      	ldr	r1, [pc, #112]	; (800d960 <netif_do_set_ipaddr+0x8c>)
 800d8ee:	481d      	ldr	r0, [pc, #116]	; (800d964 <netif_do_set_ipaddr+0x90>)
 800d8f0:	f00a fb5c 	bl	8017fac <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d106      	bne.n	800d908 <netif_do_set_ipaddr+0x34>
 800d8fa:	4b18      	ldr	r3, [pc, #96]	; (800d95c <netif_do_set_ipaddr+0x88>)
 800d8fc:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800d900:	4917      	ldr	r1, [pc, #92]	; (800d960 <netif_do_set_ipaddr+0x8c>)
 800d902:	4818      	ldr	r0, [pc, #96]	; (800d964 <netif_do_set_ipaddr+0x90>)
 800d904:	f00a fb52 	bl	8017fac <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d908:	68bb      	ldr	r3, [r7, #8]
 800d90a:	681a      	ldr	r2, [r3, #0]
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	3304      	adds	r3, #4
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	429a      	cmp	r2, r3
 800d914:	d01c      	beq.n	800d950 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d916:	68bb      	ldr	r3, [r7, #8]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	3304      	adds	r3, #4
 800d920:	681a      	ldr	r2, [r3, #0]
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d926:	f107 0314 	add.w	r3, r7, #20
 800d92a:	4619      	mov	r1, r3
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	f7ff ffbf 	bl	800d8b0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d002      	beq.n	800d93e <netif_do_set_ipaddr+0x6a>
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	e000      	b.n	800d940 <netif_do_set_ipaddr+0x6c>
 800d93e:	2300      	movs	r3, #0
 800d940:	68fa      	ldr	r2, [r7, #12]
 800d942:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d944:	2101      	movs	r1, #1
 800d946:	68f8      	ldr	r0, [r7, #12]
 800d948:	f000 f8d2 	bl	800daf0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800d94c:	2301      	movs	r3, #1
 800d94e:	e000      	b.n	800d952 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800d950:	2300      	movs	r3, #0
}
 800d952:	4618      	mov	r0, r3
 800d954:	3718      	adds	r7, #24
 800d956:	46bd      	mov	sp, r7
 800d958:	bd80      	pop	{r7, pc}
 800d95a:	bf00      	nop
 800d95c:	0801b524 	.word	0x0801b524
 800d960:	0801b63c 	.word	0x0801b63c
 800d964:	0801b574 	.word	0x0801b574

0800d968 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800d968:	b480      	push	{r7}
 800d96a:	b085      	sub	sp, #20
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	60f8      	str	r0, [r7, #12]
 800d970:	60b9      	str	r1, [r7, #8]
 800d972:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	681a      	ldr	r2, [r3, #0]
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	3308      	adds	r3, #8
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	429a      	cmp	r2, r3
 800d980:	d00a      	beq.n	800d998 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d002      	beq.n	800d98e <netif_do_set_netmask+0x26>
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	e000      	b.n	800d990 <netif_do_set_netmask+0x28>
 800d98e:	2300      	movs	r3, #0
 800d990:	68fa      	ldr	r2, [r7, #12]
 800d992:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800d994:	2301      	movs	r3, #1
 800d996:	e000      	b.n	800d99a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800d998:	2300      	movs	r3, #0
}
 800d99a:	4618      	mov	r0, r3
 800d99c:	3714      	adds	r7, #20
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a4:	4770      	bx	lr

0800d9a6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800d9a6:	b480      	push	{r7}
 800d9a8:	b085      	sub	sp, #20
 800d9aa:	af00      	add	r7, sp, #0
 800d9ac:	60f8      	str	r0, [r7, #12]
 800d9ae:	60b9      	str	r1, [r7, #8]
 800d9b0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800d9b2:	68bb      	ldr	r3, [r7, #8]
 800d9b4:	681a      	ldr	r2, [r3, #0]
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	330c      	adds	r3, #12
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	429a      	cmp	r2, r3
 800d9be:	d00a      	beq.n	800d9d6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d002      	beq.n	800d9cc <netif_do_set_gw+0x26>
 800d9c6:	68bb      	ldr	r3, [r7, #8]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	e000      	b.n	800d9ce <netif_do_set_gw+0x28>
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	68fa      	ldr	r2, [r7, #12]
 800d9d0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800d9d2:	2301      	movs	r3, #1
 800d9d4:	e000      	b.n	800d9d8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800d9d6:	2300      	movs	r3, #0
}
 800d9d8:	4618      	mov	r0, r3
 800d9da:	3714      	adds	r7, #20
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e2:	4770      	bx	lr

0800d9e4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b088      	sub	sp, #32
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	60f8      	str	r0, [r7, #12]
 800d9ec:	60b9      	str	r1, [r7, #8]
 800d9ee:	607a      	str	r2, [r7, #4]
 800d9f0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d9fa:	68bb      	ldr	r3, [r7, #8]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d101      	bne.n	800da04 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800da00:	4b1c      	ldr	r3, [pc, #112]	; (800da74 <netif_set_addr+0x90>)
 800da02:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d101      	bne.n	800da0e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800da0a:	4b1a      	ldr	r3, [pc, #104]	; (800da74 <netif_set_addr+0x90>)
 800da0c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d101      	bne.n	800da18 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800da14:	4b17      	ldr	r3, [pc, #92]	; (800da74 <netif_set_addr+0x90>)
 800da16:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d003      	beq.n	800da26 <netif_set_addr+0x42>
 800da1e:	68bb      	ldr	r3, [r7, #8]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d101      	bne.n	800da2a <netif_set_addr+0x46>
 800da26:	2301      	movs	r3, #1
 800da28:	e000      	b.n	800da2c <netif_set_addr+0x48>
 800da2a:	2300      	movs	r3, #0
 800da2c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800da2e:	697b      	ldr	r3, [r7, #20]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d006      	beq.n	800da42 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800da34:	f107 0310 	add.w	r3, r7, #16
 800da38:	461a      	mov	r2, r3
 800da3a:	68b9      	ldr	r1, [r7, #8]
 800da3c:	68f8      	ldr	r0, [r7, #12]
 800da3e:	f7ff ff49 	bl	800d8d4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800da42:	69fa      	ldr	r2, [r7, #28]
 800da44:	6879      	ldr	r1, [r7, #4]
 800da46:	68f8      	ldr	r0, [r7, #12]
 800da48:	f7ff ff8e 	bl	800d968 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800da4c:	69ba      	ldr	r2, [r7, #24]
 800da4e:	6839      	ldr	r1, [r7, #0]
 800da50:	68f8      	ldr	r0, [r7, #12]
 800da52:	f7ff ffa8 	bl	800d9a6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800da56:	697b      	ldr	r3, [r7, #20]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d106      	bne.n	800da6a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800da5c:	f107 0310 	add.w	r3, r7, #16
 800da60:	461a      	mov	r2, r3
 800da62:	68b9      	ldr	r1, [r7, #8]
 800da64:	68f8      	ldr	r0, [r7, #12]
 800da66:	f7ff ff35 	bl	800d8d4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800da6a:	bf00      	nop
 800da6c:	3720      	adds	r7, #32
 800da6e:	46bd      	mov	sp, r7
 800da70:	bd80      	pop	{r7, pc}
 800da72:	bf00      	nop
 800da74:	0801de70 	.word	0x0801de70

0800da78 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800da78:	b480      	push	{r7}
 800da7a:	b083      	sub	sp, #12
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800da80:	4a04      	ldr	r2, [pc, #16]	; (800da94 <netif_set_default+0x1c>)
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800da86:	bf00      	nop
 800da88:	370c      	adds	r7, #12
 800da8a:	46bd      	mov	sp, r7
 800da8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da90:	4770      	bx	lr
 800da92:	bf00      	nop
 800da94:	200094f8 	.word	0x200094f8

0800da98 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b082      	sub	sp, #8
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d107      	bne.n	800dab6 <netif_set_up+0x1e>
 800daa6:	4b0f      	ldr	r3, [pc, #60]	; (800dae4 <netif_set_up+0x4c>)
 800daa8:	f44f 7254 	mov.w	r2, #848	; 0x350
 800daac:	490e      	ldr	r1, [pc, #56]	; (800dae8 <netif_set_up+0x50>)
 800daae:	480f      	ldr	r0, [pc, #60]	; (800daec <netif_set_up+0x54>)
 800dab0:	f00a fa7c 	bl	8017fac <iprintf>
 800dab4:	e013      	b.n	800dade <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dabc:	f003 0301 	and.w	r3, r3, #1
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d10c      	bne.n	800dade <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800daca:	f043 0301 	orr.w	r3, r3, #1
 800dace:	b2da      	uxtb	r2, r3
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800dad6:	2103      	movs	r1, #3
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	f000 f809 	bl	800daf0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800dade:	3708      	adds	r7, #8
 800dae0:	46bd      	mov	sp, r7
 800dae2:	bd80      	pop	{r7, pc}
 800dae4:	0801b524 	.word	0x0801b524
 800dae8:	0801b6ac 	.word	0x0801b6ac
 800daec:	0801b574 	.word	0x0801b574

0800daf0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b082      	sub	sp, #8
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
 800daf8:	460b      	mov	r3, r1
 800dafa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d106      	bne.n	800db10 <netif_issue_reports+0x20>
 800db02:	4b18      	ldr	r3, [pc, #96]	; (800db64 <netif_issue_reports+0x74>)
 800db04:	f240 326d 	movw	r2, #877	; 0x36d
 800db08:	4917      	ldr	r1, [pc, #92]	; (800db68 <netif_issue_reports+0x78>)
 800db0a:	4818      	ldr	r0, [pc, #96]	; (800db6c <netif_issue_reports+0x7c>)
 800db0c:	f00a fa4e 	bl	8017fac <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800db16:	f003 0304 	and.w	r3, r3, #4
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d01e      	beq.n	800db5c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800db24:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d017      	beq.n	800db5c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800db2c:	78fb      	ldrb	r3, [r7, #3]
 800db2e:	f003 0301 	and.w	r3, r3, #1
 800db32:	2b00      	cmp	r3, #0
 800db34:	d013      	beq.n	800db5e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	3304      	adds	r3, #4
 800db3a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d00e      	beq.n	800db5e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800db46:	f003 0308 	and.w	r3, r3, #8
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d007      	beq.n	800db5e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	3304      	adds	r3, #4
 800db52:	4619      	mov	r1, r3
 800db54:	6878      	ldr	r0, [r7, #4]
 800db56:	f008 fa93 	bl	8016080 <etharp_request>
 800db5a:	e000      	b.n	800db5e <netif_issue_reports+0x6e>
    return;
 800db5c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800db5e:	3708      	adds	r7, #8
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}
 800db64:	0801b524 	.word	0x0801b524
 800db68:	0801b6c8 	.word	0x0801b6c8
 800db6c:	0801b574 	.word	0x0801b574

0800db70 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b082      	sub	sp, #8
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d107      	bne.n	800db8e <netif_set_down+0x1e>
 800db7e:	4b12      	ldr	r3, [pc, #72]	; (800dbc8 <netif_set_down+0x58>)
 800db80:	f240 329b 	movw	r2, #923	; 0x39b
 800db84:	4911      	ldr	r1, [pc, #68]	; (800dbcc <netif_set_down+0x5c>)
 800db86:	4812      	ldr	r0, [pc, #72]	; (800dbd0 <netif_set_down+0x60>)
 800db88:	f00a fa10 	bl	8017fac <iprintf>
 800db8c:	e019      	b.n	800dbc2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800db94:	f003 0301 	and.w	r3, r3, #1
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d012      	beq.n	800dbc2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dba2:	f023 0301 	bic.w	r3, r3, #1
 800dba6:	b2da      	uxtb	r2, r3
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dbb4:	f003 0308 	and.w	r3, r3, #8
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d002      	beq.n	800dbc2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800dbbc:	6878      	ldr	r0, [r7, #4]
 800dbbe:	f007 fe1d 	bl	80157fc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800dbc2:	3708      	adds	r7, #8
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd80      	pop	{r7, pc}
 800dbc8:	0801b524 	.word	0x0801b524
 800dbcc:	0801b6ec 	.word	0x0801b6ec
 800dbd0:	0801b574 	.word	0x0801b574

0800dbd4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800dbd4:	b480      	push	{r7}
 800dbd6:	b083      	sub	sp, #12
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
 800dbdc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d002      	beq.n	800dbea <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	683a      	ldr	r2, [r7, #0]
 800dbe8:	61da      	str	r2, [r3, #28]
  }
}
 800dbea:	bf00      	nop
 800dbec:	370c      	adds	r7, #12
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf4:	4770      	bx	lr

0800dbf6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800dbf6:	b480      	push	{r7}
 800dbf8:	b085      	sub	sp, #20
 800dbfa:	af00      	add	r7, sp, #0
 800dbfc:	60f8      	str	r0, [r7, #12]
 800dbfe:	60b9      	str	r1, [r7, #8]
 800dc00:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800dc02:	f06f 030b 	mvn.w	r3, #11
}
 800dc06:	4618      	mov	r0, r3
 800dc08:	3714      	adds	r7, #20
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc10:	4770      	bx	lr
	...

0800dc14 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800dc14:	b480      	push	{r7}
 800dc16:	b085      	sub	sp, #20
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800dc1e:	79fb      	ldrb	r3, [r7, #7]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d013      	beq.n	800dc4c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800dc24:	4b0d      	ldr	r3, [pc, #52]	; (800dc5c <netif_get_by_index+0x48>)
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	60fb      	str	r3, [r7, #12]
 800dc2a:	e00c      	b.n	800dc46 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dc32:	3301      	adds	r3, #1
 800dc34:	b2db      	uxtb	r3, r3
 800dc36:	79fa      	ldrb	r2, [r7, #7]
 800dc38:	429a      	cmp	r2, r3
 800dc3a:	d101      	bne.n	800dc40 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	e006      	b.n	800dc4e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	60fb      	str	r3, [r7, #12]
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d1ef      	bne.n	800dc2c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800dc4c:	2300      	movs	r3, #0
}
 800dc4e:	4618      	mov	r0, r3
 800dc50:	3714      	adds	r7, #20
 800dc52:	46bd      	mov	sp, r7
 800dc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc58:	4770      	bx	lr
 800dc5a:	bf00      	nop
 800dc5c:	200094f4 	.word	0x200094f4

0800dc60 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b082      	sub	sp, #8
 800dc64:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800dc66:	4b0c      	ldr	r3, [pc, #48]	; (800dc98 <pbuf_free_ooseq+0x38>)
 800dc68:	2200      	movs	r2, #0
 800dc6a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800dc6c:	4b0b      	ldr	r3, [pc, #44]	; (800dc9c <pbuf_free_ooseq+0x3c>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	607b      	str	r3, [r7, #4]
 800dc72:	e00a      	b.n	800dc8a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d003      	beq.n	800dc84 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800dc7c:	6878      	ldr	r0, [r7, #4]
 800dc7e:	f002 fd97 	bl	80107b0 <tcp_free_ooseq>
      return;
 800dc82:	e005      	b.n	800dc90 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	68db      	ldr	r3, [r3, #12]
 800dc88:	607b      	str	r3, [r7, #4]
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d1f1      	bne.n	800dc74 <pbuf_free_ooseq+0x14>
    }
  }
}
 800dc90:	3708      	adds	r7, #8
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd80      	pop	{r7, pc}
 800dc96:	bf00      	nop
 800dc98:	200094fc 	.word	0x200094fc
 800dc9c:	20009504 	.word	0x20009504

0800dca0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800dca0:	b480      	push	{r7}
 800dca2:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800dca4:	4b03      	ldr	r3, [pc, #12]	; (800dcb4 <pbuf_pool_is_empty+0x14>)
 800dca6:	2201      	movs	r2, #1
 800dca8:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800dcaa:	bf00      	nop
 800dcac:	46bd      	mov	sp, r7
 800dcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb2:	4770      	bx	lr
 800dcb4:	200094fc 	.word	0x200094fc

0800dcb8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800dcb8:	b480      	push	{r7}
 800dcba:	b085      	sub	sp, #20
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	60f8      	str	r0, [r7, #12]
 800dcc0:	60b9      	str	r1, [r7, #8]
 800dcc2:	4611      	mov	r1, r2
 800dcc4:	461a      	mov	r2, r3
 800dcc6:	460b      	mov	r3, r1
 800dcc8:	80fb      	strh	r3, [r7, #6]
 800dcca:	4613      	mov	r3, r2
 800dccc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	68ba      	ldr	r2, [r7, #8]
 800dcd8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	88fa      	ldrh	r2, [r7, #6]
 800dcde:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	88ba      	ldrh	r2, [r7, #4]
 800dce4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800dce6:	8b3b      	ldrh	r3, [r7, #24]
 800dce8:	b2da      	uxtb	r2, r3
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	7f3a      	ldrb	r2, [r7, #28]
 800dcf2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	2201      	movs	r2, #1
 800dcf8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	73da      	strb	r2, [r3, #15]
}
 800dd00:	bf00      	nop
 800dd02:	3714      	adds	r7, #20
 800dd04:	46bd      	mov	sp, r7
 800dd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0a:	4770      	bx	lr

0800dd0c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b08c      	sub	sp, #48	; 0x30
 800dd10:	af02      	add	r7, sp, #8
 800dd12:	4603      	mov	r3, r0
 800dd14:	71fb      	strb	r3, [r7, #7]
 800dd16:	460b      	mov	r3, r1
 800dd18:	80bb      	strh	r3, [r7, #4]
 800dd1a:	4613      	mov	r3, r2
 800dd1c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800dd1e:	79fb      	ldrb	r3, [r7, #7]
 800dd20:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800dd22:	887b      	ldrh	r3, [r7, #2]
 800dd24:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800dd28:	d07f      	beq.n	800de2a <pbuf_alloc+0x11e>
 800dd2a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800dd2e:	f300 80c8 	bgt.w	800dec2 <pbuf_alloc+0x1b6>
 800dd32:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800dd36:	d010      	beq.n	800dd5a <pbuf_alloc+0x4e>
 800dd38:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800dd3c:	f300 80c1 	bgt.w	800dec2 <pbuf_alloc+0x1b6>
 800dd40:	2b01      	cmp	r3, #1
 800dd42:	d002      	beq.n	800dd4a <pbuf_alloc+0x3e>
 800dd44:	2b41      	cmp	r3, #65	; 0x41
 800dd46:	f040 80bc 	bne.w	800dec2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800dd4a:	887a      	ldrh	r2, [r7, #2]
 800dd4c:	88bb      	ldrh	r3, [r7, #4]
 800dd4e:	4619      	mov	r1, r3
 800dd50:	2000      	movs	r0, #0
 800dd52:	f000 f8d1 	bl	800def8 <pbuf_alloc_reference>
 800dd56:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800dd58:	e0bd      	b.n	800ded6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800dd5e:	2300      	movs	r3, #0
 800dd60:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800dd62:	88bb      	ldrh	r3, [r7, #4]
 800dd64:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800dd66:	2008      	movs	r0, #8
 800dd68:	f7ff fc56 	bl	800d618 <memp_malloc>
 800dd6c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800dd6e:	693b      	ldr	r3, [r7, #16]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d109      	bne.n	800dd88 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800dd74:	f7ff ff94 	bl	800dca0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800dd78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d002      	beq.n	800dd84 <pbuf_alloc+0x78>
            pbuf_free(p);
 800dd7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd80:	f000 faa8 	bl	800e2d4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800dd84:	2300      	movs	r3, #0
 800dd86:	e0a7      	b.n	800ded8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800dd88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dd8a:	3303      	adds	r3, #3
 800dd8c:	b29b      	uxth	r3, r3
 800dd8e:	f023 0303 	bic.w	r3, r3, #3
 800dd92:	b29b      	uxth	r3, r3
 800dd94:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800dd98:	b29b      	uxth	r3, r3
 800dd9a:	8b7a      	ldrh	r2, [r7, #26]
 800dd9c:	4293      	cmp	r3, r2
 800dd9e:	bf28      	it	cs
 800dda0:	4613      	movcs	r3, r2
 800dda2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800dda4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dda6:	3310      	adds	r3, #16
 800dda8:	693a      	ldr	r2, [r7, #16]
 800ddaa:	4413      	add	r3, r2
 800ddac:	3303      	adds	r3, #3
 800ddae:	f023 0303 	bic.w	r3, r3, #3
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	89f9      	ldrh	r1, [r7, #14]
 800ddb6:	8b7a      	ldrh	r2, [r7, #26]
 800ddb8:	2300      	movs	r3, #0
 800ddba:	9301      	str	r3, [sp, #4]
 800ddbc:	887b      	ldrh	r3, [r7, #2]
 800ddbe:	9300      	str	r3, [sp, #0]
 800ddc0:	460b      	mov	r3, r1
 800ddc2:	4601      	mov	r1, r0
 800ddc4:	6938      	ldr	r0, [r7, #16]
 800ddc6:	f7ff ff77 	bl	800dcb8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800ddca:	693b      	ldr	r3, [r7, #16]
 800ddcc:	685b      	ldr	r3, [r3, #4]
 800ddce:	f003 0303 	and.w	r3, r3, #3
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d006      	beq.n	800dde4 <pbuf_alloc+0xd8>
 800ddd6:	4b42      	ldr	r3, [pc, #264]	; (800dee0 <pbuf_alloc+0x1d4>)
 800ddd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dddc:	4941      	ldr	r1, [pc, #260]	; (800dee4 <pbuf_alloc+0x1d8>)
 800ddde:	4842      	ldr	r0, [pc, #264]	; (800dee8 <pbuf_alloc+0x1dc>)
 800dde0:	f00a f8e4 	bl	8017fac <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800dde4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dde6:	3303      	adds	r3, #3
 800dde8:	f023 0303 	bic.w	r3, r3, #3
 800ddec:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800ddf0:	d106      	bne.n	800de00 <pbuf_alloc+0xf4>
 800ddf2:	4b3b      	ldr	r3, [pc, #236]	; (800dee0 <pbuf_alloc+0x1d4>)
 800ddf4:	f44f 7281 	mov.w	r2, #258	; 0x102
 800ddf8:	493c      	ldr	r1, [pc, #240]	; (800deec <pbuf_alloc+0x1e0>)
 800ddfa:	483b      	ldr	r0, [pc, #236]	; (800dee8 <pbuf_alloc+0x1dc>)
 800ddfc:	f00a f8d6 	bl	8017fac <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800de00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de02:	2b00      	cmp	r3, #0
 800de04:	d102      	bne.n	800de0c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800de06:	693b      	ldr	r3, [r7, #16]
 800de08:	627b      	str	r3, [r7, #36]	; 0x24
 800de0a:	e002      	b.n	800de12 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800de0c:	69fb      	ldr	r3, [r7, #28]
 800de0e:	693a      	ldr	r2, [r7, #16]
 800de10:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800de12:	693b      	ldr	r3, [r7, #16]
 800de14:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800de16:	8b7a      	ldrh	r2, [r7, #26]
 800de18:	89fb      	ldrh	r3, [r7, #14]
 800de1a:	1ad3      	subs	r3, r2, r3
 800de1c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800de1e:	2300      	movs	r3, #0
 800de20:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800de22:	8b7b      	ldrh	r3, [r7, #26]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d19e      	bne.n	800dd66 <pbuf_alloc+0x5a>
      break;
 800de28:	e055      	b.n	800ded6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800de2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800de2c:	3303      	adds	r3, #3
 800de2e:	b29b      	uxth	r3, r3
 800de30:	f023 0303 	bic.w	r3, r3, #3
 800de34:	b29a      	uxth	r2, r3
 800de36:	88bb      	ldrh	r3, [r7, #4]
 800de38:	3303      	adds	r3, #3
 800de3a:	b29b      	uxth	r3, r3
 800de3c:	f023 0303 	bic.w	r3, r3, #3
 800de40:	b29b      	uxth	r3, r3
 800de42:	4413      	add	r3, r2
 800de44:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800de46:	8b3b      	ldrh	r3, [r7, #24]
 800de48:	3310      	adds	r3, #16
 800de4a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800de4c:	8b3a      	ldrh	r2, [r7, #24]
 800de4e:	88bb      	ldrh	r3, [r7, #4]
 800de50:	3303      	adds	r3, #3
 800de52:	f023 0303 	bic.w	r3, r3, #3
 800de56:	429a      	cmp	r2, r3
 800de58:	d306      	bcc.n	800de68 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800de5a:	8afa      	ldrh	r2, [r7, #22]
 800de5c:	88bb      	ldrh	r3, [r7, #4]
 800de5e:	3303      	adds	r3, #3
 800de60:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800de64:	429a      	cmp	r2, r3
 800de66:	d201      	bcs.n	800de6c <pbuf_alloc+0x160>
        return NULL;
 800de68:	2300      	movs	r3, #0
 800de6a:	e035      	b.n	800ded8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800de6c:	8afb      	ldrh	r3, [r7, #22]
 800de6e:	4618      	mov	r0, r3
 800de70:	f7ff fa64 	bl	800d33c <mem_malloc>
 800de74:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800de76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d101      	bne.n	800de80 <pbuf_alloc+0x174>
        return NULL;
 800de7c:	2300      	movs	r3, #0
 800de7e:	e02b      	b.n	800ded8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800de80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800de82:	3310      	adds	r3, #16
 800de84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de86:	4413      	add	r3, r2
 800de88:	3303      	adds	r3, #3
 800de8a:	f023 0303 	bic.w	r3, r3, #3
 800de8e:	4618      	mov	r0, r3
 800de90:	88b9      	ldrh	r1, [r7, #4]
 800de92:	88ba      	ldrh	r2, [r7, #4]
 800de94:	2300      	movs	r3, #0
 800de96:	9301      	str	r3, [sp, #4]
 800de98:	887b      	ldrh	r3, [r7, #2]
 800de9a:	9300      	str	r3, [sp, #0]
 800de9c:	460b      	mov	r3, r1
 800de9e:	4601      	mov	r1, r0
 800dea0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dea2:	f7ff ff09 	bl	800dcb8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800dea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dea8:	685b      	ldr	r3, [r3, #4]
 800deaa:	f003 0303 	and.w	r3, r3, #3
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d010      	beq.n	800ded4 <pbuf_alloc+0x1c8>
 800deb2:	4b0b      	ldr	r3, [pc, #44]	; (800dee0 <pbuf_alloc+0x1d4>)
 800deb4:	f44f 7291 	mov.w	r2, #290	; 0x122
 800deb8:	490d      	ldr	r1, [pc, #52]	; (800def0 <pbuf_alloc+0x1e4>)
 800deba:	480b      	ldr	r0, [pc, #44]	; (800dee8 <pbuf_alloc+0x1dc>)
 800debc:	f00a f876 	bl	8017fac <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800dec0:	e008      	b.n	800ded4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800dec2:	4b07      	ldr	r3, [pc, #28]	; (800dee0 <pbuf_alloc+0x1d4>)
 800dec4:	f240 1227 	movw	r2, #295	; 0x127
 800dec8:	490a      	ldr	r1, [pc, #40]	; (800def4 <pbuf_alloc+0x1e8>)
 800deca:	4807      	ldr	r0, [pc, #28]	; (800dee8 <pbuf_alloc+0x1dc>)
 800decc:	f00a f86e 	bl	8017fac <iprintf>
      return NULL;
 800ded0:	2300      	movs	r3, #0
 800ded2:	e001      	b.n	800ded8 <pbuf_alloc+0x1cc>
      break;
 800ded4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800ded6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ded8:	4618      	mov	r0, r3
 800deda:	3728      	adds	r7, #40	; 0x28
 800dedc:	46bd      	mov	sp, r7
 800dede:	bd80      	pop	{r7, pc}
 800dee0:	0801b754 	.word	0x0801b754
 800dee4:	0801b784 	.word	0x0801b784
 800dee8:	0801b7b4 	.word	0x0801b7b4
 800deec:	0801b7dc 	.word	0x0801b7dc
 800def0:	0801b810 	.word	0x0801b810
 800def4:	0801b83c 	.word	0x0801b83c

0800def8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b086      	sub	sp, #24
 800defc:	af02      	add	r7, sp, #8
 800defe:	6078      	str	r0, [r7, #4]
 800df00:	460b      	mov	r3, r1
 800df02:	807b      	strh	r3, [r7, #2]
 800df04:	4613      	mov	r3, r2
 800df06:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800df08:	883b      	ldrh	r3, [r7, #0]
 800df0a:	2b41      	cmp	r3, #65	; 0x41
 800df0c:	d009      	beq.n	800df22 <pbuf_alloc_reference+0x2a>
 800df0e:	883b      	ldrh	r3, [r7, #0]
 800df10:	2b01      	cmp	r3, #1
 800df12:	d006      	beq.n	800df22 <pbuf_alloc_reference+0x2a>
 800df14:	4b0f      	ldr	r3, [pc, #60]	; (800df54 <pbuf_alloc_reference+0x5c>)
 800df16:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800df1a:	490f      	ldr	r1, [pc, #60]	; (800df58 <pbuf_alloc_reference+0x60>)
 800df1c:	480f      	ldr	r0, [pc, #60]	; (800df5c <pbuf_alloc_reference+0x64>)
 800df1e:	f00a f845 	bl	8017fac <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800df22:	2007      	movs	r0, #7
 800df24:	f7ff fb78 	bl	800d618 <memp_malloc>
 800df28:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d101      	bne.n	800df34 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800df30:	2300      	movs	r3, #0
 800df32:	e00b      	b.n	800df4c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800df34:	8879      	ldrh	r1, [r7, #2]
 800df36:	887a      	ldrh	r2, [r7, #2]
 800df38:	2300      	movs	r3, #0
 800df3a:	9301      	str	r3, [sp, #4]
 800df3c:	883b      	ldrh	r3, [r7, #0]
 800df3e:	9300      	str	r3, [sp, #0]
 800df40:	460b      	mov	r3, r1
 800df42:	6879      	ldr	r1, [r7, #4]
 800df44:	68f8      	ldr	r0, [r7, #12]
 800df46:	f7ff feb7 	bl	800dcb8 <pbuf_init_alloced_pbuf>
  return p;
 800df4a:	68fb      	ldr	r3, [r7, #12]
}
 800df4c:	4618      	mov	r0, r3
 800df4e:	3710      	adds	r7, #16
 800df50:	46bd      	mov	sp, r7
 800df52:	bd80      	pop	{r7, pc}
 800df54:	0801b754 	.word	0x0801b754
 800df58:	0801b858 	.word	0x0801b858
 800df5c:	0801b7b4 	.word	0x0801b7b4

0800df60 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b088      	sub	sp, #32
 800df64:	af02      	add	r7, sp, #8
 800df66:	607b      	str	r3, [r7, #4]
 800df68:	4603      	mov	r3, r0
 800df6a:	73fb      	strb	r3, [r7, #15]
 800df6c:	460b      	mov	r3, r1
 800df6e:	81bb      	strh	r3, [r7, #12]
 800df70:	4613      	mov	r3, r2
 800df72:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800df74:	7bfb      	ldrb	r3, [r7, #15]
 800df76:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800df78:	8a7b      	ldrh	r3, [r7, #18]
 800df7a:	3303      	adds	r3, #3
 800df7c:	f023 0203 	bic.w	r2, r3, #3
 800df80:	89bb      	ldrh	r3, [r7, #12]
 800df82:	441a      	add	r2, r3
 800df84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df86:	429a      	cmp	r2, r3
 800df88:	d901      	bls.n	800df8e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800df8a:	2300      	movs	r3, #0
 800df8c:	e018      	b.n	800dfc0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800df8e:	6a3b      	ldr	r3, [r7, #32]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d007      	beq.n	800dfa4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800df94:	8a7b      	ldrh	r3, [r7, #18]
 800df96:	3303      	adds	r3, #3
 800df98:	f023 0303 	bic.w	r3, r3, #3
 800df9c:	6a3a      	ldr	r2, [r7, #32]
 800df9e:	4413      	add	r3, r2
 800dfa0:	617b      	str	r3, [r7, #20]
 800dfa2:	e001      	b.n	800dfa8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800dfa8:	6878      	ldr	r0, [r7, #4]
 800dfaa:	89b9      	ldrh	r1, [r7, #12]
 800dfac:	89ba      	ldrh	r2, [r7, #12]
 800dfae:	2302      	movs	r3, #2
 800dfb0:	9301      	str	r3, [sp, #4]
 800dfb2:	897b      	ldrh	r3, [r7, #10]
 800dfb4:	9300      	str	r3, [sp, #0]
 800dfb6:	460b      	mov	r3, r1
 800dfb8:	6979      	ldr	r1, [r7, #20]
 800dfba:	f7ff fe7d 	bl	800dcb8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800dfbe:	687b      	ldr	r3, [r7, #4]
}
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	3718      	adds	r7, #24
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}

0800dfc8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b084      	sub	sp, #16
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
 800dfd0:	460b      	mov	r3, r1
 800dfd2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d106      	bne.n	800dfe8 <pbuf_realloc+0x20>
 800dfda:	4b3a      	ldr	r3, [pc, #232]	; (800e0c4 <pbuf_realloc+0xfc>)
 800dfdc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800dfe0:	4939      	ldr	r1, [pc, #228]	; (800e0c8 <pbuf_realloc+0x100>)
 800dfe2:	483a      	ldr	r0, [pc, #232]	; (800e0cc <pbuf_realloc+0x104>)
 800dfe4:	f009 ffe2 	bl	8017fac <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	891b      	ldrh	r3, [r3, #8]
 800dfec:	887a      	ldrh	r2, [r7, #2]
 800dfee:	429a      	cmp	r2, r3
 800dff0:	d263      	bcs.n	800e0ba <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	891a      	ldrh	r2, [r3, #8]
 800dff6:	887b      	ldrh	r3, [r7, #2]
 800dff8:	1ad3      	subs	r3, r2, r3
 800dffa:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800dffc:	887b      	ldrh	r3, [r7, #2]
 800dffe:	817b      	strh	r3, [r7, #10]
  q = p;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800e004:	e018      	b.n	800e038 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	895b      	ldrh	r3, [r3, #10]
 800e00a:	897a      	ldrh	r2, [r7, #10]
 800e00c:	1ad3      	subs	r3, r2, r3
 800e00e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	891a      	ldrh	r2, [r3, #8]
 800e014:	893b      	ldrh	r3, [r7, #8]
 800e016:	1ad3      	subs	r3, r2, r3
 800e018:	b29a      	uxth	r2, r3
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d106      	bne.n	800e038 <pbuf_realloc+0x70>
 800e02a:	4b26      	ldr	r3, [pc, #152]	; (800e0c4 <pbuf_realloc+0xfc>)
 800e02c:	f240 12af 	movw	r2, #431	; 0x1af
 800e030:	4927      	ldr	r1, [pc, #156]	; (800e0d0 <pbuf_realloc+0x108>)
 800e032:	4826      	ldr	r0, [pc, #152]	; (800e0cc <pbuf_realloc+0x104>)
 800e034:	f009 ffba 	bl	8017fac <iprintf>
  while (rem_len > q->len) {
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	895b      	ldrh	r3, [r3, #10]
 800e03c:	897a      	ldrh	r2, [r7, #10]
 800e03e:	429a      	cmp	r2, r3
 800e040:	d8e1      	bhi.n	800e006 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	7b1b      	ldrb	r3, [r3, #12]
 800e046:	f003 030f 	and.w	r3, r3, #15
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d121      	bne.n	800e092 <pbuf_realloc+0xca>
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	895b      	ldrh	r3, [r3, #10]
 800e052:	897a      	ldrh	r2, [r7, #10]
 800e054:	429a      	cmp	r2, r3
 800e056:	d01c      	beq.n	800e092 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	7b5b      	ldrb	r3, [r3, #13]
 800e05c:	f003 0302 	and.w	r3, r3, #2
 800e060:	2b00      	cmp	r3, #0
 800e062:	d116      	bne.n	800e092 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	685a      	ldr	r2, [r3, #4]
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	1ad3      	subs	r3, r2, r3
 800e06c:	b29a      	uxth	r2, r3
 800e06e:	897b      	ldrh	r3, [r7, #10]
 800e070:	4413      	add	r3, r2
 800e072:	b29b      	uxth	r3, r3
 800e074:	4619      	mov	r1, r3
 800e076:	68f8      	ldr	r0, [r7, #12]
 800e078:	f7ff f864 	bl	800d144 <mem_trim>
 800e07c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d106      	bne.n	800e092 <pbuf_realloc+0xca>
 800e084:	4b0f      	ldr	r3, [pc, #60]	; (800e0c4 <pbuf_realloc+0xfc>)
 800e086:	f240 12bd 	movw	r2, #445	; 0x1bd
 800e08a:	4912      	ldr	r1, [pc, #72]	; (800e0d4 <pbuf_realloc+0x10c>)
 800e08c:	480f      	ldr	r0, [pc, #60]	; (800e0cc <pbuf_realloc+0x104>)
 800e08e:	f009 ff8d 	bl	8017fac <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	897a      	ldrh	r2, [r7, #10]
 800e096:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	895a      	ldrh	r2, [r3, #10]
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d004      	beq.n	800e0b2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f000 f911 	bl	800e2d4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	601a      	str	r2, [r3, #0]
 800e0b8:	e000      	b.n	800e0bc <pbuf_realloc+0xf4>
    return;
 800e0ba:	bf00      	nop

}
 800e0bc:	3710      	adds	r7, #16
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}
 800e0c2:	bf00      	nop
 800e0c4:	0801b754 	.word	0x0801b754
 800e0c8:	0801b86c 	.word	0x0801b86c
 800e0cc:	0801b7b4 	.word	0x0801b7b4
 800e0d0:	0801b884 	.word	0x0801b884
 800e0d4:	0801b89c 	.word	0x0801b89c

0800e0d8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b086      	sub	sp, #24
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	60f8      	str	r0, [r7, #12]
 800e0e0:	60b9      	str	r1, [r7, #8]
 800e0e2:	4613      	mov	r3, r2
 800e0e4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d106      	bne.n	800e0fa <pbuf_add_header_impl+0x22>
 800e0ec:	4b2b      	ldr	r3, [pc, #172]	; (800e19c <pbuf_add_header_impl+0xc4>)
 800e0ee:	f240 12df 	movw	r2, #479	; 0x1df
 800e0f2:	492b      	ldr	r1, [pc, #172]	; (800e1a0 <pbuf_add_header_impl+0xc8>)
 800e0f4:	482b      	ldr	r0, [pc, #172]	; (800e1a4 <pbuf_add_header_impl+0xcc>)
 800e0f6:	f009 ff59 	bl	8017fac <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d003      	beq.n	800e108 <pbuf_add_header_impl+0x30>
 800e100:	68bb      	ldr	r3, [r7, #8]
 800e102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e106:	d301      	bcc.n	800e10c <pbuf_add_header_impl+0x34>
    return 1;
 800e108:	2301      	movs	r3, #1
 800e10a:	e043      	b.n	800e194 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800e10c:	68bb      	ldr	r3, [r7, #8]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d101      	bne.n	800e116 <pbuf_add_header_impl+0x3e>
    return 0;
 800e112:	2300      	movs	r3, #0
 800e114:	e03e      	b.n	800e194 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800e116:	68bb      	ldr	r3, [r7, #8]
 800e118:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	891a      	ldrh	r2, [r3, #8]
 800e11e:	8a7b      	ldrh	r3, [r7, #18]
 800e120:	4413      	add	r3, r2
 800e122:	b29b      	uxth	r3, r3
 800e124:	8a7a      	ldrh	r2, [r7, #18]
 800e126:	429a      	cmp	r2, r3
 800e128:	d901      	bls.n	800e12e <pbuf_add_header_impl+0x56>
    return 1;
 800e12a:	2301      	movs	r3, #1
 800e12c:	e032      	b.n	800e194 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	7b1b      	ldrb	r3, [r3, #12]
 800e132:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800e134:	8a3b      	ldrh	r3, [r7, #16]
 800e136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d00c      	beq.n	800e158 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	685a      	ldr	r2, [r3, #4]
 800e142:	68bb      	ldr	r3, [r7, #8]
 800e144:	425b      	negs	r3, r3
 800e146:	4413      	add	r3, r2
 800e148:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	3310      	adds	r3, #16
 800e14e:	697a      	ldr	r2, [r7, #20]
 800e150:	429a      	cmp	r2, r3
 800e152:	d20d      	bcs.n	800e170 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800e154:	2301      	movs	r3, #1
 800e156:	e01d      	b.n	800e194 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800e158:	79fb      	ldrb	r3, [r7, #7]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d006      	beq.n	800e16c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	685a      	ldr	r2, [r3, #4]
 800e162:	68bb      	ldr	r3, [r7, #8]
 800e164:	425b      	negs	r3, r3
 800e166:	4413      	add	r3, r2
 800e168:	617b      	str	r3, [r7, #20]
 800e16a:	e001      	b.n	800e170 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800e16c:	2301      	movs	r3, #1
 800e16e:	e011      	b.n	800e194 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	697a      	ldr	r2, [r7, #20]
 800e174:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	895a      	ldrh	r2, [r3, #10]
 800e17a:	8a7b      	ldrh	r3, [r7, #18]
 800e17c:	4413      	add	r3, r2
 800e17e:	b29a      	uxth	r2, r3
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	891a      	ldrh	r2, [r3, #8]
 800e188:	8a7b      	ldrh	r3, [r7, #18]
 800e18a:	4413      	add	r3, r2
 800e18c:	b29a      	uxth	r2, r3
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	811a      	strh	r2, [r3, #8]


  return 0;
 800e192:	2300      	movs	r3, #0
}
 800e194:	4618      	mov	r0, r3
 800e196:	3718      	adds	r7, #24
 800e198:	46bd      	mov	sp, r7
 800e19a:	bd80      	pop	{r7, pc}
 800e19c:	0801b754 	.word	0x0801b754
 800e1a0:	0801b8b8 	.word	0x0801b8b8
 800e1a4:	0801b7b4 	.word	0x0801b7b4

0800e1a8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b082      	sub	sp, #8
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
 800e1b0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	6839      	ldr	r1, [r7, #0]
 800e1b6:	6878      	ldr	r0, [r7, #4]
 800e1b8:	f7ff ff8e 	bl	800e0d8 <pbuf_add_header_impl>
 800e1bc:	4603      	mov	r3, r0
}
 800e1be:	4618      	mov	r0, r3
 800e1c0:	3708      	adds	r7, #8
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	bd80      	pop	{r7, pc}
	...

0800e1c8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b084      	sub	sp, #16
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
 800e1d0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d106      	bne.n	800e1e6 <pbuf_remove_header+0x1e>
 800e1d8:	4b20      	ldr	r3, [pc, #128]	; (800e25c <pbuf_remove_header+0x94>)
 800e1da:	f240 224b 	movw	r2, #587	; 0x24b
 800e1de:	4920      	ldr	r1, [pc, #128]	; (800e260 <pbuf_remove_header+0x98>)
 800e1e0:	4820      	ldr	r0, [pc, #128]	; (800e264 <pbuf_remove_header+0x9c>)
 800e1e2:	f009 fee3 	bl	8017fac <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d003      	beq.n	800e1f4 <pbuf_remove_header+0x2c>
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e1f2:	d301      	bcc.n	800e1f8 <pbuf_remove_header+0x30>
    return 1;
 800e1f4:	2301      	movs	r3, #1
 800e1f6:	e02c      	b.n	800e252 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d101      	bne.n	800e202 <pbuf_remove_header+0x3a>
    return 0;
 800e1fe:	2300      	movs	r3, #0
 800e200:	e027      	b.n	800e252 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800e202:	683b      	ldr	r3, [r7, #0]
 800e204:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	895b      	ldrh	r3, [r3, #10]
 800e20a:	89fa      	ldrh	r2, [r7, #14]
 800e20c:	429a      	cmp	r2, r3
 800e20e:	d908      	bls.n	800e222 <pbuf_remove_header+0x5a>
 800e210:	4b12      	ldr	r3, [pc, #72]	; (800e25c <pbuf_remove_header+0x94>)
 800e212:	f240 2255 	movw	r2, #597	; 0x255
 800e216:	4914      	ldr	r1, [pc, #80]	; (800e268 <pbuf_remove_header+0xa0>)
 800e218:	4812      	ldr	r0, [pc, #72]	; (800e264 <pbuf_remove_header+0x9c>)
 800e21a:	f009 fec7 	bl	8017fac <iprintf>
 800e21e:	2301      	movs	r3, #1
 800e220:	e017      	b.n	800e252 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	685b      	ldr	r3, [r3, #4]
 800e226:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	685a      	ldr	r2, [r3, #4]
 800e22c:	683b      	ldr	r3, [r7, #0]
 800e22e:	441a      	add	r2, r3
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	895a      	ldrh	r2, [r3, #10]
 800e238:	89fb      	ldrh	r3, [r7, #14]
 800e23a:	1ad3      	subs	r3, r2, r3
 800e23c:	b29a      	uxth	r2, r3
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	891a      	ldrh	r2, [r3, #8]
 800e246:	89fb      	ldrh	r3, [r7, #14]
 800e248:	1ad3      	subs	r3, r2, r3
 800e24a:	b29a      	uxth	r2, r3
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e250:	2300      	movs	r3, #0
}
 800e252:	4618      	mov	r0, r3
 800e254:	3710      	adds	r7, #16
 800e256:	46bd      	mov	sp, r7
 800e258:	bd80      	pop	{r7, pc}
 800e25a:	bf00      	nop
 800e25c:	0801b754 	.word	0x0801b754
 800e260:	0801b8b8 	.word	0x0801b8b8
 800e264:	0801b7b4 	.word	0x0801b7b4
 800e268:	0801b8c4 	.word	0x0801b8c4

0800e26c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b082      	sub	sp, #8
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
 800e274:	460b      	mov	r3, r1
 800e276:	807b      	strh	r3, [r7, #2]
 800e278:	4613      	mov	r3, r2
 800e27a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e27c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e280:	2b00      	cmp	r3, #0
 800e282:	da08      	bge.n	800e296 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e284:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e288:	425b      	negs	r3, r3
 800e28a:	4619      	mov	r1, r3
 800e28c:	6878      	ldr	r0, [r7, #4]
 800e28e:	f7ff ff9b 	bl	800e1c8 <pbuf_remove_header>
 800e292:	4603      	mov	r3, r0
 800e294:	e007      	b.n	800e2a6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e296:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e29a:	787a      	ldrb	r2, [r7, #1]
 800e29c:	4619      	mov	r1, r3
 800e29e:	6878      	ldr	r0, [r7, #4]
 800e2a0:	f7ff ff1a 	bl	800e0d8 <pbuf_add_header_impl>
 800e2a4:	4603      	mov	r3, r0
  }
}
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	3708      	adds	r7, #8
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	bd80      	pop	{r7, pc}

0800e2ae <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e2ae:	b580      	push	{r7, lr}
 800e2b0:	b082      	sub	sp, #8
 800e2b2:	af00      	add	r7, sp, #0
 800e2b4:	6078      	str	r0, [r7, #4]
 800e2b6:	460b      	mov	r3, r1
 800e2b8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e2ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e2be:	2201      	movs	r2, #1
 800e2c0:	4619      	mov	r1, r3
 800e2c2:	6878      	ldr	r0, [r7, #4]
 800e2c4:	f7ff ffd2 	bl	800e26c <pbuf_header_impl>
 800e2c8:	4603      	mov	r3, r0
}
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	3708      	adds	r7, #8
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	bd80      	pop	{r7, pc}
	...

0800e2d4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b086      	sub	sp, #24
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d10b      	bne.n	800e2fa <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d106      	bne.n	800e2f6 <pbuf_free+0x22>
 800e2e8:	4b38      	ldr	r3, [pc, #224]	; (800e3cc <pbuf_free+0xf8>)
 800e2ea:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800e2ee:	4938      	ldr	r1, [pc, #224]	; (800e3d0 <pbuf_free+0xfc>)
 800e2f0:	4838      	ldr	r0, [pc, #224]	; (800e3d4 <pbuf_free+0x100>)
 800e2f2:	f009 fe5b 	bl	8017fac <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	e063      	b.n	800e3c2 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e2fe:	e05c      	b.n	800e3ba <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	7b9b      	ldrb	r3, [r3, #14]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d106      	bne.n	800e316 <pbuf_free+0x42>
 800e308:	4b30      	ldr	r3, [pc, #192]	; (800e3cc <pbuf_free+0xf8>)
 800e30a:	f240 22f1 	movw	r2, #753	; 0x2f1
 800e30e:	4932      	ldr	r1, [pc, #200]	; (800e3d8 <pbuf_free+0x104>)
 800e310:	4830      	ldr	r0, [pc, #192]	; (800e3d4 <pbuf_free+0x100>)
 800e312:	f009 fe4b 	bl	8017fac <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	7b9b      	ldrb	r3, [r3, #14]
 800e31a:	3b01      	subs	r3, #1
 800e31c:	b2da      	uxtb	r2, r3
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	739a      	strb	r2, [r3, #14]
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	7b9b      	ldrb	r3, [r3, #14]
 800e326:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e328:	7dbb      	ldrb	r3, [r7, #22]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d143      	bne.n	800e3b6 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	7b1b      	ldrb	r3, [r3, #12]
 800e338:	f003 030f 	and.w	r3, r3, #15
 800e33c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	7b5b      	ldrb	r3, [r3, #13]
 800e342:	f003 0302 	and.w	r3, r3, #2
 800e346:	2b00      	cmp	r3, #0
 800e348:	d011      	beq.n	800e36e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800e34e:	68bb      	ldr	r3, [r7, #8]
 800e350:	691b      	ldr	r3, [r3, #16]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d106      	bne.n	800e364 <pbuf_free+0x90>
 800e356:	4b1d      	ldr	r3, [pc, #116]	; (800e3cc <pbuf_free+0xf8>)
 800e358:	f240 22ff 	movw	r2, #767	; 0x2ff
 800e35c:	491f      	ldr	r1, [pc, #124]	; (800e3dc <pbuf_free+0x108>)
 800e35e:	481d      	ldr	r0, [pc, #116]	; (800e3d4 <pbuf_free+0x100>)
 800e360:	f009 fe24 	bl	8017fac <iprintf>
        pc->custom_free_function(p);
 800e364:	68bb      	ldr	r3, [r7, #8]
 800e366:	691b      	ldr	r3, [r3, #16]
 800e368:	6878      	ldr	r0, [r7, #4]
 800e36a:	4798      	blx	r3
 800e36c:	e01d      	b.n	800e3aa <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800e36e:	7bfb      	ldrb	r3, [r7, #15]
 800e370:	2b02      	cmp	r3, #2
 800e372:	d104      	bne.n	800e37e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800e374:	6879      	ldr	r1, [r7, #4]
 800e376:	2008      	movs	r0, #8
 800e378:	f7ff f99a 	bl	800d6b0 <memp_free>
 800e37c:	e015      	b.n	800e3aa <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800e37e:	7bfb      	ldrb	r3, [r7, #15]
 800e380:	2b01      	cmp	r3, #1
 800e382:	d104      	bne.n	800e38e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800e384:	6879      	ldr	r1, [r7, #4]
 800e386:	2007      	movs	r0, #7
 800e388:	f7ff f992 	bl	800d6b0 <memp_free>
 800e38c:	e00d      	b.n	800e3aa <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800e38e:	7bfb      	ldrb	r3, [r7, #15]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d103      	bne.n	800e39c <pbuf_free+0xc8>
          mem_free(p);
 800e394:	6878      	ldr	r0, [r7, #4]
 800e396:	f7fe fe6b 	bl	800d070 <mem_free>
 800e39a:	e006      	b.n	800e3aa <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800e39c:	4b0b      	ldr	r3, [pc, #44]	; (800e3cc <pbuf_free+0xf8>)
 800e39e:	f240 320f 	movw	r2, #783	; 0x30f
 800e3a2:	490f      	ldr	r1, [pc, #60]	; (800e3e0 <pbuf_free+0x10c>)
 800e3a4:	480b      	ldr	r0, [pc, #44]	; (800e3d4 <pbuf_free+0x100>)
 800e3a6:	f009 fe01 	bl	8017fac <iprintf>
        }
      }
      count++;
 800e3aa:	7dfb      	ldrb	r3, [r7, #23]
 800e3ac:	3301      	adds	r3, #1
 800e3ae:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800e3b0:	693b      	ldr	r3, [r7, #16]
 800e3b2:	607b      	str	r3, [r7, #4]
 800e3b4:	e001      	b.n	800e3ba <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d19f      	bne.n	800e300 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800e3c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	3718      	adds	r7, #24
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	bd80      	pop	{r7, pc}
 800e3ca:	bf00      	nop
 800e3cc:	0801b754 	.word	0x0801b754
 800e3d0:	0801b8b8 	.word	0x0801b8b8
 800e3d4:	0801b7b4 	.word	0x0801b7b4
 800e3d8:	0801b8e4 	.word	0x0801b8e4
 800e3dc:	0801b8fc 	.word	0x0801b8fc
 800e3e0:	0801b920 	.word	0x0801b920

0800e3e4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800e3e4:	b480      	push	{r7}
 800e3e6:	b085      	sub	sp, #20
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800e3f0:	e005      	b.n	800e3fe <pbuf_clen+0x1a>
    ++len;
 800e3f2:	89fb      	ldrh	r3, [r7, #14]
 800e3f4:	3301      	adds	r3, #1
 800e3f6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d1f6      	bne.n	800e3f2 <pbuf_clen+0xe>
  }
  return len;
 800e404:	89fb      	ldrh	r3, [r7, #14]
}
 800e406:	4618      	mov	r0, r3
 800e408:	3714      	adds	r7, #20
 800e40a:	46bd      	mov	sp, r7
 800e40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e410:	4770      	bx	lr
	...

0800e414 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b082      	sub	sp, #8
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d010      	beq.n	800e444 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	7b9b      	ldrb	r3, [r3, #14]
 800e426:	3301      	adds	r3, #1
 800e428:	b2da      	uxtb	r2, r3
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	7b9b      	ldrb	r3, [r3, #14]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d106      	bne.n	800e444 <pbuf_ref+0x30>
 800e436:	4b05      	ldr	r3, [pc, #20]	; (800e44c <pbuf_ref+0x38>)
 800e438:	f240 3242 	movw	r2, #834	; 0x342
 800e43c:	4904      	ldr	r1, [pc, #16]	; (800e450 <pbuf_ref+0x3c>)
 800e43e:	4805      	ldr	r0, [pc, #20]	; (800e454 <pbuf_ref+0x40>)
 800e440:	f009 fdb4 	bl	8017fac <iprintf>
  }
}
 800e444:	bf00      	nop
 800e446:	3708      	adds	r7, #8
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}
 800e44c:	0801b754 	.word	0x0801b754
 800e450:	0801b934 	.word	0x0801b934
 800e454:	0801b7b4 	.word	0x0801b7b4

0800e458 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b084      	sub	sp, #16
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
 800e460:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d002      	beq.n	800e46e <pbuf_cat+0x16>
 800e468:	683b      	ldr	r3, [r7, #0]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d107      	bne.n	800e47e <pbuf_cat+0x26>
 800e46e:	4b20      	ldr	r3, [pc, #128]	; (800e4f0 <pbuf_cat+0x98>)
 800e470:	f240 3259 	movw	r2, #857	; 0x359
 800e474:	491f      	ldr	r1, [pc, #124]	; (800e4f4 <pbuf_cat+0x9c>)
 800e476:	4820      	ldr	r0, [pc, #128]	; (800e4f8 <pbuf_cat+0xa0>)
 800e478:	f009 fd98 	bl	8017fac <iprintf>
 800e47c:	e034      	b.n	800e4e8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	60fb      	str	r3, [r7, #12]
 800e482:	e00a      	b.n	800e49a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	891a      	ldrh	r2, [r3, #8]
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	891b      	ldrh	r3, [r3, #8]
 800e48c:	4413      	add	r3, r2
 800e48e:	b29a      	uxth	r2, r3
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	60fb      	str	r3, [r7, #12]
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d1f0      	bne.n	800e484 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	891a      	ldrh	r2, [r3, #8]
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	895b      	ldrh	r3, [r3, #10]
 800e4aa:	429a      	cmp	r2, r3
 800e4ac:	d006      	beq.n	800e4bc <pbuf_cat+0x64>
 800e4ae:	4b10      	ldr	r3, [pc, #64]	; (800e4f0 <pbuf_cat+0x98>)
 800e4b0:	f240 3262 	movw	r2, #866	; 0x362
 800e4b4:	4911      	ldr	r1, [pc, #68]	; (800e4fc <pbuf_cat+0xa4>)
 800e4b6:	4810      	ldr	r0, [pc, #64]	; (800e4f8 <pbuf_cat+0xa0>)
 800e4b8:	f009 fd78 	bl	8017fac <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d006      	beq.n	800e4d2 <pbuf_cat+0x7a>
 800e4c4:	4b0a      	ldr	r3, [pc, #40]	; (800e4f0 <pbuf_cat+0x98>)
 800e4c6:	f240 3263 	movw	r2, #867	; 0x363
 800e4ca:	490d      	ldr	r1, [pc, #52]	; (800e500 <pbuf_cat+0xa8>)
 800e4cc:	480a      	ldr	r0, [pc, #40]	; (800e4f8 <pbuf_cat+0xa0>)
 800e4ce:	f009 fd6d 	bl	8017fac <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	891a      	ldrh	r2, [r3, #8]
 800e4d6:	683b      	ldr	r3, [r7, #0]
 800e4d8:	891b      	ldrh	r3, [r3, #8]
 800e4da:	4413      	add	r3, r2
 800e4dc:	b29a      	uxth	r2, r3
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	683a      	ldr	r2, [r7, #0]
 800e4e6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800e4e8:	3710      	adds	r7, #16
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd80      	pop	{r7, pc}
 800e4ee:	bf00      	nop
 800e4f0:	0801b754 	.word	0x0801b754
 800e4f4:	0801b948 	.word	0x0801b948
 800e4f8:	0801b7b4 	.word	0x0801b7b4
 800e4fc:	0801b980 	.word	0x0801b980
 800e500:	0801b9b0 	.word	0x0801b9b0

0800e504 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b082      	sub	sp, #8
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
 800e50c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800e50e:	6839      	ldr	r1, [r7, #0]
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	f7ff ffa1 	bl	800e458 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800e516:	6838      	ldr	r0, [r7, #0]
 800e518:	f7ff ff7c 	bl	800e414 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800e51c:	bf00      	nop
 800e51e:	3708      	adds	r7, #8
 800e520:	46bd      	mov	sp, r7
 800e522:	bd80      	pop	{r7, pc}

0800e524 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b086      	sub	sp, #24
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
 800e52c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800e52e:	2300      	movs	r3, #0
 800e530:	617b      	str	r3, [r7, #20]
 800e532:	2300      	movs	r3, #0
 800e534:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d008      	beq.n	800e54e <pbuf_copy+0x2a>
 800e53c:	683b      	ldr	r3, [r7, #0]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d005      	beq.n	800e54e <pbuf_copy+0x2a>
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	891a      	ldrh	r2, [r3, #8]
 800e546:	683b      	ldr	r3, [r7, #0]
 800e548:	891b      	ldrh	r3, [r3, #8]
 800e54a:	429a      	cmp	r2, r3
 800e54c:	d209      	bcs.n	800e562 <pbuf_copy+0x3e>
 800e54e:	4b57      	ldr	r3, [pc, #348]	; (800e6ac <pbuf_copy+0x188>)
 800e550:	f240 32c9 	movw	r2, #969	; 0x3c9
 800e554:	4956      	ldr	r1, [pc, #344]	; (800e6b0 <pbuf_copy+0x18c>)
 800e556:	4857      	ldr	r0, [pc, #348]	; (800e6b4 <pbuf_copy+0x190>)
 800e558:	f009 fd28 	bl	8017fac <iprintf>
 800e55c:	f06f 030f 	mvn.w	r3, #15
 800e560:	e09f      	b.n	800e6a2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	895b      	ldrh	r3, [r3, #10]
 800e566:	461a      	mov	r2, r3
 800e568:	697b      	ldr	r3, [r7, #20]
 800e56a:	1ad2      	subs	r2, r2, r3
 800e56c:	683b      	ldr	r3, [r7, #0]
 800e56e:	895b      	ldrh	r3, [r3, #10]
 800e570:	4619      	mov	r1, r3
 800e572:	693b      	ldr	r3, [r7, #16]
 800e574:	1acb      	subs	r3, r1, r3
 800e576:	429a      	cmp	r2, r3
 800e578:	d306      	bcc.n	800e588 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	895b      	ldrh	r3, [r3, #10]
 800e57e:	461a      	mov	r2, r3
 800e580:	693b      	ldr	r3, [r7, #16]
 800e582:	1ad3      	subs	r3, r2, r3
 800e584:	60fb      	str	r3, [r7, #12]
 800e586:	e005      	b.n	800e594 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	895b      	ldrh	r3, [r3, #10]
 800e58c:	461a      	mov	r2, r3
 800e58e:	697b      	ldr	r3, [r7, #20]
 800e590:	1ad3      	subs	r3, r2, r3
 800e592:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	685a      	ldr	r2, [r3, #4]
 800e598:	697b      	ldr	r3, [r7, #20]
 800e59a:	18d0      	adds	r0, r2, r3
 800e59c:	683b      	ldr	r3, [r7, #0]
 800e59e:	685a      	ldr	r2, [r3, #4]
 800e5a0:	693b      	ldr	r3, [r7, #16]
 800e5a2:	4413      	add	r3, r2
 800e5a4:	68fa      	ldr	r2, [r7, #12]
 800e5a6:	4619      	mov	r1, r3
 800e5a8:	f009 fc26 	bl	8017df8 <memcpy>
    offset_to += len;
 800e5ac:	697a      	ldr	r2, [r7, #20]
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	4413      	add	r3, r2
 800e5b2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e5b4:	693a      	ldr	r2, [r7, #16]
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	4413      	add	r3, r2
 800e5ba:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	895b      	ldrh	r3, [r3, #10]
 800e5c0:	461a      	mov	r2, r3
 800e5c2:	697b      	ldr	r3, [r7, #20]
 800e5c4:	4293      	cmp	r3, r2
 800e5c6:	d906      	bls.n	800e5d6 <pbuf_copy+0xb2>
 800e5c8:	4b38      	ldr	r3, [pc, #224]	; (800e6ac <pbuf_copy+0x188>)
 800e5ca:	f240 32d9 	movw	r2, #985	; 0x3d9
 800e5ce:	493a      	ldr	r1, [pc, #232]	; (800e6b8 <pbuf_copy+0x194>)
 800e5d0:	4838      	ldr	r0, [pc, #224]	; (800e6b4 <pbuf_copy+0x190>)
 800e5d2:	f009 fceb 	bl	8017fac <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e5d6:	683b      	ldr	r3, [r7, #0]
 800e5d8:	895b      	ldrh	r3, [r3, #10]
 800e5da:	461a      	mov	r2, r3
 800e5dc:	693b      	ldr	r3, [r7, #16]
 800e5de:	4293      	cmp	r3, r2
 800e5e0:	d906      	bls.n	800e5f0 <pbuf_copy+0xcc>
 800e5e2:	4b32      	ldr	r3, [pc, #200]	; (800e6ac <pbuf_copy+0x188>)
 800e5e4:	f240 32da 	movw	r2, #986	; 0x3da
 800e5e8:	4934      	ldr	r1, [pc, #208]	; (800e6bc <pbuf_copy+0x198>)
 800e5ea:	4832      	ldr	r0, [pc, #200]	; (800e6b4 <pbuf_copy+0x190>)
 800e5ec:	f009 fcde 	bl	8017fac <iprintf>
    if (offset_from >= p_from->len) {
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	895b      	ldrh	r3, [r3, #10]
 800e5f4:	461a      	mov	r2, r3
 800e5f6:	693b      	ldr	r3, [r7, #16]
 800e5f8:	4293      	cmp	r3, r2
 800e5fa:	d304      	bcc.n	800e606 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	895b      	ldrh	r3, [r3, #10]
 800e60a:	461a      	mov	r2, r3
 800e60c:	697b      	ldr	r3, [r7, #20]
 800e60e:	4293      	cmp	r3, r2
 800e610:	d114      	bne.n	800e63c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e612:	2300      	movs	r3, #0
 800e614:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d10c      	bne.n	800e63c <pbuf_copy+0x118>
 800e622:	683b      	ldr	r3, [r7, #0]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d009      	beq.n	800e63c <pbuf_copy+0x118>
 800e628:	4b20      	ldr	r3, [pc, #128]	; (800e6ac <pbuf_copy+0x188>)
 800e62a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800e62e:	4924      	ldr	r1, [pc, #144]	; (800e6c0 <pbuf_copy+0x19c>)
 800e630:	4820      	ldr	r0, [pc, #128]	; (800e6b4 <pbuf_copy+0x190>)
 800e632:	f009 fcbb 	bl	8017fac <iprintf>
 800e636:	f06f 030f 	mvn.w	r3, #15
 800e63a:	e032      	b.n	800e6a2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d013      	beq.n	800e66a <pbuf_copy+0x146>
 800e642:	683b      	ldr	r3, [r7, #0]
 800e644:	895a      	ldrh	r2, [r3, #10]
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	891b      	ldrh	r3, [r3, #8]
 800e64a:	429a      	cmp	r2, r3
 800e64c:	d10d      	bne.n	800e66a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d009      	beq.n	800e66a <pbuf_copy+0x146>
 800e656:	4b15      	ldr	r3, [pc, #84]	; (800e6ac <pbuf_copy+0x188>)
 800e658:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800e65c:	4919      	ldr	r1, [pc, #100]	; (800e6c4 <pbuf_copy+0x1a0>)
 800e65e:	4815      	ldr	r0, [pc, #84]	; (800e6b4 <pbuf_copy+0x190>)
 800e660:	f009 fca4 	bl	8017fac <iprintf>
 800e664:	f06f 0305 	mvn.w	r3, #5
 800e668:	e01b      	b.n	800e6a2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d013      	beq.n	800e698 <pbuf_copy+0x174>
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	895a      	ldrh	r2, [r3, #10]
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	891b      	ldrh	r3, [r3, #8]
 800e678:	429a      	cmp	r2, r3
 800e67a:	d10d      	bne.n	800e698 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d009      	beq.n	800e698 <pbuf_copy+0x174>
 800e684:	4b09      	ldr	r3, [pc, #36]	; (800e6ac <pbuf_copy+0x188>)
 800e686:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800e68a:	490e      	ldr	r1, [pc, #56]	; (800e6c4 <pbuf_copy+0x1a0>)
 800e68c:	4809      	ldr	r0, [pc, #36]	; (800e6b4 <pbuf_copy+0x190>)
 800e68e:	f009 fc8d 	bl	8017fac <iprintf>
 800e692:	f06f 0305 	mvn.w	r3, #5
 800e696:	e004      	b.n	800e6a2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	f47f af61 	bne.w	800e562 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e6a0:	2300      	movs	r3, #0
}
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	3718      	adds	r7, #24
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	bd80      	pop	{r7, pc}
 800e6aa:	bf00      	nop
 800e6ac:	0801b754 	.word	0x0801b754
 800e6b0:	0801b9fc 	.word	0x0801b9fc
 800e6b4:	0801b7b4 	.word	0x0801b7b4
 800e6b8:	0801ba2c 	.word	0x0801ba2c
 800e6bc:	0801ba44 	.word	0x0801ba44
 800e6c0:	0801ba60 	.word	0x0801ba60
 800e6c4:	0801ba70 	.word	0x0801ba70

0800e6c8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b088      	sub	sp, #32
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	60f8      	str	r0, [r7, #12]
 800e6d0:	60b9      	str	r1, [r7, #8]
 800e6d2:	4611      	mov	r1, r2
 800e6d4:	461a      	mov	r2, r3
 800e6d6:	460b      	mov	r3, r1
 800e6d8:	80fb      	strh	r3, [r7, #6]
 800e6da:	4613      	mov	r3, r2
 800e6dc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e6de:	2300      	movs	r3, #0
 800e6e0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d108      	bne.n	800e6fe <pbuf_copy_partial+0x36>
 800e6ec:	4b2b      	ldr	r3, [pc, #172]	; (800e79c <pbuf_copy_partial+0xd4>)
 800e6ee:	f240 420a 	movw	r2, #1034	; 0x40a
 800e6f2:	492b      	ldr	r1, [pc, #172]	; (800e7a0 <pbuf_copy_partial+0xd8>)
 800e6f4:	482b      	ldr	r0, [pc, #172]	; (800e7a4 <pbuf_copy_partial+0xdc>)
 800e6f6:	f009 fc59 	bl	8017fac <iprintf>
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	e04a      	b.n	800e794 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e6fe:	68bb      	ldr	r3, [r7, #8]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d108      	bne.n	800e716 <pbuf_copy_partial+0x4e>
 800e704:	4b25      	ldr	r3, [pc, #148]	; (800e79c <pbuf_copy_partial+0xd4>)
 800e706:	f240 420b 	movw	r2, #1035	; 0x40b
 800e70a:	4927      	ldr	r1, [pc, #156]	; (800e7a8 <pbuf_copy_partial+0xe0>)
 800e70c:	4825      	ldr	r0, [pc, #148]	; (800e7a4 <pbuf_copy_partial+0xdc>)
 800e70e:	f009 fc4d 	bl	8017fac <iprintf>
 800e712:	2300      	movs	r3, #0
 800e714:	e03e      	b.n	800e794 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	61fb      	str	r3, [r7, #28]
 800e71a:	e034      	b.n	800e786 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800e71c:	88bb      	ldrh	r3, [r7, #4]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d00a      	beq.n	800e738 <pbuf_copy_partial+0x70>
 800e722:	69fb      	ldr	r3, [r7, #28]
 800e724:	895b      	ldrh	r3, [r3, #10]
 800e726:	88ba      	ldrh	r2, [r7, #4]
 800e728:	429a      	cmp	r2, r3
 800e72a:	d305      	bcc.n	800e738 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800e72c:	69fb      	ldr	r3, [r7, #28]
 800e72e:	895b      	ldrh	r3, [r3, #10]
 800e730:	88ba      	ldrh	r2, [r7, #4]
 800e732:	1ad3      	subs	r3, r2, r3
 800e734:	80bb      	strh	r3, [r7, #4]
 800e736:	e023      	b.n	800e780 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800e738:	69fb      	ldr	r3, [r7, #28]
 800e73a:	895a      	ldrh	r2, [r3, #10]
 800e73c:	88bb      	ldrh	r3, [r7, #4]
 800e73e:	1ad3      	subs	r3, r2, r3
 800e740:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e742:	8b3a      	ldrh	r2, [r7, #24]
 800e744:	88fb      	ldrh	r3, [r7, #6]
 800e746:	429a      	cmp	r2, r3
 800e748:	d901      	bls.n	800e74e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800e74a:	88fb      	ldrh	r3, [r7, #6]
 800e74c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e74e:	8b7b      	ldrh	r3, [r7, #26]
 800e750:	68ba      	ldr	r2, [r7, #8]
 800e752:	18d0      	adds	r0, r2, r3
 800e754:	69fb      	ldr	r3, [r7, #28]
 800e756:	685a      	ldr	r2, [r3, #4]
 800e758:	88bb      	ldrh	r3, [r7, #4]
 800e75a:	4413      	add	r3, r2
 800e75c:	8b3a      	ldrh	r2, [r7, #24]
 800e75e:	4619      	mov	r1, r3
 800e760:	f009 fb4a 	bl	8017df8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e764:	8afa      	ldrh	r2, [r7, #22]
 800e766:	8b3b      	ldrh	r3, [r7, #24]
 800e768:	4413      	add	r3, r2
 800e76a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800e76c:	8b7a      	ldrh	r2, [r7, #26]
 800e76e:	8b3b      	ldrh	r3, [r7, #24]
 800e770:	4413      	add	r3, r2
 800e772:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800e774:	88fa      	ldrh	r2, [r7, #6]
 800e776:	8b3b      	ldrh	r3, [r7, #24]
 800e778:	1ad3      	subs	r3, r2, r3
 800e77a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e77c:	2300      	movs	r3, #0
 800e77e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e780:	69fb      	ldr	r3, [r7, #28]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	61fb      	str	r3, [r7, #28]
 800e786:	88fb      	ldrh	r3, [r7, #6]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d002      	beq.n	800e792 <pbuf_copy_partial+0xca>
 800e78c:	69fb      	ldr	r3, [r7, #28]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d1c4      	bne.n	800e71c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e792:	8afb      	ldrh	r3, [r7, #22]
}
 800e794:	4618      	mov	r0, r3
 800e796:	3720      	adds	r7, #32
 800e798:	46bd      	mov	sp, r7
 800e79a:	bd80      	pop	{r7, pc}
 800e79c:	0801b754 	.word	0x0801b754
 800e7a0:	0801ba9c 	.word	0x0801ba9c
 800e7a4:	0801b7b4 	.word	0x0801b7b4
 800e7a8:	0801babc 	.word	0x0801babc

0800e7ac <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b088      	sub	sp, #32
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	60f8      	str	r0, [r7, #12]
 800e7b4:	60b9      	str	r1, [r7, #8]
 800e7b6:	4613      	mov	r3, r2
 800e7b8:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800e7ba:	88fb      	ldrh	r3, [r7, #6]
 800e7bc:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800e7be:	2300      	movs	r3, #0
 800e7c0:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d109      	bne.n	800e7dc <pbuf_take+0x30>
 800e7c8:	4b3a      	ldr	r3, [pc, #232]	; (800e8b4 <pbuf_take+0x108>)
 800e7ca:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800e7ce:	493a      	ldr	r1, [pc, #232]	; (800e8b8 <pbuf_take+0x10c>)
 800e7d0:	483a      	ldr	r0, [pc, #232]	; (800e8bc <pbuf_take+0x110>)
 800e7d2:	f009 fbeb 	bl	8017fac <iprintf>
 800e7d6:	f06f 030f 	mvn.w	r3, #15
 800e7da:	e067      	b.n	800e8ac <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800e7dc:	68bb      	ldr	r3, [r7, #8]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d109      	bne.n	800e7f6 <pbuf_take+0x4a>
 800e7e2:	4b34      	ldr	r3, [pc, #208]	; (800e8b4 <pbuf_take+0x108>)
 800e7e4:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800e7e8:	4935      	ldr	r1, [pc, #212]	; (800e8c0 <pbuf_take+0x114>)
 800e7ea:	4834      	ldr	r0, [pc, #208]	; (800e8bc <pbuf_take+0x110>)
 800e7ec:	f009 fbde 	bl	8017fac <iprintf>
 800e7f0:	f06f 030f 	mvn.w	r3, #15
 800e7f4:	e05a      	b.n	800e8ac <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	891b      	ldrh	r3, [r3, #8]
 800e7fa:	88fa      	ldrh	r2, [r7, #6]
 800e7fc:	429a      	cmp	r2, r3
 800e7fe:	d909      	bls.n	800e814 <pbuf_take+0x68>
 800e800:	4b2c      	ldr	r3, [pc, #176]	; (800e8b4 <pbuf_take+0x108>)
 800e802:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800e806:	492f      	ldr	r1, [pc, #188]	; (800e8c4 <pbuf_take+0x118>)
 800e808:	482c      	ldr	r0, [pc, #176]	; (800e8bc <pbuf_take+0x110>)
 800e80a:	f009 fbcf 	bl	8017fac <iprintf>
 800e80e:	f04f 33ff 	mov.w	r3, #4294967295
 800e812:	e04b      	b.n	800e8ac <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d007      	beq.n	800e82a <pbuf_take+0x7e>
 800e81a:	68bb      	ldr	r3, [r7, #8]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d004      	beq.n	800e82a <pbuf_take+0x7e>
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	891b      	ldrh	r3, [r3, #8]
 800e824:	88fa      	ldrh	r2, [r7, #6]
 800e826:	429a      	cmp	r2, r3
 800e828:	d902      	bls.n	800e830 <pbuf_take+0x84>
    return ERR_ARG;
 800e82a:	f06f 030f 	mvn.w	r3, #15
 800e82e:	e03d      	b.n	800e8ac <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	61fb      	str	r3, [r7, #28]
 800e834:	e028      	b.n	800e888 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800e836:	69fb      	ldr	r3, [r7, #28]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d106      	bne.n	800e84a <pbuf_take+0x9e>
 800e83c:	4b1d      	ldr	r3, [pc, #116]	; (800e8b4 <pbuf_take+0x108>)
 800e83e:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800e842:	4921      	ldr	r1, [pc, #132]	; (800e8c8 <pbuf_take+0x11c>)
 800e844:	481d      	ldr	r0, [pc, #116]	; (800e8bc <pbuf_take+0x110>)
 800e846:	f009 fbb1 	bl	8017fac <iprintf>
    buf_copy_len = total_copy_len;
 800e84a:	697b      	ldr	r3, [r7, #20]
 800e84c:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800e84e:	69fb      	ldr	r3, [r7, #28]
 800e850:	895b      	ldrh	r3, [r3, #10]
 800e852:	461a      	mov	r2, r3
 800e854:	69bb      	ldr	r3, [r7, #24]
 800e856:	4293      	cmp	r3, r2
 800e858:	d902      	bls.n	800e860 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800e85a:	69fb      	ldr	r3, [r7, #28]
 800e85c:	895b      	ldrh	r3, [r3, #10]
 800e85e:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800e860:	69fb      	ldr	r3, [r7, #28]
 800e862:	6858      	ldr	r0, [r3, #4]
 800e864:	68ba      	ldr	r2, [r7, #8]
 800e866:	693b      	ldr	r3, [r7, #16]
 800e868:	4413      	add	r3, r2
 800e86a:	69ba      	ldr	r2, [r7, #24]
 800e86c:	4619      	mov	r1, r3
 800e86e:	f009 fac3 	bl	8017df8 <memcpy>
    total_copy_len -= buf_copy_len;
 800e872:	697a      	ldr	r2, [r7, #20]
 800e874:	69bb      	ldr	r3, [r7, #24]
 800e876:	1ad3      	subs	r3, r2, r3
 800e878:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800e87a:	693a      	ldr	r2, [r7, #16]
 800e87c:	69bb      	ldr	r3, [r7, #24]
 800e87e:	4413      	add	r3, r2
 800e880:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800e882:	69fb      	ldr	r3, [r7, #28]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	61fb      	str	r3, [r7, #28]
 800e888:	697b      	ldr	r3, [r7, #20]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d1d3      	bne.n	800e836 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800e88e:	697b      	ldr	r3, [r7, #20]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d103      	bne.n	800e89c <pbuf_take+0xf0>
 800e894:	88fb      	ldrh	r3, [r7, #6]
 800e896:	693a      	ldr	r2, [r7, #16]
 800e898:	429a      	cmp	r2, r3
 800e89a:	d006      	beq.n	800e8aa <pbuf_take+0xfe>
 800e89c:	4b05      	ldr	r3, [pc, #20]	; (800e8b4 <pbuf_take+0x108>)
 800e89e:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800e8a2:	490a      	ldr	r1, [pc, #40]	; (800e8cc <pbuf_take+0x120>)
 800e8a4:	4805      	ldr	r0, [pc, #20]	; (800e8bc <pbuf_take+0x110>)
 800e8a6:	f009 fb81 	bl	8017fac <iprintf>
  return ERR_OK;
 800e8aa:	2300      	movs	r3, #0
}
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	3720      	adds	r7, #32
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	bd80      	pop	{r7, pc}
 800e8b4:	0801b754 	.word	0x0801b754
 800e8b8:	0801bb2c 	.word	0x0801bb2c
 800e8bc:	0801b7b4 	.word	0x0801b7b4
 800e8c0:	0801bb44 	.word	0x0801bb44
 800e8c4:	0801bb60 	.word	0x0801bb60
 800e8c8:	0801bb80 	.word	0x0801bb80
 800e8cc:	0801bb98 	.word	0x0801bb98

0800e8d0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b084      	sub	sp, #16
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	603a      	str	r2, [r7, #0]
 800e8da:	71fb      	strb	r3, [r7, #7]
 800e8dc:	460b      	mov	r3, r1
 800e8de:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	8919      	ldrh	r1, [r3, #8]
 800e8e4:	88ba      	ldrh	r2, [r7, #4]
 800e8e6:	79fb      	ldrb	r3, [r7, #7]
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	f7ff fa0f 	bl	800dd0c <pbuf_alloc>
 800e8ee:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d101      	bne.n	800e8fa <pbuf_clone+0x2a>
    return NULL;
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	e011      	b.n	800e91e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e8fa:	6839      	ldr	r1, [r7, #0]
 800e8fc:	68f8      	ldr	r0, [r7, #12]
 800e8fe:	f7ff fe11 	bl	800e524 <pbuf_copy>
 800e902:	4603      	mov	r3, r0
 800e904:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e906:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d006      	beq.n	800e91c <pbuf_clone+0x4c>
 800e90e:	4b06      	ldr	r3, [pc, #24]	; (800e928 <pbuf_clone+0x58>)
 800e910:	f240 5224 	movw	r2, #1316	; 0x524
 800e914:	4905      	ldr	r1, [pc, #20]	; (800e92c <pbuf_clone+0x5c>)
 800e916:	4806      	ldr	r0, [pc, #24]	; (800e930 <pbuf_clone+0x60>)
 800e918:	f009 fb48 	bl	8017fac <iprintf>
  return q;
 800e91c:	68fb      	ldr	r3, [r7, #12]
}
 800e91e:	4618      	mov	r0, r3
 800e920:	3710      	adds	r7, #16
 800e922:	46bd      	mov	sp, r7
 800e924:	bd80      	pop	{r7, pc}
 800e926:	bf00      	nop
 800e928:	0801b754 	.word	0x0801b754
 800e92c:	0801bbc8 	.word	0x0801bbc8
 800e930:	0801b7b4 	.word	0x0801b7b4

0800e934 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e934:	b580      	push	{r7, lr}
 800e936:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e938:	f009 fb50 	bl	8017fdc <rand>
 800e93c:	4603      	mov	r3, r0
 800e93e:	b29b      	uxth	r3, r3
 800e940:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e944:	b29b      	uxth	r3, r3
 800e946:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e94a:	b29a      	uxth	r2, r3
 800e94c:	4b01      	ldr	r3, [pc, #4]	; (800e954 <tcp_init+0x20>)
 800e94e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e950:	bf00      	nop
 800e952:	bd80      	pop	{r7, pc}
 800e954:	20000012 	.word	0x20000012

0800e958 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b082      	sub	sp, #8
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	7d1b      	ldrb	r3, [r3, #20]
 800e964:	2b01      	cmp	r3, #1
 800e966:	d105      	bne.n	800e974 <tcp_free+0x1c>
 800e968:	4b06      	ldr	r3, [pc, #24]	; (800e984 <tcp_free+0x2c>)
 800e96a:	22d4      	movs	r2, #212	; 0xd4
 800e96c:	4906      	ldr	r1, [pc, #24]	; (800e988 <tcp_free+0x30>)
 800e96e:	4807      	ldr	r0, [pc, #28]	; (800e98c <tcp_free+0x34>)
 800e970:	f009 fb1c 	bl	8017fac <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e974:	6879      	ldr	r1, [r7, #4]
 800e976:	2001      	movs	r0, #1
 800e978:	f7fe fe9a 	bl	800d6b0 <memp_free>
}
 800e97c:	bf00      	nop
 800e97e:	3708      	adds	r7, #8
 800e980:	46bd      	mov	sp, r7
 800e982:	bd80      	pop	{r7, pc}
 800e984:	0801bc54 	.word	0x0801bc54
 800e988:	0801bc84 	.word	0x0801bc84
 800e98c:	0801bc98 	.word	0x0801bc98

0800e990 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b082      	sub	sp, #8
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	7d1b      	ldrb	r3, [r3, #20]
 800e99c:	2b01      	cmp	r3, #1
 800e99e:	d105      	bne.n	800e9ac <tcp_free_listen+0x1c>
 800e9a0:	4b06      	ldr	r3, [pc, #24]	; (800e9bc <tcp_free_listen+0x2c>)
 800e9a2:	22df      	movs	r2, #223	; 0xdf
 800e9a4:	4906      	ldr	r1, [pc, #24]	; (800e9c0 <tcp_free_listen+0x30>)
 800e9a6:	4807      	ldr	r0, [pc, #28]	; (800e9c4 <tcp_free_listen+0x34>)
 800e9a8:	f009 fb00 	bl	8017fac <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e9ac:	6879      	ldr	r1, [r7, #4]
 800e9ae:	2002      	movs	r0, #2
 800e9b0:	f7fe fe7e 	bl	800d6b0 <memp_free>
}
 800e9b4:	bf00      	nop
 800e9b6:	3708      	adds	r7, #8
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}
 800e9bc:	0801bc54 	.word	0x0801bc54
 800e9c0:	0801bcc0 	.word	0x0801bcc0
 800e9c4:	0801bc98 	.word	0x0801bc98

0800e9c8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e9cc:	f001 f974 	bl	800fcb8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e9d0:	4b07      	ldr	r3, [pc, #28]	; (800e9f0 <tcp_tmr+0x28>)
 800e9d2:	781b      	ldrb	r3, [r3, #0]
 800e9d4:	3301      	adds	r3, #1
 800e9d6:	b2da      	uxtb	r2, r3
 800e9d8:	4b05      	ldr	r3, [pc, #20]	; (800e9f0 <tcp_tmr+0x28>)
 800e9da:	701a      	strb	r2, [r3, #0]
 800e9dc:	4b04      	ldr	r3, [pc, #16]	; (800e9f0 <tcp_tmr+0x28>)
 800e9de:	781b      	ldrb	r3, [r3, #0]
 800e9e0:	f003 0301 	and.w	r3, r3, #1
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d001      	beq.n	800e9ec <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e9e8:	f000 fe26 	bl	800f638 <tcp_slowtmr>
  }
}
 800e9ec:	bf00      	nop
 800e9ee:	bd80      	pop	{r7, pc}
 800e9f0:	20000a55 	.word	0x20000a55

0800e9f4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b084      	sub	sp, #16
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
 800e9fc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e9fe:	683b      	ldr	r3, [r7, #0]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d105      	bne.n	800ea10 <tcp_remove_listener+0x1c>
 800ea04:	4b0d      	ldr	r3, [pc, #52]	; (800ea3c <tcp_remove_listener+0x48>)
 800ea06:	22ff      	movs	r2, #255	; 0xff
 800ea08:	490d      	ldr	r1, [pc, #52]	; (800ea40 <tcp_remove_listener+0x4c>)
 800ea0a:	480e      	ldr	r0, [pc, #56]	; (800ea44 <tcp_remove_listener+0x50>)
 800ea0c:	f009 face 	bl	8017fac <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	60fb      	str	r3, [r7, #12]
 800ea14:	e00a      	b.n	800ea2c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ea1a:	683a      	ldr	r2, [r7, #0]
 800ea1c:	429a      	cmp	r2, r3
 800ea1e:	d102      	bne.n	800ea26 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	2200      	movs	r2, #0
 800ea24:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	68db      	ldr	r3, [r3, #12]
 800ea2a:	60fb      	str	r3, [r7, #12]
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d1f1      	bne.n	800ea16 <tcp_remove_listener+0x22>
    }
  }
}
 800ea32:	bf00      	nop
 800ea34:	bf00      	nop
 800ea36:	3710      	adds	r7, #16
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}
 800ea3c:	0801bc54 	.word	0x0801bc54
 800ea40:	0801bcdc 	.word	0x0801bcdc
 800ea44:	0801bc98 	.word	0x0801bc98

0800ea48 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b084      	sub	sp, #16
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d106      	bne.n	800ea64 <tcp_listen_closed+0x1c>
 800ea56:	4b14      	ldr	r3, [pc, #80]	; (800eaa8 <tcp_listen_closed+0x60>)
 800ea58:	f240 1211 	movw	r2, #273	; 0x111
 800ea5c:	4913      	ldr	r1, [pc, #76]	; (800eaac <tcp_listen_closed+0x64>)
 800ea5e:	4814      	ldr	r0, [pc, #80]	; (800eab0 <tcp_listen_closed+0x68>)
 800ea60:	f009 faa4 	bl	8017fac <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	7d1b      	ldrb	r3, [r3, #20]
 800ea68:	2b01      	cmp	r3, #1
 800ea6a:	d006      	beq.n	800ea7a <tcp_listen_closed+0x32>
 800ea6c:	4b0e      	ldr	r3, [pc, #56]	; (800eaa8 <tcp_listen_closed+0x60>)
 800ea6e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800ea72:	4910      	ldr	r1, [pc, #64]	; (800eab4 <tcp_listen_closed+0x6c>)
 800ea74:	480e      	ldr	r0, [pc, #56]	; (800eab0 <tcp_listen_closed+0x68>)
 800ea76:	f009 fa99 	bl	8017fac <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	60fb      	str	r3, [r7, #12]
 800ea7e:	e00b      	b.n	800ea98 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800ea80:	4a0d      	ldr	r2, [pc, #52]	; (800eab8 <tcp_listen_closed+0x70>)
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	6879      	ldr	r1, [r7, #4]
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	f7ff ffb1 	bl	800e9f4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	3301      	adds	r3, #1
 800ea96:	60fb      	str	r3, [r7, #12]
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	2b03      	cmp	r3, #3
 800ea9c:	d9f0      	bls.n	800ea80 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800ea9e:	bf00      	nop
 800eaa0:	bf00      	nop
 800eaa2:	3710      	adds	r7, #16
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	bd80      	pop	{r7, pc}
 800eaa8:	0801bc54 	.word	0x0801bc54
 800eaac:	0801bd04 	.word	0x0801bd04
 800eab0:	0801bc98 	.word	0x0801bc98
 800eab4:	0801bd10 	.word	0x0801bd10
 800eab8:	0801de48 	.word	0x0801de48

0800eabc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800eabc:	b5b0      	push	{r4, r5, r7, lr}
 800eabe:	b088      	sub	sp, #32
 800eac0:	af04      	add	r7, sp, #16
 800eac2:	6078      	str	r0, [r7, #4]
 800eac4:	460b      	mov	r3, r1
 800eac6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d106      	bne.n	800eadc <tcp_close_shutdown+0x20>
 800eace:	4b63      	ldr	r3, [pc, #396]	; (800ec5c <tcp_close_shutdown+0x1a0>)
 800ead0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800ead4:	4962      	ldr	r1, [pc, #392]	; (800ec60 <tcp_close_shutdown+0x1a4>)
 800ead6:	4863      	ldr	r0, [pc, #396]	; (800ec64 <tcp_close_shutdown+0x1a8>)
 800ead8:	f009 fa68 	bl	8017fac <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800eadc:	78fb      	ldrb	r3, [r7, #3]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d066      	beq.n	800ebb0 <tcp_close_shutdown+0xf4>
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	7d1b      	ldrb	r3, [r3, #20]
 800eae6:	2b04      	cmp	r3, #4
 800eae8:	d003      	beq.n	800eaf2 <tcp_close_shutdown+0x36>
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	7d1b      	ldrb	r3, [r3, #20]
 800eaee:	2b07      	cmp	r3, #7
 800eaf0:	d15e      	bne.n	800ebb0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d104      	bne.n	800eb04 <tcp_close_shutdown+0x48>
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eafe:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800eb02:	d055      	beq.n	800ebb0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	8b5b      	ldrh	r3, [r3, #26]
 800eb08:	f003 0310 	and.w	r3, r3, #16
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d106      	bne.n	800eb1e <tcp_close_shutdown+0x62>
 800eb10:	4b52      	ldr	r3, [pc, #328]	; (800ec5c <tcp_close_shutdown+0x1a0>)
 800eb12:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800eb16:	4954      	ldr	r1, [pc, #336]	; (800ec68 <tcp_close_shutdown+0x1ac>)
 800eb18:	4852      	ldr	r0, [pc, #328]	; (800ec64 <tcp_close_shutdown+0x1a8>)
 800eb1a:	f009 fa47 	bl	8017fac <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800eb26:	687d      	ldr	r5, [r7, #4]
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	3304      	adds	r3, #4
 800eb2c:	687a      	ldr	r2, [r7, #4]
 800eb2e:	8ad2      	ldrh	r2, [r2, #22]
 800eb30:	6879      	ldr	r1, [r7, #4]
 800eb32:	8b09      	ldrh	r1, [r1, #24]
 800eb34:	9102      	str	r1, [sp, #8]
 800eb36:	9201      	str	r2, [sp, #4]
 800eb38:	9300      	str	r3, [sp, #0]
 800eb3a:	462b      	mov	r3, r5
 800eb3c:	4622      	mov	r2, r4
 800eb3e:	4601      	mov	r1, r0
 800eb40:	6878      	ldr	r0, [r7, #4]
 800eb42:	f005 fe9d 	bl	8014880 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800eb46:	6878      	ldr	r0, [r7, #4]
 800eb48:	f001 fc7e 	bl	8010448 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800eb4c:	4b47      	ldr	r3, [pc, #284]	; (800ec6c <tcp_close_shutdown+0x1b0>)
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	687a      	ldr	r2, [r7, #4]
 800eb52:	429a      	cmp	r2, r3
 800eb54:	d105      	bne.n	800eb62 <tcp_close_shutdown+0xa6>
 800eb56:	4b45      	ldr	r3, [pc, #276]	; (800ec6c <tcp_close_shutdown+0x1b0>)
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	68db      	ldr	r3, [r3, #12]
 800eb5c:	4a43      	ldr	r2, [pc, #268]	; (800ec6c <tcp_close_shutdown+0x1b0>)
 800eb5e:	6013      	str	r3, [r2, #0]
 800eb60:	e013      	b.n	800eb8a <tcp_close_shutdown+0xce>
 800eb62:	4b42      	ldr	r3, [pc, #264]	; (800ec6c <tcp_close_shutdown+0x1b0>)
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	60fb      	str	r3, [r7, #12]
 800eb68:	e00c      	b.n	800eb84 <tcp_close_shutdown+0xc8>
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	68db      	ldr	r3, [r3, #12]
 800eb6e:	687a      	ldr	r2, [r7, #4]
 800eb70:	429a      	cmp	r2, r3
 800eb72:	d104      	bne.n	800eb7e <tcp_close_shutdown+0xc2>
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	68da      	ldr	r2, [r3, #12]
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	60da      	str	r2, [r3, #12]
 800eb7c:	e005      	b.n	800eb8a <tcp_close_shutdown+0xce>
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	68db      	ldr	r3, [r3, #12]
 800eb82:	60fb      	str	r3, [r7, #12]
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d1ef      	bne.n	800eb6a <tcp_close_shutdown+0xae>
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	60da      	str	r2, [r3, #12]
 800eb90:	4b37      	ldr	r3, [pc, #220]	; (800ec70 <tcp_close_shutdown+0x1b4>)
 800eb92:	2201      	movs	r2, #1
 800eb94:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800eb96:	4b37      	ldr	r3, [pc, #220]	; (800ec74 <tcp_close_shutdown+0x1b8>)
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	687a      	ldr	r2, [r7, #4]
 800eb9c:	429a      	cmp	r2, r3
 800eb9e:	d102      	bne.n	800eba6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800eba0:	f004 f912 	bl	8012dc8 <tcp_trigger_input_pcb_close>
 800eba4:	e002      	b.n	800ebac <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800eba6:	6878      	ldr	r0, [r7, #4]
 800eba8:	f7ff fed6 	bl	800e958 <tcp_free>
      }
      return ERR_OK;
 800ebac:	2300      	movs	r3, #0
 800ebae:	e050      	b.n	800ec52 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	7d1b      	ldrb	r3, [r3, #20]
 800ebb4:	2b02      	cmp	r3, #2
 800ebb6:	d03b      	beq.n	800ec30 <tcp_close_shutdown+0x174>
 800ebb8:	2b02      	cmp	r3, #2
 800ebba:	dc44      	bgt.n	800ec46 <tcp_close_shutdown+0x18a>
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d002      	beq.n	800ebc6 <tcp_close_shutdown+0x10a>
 800ebc0:	2b01      	cmp	r3, #1
 800ebc2:	d02a      	beq.n	800ec1a <tcp_close_shutdown+0x15e>
 800ebc4:	e03f      	b.n	800ec46 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	8adb      	ldrh	r3, [r3, #22]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d021      	beq.n	800ec12 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ebce:	4b2a      	ldr	r3, [pc, #168]	; (800ec78 <tcp_close_shutdown+0x1bc>)
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	687a      	ldr	r2, [r7, #4]
 800ebd4:	429a      	cmp	r2, r3
 800ebd6:	d105      	bne.n	800ebe4 <tcp_close_shutdown+0x128>
 800ebd8:	4b27      	ldr	r3, [pc, #156]	; (800ec78 <tcp_close_shutdown+0x1bc>)
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	68db      	ldr	r3, [r3, #12]
 800ebde:	4a26      	ldr	r2, [pc, #152]	; (800ec78 <tcp_close_shutdown+0x1bc>)
 800ebe0:	6013      	str	r3, [r2, #0]
 800ebe2:	e013      	b.n	800ec0c <tcp_close_shutdown+0x150>
 800ebe4:	4b24      	ldr	r3, [pc, #144]	; (800ec78 <tcp_close_shutdown+0x1bc>)
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	60bb      	str	r3, [r7, #8]
 800ebea:	e00c      	b.n	800ec06 <tcp_close_shutdown+0x14a>
 800ebec:	68bb      	ldr	r3, [r7, #8]
 800ebee:	68db      	ldr	r3, [r3, #12]
 800ebf0:	687a      	ldr	r2, [r7, #4]
 800ebf2:	429a      	cmp	r2, r3
 800ebf4:	d104      	bne.n	800ec00 <tcp_close_shutdown+0x144>
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	68da      	ldr	r2, [r3, #12]
 800ebfa:	68bb      	ldr	r3, [r7, #8]
 800ebfc:	60da      	str	r2, [r3, #12]
 800ebfe:	e005      	b.n	800ec0c <tcp_close_shutdown+0x150>
 800ec00:	68bb      	ldr	r3, [r7, #8]
 800ec02:	68db      	ldr	r3, [r3, #12]
 800ec04:	60bb      	str	r3, [r7, #8]
 800ec06:	68bb      	ldr	r3, [r7, #8]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d1ef      	bne.n	800ebec <tcp_close_shutdown+0x130>
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	2200      	movs	r2, #0
 800ec10:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800ec12:	6878      	ldr	r0, [r7, #4]
 800ec14:	f7ff fea0 	bl	800e958 <tcp_free>
      break;
 800ec18:	e01a      	b.n	800ec50 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800ec1a:	6878      	ldr	r0, [r7, #4]
 800ec1c:	f7ff ff14 	bl	800ea48 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800ec20:	6879      	ldr	r1, [r7, #4]
 800ec22:	4816      	ldr	r0, [pc, #88]	; (800ec7c <tcp_close_shutdown+0x1c0>)
 800ec24:	f001 fc60 	bl	80104e8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800ec28:	6878      	ldr	r0, [r7, #4]
 800ec2a:	f7ff feb1 	bl	800e990 <tcp_free_listen>
      break;
 800ec2e:	e00f      	b.n	800ec50 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ec30:	6879      	ldr	r1, [r7, #4]
 800ec32:	480e      	ldr	r0, [pc, #56]	; (800ec6c <tcp_close_shutdown+0x1b0>)
 800ec34:	f001 fc58 	bl	80104e8 <tcp_pcb_remove>
 800ec38:	4b0d      	ldr	r3, [pc, #52]	; (800ec70 <tcp_close_shutdown+0x1b4>)
 800ec3a:	2201      	movs	r2, #1
 800ec3c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800ec3e:	6878      	ldr	r0, [r7, #4]
 800ec40:	f7ff fe8a 	bl	800e958 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800ec44:	e004      	b.n	800ec50 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800ec46:	6878      	ldr	r0, [r7, #4]
 800ec48:	f000 f81a 	bl	800ec80 <tcp_close_shutdown_fin>
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	e000      	b.n	800ec52 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800ec50:	2300      	movs	r3, #0
}
 800ec52:	4618      	mov	r0, r3
 800ec54:	3710      	adds	r7, #16
 800ec56:	46bd      	mov	sp, r7
 800ec58:	bdb0      	pop	{r4, r5, r7, pc}
 800ec5a:	bf00      	nop
 800ec5c:	0801bc54 	.word	0x0801bc54
 800ec60:	0801bd28 	.word	0x0801bd28
 800ec64:	0801bc98 	.word	0x0801bc98
 800ec68:	0801bd48 	.word	0x0801bd48
 800ec6c:	20009504 	.word	0x20009504
 800ec70:	20009500 	.word	0x20009500
 800ec74:	20009518 	.word	0x20009518
 800ec78:	20009510 	.word	0x20009510
 800ec7c:	2000950c 	.word	0x2000950c

0800ec80 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b084      	sub	sp, #16
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d106      	bne.n	800ec9c <tcp_close_shutdown_fin+0x1c>
 800ec8e:	4b2e      	ldr	r3, [pc, #184]	; (800ed48 <tcp_close_shutdown_fin+0xc8>)
 800ec90:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800ec94:	492d      	ldr	r1, [pc, #180]	; (800ed4c <tcp_close_shutdown_fin+0xcc>)
 800ec96:	482e      	ldr	r0, [pc, #184]	; (800ed50 <tcp_close_shutdown_fin+0xd0>)
 800ec98:	f009 f988 	bl	8017fac <iprintf>

  switch (pcb->state) {
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	7d1b      	ldrb	r3, [r3, #20]
 800eca0:	2b07      	cmp	r3, #7
 800eca2:	d020      	beq.n	800ece6 <tcp_close_shutdown_fin+0x66>
 800eca4:	2b07      	cmp	r3, #7
 800eca6:	dc2b      	bgt.n	800ed00 <tcp_close_shutdown_fin+0x80>
 800eca8:	2b03      	cmp	r3, #3
 800ecaa:	d002      	beq.n	800ecb2 <tcp_close_shutdown_fin+0x32>
 800ecac:	2b04      	cmp	r3, #4
 800ecae:	d00d      	beq.n	800eccc <tcp_close_shutdown_fin+0x4c>
 800ecb0:	e026      	b.n	800ed00 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ecb2:	6878      	ldr	r0, [r7, #4]
 800ecb4:	f004 fef2 	bl	8013a9c <tcp_send_fin>
 800ecb8:	4603      	mov	r3, r0
 800ecba:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ecbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d11f      	bne.n	800ed04 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2205      	movs	r2, #5
 800ecc8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ecca:	e01b      	b.n	800ed04 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800eccc:	6878      	ldr	r0, [r7, #4]
 800ecce:	f004 fee5 	bl	8013a9c <tcp_send_fin>
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ecd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d114      	bne.n	800ed08 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	2205      	movs	r2, #5
 800ece2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ece4:	e010      	b.n	800ed08 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800ece6:	6878      	ldr	r0, [r7, #4]
 800ece8:	f004 fed8 	bl	8013a9c <tcp_send_fin>
 800ecec:	4603      	mov	r3, r0
 800ecee:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ecf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d109      	bne.n	800ed0c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2209      	movs	r2, #9
 800ecfc:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ecfe:	e005      	b.n	800ed0c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800ed00:	2300      	movs	r3, #0
 800ed02:	e01c      	b.n	800ed3e <tcp_close_shutdown_fin+0xbe>
      break;
 800ed04:	bf00      	nop
 800ed06:	e002      	b.n	800ed0e <tcp_close_shutdown_fin+0x8e>
      break;
 800ed08:	bf00      	nop
 800ed0a:	e000      	b.n	800ed0e <tcp_close_shutdown_fin+0x8e>
      break;
 800ed0c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800ed0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d103      	bne.n	800ed1e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800ed16:	6878      	ldr	r0, [r7, #4]
 800ed18:	f004 fffe 	bl	8013d18 <tcp_output>
 800ed1c:	e00d      	b.n	800ed3a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800ed1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed26:	d108      	bne.n	800ed3a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	8b5b      	ldrh	r3, [r3, #26]
 800ed2c:	f043 0308 	orr.w	r3, r3, #8
 800ed30:	b29a      	uxth	r2, r3
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800ed36:	2300      	movs	r3, #0
 800ed38:	e001      	b.n	800ed3e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800ed3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ed3e:	4618      	mov	r0, r3
 800ed40:	3710      	adds	r7, #16
 800ed42:	46bd      	mov	sp, r7
 800ed44:	bd80      	pop	{r7, pc}
 800ed46:	bf00      	nop
 800ed48:	0801bc54 	.word	0x0801bc54
 800ed4c:	0801bd04 	.word	0x0801bd04
 800ed50:	0801bc98 	.word	0x0801bc98

0800ed54 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b082      	sub	sp, #8
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d109      	bne.n	800ed76 <tcp_close+0x22>
 800ed62:	4b0f      	ldr	r3, [pc, #60]	; (800eda0 <tcp_close+0x4c>)
 800ed64:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800ed68:	490e      	ldr	r1, [pc, #56]	; (800eda4 <tcp_close+0x50>)
 800ed6a:	480f      	ldr	r0, [pc, #60]	; (800eda8 <tcp_close+0x54>)
 800ed6c:	f009 f91e 	bl	8017fac <iprintf>
 800ed70:	f06f 030f 	mvn.w	r3, #15
 800ed74:	e00f      	b.n	800ed96 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	7d1b      	ldrb	r3, [r3, #20]
 800ed7a:	2b01      	cmp	r3, #1
 800ed7c:	d006      	beq.n	800ed8c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	8b5b      	ldrh	r3, [r3, #26]
 800ed82:	f043 0310 	orr.w	r3, r3, #16
 800ed86:	b29a      	uxth	r2, r3
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ed8c:	2101      	movs	r1, #1
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f7ff fe94 	bl	800eabc <tcp_close_shutdown>
 800ed94:	4603      	mov	r3, r0
}
 800ed96:	4618      	mov	r0, r3
 800ed98:	3708      	adds	r7, #8
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	bd80      	pop	{r7, pc}
 800ed9e:	bf00      	nop
 800eda0:	0801bc54 	.word	0x0801bc54
 800eda4:	0801bd64 	.word	0x0801bd64
 800eda8:	0801bc98 	.word	0x0801bc98

0800edac <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b08e      	sub	sp, #56	; 0x38
 800edb0:	af04      	add	r7, sp, #16
 800edb2:	6078      	str	r0, [r7, #4]
 800edb4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d107      	bne.n	800edcc <tcp_abandon+0x20>
 800edbc:	4b52      	ldr	r3, [pc, #328]	; (800ef08 <tcp_abandon+0x15c>)
 800edbe:	f240 223d 	movw	r2, #573	; 0x23d
 800edc2:	4952      	ldr	r1, [pc, #328]	; (800ef0c <tcp_abandon+0x160>)
 800edc4:	4852      	ldr	r0, [pc, #328]	; (800ef10 <tcp_abandon+0x164>)
 800edc6:	f009 f8f1 	bl	8017fac <iprintf>
 800edca:	e099      	b.n	800ef00 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	7d1b      	ldrb	r3, [r3, #20]
 800edd0:	2b01      	cmp	r3, #1
 800edd2:	d106      	bne.n	800ede2 <tcp_abandon+0x36>
 800edd4:	4b4c      	ldr	r3, [pc, #304]	; (800ef08 <tcp_abandon+0x15c>)
 800edd6:	f44f 7210 	mov.w	r2, #576	; 0x240
 800edda:	494e      	ldr	r1, [pc, #312]	; (800ef14 <tcp_abandon+0x168>)
 800eddc:	484c      	ldr	r0, [pc, #304]	; (800ef10 <tcp_abandon+0x164>)
 800edde:	f009 f8e5 	bl	8017fac <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	7d1b      	ldrb	r3, [r3, #20]
 800ede6:	2b0a      	cmp	r3, #10
 800ede8:	d107      	bne.n	800edfa <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800edea:	6879      	ldr	r1, [r7, #4]
 800edec:	484a      	ldr	r0, [pc, #296]	; (800ef18 <tcp_abandon+0x16c>)
 800edee:	f001 fb7b 	bl	80104e8 <tcp_pcb_remove>
    tcp_free(pcb);
 800edf2:	6878      	ldr	r0, [r7, #4]
 800edf4:	f7ff fdb0 	bl	800e958 <tcp_free>
 800edf8:	e082      	b.n	800ef00 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800edfa:	2300      	movs	r3, #0
 800edfc:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800edfe:	2300      	movs	r3, #0
 800ee00:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee06:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee0c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee14:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	691b      	ldr	r3, [r3, #16]
 800ee1a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	7d1b      	ldrb	r3, [r3, #20]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d126      	bne.n	800ee72 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	8adb      	ldrh	r3, [r3, #22]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d02e      	beq.n	800ee8a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ee2c:	4b3b      	ldr	r3, [pc, #236]	; (800ef1c <tcp_abandon+0x170>)
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	687a      	ldr	r2, [r7, #4]
 800ee32:	429a      	cmp	r2, r3
 800ee34:	d105      	bne.n	800ee42 <tcp_abandon+0x96>
 800ee36:	4b39      	ldr	r3, [pc, #228]	; (800ef1c <tcp_abandon+0x170>)
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	68db      	ldr	r3, [r3, #12]
 800ee3c:	4a37      	ldr	r2, [pc, #220]	; (800ef1c <tcp_abandon+0x170>)
 800ee3e:	6013      	str	r3, [r2, #0]
 800ee40:	e013      	b.n	800ee6a <tcp_abandon+0xbe>
 800ee42:	4b36      	ldr	r3, [pc, #216]	; (800ef1c <tcp_abandon+0x170>)
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	61fb      	str	r3, [r7, #28]
 800ee48:	e00c      	b.n	800ee64 <tcp_abandon+0xb8>
 800ee4a:	69fb      	ldr	r3, [r7, #28]
 800ee4c:	68db      	ldr	r3, [r3, #12]
 800ee4e:	687a      	ldr	r2, [r7, #4]
 800ee50:	429a      	cmp	r2, r3
 800ee52:	d104      	bne.n	800ee5e <tcp_abandon+0xb2>
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	68da      	ldr	r2, [r3, #12]
 800ee58:	69fb      	ldr	r3, [r7, #28]
 800ee5a:	60da      	str	r2, [r3, #12]
 800ee5c:	e005      	b.n	800ee6a <tcp_abandon+0xbe>
 800ee5e:	69fb      	ldr	r3, [r7, #28]
 800ee60:	68db      	ldr	r3, [r3, #12]
 800ee62:	61fb      	str	r3, [r7, #28]
 800ee64:	69fb      	ldr	r3, [r7, #28]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d1ef      	bne.n	800ee4a <tcp_abandon+0x9e>
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	60da      	str	r2, [r3, #12]
 800ee70:	e00b      	b.n	800ee8a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800ee72:	683b      	ldr	r3, [r7, #0]
 800ee74:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	8adb      	ldrh	r3, [r3, #22]
 800ee7a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ee7c:	6879      	ldr	r1, [r7, #4]
 800ee7e:	4828      	ldr	r0, [pc, #160]	; (800ef20 <tcp_abandon+0x174>)
 800ee80:	f001 fb32 	bl	80104e8 <tcp_pcb_remove>
 800ee84:	4b27      	ldr	r3, [pc, #156]	; (800ef24 <tcp_abandon+0x178>)
 800ee86:	2201      	movs	r2, #1
 800ee88:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d004      	beq.n	800ee9c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee96:	4618      	mov	r0, r3
 800ee98:	f000 ffee 	bl	800fe78 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d004      	beq.n	800eeae <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eea8:	4618      	mov	r0, r3
 800eeaa:	f000 ffe5 	bl	800fe78 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d004      	beq.n	800eec0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eeba:	4618      	mov	r0, r3
 800eebc:	f000 ffdc 	bl	800fe78 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800eec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d00e      	beq.n	800eee4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800eec6:	6879      	ldr	r1, [r7, #4]
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	3304      	adds	r3, #4
 800eecc:	687a      	ldr	r2, [r7, #4]
 800eece:	8b12      	ldrh	r2, [r2, #24]
 800eed0:	9202      	str	r2, [sp, #8]
 800eed2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800eed4:	9201      	str	r2, [sp, #4]
 800eed6:	9300      	str	r3, [sp, #0]
 800eed8:	460b      	mov	r3, r1
 800eeda:	697a      	ldr	r2, [r7, #20]
 800eedc:	69b9      	ldr	r1, [r7, #24]
 800eede:	6878      	ldr	r0, [r7, #4]
 800eee0:	f005 fcce 	bl	8014880 <tcp_rst>
    }
    last_state = pcb->state;
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	7d1b      	ldrb	r3, [r3, #20]
 800eee8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800eeea:	6878      	ldr	r0, [r7, #4]
 800eeec:	f7ff fd34 	bl	800e958 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800eef0:	693b      	ldr	r3, [r7, #16]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d004      	beq.n	800ef00 <tcp_abandon+0x154>
 800eef6:	693b      	ldr	r3, [r7, #16]
 800eef8:	f06f 010c 	mvn.w	r1, #12
 800eefc:	68f8      	ldr	r0, [r7, #12]
 800eefe:	4798      	blx	r3
  }
}
 800ef00:	3728      	adds	r7, #40	; 0x28
 800ef02:	46bd      	mov	sp, r7
 800ef04:	bd80      	pop	{r7, pc}
 800ef06:	bf00      	nop
 800ef08:	0801bc54 	.word	0x0801bc54
 800ef0c:	0801bd98 	.word	0x0801bd98
 800ef10:	0801bc98 	.word	0x0801bc98
 800ef14:	0801bdb4 	.word	0x0801bdb4
 800ef18:	20009514 	.word	0x20009514
 800ef1c:	20009510 	.word	0x20009510
 800ef20:	20009504 	.word	0x20009504
 800ef24:	20009500 	.word	0x20009500

0800ef28 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b082      	sub	sp, #8
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800ef30:	2101      	movs	r1, #1
 800ef32:	6878      	ldr	r0, [r7, #4]
 800ef34:	f7ff ff3a 	bl	800edac <tcp_abandon>
}
 800ef38:	bf00      	nop
 800ef3a:	3708      	adds	r7, #8
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd80      	pop	{r7, pc}

0800ef40 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b088      	sub	sp, #32
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	60f8      	str	r0, [r7, #12]
 800ef48:	60b9      	str	r1, [r7, #8]
 800ef4a:	4613      	mov	r3, r2
 800ef4c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800ef4e:	2304      	movs	r3, #4
 800ef50:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ef52:	68bb      	ldr	r3, [r7, #8]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d101      	bne.n	800ef5c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800ef58:	4b3e      	ldr	r3, [pc, #248]	; (800f054 <tcp_bind+0x114>)
 800ef5a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d109      	bne.n	800ef76 <tcp_bind+0x36>
 800ef62:	4b3d      	ldr	r3, [pc, #244]	; (800f058 <tcp_bind+0x118>)
 800ef64:	f240 22a9 	movw	r2, #681	; 0x2a9
 800ef68:	493c      	ldr	r1, [pc, #240]	; (800f05c <tcp_bind+0x11c>)
 800ef6a:	483d      	ldr	r0, [pc, #244]	; (800f060 <tcp_bind+0x120>)
 800ef6c:	f009 f81e 	bl	8017fac <iprintf>
 800ef70:	f06f 030f 	mvn.w	r3, #15
 800ef74:	e06a      	b.n	800f04c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	7d1b      	ldrb	r3, [r3, #20]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d009      	beq.n	800ef92 <tcp_bind+0x52>
 800ef7e:	4b36      	ldr	r3, [pc, #216]	; (800f058 <tcp_bind+0x118>)
 800ef80:	f240 22ab 	movw	r2, #683	; 0x2ab
 800ef84:	4937      	ldr	r1, [pc, #220]	; (800f064 <tcp_bind+0x124>)
 800ef86:	4836      	ldr	r0, [pc, #216]	; (800f060 <tcp_bind+0x120>)
 800ef88:	f009 f810 	bl	8017fac <iprintf>
 800ef8c:	f06f 0305 	mvn.w	r3, #5
 800ef90:	e05c      	b.n	800f04c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800ef92:	88fb      	ldrh	r3, [r7, #6]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d109      	bne.n	800efac <tcp_bind+0x6c>
    port = tcp_new_port();
 800ef98:	f000 f9f0 	bl	800f37c <tcp_new_port>
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800efa0:	88fb      	ldrh	r3, [r7, #6]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d135      	bne.n	800f012 <tcp_bind+0xd2>
      return ERR_BUF;
 800efa6:	f06f 0301 	mvn.w	r3, #1
 800efaa:	e04f      	b.n	800f04c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800efac:	2300      	movs	r3, #0
 800efae:	61fb      	str	r3, [r7, #28]
 800efb0:	e02b      	b.n	800f00a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800efb2:	4a2d      	ldr	r2, [pc, #180]	; (800f068 <tcp_bind+0x128>)
 800efb4:	69fb      	ldr	r3, [r7, #28]
 800efb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	61bb      	str	r3, [r7, #24]
 800efbe:	e01e      	b.n	800effe <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800efc0:	69bb      	ldr	r3, [r7, #24]
 800efc2:	8adb      	ldrh	r3, [r3, #22]
 800efc4:	88fa      	ldrh	r2, [r7, #6]
 800efc6:	429a      	cmp	r2, r3
 800efc8:	d116      	bne.n	800eff8 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800efca:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d010      	beq.n	800eff2 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800efd0:	69bb      	ldr	r3, [r7, #24]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d00c      	beq.n	800eff2 <tcp_bind+0xb2>
 800efd8:	68bb      	ldr	r3, [r7, #8]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d009      	beq.n	800eff2 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800efde:	68bb      	ldr	r3, [r7, #8]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d005      	beq.n	800eff2 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800efe6:	69bb      	ldr	r3, [r7, #24]
 800efe8:	681a      	ldr	r2, [r3, #0]
 800efea:	68bb      	ldr	r3, [r7, #8]
 800efec:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800efee:	429a      	cmp	r2, r3
 800eff0:	d102      	bne.n	800eff8 <tcp_bind+0xb8>
              return ERR_USE;
 800eff2:	f06f 0307 	mvn.w	r3, #7
 800eff6:	e029      	b.n	800f04c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800eff8:	69bb      	ldr	r3, [r7, #24]
 800effa:	68db      	ldr	r3, [r3, #12]
 800effc:	61bb      	str	r3, [r7, #24]
 800effe:	69bb      	ldr	r3, [r7, #24]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d1dd      	bne.n	800efc0 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800f004:	69fb      	ldr	r3, [r7, #28]
 800f006:	3301      	adds	r3, #1
 800f008:	61fb      	str	r3, [r7, #28]
 800f00a:	69fa      	ldr	r2, [r7, #28]
 800f00c:	697b      	ldr	r3, [r7, #20]
 800f00e:	429a      	cmp	r2, r3
 800f010:	dbcf      	blt.n	800efb2 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800f012:	68bb      	ldr	r3, [r7, #8]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d00c      	beq.n	800f032 <tcp_bind+0xf2>
 800f018:	68bb      	ldr	r3, [r7, #8]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d008      	beq.n	800f032 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800f020:	68bb      	ldr	r3, [r7, #8]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d002      	beq.n	800f02c <tcp_bind+0xec>
 800f026:	68bb      	ldr	r3, [r7, #8]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	e000      	b.n	800f02e <tcp_bind+0xee>
 800f02c:	2300      	movs	r3, #0
 800f02e:	68fa      	ldr	r2, [r7, #12]
 800f030:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	88fa      	ldrh	r2, [r7, #6]
 800f036:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800f038:	4b0c      	ldr	r3, [pc, #48]	; (800f06c <tcp_bind+0x12c>)
 800f03a:	681a      	ldr	r2, [r3, #0]
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	60da      	str	r2, [r3, #12]
 800f040:	4a0a      	ldr	r2, [pc, #40]	; (800f06c <tcp_bind+0x12c>)
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	6013      	str	r3, [r2, #0]
 800f046:	f005 fddd 	bl	8014c04 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800f04a:	2300      	movs	r3, #0
}
 800f04c:	4618      	mov	r0, r3
 800f04e:	3720      	adds	r7, #32
 800f050:	46bd      	mov	sp, r7
 800f052:	bd80      	pop	{r7, pc}
 800f054:	0801de70 	.word	0x0801de70
 800f058:	0801bc54 	.word	0x0801bc54
 800f05c:	0801bde8 	.word	0x0801bde8
 800f060:	0801bc98 	.word	0x0801bc98
 800f064:	0801be00 	.word	0x0801be00
 800f068:	0801de48 	.word	0x0801de48
 800f06c:	20009510 	.word	0x20009510

0800f070 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b084      	sub	sp, #16
 800f074:	af00      	add	r7, sp, #0
 800f076:	60f8      	str	r0, [r7, #12]
 800f078:	60b9      	str	r1, [r7, #8]
 800f07a:	4613      	mov	r3, r2
 800f07c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800f07e:	68bb      	ldr	r3, [r7, #8]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d106      	bne.n	800f092 <tcp_accept_null+0x22>
 800f084:	4b07      	ldr	r3, [pc, #28]	; (800f0a4 <tcp_accept_null+0x34>)
 800f086:	f240 320f 	movw	r2, #783	; 0x30f
 800f08a:	4907      	ldr	r1, [pc, #28]	; (800f0a8 <tcp_accept_null+0x38>)
 800f08c:	4807      	ldr	r0, [pc, #28]	; (800f0ac <tcp_accept_null+0x3c>)
 800f08e:	f008 ff8d 	bl	8017fac <iprintf>

  tcp_abort(pcb);
 800f092:	68b8      	ldr	r0, [r7, #8]
 800f094:	f7ff ff48 	bl	800ef28 <tcp_abort>

  return ERR_ABRT;
 800f098:	f06f 030c 	mvn.w	r3, #12
}
 800f09c:	4618      	mov	r0, r3
 800f09e:	3710      	adds	r7, #16
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	bd80      	pop	{r7, pc}
 800f0a4:	0801bc54 	.word	0x0801bc54
 800f0a8:	0801be28 	.word	0x0801be28
 800f0ac:	0801bc98 	.word	0x0801bc98

0800f0b0 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b082      	sub	sp, #8
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	6078      	str	r0, [r7, #4]
 800f0b8:	460b      	mov	r3, r1
 800f0ba:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800f0bc:	78fb      	ldrb	r3, [r7, #3]
 800f0be:	2200      	movs	r2, #0
 800f0c0:	4619      	mov	r1, r3
 800f0c2:	6878      	ldr	r0, [r7, #4]
 800f0c4:	f000 f806 	bl	800f0d4 <tcp_listen_with_backlog_and_err>
 800f0c8:	4603      	mov	r3, r0
}
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	3708      	adds	r7, #8
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	bd80      	pop	{r7, pc}
	...

0800f0d4 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b088      	sub	sp, #32
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	60f8      	str	r0, [r7, #12]
 800f0dc:	460b      	mov	r3, r1
 800f0de:	607a      	str	r2, [r7, #4]
 800f0e0:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d109      	bne.n	800f100 <tcp_listen_with_backlog_and_err+0x2c>
 800f0ec:	4b47      	ldr	r3, [pc, #284]	; (800f20c <tcp_listen_with_backlog_and_err+0x138>)
 800f0ee:	f240 3259 	movw	r2, #857	; 0x359
 800f0f2:	4947      	ldr	r1, [pc, #284]	; (800f210 <tcp_listen_with_backlog_and_err+0x13c>)
 800f0f4:	4847      	ldr	r0, [pc, #284]	; (800f214 <tcp_listen_with_backlog_and_err+0x140>)
 800f0f6:	f008 ff59 	bl	8017fac <iprintf>
 800f0fa:	23f0      	movs	r3, #240	; 0xf0
 800f0fc:	76fb      	strb	r3, [r7, #27]
 800f0fe:	e079      	b.n	800f1f4 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	7d1b      	ldrb	r3, [r3, #20]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d009      	beq.n	800f11c <tcp_listen_with_backlog_and_err+0x48>
 800f108:	4b40      	ldr	r3, [pc, #256]	; (800f20c <tcp_listen_with_backlog_and_err+0x138>)
 800f10a:	f240 325a 	movw	r2, #858	; 0x35a
 800f10e:	4942      	ldr	r1, [pc, #264]	; (800f218 <tcp_listen_with_backlog_and_err+0x144>)
 800f110:	4840      	ldr	r0, [pc, #256]	; (800f214 <tcp_listen_with_backlog_and_err+0x140>)
 800f112:	f008 ff4b 	bl	8017fac <iprintf>
 800f116:	23f1      	movs	r3, #241	; 0xf1
 800f118:	76fb      	strb	r3, [r7, #27]
 800f11a:	e06b      	b.n	800f1f4 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	7d1b      	ldrb	r3, [r3, #20]
 800f120:	2b01      	cmp	r3, #1
 800f122:	d104      	bne.n	800f12e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800f128:	23f7      	movs	r3, #247	; 0xf7
 800f12a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800f12c:	e062      	b.n	800f1f4 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800f12e:	2002      	movs	r0, #2
 800f130:	f7fe fa72 	bl	800d618 <memp_malloc>
 800f134:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800f136:	69fb      	ldr	r3, [r7, #28]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d102      	bne.n	800f142 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800f13c:	23ff      	movs	r3, #255	; 0xff
 800f13e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800f140:	e058      	b.n	800f1f4 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	691a      	ldr	r2, [r3, #16]
 800f146:	69fb      	ldr	r3, [r7, #28]
 800f148:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	8ada      	ldrh	r2, [r3, #22]
 800f14e:	69fb      	ldr	r3, [r7, #28]
 800f150:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800f152:	69fb      	ldr	r3, [r7, #28]
 800f154:	2201      	movs	r2, #1
 800f156:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	7d5a      	ldrb	r2, [r3, #21]
 800f15c:	69fb      	ldr	r3, [r7, #28]
 800f15e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	7a5a      	ldrb	r2, [r3, #9]
 800f164:	69fb      	ldr	r3, [r7, #28]
 800f166:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800f168:	69fb      	ldr	r3, [r7, #28]
 800f16a:	2200      	movs	r2, #0
 800f16c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	7ada      	ldrb	r2, [r3, #11]
 800f172:	69fb      	ldr	r3, [r7, #28]
 800f174:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	7a9a      	ldrb	r2, [r3, #10]
 800f17a:	69fb      	ldr	r3, [r7, #28]
 800f17c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	681a      	ldr	r2, [r3, #0]
 800f182:	69fb      	ldr	r3, [r7, #28]
 800f184:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	8adb      	ldrh	r3, [r3, #22]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d021      	beq.n	800f1d2 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800f18e:	4b23      	ldr	r3, [pc, #140]	; (800f21c <tcp_listen_with_backlog_and_err+0x148>)
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	68fa      	ldr	r2, [r7, #12]
 800f194:	429a      	cmp	r2, r3
 800f196:	d105      	bne.n	800f1a4 <tcp_listen_with_backlog_and_err+0xd0>
 800f198:	4b20      	ldr	r3, [pc, #128]	; (800f21c <tcp_listen_with_backlog_and_err+0x148>)
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	68db      	ldr	r3, [r3, #12]
 800f19e:	4a1f      	ldr	r2, [pc, #124]	; (800f21c <tcp_listen_with_backlog_and_err+0x148>)
 800f1a0:	6013      	str	r3, [r2, #0]
 800f1a2:	e013      	b.n	800f1cc <tcp_listen_with_backlog_and_err+0xf8>
 800f1a4:	4b1d      	ldr	r3, [pc, #116]	; (800f21c <tcp_listen_with_backlog_and_err+0x148>)
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	617b      	str	r3, [r7, #20]
 800f1aa:	e00c      	b.n	800f1c6 <tcp_listen_with_backlog_and_err+0xf2>
 800f1ac:	697b      	ldr	r3, [r7, #20]
 800f1ae:	68db      	ldr	r3, [r3, #12]
 800f1b0:	68fa      	ldr	r2, [r7, #12]
 800f1b2:	429a      	cmp	r2, r3
 800f1b4:	d104      	bne.n	800f1c0 <tcp_listen_with_backlog_and_err+0xec>
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	68da      	ldr	r2, [r3, #12]
 800f1ba:	697b      	ldr	r3, [r7, #20]
 800f1bc:	60da      	str	r2, [r3, #12]
 800f1be:	e005      	b.n	800f1cc <tcp_listen_with_backlog_and_err+0xf8>
 800f1c0:	697b      	ldr	r3, [r7, #20]
 800f1c2:	68db      	ldr	r3, [r3, #12]
 800f1c4:	617b      	str	r3, [r7, #20]
 800f1c6:	697b      	ldr	r3, [r7, #20]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d1ef      	bne.n	800f1ac <tcp_listen_with_backlog_and_err+0xd8>
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800f1d2:	68f8      	ldr	r0, [r7, #12]
 800f1d4:	f7ff fbc0 	bl	800e958 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800f1d8:	69fb      	ldr	r3, [r7, #28]
 800f1da:	4a11      	ldr	r2, [pc, #68]	; (800f220 <tcp_listen_with_backlog_and_err+0x14c>)
 800f1dc:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800f1de:	4b11      	ldr	r3, [pc, #68]	; (800f224 <tcp_listen_with_backlog_and_err+0x150>)
 800f1e0:	681a      	ldr	r2, [r3, #0]
 800f1e2:	69fb      	ldr	r3, [r7, #28]
 800f1e4:	60da      	str	r2, [r3, #12]
 800f1e6:	4a0f      	ldr	r2, [pc, #60]	; (800f224 <tcp_listen_with_backlog_and_err+0x150>)
 800f1e8:	69fb      	ldr	r3, [r7, #28]
 800f1ea:	6013      	str	r3, [r2, #0]
 800f1ec:	f005 fd0a 	bl	8014c04 <tcp_timer_needed>
  res = ERR_OK;
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d002      	beq.n	800f200 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	7efa      	ldrb	r2, [r7, #27]
 800f1fe:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800f200:	69fb      	ldr	r3, [r7, #28]
}
 800f202:	4618      	mov	r0, r3
 800f204:	3720      	adds	r7, #32
 800f206:	46bd      	mov	sp, r7
 800f208:	bd80      	pop	{r7, pc}
 800f20a:	bf00      	nop
 800f20c:	0801bc54 	.word	0x0801bc54
 800f210:	0801be48 	.word	0x0801be48
 800f214:	0801bc98 	.word	0x0801bc98
 800f218:	0801be78 	.word	0x0801be78
 800f21c:	20009510 	.word	0x20009510
 800f220:	0800f071 	.word	0x0800f071
 800f224:	2000950c 	.word	0x2000950c

0800f228 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b084      	sub	sp, #16
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d106      	bne.n	800f244 <tcp_update_rcv_ann_wnd+0x1c>
 800f236:	4b25      	ldr	r3, [pc, #148]	; (800f2cc <tcp_update_rcv_ann_wnd+0xa4>)
 800f238:	f240 32a6 	movw	r2, #934	; 0x3a6
 800f23c:	4924      	ldr	r1, [pc, #144]	; (800f2d0 <tcp_update_rcv_ann_wnd+0xa8>)
 800f23e:	4825      	ldr	r0, [pc, #148]	; (800f2d4 <tcp_update_rcv_ann_wnd+0xac>)
 800f240:	f008 feb4 	bl	8017fac <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f248:	687a      	ldr	r2, [r7, #4]
 800f24a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800f24c:	4413      	add	r3, r2
 800f24e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f254:	687a      	ldr	r2, [r7, #4]
 800f256:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800f258:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800f25c:	bf28      	it	cs
 800f25e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800f262:	b292      	uxth	r2, r2
 800f264:	4413      	add	r3, r2
 800f266:	68fa      	ldr	r2, [r7, #12]
 800f268:	1ad3      	subs	r3, r2, r3
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	db08      	blt.n	800f280 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f27a:	68fa      	ldr	r2, [r7, #12]
 800f27c:	1ad3      	subs	r3, r2, r3
 800f27e:	e020      	b.n	800f2c2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f288:	1ad3      	subs	r3, r2, r3
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	dd03      	ble.n	800f296 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	2200      	movs	r2, #0
 800f292:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f294:	e014      	b.n	800f2c0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f29e:	1ad3      	subs	r3, r2, r3
 800f2a0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800f2a2:	68bb      	ldr	r3, [r7, #8]
 800f2a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f2a8:	d306      	bcc.n	800f2b8 <tcp_update_rcv_ann_wnd+0x90>
 800f2aa:	4b08      	ldr	r3, [pc, #32]	; (800f2cc <tcp_update_rcv_ann_wnd+0xa4>)
 800f2ac:	f240 32b6 	movw	r2, #950	; 0x3b6
 800f2b0:	4909      	ldr	r1, [pc, #36]	; (800f2d8 <tcp_update_rcv_ann_wnd+0xb0>)
 800f2b2:	4808      	ldr	r0, [pc, #32]	; (800f2d4 <tcp_update_rcv_ann_wnd+0xac>)
 800f2b4:	f008 fe7a 	bl	8017fac <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800f2b8:	68bb      	ldr	r3, [r7, #8]
 800f2ba:	b29a      	uxth	r2, r3
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800f2c0:	2300      	movs	r3, #0
  }
}
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	3710      	adds	r7, #16
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	bd80      	pop	{r7, pc}
 800f2ca:	bf00      	nop
 800f2cc:	0801bc54 	.word	0x0801bc54
 800f2d0:	0801beb0 	.word	0x0801beb0
 800f2d4:	0801bc98 	.word	0x0801bc98
 800f2d8:	0801bed4 	.word	0x0801bed4

0800f2dc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b084      	sub	sp, #16
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
 800f2e4:	460b      	mov	r3, r1
 800f2e6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d107      	bne.n	800f2fe <tcp_recved+0x22>
 800f2ee:	4b1f      	ldr	r3, [pc, #124]	; (800f36c <tcp_recved+0x90>)
 800f2f0:	f240 32cf 	movw	r2, #975	; 0x3cf
 800f2f4:	491e      	ldr	r1, [pc, #120]	; (800f370 <tcp_recved+0x94>)
 800f2f6:	481f      	ldr	r0, [pc, #124]	; (800f374 <tcp_recved+0x98>)
 800f2f8:	f008 fe58 	bl	8017fac <iprintf>
 800f2fc:	e032      	b.n	800f364 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	7d1b      	ldrb	r3, [r3, #20]
 800f302:	2b01      	cmp	r3, #1
 800f304:	d106      	bne.n	800f314 <tcp_recved+0x38>
 800f306:	4b19      	ldr	r3, [pc, #100]	; (800f36c <tcp_recved+0x90>)
 800f308:	f240 32d2 	movw	r2, #978	; 0x3d2
 800f30c:	491a      	ldr	r1, [pc, #104]	; (800f378 <tcp_recved+0x9c>)
 800f30e:	4819      	ldr	r0, [pc, #100]	; (800f374 <tcp_recved+0x98>)
 800f310:	f008 fe4c 	bl	8017fac <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f318:	887b      	ldrh	r3, [r7, #2]
 800f31a:	4413      	add	r3, r2
 800f31c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800f31e:	89fb      	ldrh	r3, [r7, #14]
 800f320:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f324:	d804      	bhi.n	800f330 <tcp_recved+0x54>
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f32a:	89fa      	ldrh	r2, [r7, #14]
 800f32c:	429a      	cmp	r2, r3
 800f32e:	d204      	bcs.n	800f33a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f336:	851a      	strh	r2, [r3, #40]	; 0x28
 800f338:	e002      	b.n	800f340 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	89fa      	ldrh	r2, [r7, #14]
 800f33e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800f340:	6878      	ldr	r0, [r7, #4]
 800f342:	f7ff ff71 	bl	800f228 <tcp_update_rcv_ann_wnd>
 800f346:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800f348:	68bb      	ldr	r3, [r7, #8]
 800f34a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f34e:	d309      	bcc.n	800f364 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	8b5b      	ldrh	r3, [r3, #26]
 800f354:	f043 0302 	orr.w	r3, r3, #2
 800f358:	b29a      	uxth	r2, r3
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f35e:	6878      	ldr	r0, [r7, #4]
 800f360:	f004 fcda 	bl	8013d18 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800f364:	3710      	adds	r7, #16
 800f366:	46bd      	mov	sp, r7
 800f368:	bd80      	pop	{r7, pc}
 800f36a:	bf00      	nop
 800f36c:	0801bc54 	.word	0x0801bc54
 800f370:	0801bef0 	.word	0x0801bef0
 800f374:	0801bc98 	.word	0x0801bc98
 800f378:	0801bf08 	.word	0x0801bf08

0800f37c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800f37c:	b480      	push	{r7}
 800f37e:	b083      	sub	sp, #12
 800f380:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800f382:	2300      	movs	r3, #0
 800f384:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800f386:	4b1e      	ldr	r3, [pc, #120]	; (800f400 <tcp_new_port+0x84>)
 800f388:	881b      	ldrh	r3, [r3, #0]
 800f38a:	3301      	adds	r3, #1
 800f38c:	b29a      	uxth	r2, r3
 800f38e:	4b1c      	ldr	r3, [pc, #112]	; (800f400 <tcp_new_port+0x84>)
 800f390:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800f392:	4b1b      	ldr	r3, [pc, #108]	; (800f400 <tcp_new_port+0x84>)
 800f394:	881b      	ldrh	r3, [r3, #0]
 800f396:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f39a:	4293      	cmp	r3, r2
 800f39c:	d103      	bne.n	800f3a6 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800f39e:	4b18      	ldr	r3, [pc, #96]	; (800f400 <tcp_new_port+0x84>)
 800f3a0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800f3a4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	71fb      	strb	r3, [r7, #7]
 800f3aa:	e01e      	b.n	800f3ea <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f3ac:	79fb      	ldrb	r3, [r7, #7]
 800f3ae:	4a15      	ldr	r2, [pc, #84]	; (800f404 <tcp_new_port+0x88>)
 800f3b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	603b      	str	r3, [r7, #0]
 800f3b8:	e011      	b.n	800f3de <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800f3ba:	683b      	ldr	r3, [r7, #0]
 800f3bc:	8ada      	ldrh	r2, [r3, #22]
 800f3be:	4b10      	ldr	r3, [pc, #64]	; (800f400 <tcp_new_port+0x84>)
 800f3c0:	881b      	ldrh	r3, [r3, #0]
 800f3c2:	429a      	cmp	r2, r3
 800f3c4:	d108      	bne.n	800f3d8 <tcp_new_port+0x5c>
        n++;
 800f3c6:	88bb      	ldrh	r3, [r7, #4]
 800f3c8:	3301      	adds	r3, #1
 800f3ca:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800f3cc:	88bb      	ldrh	r3, [r7, #4]
 800f3ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f3d2:	d3d8      	bcc.n	800f386 <tcp_new_port+0xa>
          return 0;
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	e00d      	b.n	800f3f4 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f3d8:	683b      	ldr	r3, [r7, #0]
 800f3da:	68db      	ldr	r3, [r3, #12]
 800f3dc:	603b      	str	r3, [r7, #0]
 800f3de:	683b      	ldr	r3, [r7, #0]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d1ea      	bne.n	800f3ba <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f3e4:	79fb      	ldrb	r3, [r7, #7]
 800f3e6:	3301      	adds	r3, #1
 800f3e8:	71fb      	strb	r3, [r7, #7]
 800f3ea:	79fb      	ldrb	r3, [r7, #7]
 800f3ec:	2b03      	cmp	r3, #3
 800f3ee:	d9dd      	bls.n	800f3ac <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800f3f0:	4b03      	ldr	r3, [pc, #12]	; (800f400 <tcp_new_port+0x84>)
 800f3f2:	881b      	ldrh	r3, [r3, #0]
}
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	370c      	adds	r7, #12
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fe:	4770      	bx	lr
 800f400:	20000012 	.word	0x20000012
 800f404:	0801de48 	.word	0x0801de48

0800f408 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b08a      	sub	sp, #40	; 0x28
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	60f8      	str	r0, [r7, #12]
 800f410:	60b9      	str	r1, [r7, #8]
 800f412:	603b      	str	r3, [r7, #0]
 800f414:	4613      	mov	r3, r2
 800f416:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800f418:	2300      	movs	r3, #0
 800f41a:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d109      	bne.n	800f436 <tcp_connect+0x2e>
 800f422:	4b7d      	ldr	r3, [pc, #500]	; (800f618 <tcp_connect+0x210>)
 800f424:	f240 4235 	movw	r2, #1077	; 0x435
 800f428:	497c      	ldr	r1, [pc, #496]	; (800f61c <tcp_connect+0x214>)
 800f42a:	487d      	ldr	r0, [pc, #500]	; (800f620 <tcp_connect+0x218>)
 800f42c:	f008 fdbe 	bl	8017fac <iprintf>
 800f430:	f06f 030f 	mvn.w	r3, #15
 800f434:	e0ec      	b.n	800f610 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800f436:	68bb      	ldr	r3, [r7, #8]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d109      	bne.n	800f450 <tcp_connect+0x48>
 800f43c:	4b76      	ldr	r3, [pc, #472]	; (800f618 <tcp_connect+0x210>)
 800f43e:	f240 4236 	movw	r2, #1078	; 0x436
 800f442:	4978      	ldr	r1, [pc, #480]	; (800f624 <tcp_connect+0x21c>)
 800f444:	4876      	ldr	r0, [pc, #472]	; (800f620 <tcp_connect+0x218>)
 800f446:	f008 fdb1 	bl	8017fac <iprintf>
 800f44a:	f06f 030f 	mvn.w	r3, #15
 800f44e:	e0df      	b.n	800f610 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	7d1b      	ldrb	r3, [r3, #20]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d009      	beq.n	800f46c <tcp_connect+0x64>
 800f458:	4b6f      	ldr	r3, [pc, #444]	; (800f618 <tcp_connect+0x210>)
 800f45a:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800f45e:	4972      	ldr	r1, [pc, #456]	; (800f628 <tcp_connect+0x220>)
 800f460:	486f      	ldr	r0, [pc, #444]	; (800f620 <tcp_connect+0x218>)
 800f462:	f008 fda3 	bl	8017fac <iprintf>
 800f466:	f06f 0309 	mvn.w	r3, #9
 800f46a:	e0d1      	b.n	800f610 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800f46c:	68bb      	ldr	r3, [r7, #8]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d002      	beq.n	800f478 <tcp_connect+0x70>
 800f472:	68bb      	ldr	r3, [r7, #8]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	e000      	b.n	800f47a <tcp_connect+0x72>
 800f478:	2300      	movs	r3, #0
 800f47a:	68fa      	ldr	r2, [r7, #12]
 800f47c:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	88fa      	ldrh	r2, [r7, #6]
 800f482:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	7a1b      	ldrb	r3, [r3, #8]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d006      	beq.n	800f49a <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	7a1b      	ldrb	r3, [r3, #8]
 800f490:	4618      	mov	r0, r3
 800f492:	f7fe fbbf 	bl	800dc14 <netif_get_by_index>
 800f496:	6278      	str	r0, [r7, #36]	; 0x24
 800f498:	e005      	b.n	800f4a6 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	3304      	adds	r3, #4
 800f49e:	4618      	mov	r0, r3
 800f4a0:	f006 ff8e 	bl	80163c0 <ip4_route>
 800f4a4:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800f4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d102      	bne.n	800f4b2 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800f4ac:	f06f 0303 	mvn.w	r3, #3
 800f4b0:	e0ae      	b.n	800f610 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d003      	beq.n	800f4c0 <tcp_connect+0xb8>
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d111      	bne.n	800f4e4 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800f4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d002      	beq.n	800f4cc <tcp_connect+0xc4>
 800f4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4c8:	3304      	adds	r3, #4
 800f4ca:	e000      	b.n	800f4ce <tcp_connect+0xc6>
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800f4d0:	69fb      	ldr	r3, [r7, #28]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d102      	bne.n	800f4dc <tcp_connect+0xd4>
      return ERR_RTE;
 800f4d6:	f06f 0303 	mvn.w	r3, #3
 800f4da:	e099      	b.n	800f610 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800f4dc:	69fb      	ldr	r3, [r7, #28]
 800f4de:	681a      	ldr	r2, [r3, #0]
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	8adb      	ldrh	r3, [r3, #22]
 800f4e8:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	8adb      	ldrh	r3, [r3, #22]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d10c      	bne.n	800f50c <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800f4f2:	f7ff ff43 	bl	800f37c <tcp_new_port>
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	461a      	mov	r2, r3
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	8adb      	ldrh	r3, [r3, #22]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d102      	bne.n	800f50c <tcp_connect+0x104>
      return ERR_BUF;
 800f506:	f06f 0301 	mvn.w	r3, #1
 800f50a:	e081      	b.n	800f610 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800f50c:	68f8      	ldr	r0, [r7, #12]
 800f50e:	f001 f87f 	bl	8010610 <tcp_next_iss>
 800f512:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	2200      	movs	r2, #0
 800f518:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	697a      	ldr	r2, [r7, #20]
 800f51e:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800f520:	697b      	ldr	r3, [r7, #20]
 800f522:	1e5a      	subs	r2, r3, #1
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800f528:	697b      	ldr	r3, [r7, #20]
 800f52a:	1e5a      	subs	r2, r3, #1
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800f530:	697b      	ldr	r3, [r7, #20]
 800f532:	1e5a      	subs	r2, r3, #1
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f53e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f556:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f560:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	3304      	adds	r3, #4
 800f56a:	461a      	mov	r2, r3
 800f56c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f56e:	f001 f875 	bl	801065c <tcp_eff_send_mss_netif>
 800f572:	4603      	mov	r3, r0
 800f574:	461a      	mov	r2, r3
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	2201      	movs	r2, #1
 800f57e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	683a      	ldr	r2, [r7, #0]
 800f586:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800f58a:	2102      	movs	r1, #2
 800f58c:	68f8      	ldr	r0, [r7, #12]
 800f58e:	f004 fad5 	bl	8013b3c <tcp_enqueue_flags>
 800f592:	4603      	mov	r3, r0
 800f594:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800f596:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d136      	bne.n	800f60c <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	2202      	movs	r2, #2
 800f5a2:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800f5a4:	8b7b      	ldrh	r3, [r7, #26]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d021      	beq.n	800f5ee <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800f5aa:	4b20      	ldr	r3, [pc, #128]	; (800f62c <tcp_connect+0x224>)
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	68fa      	ldr	r2, [r7, #12]
 800f5b0:	429a      	cmp	r2, r3
 800f5b2:	d105      	bne.n	800f5c0 <tcp_connect+0x1b8>
 800f5b4:	4b1d      	ldr	r3, [pc, #116]	; (800f62c <tcp_connect+0x224>)
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	68db      	ldr	r3, [r3, #12]
 800f5ba:	4a1c      	ldr	r2, [pc, #112]	; (800f62c <tcp_connect+0x224>)
 800f5bc:	6013      	str	r3, [r2, #0]
 800f5be:	e013      	b.n	800f5e8 <tcp_connect+0x1e0>
 800f5c0:	4b1a      	ldr	r3, [pc, #104]	; (800f62c <tcp_connect+0x224>)
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	623b      	str	r3, [r7, #32]
 800f5c6:	e00c      	b.n	800f5e2 <tcp_connect+0x1da>
 800f5c8:	6a3b      	ldr	r3, [r7, #32]
 800f5ca:	68db      	ldr	r3, [r3, #12]
 800f5cc:	68fa      	ldr	r2, [r7, #12]
 800f5ce:	429a      	cmp	r2, r3
 800f5d0:	d104      	bne.n	800f5dc <tcp_connect+0x1d4>
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	68da      	ldr	r2, [r3, #12]
 800f5d6:	6a3b      	ldr	r3, [r7, #32]
 800f5d8:	60da      	str	r2, [r3, #12]
 800f5da:	e005      	b.n	800f5e8 <tcp_connect+0x1e0>
 800f5dc:	6a3b      	ldr	r3, [r7, #32]
 800f5de:	68db      	ldr	r3, [r3, #12]
 800f5e0:	623b      	str	r3, [r7, #32]
 800f5e2:	6a3b      	ldr	r3, [r7, #32]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d1ef      	bne.n	800f5c8 <tcp_connect+0x1c0>
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800f5ee:	4b10      	ldr	r3, [pc, #64]	; (800f630 <tcp_connect+0x228>)
 800f5f0:	681a      	ldr	r2, [r3, #0]
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	60da      	str	r2, [r3, #12]
 800f5f6:	4a0e      	ldr	r2, [pc, #56]	; (800f630 <tcp_connect+0x228>)
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	6013      	str	r3, [r2, #0]
 800f5fc:	f005 fb02 	bl	8014c04 <tcp_timer_needed>
 800f600:	4b0c      	ldr	r3, [pc, #48]	; (800f634 <tcp_connect+0x22c>)
 800f602:	2201      	movs	r2, #1
 800f604:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800f606:	68f8      	ldr	r0, [r7, #12]
 800f608:	f004 fb86 	bl	8013d18 <tcp_output>
  }
  return ret;
 800f60c:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800f610:	4618      	mov	r0, r3
 800f612:	3728      	adds	r7, #40	; 0x28
 800f614:	46bd      	mov	sp, r7
 800f616:	bd80      	pop	{r7, pc}
 800f618:	0801bc54 	.word	0x0801bc54
 800f61c:	0801bf30 	.word	0x0801bf30
 800f620:	0801bc98 	.word	0x0801bc98
 800f624:	0801bf4c 	.word	0x0801bf4c
 800f628:	0801bf68 	.word	0x0801bf68
 800f62c:	20009510 	.word	0x20009510
 800f630:	20009504 	.word	0x20009504
 800f634:	20009500 	.word	0x20009500

0800f638 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800f638:	b5b0      	push	{r4, r5, r7, lr}
 800f63a:	b090      	sub	sp, #64	; 0x40
 800f63c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800f63e:	2300      	movs	r3, #0
 800f640:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800f644:	4b94      	ldr	r3, [pc, #592]	; (800f898 <tcp_slowtmr+0x260>)
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	3301      	adds	r3, #1
 800f64a:	4a93      	ldr	r2, [pc, #588]	; (800f898 <tcp_slowtmr+0x260>)
 800f64c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800f64e:	4b93      	ldr	r3, [pc, #588]	; (800f89c <tcp_slowtmr+0x264>)
 800f650:	781b      	ldrb	r3, [r3, #0]
 800f652:	3301      	adds	r3, #1
 800f654:	b2da      	uxtb	r2, r3
 800f656:	4b91      	ldr	r3, [pc, #580]	; (800f89c <tcp_slowtmr+0x264>)
 800f658:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800f65a:	2300      	movs	r3, #0
 800f65c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800f65e:	4b90      	ldr	r3, [pc, #576]	; (800f8a0 <tcp_slowtmr+0x268>)
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800f664:	e29f      	b.n	800fba6 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800f666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f668:	7d1b      	ldrb	r3, [r3, #20]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d106      	bne.n	800f67c <tcp_slowtmr+0x44>
 800f66e:	4b8d      	ldr	r3, [pc, #564]	; (800f8a4 <tcp_slowtmr+0x26c>)
 800f670:	f240 42be 	movw	r2, #1214	; 0x4be
 800f674:	498c      	ldr	r1, [pc, #560]	; (800f8a8 <tcp_slowtmr+0x270>)
 800f676:	488d      	ldr	r0, [pc, #564]	; (800f8ac <tcp_slowtmr+0x274>)
 800f678:	f008 fc98 	bl	8017fac <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800f67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f67e:	7d1b      	ldrb	r3, [r3, #20]
 800f680:	2b01      	cmp	r3, #1
 800f682:	d106      	bne.n	800f692 <tcp_slowtmr+0x5a>
 800f684:	4b87      	ldr	r3, [pc, #540]	; (800f8a4 <tcp_slowtmr+0x26c>)
 800f686:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800f68a:	4989      	ldr	r1, [pc, #548]	; (800f8b0 <tcp_slowtmr+0x278>)
 800f68c:	4887      	ldr	r0, [pc, #540]	; (800f8ac <tcp_slowtmr+0x274>)
 800f68e:	f008 fc8d 	bl	8017fac <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800f692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f694:	7d1b      	ldrb	r3, [r3, #20]
 800f696:	2b0a      	cmp	r3, #10
 800f698:	d106      	bne.n	800f6a8 <tcp_slowtmr+0x70>
 800f69a:	4b82      	ldr	r3, [pc, #520]	; (800f8a4 <tcp_slowtmr+0x26c>)
 800f69c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800f6a0:	4984      	ldr	r1, [pc, #528]	; (800f8b4 <tcp_slowtmr+0x27c>)
 800f6a2:	4882      	ldr	r0, [pc, #520]	; (800f8ac <tcp_slowtmr+0x274>)
 800f6a4:	f008 fc82 	bl	8017fac <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800f6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6aa:	7f9a      	ldrb	r2, [r3, #30]
 800f6ac:	4b7b      	ldr	r3, [pc, #492]	; (800f89c <tcp_slowtmr+0x264>)
 800f6ae:	781b      	ldrb	r3, [r3, #0]
 800f6b0:	429a      	cmp	r2, r3
 800f6b2:	d105      	bne.n	800f6c0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800f6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6b6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ba:	68db      	ldr	r3, [r3, #12]
 800f6bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800f6be:	e272      	b.n	800fba6 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800f6c0:	4b76      	ldr	r3, [pc, #472]	; (800f89c <tcp_slowtmr+0x264>)
 800f6c2:	781a      	ldrb	r2, [r3, #0]
 800f6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6c6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800f6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6d6:	7d1b      	ldrb	r3, [r3, #20]
 800f6d8:	2b02      	cmp	r3, #2
 800f6da:	d10a      	bne.n	800f6f2 <tcp_slowtmr+0xba>
 800f6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f6e2:	2b05      	cmp	r3, #5
 800f6e4:	d905      	bls.n	800f6f2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800f6e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f6ea:	3301      	adds	r3, #1
 800f6ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f6f0:	e11e      	b.n	800f930 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800f6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f6f8:	2b0b      	cmp	r3, #11
 800f6fa:	d905      	bls.n	800f708 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800f6fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f700:	3301      	adds	r3, #1
 800f702:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f706:	e113      	b.n	800f930 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800f708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f70a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d075      	beq.n	800f7fe <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800f712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f716:	2b00      	cmp	r3, #0
 800f718:	d006      	beq.n	800f728 <tcp_slowtmr+0xf0>
 800f71a:	4b62      	ldr	r3, [pc, #392]	; (800f8a4 <tcp_slowtmr+0x26c>)
 800f71c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800f720:	4965      	ldr	r1, [pc, #404]	; (800f8b8 <tcp_slowtmr+0x280>)
 800f722:	4862      	ldr	r0, [pc, #392]	; (800f8ac <tcp_slowtmr+0x274>)
 800f724:	f008 fc42 	bl	8017fac <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800f728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f72a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d106      	bne.n	800f73e <tcp_slowtmr+0x106>
 800f730:	4b5c      	ldr	r3, [pc, #368]	; (800f8a4 <tcp_slowtmr+0x26c>)
 800f732:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800f736:	4961      	ldr	r1, [pc, #388]	; (800f8bc <tcp_slowtmr+0x284>)
 800f738:	485c      	ldr	r0, [pc, #368]	; (800f8ac <tcp_slowtmr+0x274>)
 800f73a:	f008 fc37 	bl	8017fac <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800f73e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f740:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f744:	2b0b      	cmp	r3, #11
 800f746:	d905      	bls.n	800f754 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800f748:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f74c:	3301      	adds	r3, #1
 800f74e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f752:	e0ed      	b.n	800f930 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800f754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f756:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f75a:	3b01      	subs	r3, #1
 800f75c:	4a58      	ldr	r2, [pc, #352]	; (800f8c0 <tcp_slowtmr+0x288>)
 800f75e:	5cd3      	ldrb	r3, [r2, r3]
 800f760:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800f762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f764:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f768:	7c7a      	ldrb	r2, [r7, #17]
 800f76a:	429a      	cmp	r2, r3
 800f76c:	d907      	bls.n	800f77e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800f76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f770:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f774:	3301      	adds	r3, #1
 800f776:	b2da      	uxtb	r2, r3
 800f778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f77a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800f77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f780:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f784:	7c7a      	ldrb	r2, [r7, #17]
 800f786:	429a      	cmp	r2, r3
 800f788:	f200 80d2 	bhi.w	800f930 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800f78c:	2301      	movs	r3, #1
 800f78e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800f790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f792:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f796:	2b00      	cmp	r3, #0
 800f798:	d108      	bne.n	800f7ac <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800f79a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f79c:	f005 f964 	bl	8014a68 <tcp_zero_window_probe>
 800f7a0:	4603      	mov	r3, r0
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d014      	beq.n	800f7d0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	623b      	str	r3, [r7, #32]
 800f7aa:	e011      	b.n	800f7d0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800f7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f7b2:	4619      	mov	r1, r3
 800f7b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f7b6:	f004 f829 	bl	801380c <tcp_split_unsent_seg>
 800f7ba:	4603      	mov	r3, r0
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d107      	bne.n	800f7d0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800f7c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f7c2:	f004 faa9 	bl	8013d18 <tcp_output>
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d101      	bne.n	800f7d0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800f7d0:	6a3b      	ldr	r3, [r7, #32]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	f000 80ac 	beq.w	800f930 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800f7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7da:	2200      	movs	r2, #0
 800f7dc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800f7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7e2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f7e6:	2b06      	cmp	r3, #6
 800f7e8:	f200 80a2 	bhi.w	800f930 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800f7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ee:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f7f2:	3301      	adds	r3, #1
 800f7f4:	b2da      	uxtb	r2, r3
 800f7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7f8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800f7fc:	e098      	b.n	800f930 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800f7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f800:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f804:	2b00      	cmp	r3, #0
 800f806:	db0f      	blt.n	800f828 <tcp_slowtmr+0x1f0>
 800f808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f80a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f80e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f812:	4293      	cmp	r3, r2
 800f814:	d008      	beq.n	800f828 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800f816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f818:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f81c:	b29b      	uxth	r3, r3
 800f81e:	3301      	adds	r3, #1
 800f820:	b29b      	uxth	r3, r3
 800f822:	b21a      	sxth	r2, r3
 800f824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f826:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800f828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f82a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800f82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f830:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f834:	429a      	cmp	r2, r3
 800f836:	db7b      	blt.n	800f930 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800f838:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f83a:	f004 fd5f 	bl	80142fc <tcp_rexmit_rto_prepare>
 800f83e:	4603      	mov	r3, r0
 800f840:	2b00      	cmp	r3, #0
 800f842:	d007      	beq.n	800f854 <tcp_slowtmr+0x21c>
 800f844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d171      	bne.n	800f930 <tcp_slowtmr+0x2f8>
 800f84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f84e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f850:	2b00      	cmp	r3, #0
 800f852:	d06d      	beq.n	800f930 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800f854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f856:	7d1b      	ldrb	r3, [r3, #20]
 800f858:	2b02      	cmp	r3, #2
 800f85a:	d03a      	beq.n	800f8d2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800f85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f85e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f862:	2b0c      	cmp	r3, #12
 800f864:	bf28      	it	cs
 800f866:	230c      	movcs	r3, #12
 800f868:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800f86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f86c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f870:	10db      	asrs	r3, r3, #3
 800f872:	b21b      	sxth	r3, r3
 800f874:	461a      	mov	r2, r3
 800f876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f878:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f87c:	4413      	add	r3, r2
 800f87e:	7efa      	ldrb	r2, [r7, #27]
 800f880:	4910      	ldr	r1, [pc, #64]	; (800f8c4 <tcp_slowtmr+0x28c>)
 800f882:	5c8a      	ldrb	r2, [r1, r2]
 800f884:	4093      	lsls	r3, r2
 800f886:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800f888:	697b      	ldr	r3, [r7, #20]
 800f88a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800f88e:	4293      	cmp	r3, r2
 800f890:	dc1a      	bgt.n	800f8c8 <tcp_slowtmr+0x290>
 800f892:	697b      	ldr	r3, [r7, #20]
 800f894:	b21a      	sxth	r2, r3
 800f896:	e019      	b.n	800f8cc <tcp_slowtmr+0x294>
 800f898:	20009508 	.word	0x20009508
 800f89c:	20000a56 	.word	0x20000a56
 800f8a0:	20009504 	.word	0x20009504
 800f8a4:	0801bc54 	.word	0x0801bc54
 800f8a8:	0801bf98 	.word	0x0801bf98
 800f8ac:	0801bc98 	.word	0x0801bc98
 800f8b0:	0801bfc4 	.word	0x0801bfc4
 800f8b4:	0801bff0 	.word	0x0801bff0
 800f8b8:	0801c020 	.word	0x0801c020
 800f8bc:	0801c054 	.word	0x0801c054
 800f8c0:	0801de40 	.word	0x0801de40
 800f8c4:	0801de30 	.word	0x0801de30
 800f8c8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800f8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8d4:	2200      	movs	r2, #0
 800f8d6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8e0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f8e4:	4293      	cmp	r3, r2
 800f8e6:	bf28      	it	cs
 800f8e8:	4613      	movcs	r3, r2
 800f8ea:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800f8ec:	8a7b      	ldrh	r3, [r7, #18]
 800f8ee:	085b      	lsrs	r3, r3, #1
 800f8f0:	b29a      	uxth	r2, r3
 800f8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8f4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800f8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8fa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f900:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f902:	005b      	lsls	r3, r3, #1
 800f904:	b29b      	uxth	r3, r3
 800f906:	429a      	cmp	r2, r3
 800f908:	d206      	bcs.n	800f918 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800f90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f90c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f90e:	005b      	lsls	r3, r3, #1
 800f910:	b29a      	uxth	r2, r3
 800f912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f914:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800f918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f91a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800f91c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f91e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800f922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f924:	2200      	movs	r2, #0
 800f926:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800f92a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f92c:	f004 fd56 	bl	80143dc <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800f930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f932:	7d1b      	ldrb	r3, [r3, #20]
 800f934:	2b06      	cmp	r3, #6
 800f936:	d111      	bne.n	800f95c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800f938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f93a:	8b5b      	ldrh	r3, [r3, #26]
 800f93c:	f003 0310 	and.w	r3, r3, #16
 800f940:	2b00      	cmp	r3, #0
 800f942:	d00b      	beq.n	800f95c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f944:	4b9d      	ldr	r3, [pc, #628]	; (800fbbc <tcp_slowtmr+0x584>)
 800f946:	681a      	ldr	r2, [r3, #0]
 800f948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f94a:	6a1b      	ldr	r3, [r3, #32]
 800f94c:	1ad3      	subs	r3, r2, r3
 800f94e:	2b28      	cmp	r3, #40	; 0x28
 800f950:	d904      	bls.n	800f95c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800f952:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f956:	3301      	adds	r3, #1
 800f958:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f95e:	7a5b      	ldrb	r3, [r3, #9]
 800f960:	f003 0308 	and.w	r3, r3, #8
 800f964:	2b00      	cmp	r3, #0
 800f966:	d04c      	beq.n	800fa02 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800f968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f96a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f96c:	2b04      	cmp	r3, #4
 800f96e:	d003      	beq.n	800f978 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800f970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f972:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800f974:	2b07      	cmp	r3, #7
 800f976:	d144      	bne.n	800fa02 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f978:	4b90      	ldr	r3, [pc, #576]	; (800fbbc <tcp_slowtmr+0x584>)
 800f97a:	681a      	ldr	r2, [r3, #0]
 800f97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f97e:	6a1b      	ldr	r3, [r3, #32]
 800f980:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800f982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f984:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f988:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800f98c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800f990:	498b      	ldr	r1, [pc, #556]	; (800fbc0 <tcp_slowtmr+0x588>)
 800f992:	fba1 1303 	umull	r1, r3, r1, r3
 800f996:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f998:	429a      	cmp	r2, r3
 800f99a:	d90a      	bls.n	800f9b2 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800f99c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f9a0:	3301      	adds	r3, #1
 800f9a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800f9a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f9aa:	3301      	adds	r3, #1
 800f9ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f9b0:	e027      	b.n	800fa02 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f9b2:	4b82      	ldr	r3, [pc, #520]	; (800fbbc <tcp_slowtmr+0x584>)
 800f9b4:	681a      	ldr	r2, [r3, #0]
 800f9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9b8:	6a1b      	ldr	r3, [r3, #32]
 800f9ba:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800f9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9be:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9c4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	4b7e      	ldr	r3, [pc, #504]	; (800fbc4 <tcp_slowtmr+0x58c>)
 800f9cc:	fb03 f300 	mul.w	r3, r3, r0
 800f9d0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800f9d2:	497b      	ldr	r1, [pc, #492]	; (800fbc0 <tcp_slowtmr+0x588>)
 800f9d4:	fba1 1303 	umull	r1, r3, r1, r3
 800f9d8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f9da:	429a      	cmp	r2, r3
 800f9dc:	d911      	bls.n	800fa02 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800f9de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f9e0:	f005 f802 	bl	80149e8 <tcp_keepalive>
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800f9ea:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d107      	bne.n	800fa02 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800f9f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9f4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f9f8:	3301      	adds	r3, #1
 800f9fa:	b2da      	uxtb	r2, r3
 800f9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9fe:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800fa02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d011      	beq.n	800fa2e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800fa0a:	4b6c      	ldr	r3, [pc, #432]	; (800fbbc <tcp_slowtmr+0x584>)
 800fa0c:	681a      	ldr	r2, [r3, #0]
 800fa0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa10:	6a1b      	ldr	r3, [r3, #32]
 800fa12:	1ad2      	subs	r2, r2, r3
 800fa14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa16:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800fa1a:	4619      	mov	r1, r3
 800fa1c:	460b      	mov	r3, r1
 800fa1e:	005b      	lsls	r3, r3, #1
 800fa20:	440b      	add	r3, r1
 800fa22:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800fa24:	429a      	cmp	r2, r3
 800fa26:	d302      	bcc.n	800fa2e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800fa28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa2a:	f000 fec1 	bl	80107b0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800fa2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa30:	7d1b      	ldrb	r3, [r3, #20]
 800fa32:	2b03      	cmp	r3, #3
 800fa34:	d10b      	bne.n	800fa4e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fa36:	4b61      	ldr	r3, [pc, #388]	; (800fbbc <tcp_slowtmr+0x584>)
 800fa38:	681a      	ldr	r2, [r3, #0]
 800fa3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa3c:	6a1b      	ldr	r3, [r3, #32]
 800fa3e:	1ad3      	subs	r3, r2, r3
 800fa40:	2b28      	cmp	r3, #40	; 0x28
 800fa42:	d904      	bls.n	800fa4e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800fa44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa48:	3301      	adds	r3, #1
 800fa4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800fa4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa50:	7d1b      	ldrb	r3, [r3, #20]
 800fa52:	2b09      	cmp	r3, #9
 800fa54:	d10b      	bne.n	800fa6e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fa56:	4b59      	ldr	r3, [pc, #356]	; (800fbbc <tcp_slowtmr+0x584>)
 800fa58:	681a      	ldr	r2, [r3, #0]
 800fa5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa5c:	6a1b      	ldr	r3, [r3, #32]
 800fa5e:	1ad3      	subs	r3, r2, r3
 800fa60:	2bf0      	cmp	r3, #240	; 0xf0
 800fa62:	d904      	bls.n	800fa6e <tcp_slowtmr+0x436>
        ++pcb_remove;
 800fa64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa68:	3301      	adds	r3, #1
 800fa6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800fa6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d060      	beq.n	800fb38 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800fa76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa7c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800fa7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa80:	f000 fce2 	bl	8010448 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800fa84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d010      	beq.n	800faac <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800fa8a:	4b4f      	ldr	r3, [pc, #316]	; (800fbc8 <tcp_slowtmr+0x590>)
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fa90:	429a      	cmp	r2, r3
 800fa92:	d106      	bne.n	800faa2 <tcp_slowtmr+0x46a>
 800fa94:	4b4d      	ldr	r3, [pc, #308]	; (800fbcc <tcp_slowtmr+0x594>)
 800fa96:	f240 526d 	movw	r2, #1389	; 0x56d
 800fa9a:	494d      	ldr	r1, [pc, #308]	; (800fbd0 <tcp_slowtmr+0x598>)
 800fa9c:	484d      	ldr	r0, [pc, #308]	; (800fbd4 <tcp_slowtmr+0x59c>)
 800fa9e:	f008 fa85 	bl	8017fac <iprintf>
        prev->next = pcb->next;
 800faa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faa4:	68da      	ldr	r2, [r3, #12]
 800faa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faa8:	60da      	str	r2, [r3, #12]
 800faaa:	e00f      	b.n	800facc <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800faac:	4b46      	ldr	r3, [pc, #280]	; (800fbc8 <tcp_slowtmr+0x590>)
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fab2:	429a      	cmp	r2, r3
 800fab4:	d006      	beq.n	800fac4 <tcp_slowtmr+0x48c>
 800fab6:	4b45      	ldr	r3, [pc, #276]	; (800fbcc <tcp_slowtmr+0x594>)
 800fab8:	f240 5271 	movw	r2, #1393	; 0x571
 800fabc:	4946      	ldr	r1, [pc, #280]	; (800fbd8 <tcp_slowtmr+0x5a0>)
 800fabe:	4845      	ldr	r0, [pc, #276]	; (800fbd4 <tcp_slowtmr+0x59c>)
 800fac0:	f008 fa74 	bl	8017fac <iprintf>
        tcp_active_pcbs = pcb->next;
 800fac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fac6:	68db      	ldr	r3, [r3, #12]
 800fac8:	4a3f      	ldr	r2, [pc, #252]	; (800fbc8 <tcp_slowtmr+0x590>)
 800faca:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800facc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d013      	beq.n	800fafc <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800fad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fad6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800fad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fada:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800fadc:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800fade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fae0:	3304      	adds	r3, #4
 800fae2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fae4:	8ad2      	ldrh	r2, [r2, #22]
 800fae6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fae8:	8b09      	ldrh	r1, [r1, #24]
 800faea:	9102      	str	r1, [sp, #8]
 800faec:	9201      	str	r2, [sp, #4]
 800faee:	9300      	str	r3, [sp, #0]
 800faf0:	462b      	mov	r3, r5
 800faf2:	4622      	mov	r2, r4
 800faf4:	4601      	mov	r1, r0
 800faf6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800faf8:	f004 fec2 	bl	8014880 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800fafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fafe:	691b      	ldr	r3, [r3, #16]
 800fb00:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800fb02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb04:	7d1b      	ldrb	r3, [r3, #20]
 800fb06:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800fb08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb0a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800fb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb0e:	68db      	ldr	r3, [r3, #12]
 800fb10:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800fb12:	6838      	ldr	r0, [r7, #0]
 800fb14:	f7fe ff20 	bl	800e958 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800fb18:	4b30      	ldr	r3, [pc, #192]	; (800fbdc <tcp_slowtmr+0x5a4>)
 800fb1a:	2200      	movs	r2, #0
 800fb1c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d004      	beq.n	800fb2e <tcp_slowtmr+0x4f6>
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	f06f 010c 	mvn.w	r1, #12
 800fb2a:	68b8      	ldr	r0, [r7, #8]
 800fb2c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800fb2e:	4b2b      	ldr	r3, [pc, #172]	; (800fbdc <tcp_slowtmr+0x5a4>)
 800fb30:	781b      	ldrb	r3, [r3, #0]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d037      	beq.n	800fba6 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800fb36:	e590      	b.n	800f65a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800fb38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb3a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fb3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb3e:	68db      	ldr	r3, [r3, #12]
 800fb40:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800fb42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb44:	7f1b      	ldrb	r3, [r3, #28]
 800fb46:	3301      	adds	r3, #1
 800fb48:	b2da      	uxtb	r2, r3
 800fb4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb4c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800fb4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb50:	7f1a      	ldrb	r2, [r3, #28]
 800fb52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb54:	7f5b      	ldrb	r3, [r3, #29]
 800fb56:	429a      	cmp	r2, r3
 800fb58:	d325      	bcc.n	800fba6 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800fb5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb5c:	2200      	movs	r2, #0
 800fb5e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800fb60:	4b1e      	ldr	r3, [pc, #120]	; (800fbdc <tcp_slowtmr+0x5a4>)
 800fb62:	2200      	movs	r2, #0
 800fb64:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800fb66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d00b      	beq.n	800fb88 <tcp_slowtmr+0x550>
 800fb70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fb76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fb78:	6912      	ldr	r2, [r2, #16]
 800fb7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fb7c:	4610      	mov	r0, r2
 800fb7e:	4798      	blx	r3
 800fb80:	4603      	mov	r3, r0
 800fb82:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800fb86:	e002      	b.n	800fb8e <tcp_slowtmr+0x556>
 800fb88:	2300      	movs	r3, #0
 800fb8a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800fb8e:	4b13      	ldr	r3, [pc, #76]	; (800fbdc <tcp_slowtmr+0x5a4>)
 800fb90:	781b      	ldrb	r3, [r3, #0]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d000      	beq.n	800fb98 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800fb96:	e560      	b.n	800f65a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800fb98:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d102      	bne.n	800fba6 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800fba0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fba2:	f004 f8b9 	bl	8013d18 <tcp_output>
  while (pcb != NULL) {
 800fba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	f47f ad5c 	bne.w	800f666 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800fbae:	2300      	movs	r3, #0
 800fbb0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800fbb2:	4b0b      	ldr	r3, [pc, #44]	; (800fbe0 <tcp_slowtmr+0x5a8>)
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800fbb8:	e067      	b.n	800fc8a <tcp_slowtmr+0x652>
 800fbba:	bf00      	nop
 800fbbc:	20009508 	.word	0x20009508
 800fbc0:	10624dd3 	.word	0x10624dd3
 800fbc4:	000124f8 	.word	0x000124f8
 800fbc8:	20009504 	.word	0x20009504
 800fbcc:	0801bc54 	.word	0x0801bc54
 800fbd0:	0801c08c 	.word	0x0801c08c
 800fbd4:	0801bc98 	.word	0x0801bc98
 800fbd8:	0801c0b8 	.word	0x0801c0b8
 800fbdc:	20009500 	.word	0x20009500
 800fbe0:	20009514 	.word	0x20009514
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fbe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbe6:	7d1b      	ldrb	r3, [r3, #20]
 800fbe8:	2b0a      	cmp	r3, #10
 800fbea:	d006      	beq.n	800fbfa <tcp_slowtmr+0x5c2>
 800fbec:	4b2b      	ldr	r3, [pc, #172]	; (800fc9c <tcp_slowtmr+0x664>)
 800fbee:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800fbf2:	492b      	ldr	r1, [pc, #172]	; (800fca0 <tcp_slowtmr+0x668>)
 800fbf4:	482b      	ldr	r0, [pc, #172]	; (800fca4 <tcp_slowtmr+0x66c>)
 800fbf6:	f008 f9d9 	bl	8017fac <iprintf>
    pcb_remove = 0;
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fc00:	4b29      	ldr	r3, [pc, #164]	; (800fca8 <tcp_slowtmr+0x670>)
 800fc02:	681a      	ldr	r2, [r3, #0]
 800fc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc06:	6a1b      	ldr	r3, [r3, #32]
 800fc08:	1ad3      	subs	r3, r2, r3
 800fc0a:	2bf0      	cmp	r3, #240	; 0xf0
 800fc0c:	d904      	bls.n	800fc18 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800fc0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc12:	3301      	adds	r3, #1
 800fc14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800fc18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d02f      	beq.n	800fc80 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800fc20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc22:	f000 fc11 	bl	8010448 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800fc26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d010      	beq.n	800fc4e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800fc2c:	4b1f      	ldr	r3, [pc, #124]	; (800fcac <tcp_slowtmr+0x674>)
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc32:	429a      	cmp	r2, r3
 800fc34:	d106      	bne.n	800fc44 <tcp_slowtmr+0x60c>
 800fc36:	4b19      	ldr	r3, [pc, #100]	; (800fc9c <tcp_slowtmr+0x664>)
 800fc38:	f240 52af 	movw	r2, #1455	; 0x5af
 800fc3c:	491c      	ldr	r1, [pc, #112]	; (800fcb0 <tcp_slowtmr+0x678>)
 800fc3e:	4819      	ldr	r0, [pc, #100]	; (800fca4 <tcp_slowtmr+0x66c>)
 800fc40:	f008 f9b4 	bl	8017fac <iprintf>
        prev->next = pcb->next;
 800fc44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc46:	68da      	ldr	r2, [r3, #12]
 800fc48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc4a:	60da      	str	r2, [r3, #12]
 800fc4c:	e00f      	b.n	800fc6e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800fc4e:	4b17      	ldr	r3, [pc, #92]	; (800fcac <tcp_slowtmr+0x674>)
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc54:	429a      	cmp	r2, r3
 800fc56:	d006      	beq.n	800fc66 <tcp_slowtmr+0x62e>
 800fc58:	4b10      	ldr	r3, [pc, #64]	; (800fc9c <tcp_slowtmr+0x664>)
 800fc5a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800fc5e:	4915      	ldr	r1, [pc, #84]	; (800fcb4 <tcp_slowtmr+0x67c>)
 800fc60:	4810      	ldr	r0, [pc, #64]	; (800fca4 <tcp_slowtmr+0x66c>)
 800fc62:	f008 f9a3 	bl	8017fac <iprintf>
        tcp_tw_pcbs = pcb->next;
 800fc66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc68:	68db      	ldr	r3, [r3, #12]
 800fc6a:	4a10      	ldr	r2, [pc, #64]	; (800fcac <tcp_slowtmr+0x674>)
 800fc6c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800fc6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc70:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800fc72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc74:	68db      	ldr	r3, [r3, #12]
 800fc76:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800fc78:	69f8      	ldr	r0, [r7, #28]
 800fc7a:	f7fe fe6d 	bl	800e958 <tcp_free>
 800fc7e:	e004      	b.n	800fc8a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800fc80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc82:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fc84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc86:	68db      	ldr	r3, [r3, #12]
 800fc88:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800fc8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d1a9      	bne.n	800fbe4 <tcp_slowtmr+0x5ac>
    }
  }
}
 800fc90:	bf00      	nop
 800fc92:	bf00      	nop
 800fc94:	3730      	adds	r7, #48	; 0x30
 800fc96:	46bd      	mov	sp, r7
 800fc98:	bdb0      	pop	{r4, r5, r7, pc}
 800fc9a:	bf00      	nop
 800fc9c:	0801bc54 	.word	0x0801bc54
 800fca0:	0801c0e4 	.word	0x0801c0e4
 800fca4:	0801bc98 	.word	0x0801bc98
 800fca8:	20009508 	.word	0x20009508
 800fcac:	20009514 	.word	0x20009514
 800fcb0:	0801c114 	.word	0x0801c114
 800fcb4:	0801c13c 	.word	0x0801c13c

0800fcb8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b082      	sub	sp, #8
 800fcbc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800fcbe:	4b2d      	ldr	r3, [pc, #180]	; (800fd74 <tcp_fasttmr+0xbc>)
 800fcc0:	781b      	ldrb	r3, [r3, #0]
 800fcc2:	3301      	adds	r3, #1
 800fcc4:	b2da      	uxtb	r2, r3
 800fcc6:	4b2b      	ldr	r3, [pc, #172]	; (800fd74 <tcp_fasttmr+0xbc>)
 800fcc8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800fcca:	4b2b      	ldr	r3, [pc, #172]	; (800fd78 <tcp_fasttmr+0xc0>)
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800fcd0:	e048      	b.n	800fd64 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	7f9a      	ldrb	r2, [r3, #30]
 800fcd6:	4b27      	ldr	r3, [pc, #156]	; (800fd74 <tcp_fasttmr+0xbc>)
 800fcd8:	781b      	ldrb	r3, [r3, #0]
 800fcda:	429a      	cmp	r2, r3
 800fcdc:	d03f      	beq.n	800fd5e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800fcde:	4b25      	ldr	r3, [pc, #148]	; (800fd74 <tcp_fasttmr+0xbc>)
 800fce0:	781a      	ldrb	r2, [r3, #0]
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	8b5b      	ldrh	r3, [r3, #26]
 800fcea:	f003 0301 	and.w	r3, r3, #1
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d010      	beq.n	800fd14 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	8b5b      	ldrh	r3, [r3, #26]
 800fcf6:	f043 0302 	orr.w	r3, r3, #2
 800fcfa:	b29a      	uxth	r2, r3
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800fd00:	6878      	ldr	r0, [r7, #4]
 800fd02:	f004 f809 	bl	8013d18 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	8b5b      	ldrh	r3, [r3, #26]
 800fd0a:	f023 0303 	bic.w	r3, r3, #3
 800fd0e:	b29a      	uxth	r2, r3
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	8b5b      	ldrh	r3, [r3, #26]
 800fd18:	f003 0308 	and.w	r3, r3, #8
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d009      	beq.n	800fd34 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	8b5b      	ldrh	r3, [r3, #26]
 800fd24:	f023 0308 	bic.w	r3, r3, #8
 800fd28:	b29a      	uxth	r2, r3
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800fd2e:	6878      	ldr	r0, [r7, #4]
 800fd30:	f7fe ffa6 	bl	800ec80 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	68db      	ldr	r3, [r3, #12]
 800fd38:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d00a      	beq.n	800fd58 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800fd42:	4b0e      	ldr	r3, [pc, #56]	; (800fd7c <tcp_fasttmr+0xc4>)
 800fd44:	2200      	movs	r2, #0
 800fd46:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800fd48:	6878      	ldr	r0, [r7, #4]
 800fd4a:	f000 f819 	bl	800fd80 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800fd4e:	4b0b      	ldr	r3, [pc, #44]	; (800fd7c <tcp_fasttmr+0xc4>)
 800fd50:	781b      	ldrb	r3, [r3, #0]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d000      	beq.n	800fd58 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800fd56:	e7b8      	b.n	800fcca <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800fd58:	683b      	ldr	r3, [r7, #0]
 800fd5a:	607b      	str	r3, [r7, #4]
 800fd5c:	e002      	b.n	800fd64 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	68db      	ldr	r3, [r3, #12]
 800fd62:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d1b3      	bne.n	800fcd2 <tcp_fasttmr+0x1a>
    }
  }
}
 800fd6a:	bf00      	nop
 800fd6c:	bf00      	nop
 800fd6e:	3708      	adds	r7, #8
 800fd70:	46bd      	mov	sp, r7
 800fd72:	bd80      	pop	{r7, pc}
 800fd74:	20000a56 	.word	0x20000a56
 800fd78:	20009504 	.word	0x20009504
 800fd7c:	20009500 	.word	0x20009500

0800fd80 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800fd80:	b590      	push	{r4, r7, lr}
 800fd82:	b085      	sub	sp, #20
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d109      	bne.n	800fda2 <tcp_process_refused_data+0x22>
 800fd8e:	4b37      	ldr	r3, [pc, #220]	; (800fe6c <tcp_process_refused_data+0xec>)
 800fd90:	f240 6209 	movw	r2, #1545	; 0x609
 800fd94:	4936      	ldr	r1, [pc, #216]	; (800fe70 <tcp_process_refused_data+0xf0>)
 800fd96:	4837      	ldr	r0, [pc, #220]	; (800fe74 <tcp_process_refused_data+0xf4>)
 800fd98:	f008 f908 	bl	8017fac <iprintf>
 800fd9c:	f06f 030f 	mvn.w	r3, #15
 800fda0:	e060      	b.n	800fe64 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fda6:	7b5b      	ldrb	r3, [r3, #13]
 800fda8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fdae:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d00b      	beq.n	800fdd8 <tcp_process_refused_data+0x58>
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	6918      	ldr	r0, [r3, #16]
 800fdca:	2300      	movs	r3, #0
 800fdcc:	68ba      	ldr	r2, [r7, #8]
 800fdce:	6879      	ldr	r1, [r7, #4]
 800fdd0:	47a0      	blx	r4
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	73fb      	strb	r3, [r7, #15]
 800fdd6:	e007      	b.n	800fde8 <tcp_process_refused_data+0x68>
 800fdd8:	2300      	movs	r3, #0
 800fdda:	68ba      	ldr	r2, [r7, #8]
 800fddc:	6879      	ldr	r1, [r7, #4]
 800fdde:	2000      	movs	r0, #0
 800fde0:	f000 f8c2 	bl	800ff68 <tcp_recv_null>
 800fde4:	4603      	mov	r3, r0
 800fde6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800fde8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d12a      	bne.n	800fe46 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800fdf0:	7bbb      	ldrb	r3, [r7, #14]
 800fdf2:	f003 0320 	and.w	r3, r3, #32
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d033      	beq.n	800fe62 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fdfe:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fe02:	d005      	beq.n	800fe10 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fe08:	3301      	adds	r3, #1
 800fe0a:	b29a      	uxth	r2, r3
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d00b      	beq.n	800fe32 <tcp_process_refused_data+0xb2>
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	6918      	ldr	r0, [r3, #16]
 800fe24:	2300      	movs	r3, #0
 800fe26:	2200      	movs	r2, #0
 800fe28:	6879      	ldr	r1, [r7, #4]
 800fe2a:	47a0      	blx	r4
 800fe2c:	4603      	mov	r3, r0
 800fe2e:	73fb      	strb	r3, [r7, #15]
 800fe30:	e001      	b.n	800fe36 <tcp_process_refused_data+0xb6>
 800fe32:	2300      	movs	r3, #0
 800fe34:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800fe36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe3a:	f113 0f0d 	cmn.w	r3, #13
 800fe3e:	d110      	bne.n	800fe62 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800fe40:	f06f 030c 	mvn.w	r3, #12
 800fe44:	e00e      	b.n	800fe64 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800fe46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe4a:	f113 0f0d 	cmn.w	r3, #13
 800fe4e:	d102      	bne.n	800fe56 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800fe50:	f06f 030c 	mvn.w	r3, #12
 800fe54:	e006      	b.n	800fe64 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	68ba      	ldr	r2, [r7, #8]
 800fe5a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800fe5c:	f06f 0304 	mvn.w	r3, #4
 800fe60:	e000      	b.n	800fe64 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800fe62:	2300      	movs	r3, #0
}
 800fe64:	4618      	mov	r0, r3
 800fe66:	3714      	adds	r7, #20
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	bd90      	pop	{r4, r7, pc}
 800fe6c:	0801bc54 	.word	0x0801bc54
 800fe70:	0801c164 	.word	0x0801c164
 800fe74:	0801bc98 	.word	0x0801bc98

0800fe78 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b084      	sub	sp, #16
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800fe80:	e007      	b.n	800fe92 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800fe88:	6878      	ldr	r0, [r7, #4]
 800fe8a:	f000 f80a 	bl	800fea2 <tcp_seg_free>
    seg = next;
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d1f4      	bne.n	800fe82 <tcp_segs_free+0xa>
  }
}
 800fe98:	bf00      	nop
 800fe9a:	bf00      	nop
 800fe9c:	3710      	adds	r7, #16
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	bd80      	pop	{r7, pc}

0800fea2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800fea2:	b580      	push	{r7, lr}
 800fea4:	b082      	sub	sp, #8
 800fea6:	af00      	add	r7, sp, #0
 800fea8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d00c      	beq.n	800feca <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	685b      	ldr	r3, [r3, #4]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d004      	beq.n	800fec2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	685b      	ldr	r3, [r3, #4]
 800febc:	4618      	mov	r0, r3
 800febe:	f7fe fa09 	bl	800e2d4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800fec2:	6879      	ldr	r1, [r7, #4]
 800fec4:	2003      	movs	r0, #3
 800fec6:	f7fd fbf3 	bl	800d6b0 <memp_free>
  }
}
 800feca:	bf00      	nop
 800fecc:	3708      	adds	r7, #8
 800fece:	46bd      	mov	sp, r7
 800fed0:	bd80      	pop	{r7, pc}
	...

0800fed4 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b082      	sub	sp, #8
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
 800fedc:	460b      	mov	r3, r1
 800fede:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d107      	bne.n	800fef6 <tcp_setprio+0x22>
 800fee6:	4b07      	ldr	r3, [pc, #28]	; (800ff04 <tcp_setprio+0x30>)
 800fee8:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800feec:	4906      	ldr	r1, [pc, #24]	; (800ff08 <tcp_setprio+0x34>)
 800feee:	4807      	ldr	r0, [pc, #28]	; (800ff0c <tcp_setprio+0x38>)
 800fef0:	f008 f85c 	bl	8017fac <iprintf>
 800fef4:	e002      	b.n	800fefc <tcp_setprio+0x28>

  pcb->prio = prio;
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	78fa      	ldrb	r2, [r7, #3]
 800fefa:	755a      	strb	r2, [r3, #21]
}
 800fefc:	3708      	adds	r7, #8
 800fefe:	46bd      	mov	sp, r7
 800ff00:	bd80      	pop	{r7, pc}
 800ff02:	bf00      	nop
 800ff04:	0801bc54 	.word	0x0801bc54
 800ff08:	0801c18c 	.word	0x0801c18c
 800ff0c:	0801bc98 	.word	0x0801bc98

0800ff10 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800ff10:	b580      	push	{r7, lr}
 800ff12:	b084      	sub	sp, #16
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d106      	bne.n	800ff2c <tcp_seg_copy+0x1c>
 800ff1e:	4b0f      	ldr	r3, [pc, #60]	; (800ff5c <tcp_seg_copy+0x4c>)
 800ff20:	f240 6282 	movw	r2, #1666	; 0x682
 800ff24:	490e      	ldr	r1, [pc, #56]	; (800ff60 <tcp_seg_copy+0x50>)
 800ff26:	480f      	ldr	r0, [pc, #60]	; (800ff64 <tcp_seg_copy+0x54>)
 800ff28:	f008 f840 	bl	8017fac <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800ff2c:	2003      	movs	r0, #3
 800ff2e:	f7fd fb73 	bl	800d618 <memp_malloc>
 800ff32:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d101      	bne.n	800ff3e <tcp_seg_copy+0x2e>
    return NULL;
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	e00a      	b.n	800ff54 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ff3e:	2210      	movs	r2, #16
 800ff40:	6879      	ldr	r1, [r7, #4]
 800ff42:	68f8      	ldr	r0, [r7, #12]
 800ff44:	f007 ff58 	bl	8017df8 <memcpy>
  pbuf_ref(cseg->p);
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	685b      	ldr	r3, [r3, #4]
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	f7fe fa61 	bl	800e414 <pbuf_ref>
  return cseg;
 800ff52:	68fb      	ldr	r3, [r7, #12]
}
 800ff54:	4618      	mov	r0, r3
 800ff56:	3710      	adds	r7, #16
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	bd80      	pop	{r7, pc}
 800ff5c:	0801bc54 	.word	0x0801bc54
 800ff60:	0801c1a8 	.word	0x0801c1a8
 800ff64:	0801bc98 	.word	0x0801bc98

0800ff68 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b084      	sub	sp, #16
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	60f8      	str	r0, [r7, #12]
 800ff70:	60b9      	str	r1, [r7, #8]
 800ff72:	607a      	str	r2, [r7, #4]
 800ff74:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ff76:	68bb      	ldr	r3, [r7, #8]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d109      	bne.n	800ff90 <tcp_recv_null+0x28>
 800ff7c:	4b12      	ldr	r3, [pc, #72]	; (800ffc8 <tcp_recv_null+0x60>)
 800ff7e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ff82:	4912      	ldr	r1, [pc, #72]	; (800ffcc <tcp_recv_null+0x64>)
 800ff84:	4812      	ldr	r0, [pc, #72]	; (800ffd0 <tcp_recv_null+0x68>)
 800ff86:	f008 f811 	bl	8017fac <iprintf>
 800ff8a:	f06f 030f 	mvn.w	r3, #15
 800ff8e:	e016      	b.n	800ffbe <tcp_recv_null+0x56>

  if (p != NULL) {
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d009      	beq.n	800ffaa <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	891b      	ldrh	r3, [r3, #8]
 800ff9a:	4619      	mov	r1, r3
 800ff9c:	68b8      	ldr	r0, [r7, #8]
 800ff9e:	f7ff f99d 	bl	800f2dc <tcp_recved>
    pbuf_free(p);
 800ffa2:	6878      	ldr	r0, [r7, #4]
 800ffa4:	f7fe f996 	bl	800e2d4 <pbuf_free>
 800ffa8:	e008      	b.n	800ffbc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800ffaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d104      	bne.n	800ffbc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800ffb2:	68b8      	ldr	r0, [r7, #8]
 800ffb4:	f7fe fece 	bl	800ed54 <tcp_close>
 800ffb8:	4603      	mov	r3, r0
 800ffba:	e000      	b.n	800ffbe <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ffbc:	2300      	movs	r3, #0
}
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	3710      	adds	r7, #16
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	bd80      	pop	{r7, pc}
 800ffc6:	bf00      	nop
 800ffc8:	0801bc54 	.word	0x0801bc54
 800ffcc:	0801c1c4 	.word	0x0801c1c4
 800ffd0:	0801bc98 	.word	0x0801bc98

0800ffd4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b086      	sub	sp, #24
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	4603      	mov	r3, r0
 800ffdc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ffde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	db01      	blt.n	800ffea <tcp_kill_prio+0x16>
 800ffe6:	79fb      	ldrb	r3, [r7, #7]
 800ffe8:	e000      	b.n	800ffec <tcp_kill_prio+0x18>
 800ffea:	237f      	movs	r3, #127	; 0x7f
 800ffec:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ffee:	7afb      	ldrb	r3, [r7, #11]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d034      	beq.n	801005e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800fff4:	7afb      	ldrb	r3, [r7, #11]
 800fff6:	3b01      	subs	r3, #1
 800fff8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800fffa:	2300      	movs	r3, #0
 800fffc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800fffe:	2300      	movs	r3, #0
 8010000:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010002:	4b19      	ldr	r3, [pc, #100]	; (8010068 <tcp_kill_prio+0x94>)
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	617b      	str	r3, [r7, #20]
 8010008:	e01f      	b.n	801004a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801000a:	697b      	ldr	r3, [r7, #20]
 801000c:	7d5b      	ldrb	r3, [r3, #21]
 801000e:	7afa      	ldrb	r2, [r7, #11]
 8010010:	429a      	cmp	r2, r3
 8010012:	d80c      	bhi.n	801002e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010014:	697b      	ldr	r3, [r7, #20]
 8010016:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8010018:	7afa      	ldrb	r2, [r7, #11]
 801001a:	429a      	cmp	r2, r3
 801001c:	d112      	bne.n	8010044 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801001e:	4b13      	ldr	r3, [pc, #76]	; (801006c <tcp_kill_prio+0x98>)
 8010020:	681a      	ldr	r2, [r3, #0]
 8010022:	697b      	ldr	r3, [r7, #20]
 8010024:	6a1b      	ldr	r3, [r3, #32]
 8010026:	1ad3      	subs	r3, r2, r3
 8010028:	68fa      	ldr	r2, [r7, #12]
 801002a:	429a      	cmp	r2, r3
 801002c:	d80a      	bhi.n	8010044 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801002e:	4b0f      	ldr	r3, [pc, #60]	; (801006c <tcp_kill_prio+0x98>)
 8010030:	681a      	ldr	r2, [r3, #0]
 8010032:	697b      	ldr	r3, [r7, #20]
 8010034:	6a1b      	ldr	r3, [r3, #32]
 8010036:	1ad3      	subs	r3, r2, r3
 8010038:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801003a:	697b      	ldr	r3, [r7, #20]
 801003c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801003e:	697b      	ldr	r3, [r7, #20]
 8010040:	7d5b      	ldrb	r3, [r3, #21]
 8010042:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010044:	697b      	ldr	r3, [r7, #20]
 8010046:	68db      	ldr	r3, [r3, #12]
 8010048:	617b      	str	r3, [r7, #20]
 801004a:	697b      	ldr	r3, [r7, #20]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d1dc      	bne.n	801000a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8010050:	693b      	ldr	r3, [r7, #16]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d004      	beq.n	8010060 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010056:	6938      	ldr	r0, [r7, #16]
 8010058:	f7fe ff66 	bl	800ef28 <tcp_abort>
 801005c:	e000      	b.n	8010060 <tcp_kill_prio+0x8c>
    return;
 801005e:	bf00      	nop
  }
}
 8010060:	3718      	adds	r7, #24
 8010062:	46bd      	mov	sp, r7
 8010064:	bd80      	pop	{r7, pc}
 8010066:	bf00      	nop
 8010068:	20009504 	.word	0x20009504
 801006c:	20009508 	.word	0x20009508

08010070 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b086      	sub	sp, #24
 8010074:	af00      	add	r7, sp, #0
 8010076:	4603      	mov	r3, r0
 8010078:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801007a:	79fb      	ldrb	r3, [r7, #7]
 801007c:	2b08      	cmp	r3, #8
 801007e:	d009      	beq.n	8010094 <tcp_kill_state+0x24>
 8010080:	79fb      	ldrb	r3, [r7, #7]
 8010082:	2b09      	cmp	r3, #9
 8010084:	d006      	beq.n	8010094 <tcp_kill_state+0x24>
 8010086:	4b1a      	ldr	r3, [pc, #104]	; (80100f0 <tcp_kill_state+0x80>)
 8010088:	f240 62dd 	movw	r2, #1757	; 0x6dd
 801008c:	4919      	ldr	r1, [pc, #100]	; (80100f4 <tcp_kill_state+0x84>)
 801008e:	481a      	ldr	r0, [pc, #104]	; (80100f8 <tcp_kill_state+0x88>)
 8010090:	f007 ff8c 	bl	8017fac <iprintf>

  inactivity = 0;
 8010094:	2300      	movs	r3, #0
 8010096:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010098:	2300      	movs	r3, #0
 801009a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801009c:	4b17      	ldr	r3, [pc, #92]	; (80100fc <tcp_kill_state+0x8c>)
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	617b      	str	r3, [r7, #20]
 80100a2:	e017      	b.n	80100d4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80100a4:	697b      	ldr	r3, [r7, #20]
 80100a6:	7d1b      	ldrb	r3, [r3, #20]
 80100a8:	79fa      	ldrb	r2, [r7, #7]
 80100aa:	429a      	cmp	r2, r3
 80100ac:	d10f      	bne.n	80100ce <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80100ae:	4b14      	ldr	r3, [pc, #80]	; (8010100 <tcp_kill_state+0x90>)
 80100b0:	681a      	ldr	r2, [r3, #0]
 80100b2:	697b      	ldr	r3, [r7, #20]
 80100b4:	6a1b      	ldr	r3, [r3, #32]
 80100b6:	1ad3      	subs	r3, r2, r3
 80100b8:	68fa      	ldr	r2, [r7, #12]
 80100ba:	429a      	cmp	r2, r3
 80100bc:	d807      	bhi.n	80100ce <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80100be:	4b10      	ldr	r3, [pc, #64]	; (8010100 <tcp_kill_state+0x90>)
 80100c0:	681a      	ldr	r2, [r3, #0]
 80100c2:	697b      	ldr	r3, [r7, #20]
 80100c4:	6a1b      	ldr	r3, [r3, #32]
 80100c6:	1ad3      	subs	r3, r2, r3
 80100c8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80100ca:	697b      	ldr	r3, [r7, #20]
 80100cc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80100ce:	697b      	ldr	r3, [r7, #20]
 80100d0:	68db      	ldr	r3, [r3, #12]
 80100d2:	617b      	str	r3, [r7, #20]
 80100d4:	697b      	ldr	r3, [r7, #20]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d1e4      	bne.n	80100a4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80100da:	693b      	ldr	r3, [r7, #16]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d003      	beq.n	80100e8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80100e0:	2100      	movs	r1, #0
 80100e2:	6938      	ldr	r0, [r7, #16]
 80100e4:	f7fe fe62 	bl	800edac <tcp_abandon>
  }
}
 80100e8:	bf00      	nop
 80100ea:	3718      	adds	r7, #24
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bd80      	pop	{r7, pc}
 80100f0:	0801bc54 	.word	0x0801bc54
 80100f4:	0801c1e0 	.word	0x0801c1e0
 80100f8:	0801bc98 	.word	0x0801bc98
 80100fc:	20009504 	.word	0x20009504
 8010100:	20009508 	.word	0x20009508

08010104 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b084      	sub	sp, #16
 8010108:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801010a:	2300      	movs	r3, #0
 801010c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801010e:	2300      	movs	r3, #0
 8010110:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010112:	4b12      	ldr	r3, [pc, #72]	; (801015c <tcp_kill_timewait+0x58>)
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	60fb      	str	r3, [r7, #12]
 8010118:	e012      	b.n	8010140 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801011a:	4b11      	ldr	r3, [pc, #68]	; (8010160 <tcp_kill_timewait+0x5c>)
 801011c:	681a      	ldr	r2, [r3, #0]
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	6a1b      	ldr	r3, [r3, #32]
 8010122:	1ad3      	subs	r3, r2, r3
 8010124:	687a      	ldr	r2, [r7, #4]
 8010126:	429a      	cmp	r2, r3
 8010128:	d807      	bhi.n	801013a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801012a:	4b0d      	ldr	r3, [pc, #52]	; (8010160 <tcp_kill_timewait+0x5c>)
 801012c:	681a      	ldr	r2, [r3, #0]
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	6a1b      	ldr	r3, [r3, #32]
 8010132:	1ad3      	subs	r3, r2, r3
 8010134:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	68db      	ldr	r3, [r3, #12]
 801013e:	60fb      	str	r3, [r7, #12]
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d1e9      	bne.n	801011a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8010146:	68bb      	ldr	r3, [r7, #8]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d002      	beq.n	8010152 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801014c:	68b8      	ldr	r0, [r7, #8]
 801014e:	f7fe feeb 	bl	800ef28 <tcp_abort>
  }
}
 8010152:	bf00      	nop
 8010154:	3710      	adds	r7, #16
 8010156:	46bd      	mov	sp, r7
 8010158:	bd80      	pop	{r7, pc}
 801015a:	bf00      	nop
 801015c:	20009514 	.word	0x20009514
 8010160:	20009508 	.word	0x20009508

08010164 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8010164:	b580      	push	{r7, lr}
 8010166:	b082      	sub	sp, #8
 8010168:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801016a:	4b10      	ldr	r3, [pc, #64]	; (80101ac <tcp_handle_closepend+0x48>)
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010170:	e014      	b.n	801019c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	68db      	ldr	r3, [r3, #12]
 8010176:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	8b5b      	ldrh	r3, [r3, #26]
 801017c:	f003 0308 	and.w	r3, r3, #8
 8010180:	2b00      	cmp	r3, #0
 8010182:	d009      	beq.n	8010198 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	8b5b      	ldrh	r3, [r3, #26]
 8010188:	f023 0308 	bic.w	r3, r3, #8
 801018c:	b29a      	uxth	r2, r3
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8010192:	6878      	ldr	r0, [r7, #4]
 8010194:	f7fe fd74 	bl	800ec80 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d1e7      	bne.n	8010172 <tcp_handle_closepend+0xe>
  }
}
 80101a2:	bf00      	nop
 80101a4:	bf00      	nop
 80101a6:	3708      	adds	r7, #8
 80101a8:	46bd      	mov	sp, r7
 80101aa:	bd80      	pop	{r7, pc}
 80101ac:	20009504 	.word	0x20009504

080101b0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b084      	sub	sp, #16
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	4603      	mov	r3, r0
 80101b8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80101ba:	2001      	movs	r0, #1
 80101bc:	f7fd fa2c 	bl	800d618 <memp_malloc>
 80101c0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d126      	bne.n	8010216 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80101c8:	f7ff ffcc 	bl	8010164 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80101cc:	f7ff ff9a 	bl	8010104 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80101d0:	2001      	movs	r0, #1
 80101d2:	f7fd fa21 	bl	800d618 <memp_malloc>
 80101d6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d11b      	bne.n	8010216 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80101de:	2009      	movs	r0, #9
 80101e0:	f7ff ff46 	bl	8010070 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80101e4:	2001      	movs	r0, #1
 80101e6:	f7fd fa17 	bl	800d618 <memp_malloc>
 80101ea:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d111      	bne.n	8010216 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80101f2:	2008      	movs	r0, #8
 80101f4:	f7ff ff3c 	bl	8010070 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80101f8:	2001      	movs	r0, #1
 80101fa:	f7fd fa0d 	bl	800d618 <memp_malloc>
 80101fe:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d107      	bne.n	8010216 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8010206:	79fb      	ldrb	r3, [r7, #7]
 8010208:	4618      	mov	r0, r3
 801020a:	f7ff fee3 	bl	800ffd4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801020e:	2001      	movs	r0, #1
 8010210:	f7fd fa02 	bl	800d618 <memp_malloc>
 8010214:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d03f      	beq.n	801029c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801021c:	229c      	movs	r2, #156	; 0x9c
 801021e:	2100      	movs	r1, #0
 8010220:	68f8      	ldr	r0, [r7, #12]
 8010222:	f007 fe11 	bl	8017e48 <memset>
    pcb->prio = prio;
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	79fa      	ldrb	r2, [r7, #7]
 801022a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010232:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801023c:	855a      	strh	r2, [r3, #42]	; 0x2a
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	22ff      	movs	r2, #255	; 0xff
 801024a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010252:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	2206      	movs	r2, #6
 8010258:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	2206      	movs	r2, #6
 8010260:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010268:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	2201      	movs	r2, #1
 801026e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8010272:	4b0d      	ldr	r3, [pc, #52]	; (80102a8 <tcp_alloc+0xf8>)
 8010274:	681a      	ldr	r2, [r3, #0]
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801027a:	4b0c      	ldr	r3, [pc, #48]	; (80102ac <tcp_alloc+0xfc>)
 801027c:	781a      	ldrb	r2, [r3, #0]
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010288:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	4a08      	ldr	r2, [pc, #32]	; (80102b0 <tcp_alloc+0x100>)
 8010290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	4a07      	ldr	r2, [pc, #28]	; (80102b4 <tcp_alloc+0x104>)
 8010298:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801029c:	68fb      	ldr	r3, [r7, #12]
}
 801029e:	4618      	mov	r0, r3
 80102a0:	3710      	adds	r7, #16
 80102a2:	46bd      	mov	sp, r7
 80102a4:	bd80      	pop	{r7, pc}
 80102a6:	bf00      	nop
 80102a8:	20009508 	.word	0x20009508
 80102ac:	20000a56 	.word	0x20000a56
 80102b0:	0800ff69 	.word	0x0800ff69
 80102b4:	006ddd00 	.word	0x006ddd00

080102b8 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 80102b8:	b580      	push	{r7, lr}
 80102ba:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 80102bc:	2040      	movs	r0, #64	; 0x40
 80102be:	f7ff ff77 	bl	80101b0 <tcp_alloc>
 80102c2:	4603      	mov	r3, r0
}
 80102c4:	4618      	mov	r0, r3
 80102c6:	bd80      	pop	{r7, pc}

080102c8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80102c8:	b480      	push	{r7}
 80102ca:	b083      	sub	sp, #12
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	6078      	str	r0, [r7, #4]
 80102d0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d002      	beq.n	80102de <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	683a      	ldr	r2, [r7, #0]
 80102dc:	611a      	str	r2, [r3, #16]
  }
}
 80102de:	bf00      	nop
 80102e0:	370c      	adds	r7, #12
 80102e2:	46bd      	mov	sp, r7
 80102e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e8:	4770      	bx	lr
	...

080102ec <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80102ec:	b580      	push	{r7, lr}
 80102ee:	b082      	sub	sp, #8
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	6078      	str	r0, [r7, #4]
 80102f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d00e      	beq.n	801031a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	7d1b      	ldrb	r3, [r3, #20]
 8010300:	2b01      	cmp	r3, #1
 8010302:	d106      	bne.n	8010312 <tcp_recv+0x26>
 8010304:	4b07      	ldr	r3, [pc, #28]	; (8010324 <tcp_recv+0x38>)
 8010306:	f240 72df 	movw	r2, #2015	; 0x7df
 801030a:	4907      	ldr	r1, [pc, #28]	; (8010328 <tcp_recv+0x3c>)
 801030c:	4807      	ldr	r0, [pc, #28]	; (801032c <tcp_recv+0x40>)
 801030e:	f007 fe4d 	bl	8017fac <iprintf>
    pcb->recv = recv;
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	683a      	ldr	r2, [r7, #0]
 8010316:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801031a:	bf00      	nop
 801031c:	3708      	adds	r7, #8
 801031e:	46bd      	mov	sp, r7
 8010320:	bd80      	pop	{r7, pc}
 8010322:	bf00      	nop
 8010324:	0801bc54 	.word	0x0801bc54
 8010328:	0801c1f0 	.word	0x0801c1f0
 801032c:	0801bc98 	.word	0x0801bc98

08010330 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8010330:	b580      	push	{r7, lr}
 8010332:	b082      	sub	sp, #8
 8010334:	af00      	add	r7, sp, #0
 8010336:	6078      	str	r0, [r7, #4]
 8010338:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d00e      	beq.n	801035e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	7d1b      	ldrb	r3, [r3, #20]
 8010344:	2b01      	cmp	r3, #1
 8010346:	d106      	bne.n	8010356 <tcp_sent+0x26>
 8010348:	4b07      	ldr	r3, [pc, #28]	; (8010368 <tcp_sent+0x38>)
 801034a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801034e:	4907      	ldr	r1, [pc, #28]	; (801036c <tcp_sent+0x3c>)
 8010350:	4807      	ldr	r0, [pc, #28]	; (8010370 <tcp_sent+0x40>)
 8010352:	f007 fe2b 	bl	8017fac <iprintf>
    pcb->sent = sent;
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	683a      	ldr	r2, [r7, #0]
 801035a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801035e:	bf00      	nop
 8010360:	3708      	adds	r7, #8
 8010362:	46bd      	mov	sp, r7
 8010364:	bd80      	pop	{r7, pc}
 8010366:	bf00      	nop
 8010368:	0801bc54 	.word	0x0801bc54
 801036c:	0801c218 	.word	0x0801c218
 8010370:	0801bc98 	.word	0x0801bc98

08010374 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8010374:	b580      	push	{r7, lr}
 8010376:	b082      	sub	sp, #8
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]
 801037c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d00e      	beq.n	80103a2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	7d1b      	ldrb	r3, [r3, #20]
 8010388:	2b01      	cmp	r3, #1
 801038a:	d106      	bne.n	801039a <tcp_err+0x26>
 801038c:	4b07      	ldr	r3, [pc, #28]	; (80103ac <tcp_err+0x38>)
 801038e:	f640 020d 	movw	r2, #2061	; 0x80d
 8010392:	4907      	ldr	r1, [pc, #28]	; (80103b0 <tcp_err+0x3c>)
 8010394:	4807      	ldr	r0, [pc, #28]	; (80103b4 <tcp_err+0x40>)
 8010396:	f007 fe09 	bl	8017fac <iprintf>
    pcb->errf = err;
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	683a      	ldr	r2, [r7, #0]
 801039e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80103a2:	bf00      	nop
 80103a4:	3708      	adds	r7, #8
 80103a6:	46bd      	mov	sp, r7
 80103a8:	bd80      	pop	{r7, pc}
 80103aa:	bf00      	nop
 80103ac:	0801bc54 	.word	0x0801bc54
 80103b0:	0801c240 	.word	0x0801c240
 80103b4:	0801bc98 	.word	0x0801bc98

080103b8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80103b8:	b480      	push	{r7}
 80103ba:	b085      	sub	sp, #20
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
 80103c0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d008      	beq.n	80103da <tcp_accept+0x22>
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	7d1b      	ldrb	r3, [r3, #20]
 80103cc:	2b01      	cmp	r3, #1
 80103ce:	d104      	bne.n	80103da <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	683a      	ldr	r2, [r7, #0]
 80103d8:	619a      	str	r2, [r3, #24]
  }
}
 80103da:	bf00      	nop
 80103dc:	3714      	adds	r7, #20
 80103de:	46bd      	mov	sp, r7
 80103e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e4:	4770      	bx	lr
	...

080103e8 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b084      	sub	sp, #16
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	60f8      	str	r0, [r7, #12]
 80103f0:	60b9      	str	r1, [r7, #8]
 80103f2:	4613      	mov	r3, r2
 80103f4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d107      	bne.n	801040c <tcp_poll+0x24>
 80103fc:	4b0e      	ldr	r3, [pc, #56]	; (8010438 <tcp_poll+0x50>)
 80103fe:	f640 023d 	movw	r2, #2109	; 0x83d
 8010402:	490e      	ldr	r1, [pc, #56]	; (801043c <tcp_poll+0x54>)
 8010404:	480e      	ldr	r0, [pc, #56]	; (8010440 <tcp_poll+0x58>)
 8010406:	f007 fdd1 	bl	8017fac <iprintf>
 801040a:	e011      	b.n	8010430 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	7d1b      	ldrb	r3, [r3, #20]
 8010410:	2b01      	cmp	r3, #1
 8010412:	d106      	bne.n	8010422 <tcp_poll+0x3a>
 8010414:	4b08      	ldr	r3, [pc, #32]	; (8010438 <tcp_poll+0x50>)
 8010416:	f640 023e 	movw	r2, #2110	; 0x83e
 801041a:	490a      	ldr	r1, [pc, #40]	; (8010444 <tcp_poll+0x5c>)
 801041c:	4808      	ldr	r0, [pc, #32]	; (8010440 <tcp_poll+0x58>)
 801041e:	f007 fdc5 	bl	8017fac <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	68ba      	ldr	r2, [r7, #8]
 8010426:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	79fa      	ldrb	r2, [r7, #7]
 801042e:	775a      	strb	r2, [r3, #29]
}
 8010430:	3710      	adds	r7, #16
 8010432:	46bd      	mov	sp, r7
 8010434:	bd80      	pop	{r7, pc}
 8010436:	bf00      	nop
 8010438:	0801bc54 	.word	0x0801bc54
 801043c:	0801c268 	.word	0x0801c268
 8010440:	0801bc98 	.word	0x0801bc98
 8010444:	0801c280 	.word	0x0801c280

08010448 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b082      	sub	sp, #8
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	2b00      	cmp	r3, #0
 8010454:	d107      	bne.n	8010466 <tcp_pcb_purge+0x1e>
 8010456:	4b21      	ldr	r3, [pc, #132]	; (80104dc <tcp_pcb_purge+0x94>)
 8010458:	f640 0251 	movw	r2, #2129	; 0x851
 801045c:	4920      	ldr	r1, [pc, #128]	; (80104e0 <tcp_pcb_purge+0x98>)
 801045e:	4821      	ldr	r0, [pc, #132]	; (80104e4 <tcp_pcb_purge+0x9c>)
 8010460:	f007 fda4 	bl	8017fac <iprintf>
 8010464:	e037      	b.n	80104d6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	7d1b      	ldrb	r3, [r3, #20]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d033      	beq.n	80104d6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8010472:	2b0a      	cmp	r3, #10
 8010474:	d02f      	beq.n	80104d6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801047a:	2b01      	cmp	r3, #1
 801047c:	d02b      	beq.n	80104d6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010482:	2b00      	cmp	r3, #0
 8010484:	d007      	beq.n	8010496 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801048a:	4618      	mov	r0, r3
 801048c:	f7fd ff22 	bl	800e2d4 <pbuf_free>
      pcb->refused_data = NULL;
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	2200      	movs	r2, #0
 8010494:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801049a:	2b00      	cmp	r3, #0
 801049c:	d002      	beq.n	80104a4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801049e:	6878      	ldr	r0, [r7, #4]
 80104a0:	f000 f986 	bl	80107b0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80104aa:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104b0:	4618      	mov	r0, r3
 80104b2:	f7ff fce1 	bl	800fe78 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104ba:	4618      	mov	r0, r3
 80104bc:	f7ff fcdc 	bl	800fe78 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	2200      	movs	r2, #0
 80104c4:	66da      	str	r2, [r3, #108]	; 0x6c
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	2200      	movs	r2, #0
 80104d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80104d6:	3708      	adds	r7, #8
 80104d8:	46bd      	mov	sp, r7
 80104da:	bd80      	pop	{r7, pc}
 80104dc:	0801bc54 	.word	0x0801bc54
 80104e0:	0801c2a0 	.word	0x0801c2a0
 80104e4:	0801bc98 	.word	0x0801bc98

080104e8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b084      	sub	sp, #16
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
 80104f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80104f2:	683b      	ldr	r3, [r7, #0]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d106      	bne.n	8010506 <tcp_pcb_remove+0x1e>
 80104f8:	4b3e      	ldr	r3, [pc, #248]	; (80105f4 <tcp_pcb_remove+0x10c>)
 80104fa:	f640 0283 	movw	r2, #2179	; 0x883
 80104fe:	493e      	ldr	r1, [pc, #248]	; (80105f8 <tcp_pcb_remove+0x110>)
 8010500:	483e      	ldr	r0, [pc, #248]	; (80105fc <tcp_pcb_remove+0x114>)
 8010502:	f007 fd53 	bl	8017fac <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d106      	bne.n	801051a <tcp_pcb_remove+0x32>
 801050c:	4b39      	ldr	r3, [pc, #228]	; (80105f4 <tcp_pcb_remove+0x10c>)
 801050e:	f640 0284 	movw	r2, #2180	; 0x884
 8010512:	493b      	ldr	r1, [pc, #236]	; (8010600 <tcp_pcb_remove+0x118>)
 8010514:	4839      	ldr	r0, [pc, #228]	; (80105fc <tcp_pcb_remove+0x114>)
 8010516:	f007 fd49 	bl	8017fac <iprintf>

  TCP_RMV(pcblist, pcb);
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	683a      	ldr	r2, [r7, #0]
 8010520:	429a      	cmp	r2, r3
 8010522:	d105      	bne.n	8010530 <tcp_pcb_remove+0x48>
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	68da      	ldr	r2, [r3, #12]
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	601a      	str	r2, [r3, #0]
 801052e:	e013      	b.n	8010558 <tcp_pcb_remove+0x70>
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	60fb      	str	r3, [r7, #12]
 8010536:	e00c      	b.n	8010552 <tcp_pcb_remove+0x6a>
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	68db      	ldr	r3, [r3, #12]
 801053c:	683a      	ldr	r2, [r7, #0]
 801053e:	429a      	cmp	r2, r3
 8010540:	d104      	bne.n	801054c <tcp_pcb_remove+0x64>
 8010542:	683b      	ldr	r3, [r7, #0]
 8010544:	68da      	ldr	r2, [r3, #12]
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	60da      	str	r2, [r3, #12]
 801054a:	e005      	b.n	8010558 <tcp_pcb_remove+0x70>
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	68db      	ldr	r3, [r3, #12]
 8010550:	60fb      	str	r3, [r7, #12]
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	2b00      	cmp	r3, #0
 8010556:	d1ef      	bne.n	8010538 <tcp_pcb_remove+0x50>
 8010558:	683b      	ldr	r3, [r7, #0]
 801055a:	2200      	movs	r2, #0
 801055c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801055e:	6838      	ldr	r0, [r7, #0]
 8010560:	f7ff ff72 	bl	8010448 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8010564:	683b      	ldr	r3, [r7, #0]
 8010566:	7d1b      	ldrb	r3, [r3, #20]
 8010568:	2b0a      	cmp	r3, #10
 801056a:	d013      	beq.n	8010594 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801056c:	683b      	ldr	r3, [r7, #0]
 801056e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8010570:	2b01      	cmp	r3, #1
 8010572:	d00f      	beq.n	8010594 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8010574:	683b      	ldr	r3, [r7, #0]
 8010576:	8b5b      	ldrh	r3, [r3, #26]
 8010578:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801057c:	2b00      	cmp	r3, #0
 801057e:	d009      	beq.n	8010594 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8010580:	683b      	ldr	r3, [r7, #0]
 8010582:	8b5b      	ldrh	r3, [r3, #26]
 8010584:	f043 0302 	orr.w	r3, r3, #2
 8010588:	b29a      	uxth	r2, r3
 801058a:	683b      	ldr	r3, [r7, #0]
 801058c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801058e:	6838      	ldr	r0, [r7, #0]
 8010590:	f003 fbc2 	bl	8013d18 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8010594:	683b      	ldr	r3, [r7, #0]
 8010596:	7d1b      	ldrb	r3, [r3, #20]
 8010598:	2b01      	cmp	r3, #1
 801059a:	d020      	beq.n	80105de <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801059c:	683b      	ldr	r3, [r7, #0]
 801059e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d006      	beq.n	80105b2 <tcp_pcb_remove+0xca>
 80105a4:	4b13      	ldr	r3, [pc, #76]	; (80105f4 <tcp_pcb_remove+0x10c>)
 80105a6:	f640 0293 	movw	r2, #2195	; 0x893
 80105aa:	4916      	ldr	r1, [pc, #88]	; (8010604 <tcp_pcb_remove+0x11c>)
 80105ac:	4813      	ldr	r0, [pc, #76]	; (80105fc <tcp_pcb_remove+0x114>)
 80105ae:	f007 fcfd 	bl	8017fac <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80105b2:	683b      	ldr	r3, [r7, #0]
 80105b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d006      	beq.n	80105c8 <tcp_pcb_remove+0xe0>
 80105ba:	4b0e      	ldr	r3, [pc, #56]	; (80105f4 <tcp_pcb_remove+0x10c>)
 80105bc:	f640 0294 	movw	r2, #2196	; 0x894
 80105c0:	4911      	ldr	r1, [pc, #68]	; (8010608 <tcp_pcb_remove+0x120>)
 80105c2:	480e      	ldr	r0, [pc, #56]	; (80105fc <tcp_pcb_remove+0x114>)
 80105c4:	f007 fcf2 	bl	8017fac <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80105c8:	683b      	ldr	r3, [r7, #0]
 80105ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d006      	beq.n	80105de <tcp_pcb_remove+0xf6>
 80105d0:	4b08      	ldr	r3, [pc, #32]	; (80105f4 <tcp_pcb_remove+0x10c>)
 80105d2:	f640 0296 	movw	r2, #2198	; 0x896
 80105d6:	490d      	ldr	r1, [pc, #52]	; (801060c <tcp_pcb_remove+0x124>)
 80105d8:	4808      	ldr	r0, [pc, #32]	; (80105fc <tcp_pcb_remove+0x114>)
 80105da:	f007 fce7 	bl	8017fac <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80105de:	683b      	ldr	r3, [r7, #0]
 80105e0:	2200      	movs	r2, #0
 80105e2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80105e4:	683b      	ldr	r3, [r7, #0]
 80105e6:	2200      	movs	r2, #0
 80105e8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80105ea:	bf00      	nop
 80105ec:	3710      	adds	r7, #16
 80105ee:	46bd      	mov	sp, r7
 80105f0:	bd80      	pop	{r7, pc}
 80105f2:	bf00      	nop
 80105f4:	0801bc54 	.word	0x0801bc54
 80105f8:	0801c2bc 	.word	0x0801c2bc
 80105fc:	0801bc98 	.word	0x0801bc98
 8010600:	0801c2d8 	.word	0x0801c2d8
 8010604:	0801c2f8 	.word	0x0801c2f8
 8010608:	0801c310 	.word	0x0801c310
 801060c:	0801c32c 	.word	0x0801c32c

08010610 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8010610:	b580      	push	{r7, lr}
 8010612:	b082      	sub	sp, #8
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d106      	bne.n	801062c <tcp_next_iss+0x1c>
 801061e:	4b0a      	ldr	r3, [pc, #40]	; (8010648 <tcp_next_iss+0x38>)
 8010620:	f640 02af 	movw	r2, #2223	; 0x8af
 8010624:	4909      	ldr	r1, [pc, #36]	; (801064c <tcp_next_iss+0x3c>)
 8010626:	480a      	ldr	r0, [pc, #40]	; (8010650 <tcp_next_iss+0x40>)
 8010628:	f007 fcc0 	bl	8017fac <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801062c:	4b09      	ldr	r3, [pc, #36]	; (8010654 <tcp_next_iss+0x44>)
 801062e:	681a      	ldr	r2, [r3, #0]
 8010630:	4b09      	ldr	r3, [pc, #36]	; (8010658 <tcp_next_iss+0x48>)
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	4413      	add	r3, r2
 8010636:	4a07      	ldr	r2, [pc, #28]	; (8010654 <tcp_next_iss+0x44>)
 8010638:	6013      	str	r3, [r2, #0]
  return iss;
 801063a:	4b06      	ldr	r3, [pc, #24]	; (8010654 <tcp_next_iss+0x44>)
 801063c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801063e:	4618      	mov	r0, r3
 8010640:	3708      	adds	r7, #8
 8010642:	46bd      	mov	sp, r7
 8010644:	bd80      	pop	{r7, pc}
 8010646:	bf00      	nop
 8010648:	0801bc54 	.word	0x0801bc54
 801064c:	0801c344 	.word	0x0801c344
 8010650:	0801bc98 	.word	0x0801bc98
 8010654:	20000014 	.word	0x20000014
 8010658:	20009508 	.word	0x20009508

0801065c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801065c:	b580      	push	{r7, lr}
 801065e:	b086      	sub	sp, #24
 8010660:	af00      	add	r7, sp, #0
 8010662:	4603      	mov	r3, r0
 8010664:	60b9      	str	r1, [r7, #8]
 8010666:	607a      	str	r2, [r7, #4]
 8010668:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d106      	bne.n	801067e <tcp_eff_send_mss_netif+0x22>
 8010670:	4b14      	ldr	r3, [pc, #80]	; (80106c4 <tcp_eff_send_mss_netif+0x68>)
 8010672:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8010676:	4914      	ldr	r1, [pc, #80]	; (80106c8 <tcp_eff_send_mss_netif+0x6c>)
 8010678:	4814      	ldr	r0, [pc, #80]	; (80106cc <tcp_eff_send_mss_netif+0x70>)
 801067a:	f007 fc97 	bl	8017fac <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801067e:	68bb      	ldr	r3, [r7, #8]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d101      	bne.n	8010688 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8010684:	89fb      	ldrh	r3, [r7, #14]
 8010686:	e019      	b.n	80106bc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8010688:	68bb      	ldr	r3, [r7, #8]
 801068a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801068c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801068e:	8afb      	ldrh	r3, [r7, #22]
 8010690:	2b00      	cmp	r3, #0
 8010692:	d012      	beq.n	80106ba <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8010694:	2328      	movs	r3, #40	; 0x28
 8010696:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8010698:	8afa      	ldrh	r2, [r7, #22]
 801069a:	8abb      	ldrh	r3, [r7, #20]
 801069c:	429a      	cmp	r2, r3
 801069e:	d904      	bls.n	80106aa <tcp_eff_send_mss_netif+0x4e>
 80106a0:	8afa      	ldrh	r2, [r7, #22]
 80106a2:	8abb      	ldrh	r3, [r7, #20]
 80106a4:	1ad3      	subs	r3, r2, r3
 80106a6:	b29b      	uxth	r3, r3
 80106a8:	e000      	b.n	80106ac <tcp_eff_send_mss_netif+0x50>
 80106aa:	2300      	movs	r3, #0
 80106ac:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80106ae:	8a7a      	ldrh	r2, [r7, #18]
 80106b0:	89fb      	ldrh	r3, [r7, #14]
 80106b2:	4293      	cmp	r3, r2
 80106b4:	bf28      	it	cs
 80106b6:	4613      	movcs	r3, r2
 80106b8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80106ba:	89fb      	ldrh	r3, [r7, #14]
}
 80106bc:	4618      	mov	r0, r3
 80106be:	3718      	adds	r7, #24
 80106c0:	46bd      	mov	sp, r7
 80106c2:	bd80      	pop	{r7, pc}
 80106c4:	0801bc54 	.word	0x0801bc54
 80106c8:	0801c360 	.word	0x0801c360
 80106cc:	0801bc98 	.word	0x0801bc98

080106d0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b084      	sub	sp, #16
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
 80106d8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80106da:	683b      	ldr	r3, [r7, #0]
 80106dc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d119      	bne.n	8010718 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80106e4:	4b10      	ldr	r3, [pc, #64]	; (8010728 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80106e6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80106ea:	4910      	ldr	r1, [pc, #64]	; (801072c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80106ec:	4810      	ldr	r0, [pc, #64]	; (8010730 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80106ee:	f007 fc5d 	bl	8017fac <iprintf>

  while (pcb != NULL) {
 80106f2:	e011      	b.n	8010718 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	681a      	ldr	r2, [r3, #0]
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	429a      	cmp	r2, r3
 80106fe:	d108      	bne.n	8010712 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	68db      	ldr	r3, [r3, #12]
 8010704:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8010706:	68f8      	ldr	r0, [r7, #12]
 8010708:	f7fe fc0e 	bl	800ef28 <tcp_abort>
      pcb = next;
 801070c:	68bb      	ldr	r3, [r7, #8]
 801070e:	60fb      	str	r3, [r7, #12]
 8010710:	e002      	b.n	8010718 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	68db      	ldr	r3, [r3, #12]
 8010716:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d1ea      	bne.n	80106f4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801071e:	bf00      	nop
 8010720:	bf00      	nop
 8010722:	3710      	adds	r7, #16
 8010724:	46bd      	mov	sp, r7
 8010726:	bd80      	pop	{r7, pc}
 8010728:	0801bc54 	.word	0x0801bc54
 801072c:	0801c388 	.word	0x0801c388
 8010730:	0801bc98 	.word	0x0801bc98

08010734 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010734:	b580      	push	{r7, lr}
 8010736:	b084      	sub	sp, #16
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]
 801073c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	2b00      	cmp	r3, #0
 8010742:	d02a      	beq.n	801079a <tcp_netif_ip_addr_changed+0x66>
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d026      	beq.n	801079a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801074c:	4b15      	ldr	r3, [pc, #84]	; (80107a4 <tcp_netif_ip_addr_changed+0x70>)
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	4619      	mov	r1, r3
 8010752:	6878      	ldr	r0, [r7, #4]
 8010754:	f7ff ffbc 	bl	80106d0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8010758:	4b13      	ldr	r3, [pc, #76]	; (80107a8 <tcp_netif_ip_addr_changed+0x74>)
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	4619      	mov	r1, r3
 801075e:	6878      	ldr	r0, [r7, #4]
 8010760:	f7ff ffb6 	bl	80106d0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8010764:	683b      	ldr	r3, [r7, #0]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d017      	beq.n	801079a <tcp_netif_ip_addr_changed+0x66>
 801076a:	683b      	ldr	r3, [r7, #0]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	2b00      	cmp	r3, #0
 8010770:	d013      	beq.n	801079a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010772:	4b0e      	ldr	r3, [pc, #56]	; (80107ac <tcp_netif_ip_addr_changed+0x78>)
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	60fb      	str	r3, [r7, #12]
 8010778:	e00c      	b.n	8010794 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	681a      	ldr	r2, [r3, #0]
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	429a      	cmp	r2, r3
 8010784:	d103      	bne.n	801078e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8010786:	683b      	ldr	r3, [r7, #0]
 8010788:	681a      	ldr	r2, [r3, #0]
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	68db      	ldr	r3, [r3, #12]
 8010792:	60fb      	str	r3, [r7, #12]
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d1ef      	bne.n	801077a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801079a:	bf00      	nop
 801079c:	3710      	adds	r7, #16
 801079e:	46bd      	mov	sp, r7
 80107a0:	bd80      	pop	{r7, pc}
 80107a2:	bf00      	nop
 80107a4:	20009504 	.word	0x20009504
 80107a8:	20009510 	.word	0x20009510
 80107ac:	2000950c 	.word	0x2000950c

080107b0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80107b0:	b580      	push	{r7, lr}
 80107b2:	b082      	sub	sp, #8
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d007      	beq.n	80107d0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80107c4:	4618      	mov	r0, r3
 80107c6:	f7ff fb57 	bl	800fe78 <tcp_segs_free>
    pcb->ooseq = NULL;
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	2200      	movs	r2, #0
 80107ce:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80107d0:	bf00      	nop
 80107d2:	3708      	adds	r7, #8
 80107d4:	46bd      	mov	sp, r7
 80107d6:	bd80      	pop	{r7, pc}

080107d8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80107d8:	b590      	push	{r4, r7, lr}
 80107da:	b08d      	sub	sp, #52	; 0x34
 80107dc:	af04      	add	r7, sp, #16
 80107de:	6078      	str	r0, [r7, #4]
 80107e0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d105      	bne.n	80107f4 <tcp_input+0x1c>
 80107e8:	4b9b      	ldr	r3, [pc, #620]	; (8010a58 <tcp_input+0x280>)
 80107ea:	2283      	movs	r2, #131	; 0x83
 80107ec:	499b      	ldr	r1, [pc, #620]	; (8010a5c <tcp_input+0x284>)
 80107ee:	489c      	ldr	r0, [pc, #624]	; (8010a60 <tcp_input+0x288>)
 80107f0:	f007 fbdc 	bl	8017fac <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	685b      	ldr	r3, [r3, #4]
 80107f8:	4a9a      	ldr	r2, [pc, #616]	; (8010a64 <tcp_input+0x28c>)
 80107fa:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	895b      	ldrh	r3, [r3, #10]
 8010800:	2b13      	cmp	r3, #19
 8010802:	f240 83c4 	bls.w	8010f8e <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010806:	4b98      	ldr	r3, [pc, #608]	; (8010a68 <tcp_input+0x290>)
 8010808:	695b      	ldr	r3, [r3, #20]
 801080a:	4a97      	ldr	r2, [pc, #604]	; (8010a68 <tcp_input+0x290>)
 801080c:	6812      	ldr	r2, [r2, #0]
 801080e:	4611      	mov	r1, r2
 8010810:	4618      	mov	r0, r3
 8010812:	f006 f86b 	bl	80168ec <ip4_addr_isbroadcast_u32>
 8010816:	4603      	mov	r3, r0
 8010818:	2b00      	cmp	r3, #0
 801081a:	f040 83ba 	bne.w	8010f92 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801081e:	4b92      	ldr	r3, [pc, #584]	; (8010a68 <tcp_input+0x290>)
 8010820:	695b      	ldr	r3, [r3, #20]
 8010822:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010826:	2be0      	cmp	r3, #224	; 0xe0
 8010828:	f000 83b3 	beq.w	8010f92 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801082c:	4b8d      	ldr	r3, [pc, #564]	; (8010a64 <tcp_input+0x28c>)
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	899b      	ldrh	r3, [r3, #12]
 8010832:	b29b      	uxth	r3, r3
 8010834:	4618      	mov	r0, r3
 8010836:	f7fc fa99 	bl	800cd6c <lwip_htons>
 801083a:	4603      	mov	r3, r0
 801083c:	0b1b      	lsrs	r3, r3, #12
 801083e:	b29b      	uxth	r3, r3
 8010840:	b2db      	uxtb	r3, r3
 8010842:	009b      	lsls	r3, r3, #2
 8010844:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8010846:	7cbb      	ldrb	r3, [r7, #18]
 8010848:	2b13      	cmp	r3, #19
 801084a:	f240 83a4 	bls.w	8010f96 <tcp_input+0x7be>
 801084e:	7cbb      	ldrb	r3, [r7, #18]
 8010850:	b29a      	uxth	r2, r3
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	891b      	ldrh	r3, [r3, #8]
 8010856:	429a      	cmp	r2, r3
 8010858:	f200 839d 	bhi.w	8010f96 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801085c:	7cbb      	ldrb	r3, [r7, #18]
 801085e:	b29b      	uxth	r3, r3
 8010860:	3b14      	subs	r3, #20
 8010862:	b29a      	uxth	r2, r3
 8010864:	4b81      	ldr	r3, [pc, #516]	; (8010a6c <tcp_input+0x294>)
 8010866:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010868:	4b81      	ldr	r3, [pc, #516]	; (8010a70 <tcp_input+0x298>)
 801086a:	2200      	movs	r2, #0
 801086c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	895a      	ldrh	r2, [r3, #10]
 8010872:	7cbb      	ldrb	r3, [r7, #18]
 8010874:	b29b      	uxth	r3, r3
 8010876:	429a      	cmp	r2, r3
 8010878:	d309      	bcc.n	801088e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801087a:	4b7c      	ldr	r3, [pc, #496]	; (8010a6c <tcp_input+0x294>)
 801087c:	881a      	ldrh	r2, [r3, #0]
 801087e:	4b7d      	ldr	r3, [pc, #500]	; (8010a74 <tcp_input+0x29c>)
 8010880:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8010882:	7cbb      	ldrb	r3, [r7, #18]
 8010884:	4619      	mov	r1, r3
 8010886:	6878      	ldr	r0, [r7, #4]
 8010888:	f7fd fc9e 	bl	800e1c8 <pbuf_remove_header>
 801088c:	e04e      	b.n	801092c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d105      	bne.n	80108a2 <tcp_input+0xca>
 8010896:	4b70      	ldr	r3, [pc, #448]	; (8010a58 <tcp_input+0x280>)
 8010898:	22c2      	movs	r2, #194	; 0xc2
 801089a:	4977      	ldr	r1, [pc, #476]	; (8010a78 <tcp_input+0x2a0>)
 801089c:	4870      	ldr	r0, [pc, #448]	; (8010a60 <tcp_input+0x288>)
 801089e:	f007 fb85 	bl	8017fac <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80108a2:	2114      	movs	r1, #20
 80108a4:	6878      	ldr	r0, [r7, #4]
 80108a6:	f7fd fc8f 	bl	800e1c8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	895a      	ldrh	r2, [r3, #10]
 80108ae:	4b71      	ldr	r3, [pc, #452]	; (8010a74 <tcp_input+0x29c>)
 80108b0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80108b2:	4b6e      	ldr	r3, [pc, #440]	; (8010a6c <tcp_input+0x294>)
 80108b4:	881a      	ldrh	r2, [r3, #0]
 80108b6:	4b6f      	ldr	r3, [pc, #444]	; (8010a74 <tcp_input+0x29c>)
 80108b8:	881b      	ldrh	r3, [r3, #0]
 80108ba:	1ad3      	subs	r3, r2, r3
 80108bc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80108be:	4b6d      	ldr	r3, [pc, #436]	; (8010a74 <tcp_input+0x29c>)
 80108c0:	881b      	ldrh	r3, [r3, #0]
 80108c2:	4619      	mov	r1, r3
 80108c4:	6878      	ldr	r0, [r7, #4]
 80108c6:	f7fd fc7f 	bl	800e1c8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	895b      	ldrh	r3, [r3, #10]
 80108d0:	8a3a      	ldrh	r2, [r7, #16]
 80108d2:	429a      	cmp	r2, r3
 80108d4:	f200 8361 	bhi.w	8010f9a <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	685b      	ldr	r3, [r3, #4]
 80108de:	4a64      	ldr	r2, [pc, #400]	; (8010a70 <tcp_input+0x298>)
 80108e0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	8a3a      	ldrh	r2, [r7, #16]
 80108e8:	4611      	mov	r1, r2
 80108ea:	4618      	mov	r0, r3
 80108ec:	f7fd fc6c 	bl	800e1c8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	891a      	ldrh	r2, [r3, #8]
 80108f4:	8a3b      	ldrh	r3, [r7, #16]
 80108f6:	1ad3      	subs	r3, r2, r3
 80108f8:	b29a      	uxth	r2, r3
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	895b      	ldrh	r3, [r3, #10]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d005      	beq.n	8010912 <tcp_input+0x13a>
 8010906:	4b54      	ldr	r3, [pc, #336]	; (8010a58 <tcp_input+0x280>)
 8010908:	22df      	movs	r2, #223	; 0xdf
 801090a:	495c      	ldr	r1, [pc, #368]	; (8010a7c <tcp_input+0x2a4>)
 801090c:	4854      	ldr	r0, [pc, #336]	; (8010a60 <tcp_input+0x288>)
 801090e:	f007 fb4d 	bl	8017fac <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	891a      	ldrh	r2, [r3, #8]
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	891b      	ldrh	r3, [r3, #8]
 801091c:	429a      	cmp	r2, r3
 801091e:	d005      	beq.n	801092c <tcp_input+0x154>
 8010920:	4b4d      	ldr	r3, [pc, #308]	; (8010a58 <tcp_input+0x280>)
 8010922:	22e0      	movs	r2, #224	; 0xe0
 8010924:	4956      	ldr	r1, [pc, #344]	; (8010a80 <tcp_input+0x2a8>)
 8010926:	484e      	ldr	r0, [pc, #312]	; (8010a60 <tcp_input+0x288>)
 8010928:	f007 fb40 	bl	8017fac <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801092c:	4b4d      	ldr	r3, [pc, #308]	; (8010a64 <tcp_input+0x28c>)
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	881b      	ldrh	r3, [r3, #0]
 8010932:	b29b      	uxth	r3, r3
 8010934:	4a4b      	ldr	r2, [pc, #300]	; (8010a64 <tcp_input+0x28c>)
 8010936:	6814      	ldr	r4, [r2, #0]
 8010938:	4618      	mov	r0, r3
 801093a:	f7fc fa17 	bl	800cd6c <lwip_htons>
 801093e:	4603      	mov	r3, r0
 8010940:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8010942:	4b48      	ldr	r3, [pc, #288]	; (8010a64 <tcp_input+0x28c>)
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	885b      	ldrh	r3, [r3, #2]
 8010948:	b29b      	uxth	r3, r3
 801094a:	4a46      	ldr	r2, [pc, #280]	; (8010a64 <tcp_input+0x28c>)
 801094c:	6814      	ldr	r4, [r2, #0]
 801094e:	4618      	mov	r0, r3
 8010950:	f7fc fa0c 	bl	800cd6c <lwip_htons>
 8010954:	4603      	mov	r3, r0
 8010956:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010958:	4b42      	ldr	r3, [pc, #264]	; (8010a64 <tcp_input+0x28c>)
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	685b      	ldr	r3, [r3, #4]
 801095e:	4a41      	ldr	r2, [pc, #260]	; (8010a64 <tcp_input+0x28c>)
 8010960:	6814      	ldr	r4, [r2, #0]
 8010962:	4618      	mov	r0, r3
 8010964:	f7fc fa17 	bl	800cd96 <lwip_htonl>
 8010968:	4603      	mov	r3, r0
 801096a:	6063      	str	r3, [r4, #4]
 801096c:	6863      	ldr	r3, [r4, #4]
 801096e:	4a45      	ldr	r2, [pc, #276]	; (8010a84 <tcp_input+0x2ac>)
 8010970:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8010972:	4b3c      	ldr	r3, [pc, #240]	; (8010a64 <tcp_input+0x28c>)
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	689b      	ldr	r3, [r3, #8]
 8010978:	4a3a      	ldr	r2, [pc, #232]	; (8010a64 <tcp_input+0x28c>)
 801097a:	6814      	ldr	r4, [r2, #0]
 801097c:	4618      	mov	r0, r3
 801097e:	f7fc fa0a 	bl	800cd96 <lwip_htonl>
 8010982:	4603      	mov	r3, r0
 8010984:	60a3      	str	r3, [r4, #8]
 8010986:	68a3      	ldr	r3, [r4, #8]
 8010988:	4a3f      	ldr	r2, [pc, #252]	; (8010a88 <tcp_input+0x2b0>)
 801098a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801098c:	4b35      	ldr	r3, [pc, #212]	; (8010a64 <tcp_input+0x28c>)
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	89db      	ldrh	r3, [r3, #14]
 8010992:	b29b      	uxth	r3, r3
 8010994:	4a33      	ldr	r2, [pc, #204]	; (8010a64 <tcp_input+0x28c>)
 8010996:	6814      	ldr	r4, [r2, #0]
 8010998:	4618      	mov	r0, r3
 801099a:	f7fc f9e7 	bl	800cd6c <lwip_htons>
 801099e:	4603      	mov	r3, r0
 80109a0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80109a2:	4b30      	ldr	r3, [pc, #192]	; (8010a64 <tcp_input+0x28c>)
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	899b      	ldrh	r3, [r3, #12]
 80109a8:	b29b      	uxth	r3, r3
 80109aa:	4618      	mov	r0, r3
 80109ac:	f7fc f9de 	bl	800cd6c <lwip_htons>
 80109b0:	4603      	mov	r3, r0
 80109b2:	b2db      	uxtb	r3, r3
 80109b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80109b8:	b2da      	uxtb	r2, r3
 80109ba:	4b34      	ldr	r3, [pc, #208]	; (8010a8c <tcp_input+0x2b4>)
 80109bc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	891a      	ldrh	r2, [r3, #8]
 80109c2:	4b33      	ldr	r3, [pc, #204]	; (8010a90 <tcp_input+0x2b8>)
 80109c4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80109c6:	4b31      	ldr	r3, [pc, #196]	; (8010a8c <tcp_input+0x2b4>)
 80109c8:	781b      	ldrb	r3, [r3, #0]
 80109ca:	f003 0303 	and.w	r3, r3, #3
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d00c      	beq.n	80109ec <tcp_input+0x214>
    tcplen++;
 80109d2:	4b2f      	ldr	r3, [pc, #188]	; (8010a90 <tcp_input+0x2b8>)
 80109d4:	881b      	ldrh	r3, [r3, #0]
 80109d6:	3301      	adds	r3, #1
 80109d8:	b29a      	uxth	r2, r3
 80109da:	4b2d      	ldr	r3, [pc, #180]	; (8010a90 <tcp_input+0x2b8>)
 80109dc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	891a      	ldrh	r2, [r3, #8]
 80109e2:	4b2b      	ldr	r3, [pc, #172]	; (8010a90 <tcp_input+0x2b8>)
 80109e4:	881b      	ldrh	r3, [r3, #0]
 80109e6:	429a      	cmp	r2, r3
 80109e8:	f200 82d9 	bhi.w	8010f9e <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80109ec:	2300      	movs	r3, #0
 80109ee:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80109f0:	4b28      	ldr	r3, [pc, #160]	; (8010a94 <tcp_input+0x2bc>)
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	61fb      	str	r3, [r7, #28]
 80109f6:	e09d      	b.n	8010b34 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80109f8:	69fb      	ldr	r3, [r7, #28]
 80109fa:	7d1b      	ldrb	r3, [r3, #20]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d105      	bne.n	8010a0c <tcp_input+0x234>
 8010a00:	4b15      	ldr	r3, [pc, #84]	; (8010a58 <tcp_input+0x280>)
 8010a02:	22fb      	movs	r2, #251	; 0xfb
 8010a04:	4924      	ldr	r1, [pc, #144]	; (8010a98 <tcp_input+0x2c0>)
 8010a06:	4816      	ldr	r0, [pc, #88]	; (8010a60 <tcp_input+0x288>)
 8010a08:	f007 fad0 	bl	8017fac <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010a0c:	69fb      	ldr	r3, [r7, #28]
 8010a0e:	7d1b      	ldrb	r3, [r3, #20]
 8010a10:	2b0a      	cmp	r3, #10
 8010a12:	d105      	bne.n	8010a20 <tcp_input+0x248>
 8010a14:	4b10      	ldr	r3, [pc, #64]	; (8010a58 <tcp_input+0x280>)
 8010a16:	22fc      	movs	r2, #252	; 0xfc
 8010a18:	4920      	ldr	r1, [pc, #128]	; (8010a9c <tcp_input+0x2c4>)
 8010a1a:	4811      	ldr	r0, [pc, #68]	; (8010a60 <tcp_input+0x288>)
 8010a1c:	f007 fac6 	bl	8017fac <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010a20:	69fb      	ldr	r3, [r7, #28]
 8010a22:	7d1b      	ldrb	r3, [r3, #20]
 8010a24:	2b01      	cmp	r3, #1
 8010a26:	d105      	bne.n	8010a34 <tcp_input+0x25c>
 8010a28:	4b0b      	ldr	r3, [pc, #44]	; (8010a58 <tcp_input+0x280>)
 8010a2a:	22fd      	movs	r2, #253	; 0xfd
 8010a2c:	491c      	ldr	r1, [pc, #112]	; (8010aa0 <tcp_input+0x2c8>)
 8010a2e:	480c      	ldr	r0, [pc, #48]	; (8010a60 <tcp_input+0x288>)
 8010a30:	f007 fabc 	bl	8017fac <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010a34:	69fb      	ldr	r3, [r7, #28]
 8010a36:	7a1b      	ldrb	r3, [r3, #8]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d033      	beq.n	8010aa4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010a3c:	69fb      	ldr	r3, [r7, #28]
 8010a3e:	7a1a      	ldrb	r2, [r3, #8]
 8010a40:	4b09      	ldr	r3, [pc, #36]	; (8010a68 <tcp_input+0x290>)
 8010a42:	685b      	ldr	r3, [r3, #4]
 8010a44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010a48:	3301      	adds	r3, #1
 8010a4a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010a4c:	429a      	cmp	r2, r3
 8010a4e:	d029      	beq.n	8010aa4 <tcp_input+0x2cc>
      prev = pcb;
 8010a50:	69fb      	ldr	r3, [r7, #28]
 8010a52:	61bb      	str	r3, [r7, #24]
      continue;
 8010a54:	e06b      	b.n	8010b2e <tcp_input+0x356>
 8010a56:	bf00      	nop
 8010a58:	0801c3bc 	.word	0x0801c3bc
 8010a5c:	0801c3f0 	.word	0x0801c3f0
 8010a60:	0801c408 	.word	0x0801c408
 8010a64:	20000a68 	.word	0x20000a68
 8010a68:	20003e00 	.word	0x20003e00
 8010a6c:	20000a6c 	.word	0x20000a6c
 8010a70:	20000a70 	.word	0x20000a70
 8010a74:	20000a6e 	.word	0x20000a6e
 8010a78:	0801c430 	.word	0x0801c430
 8010a7c:	0801c440 	.word	0x0801c440
 8010a80:	0801c44c 	.word	0x0801c44c
 8010a84:	20000a78 	.word	0x20000a78
 8010a88:	20000a7c 	.word	0x20000a7c
 8010a8c:	20000a84 	.word	0x20000a84
 8010a90:	20000a82 	.word	0x20000a82
 8010a94:	20009504 	.word	0x20009504
 8010a98:	0801c46c 	.word	0x0801c46c
 8010a9c:	0801c494 	.word	0x0801c494
 8010aa0:	0801c4c0 	.word	0x0801c4c0
    }

    if (pcb->remote_port == tcphdr->src &&
 8010aa4:	69fb      	ldr	r3, [r7, #28]
 8010aa6:	8b1a      	ldrh	r2, [r3, #24]
 8010aa8:	4b94      	ldr	r3, [pc, #592]	; (8010cfc <tcp_input+0x524>)
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	881b      	ldrh	r3, [r3, #0]
 8010aae:	b29b      	uxth	r3, r3
 8010ab0:	429a      	cmp	r2, r3
 8010ab2:	d13a      	bne.n	8010b2a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010ab4:	69fb      	ldr	r3, [r7, #28]
 8010ab6:	8ada      	ldrh	r2, [r3, #22]
 8010ab8:	4b90      	ldr	r3, [pc, #576]	; (8010cfc <tcp_input+0x524>)
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	885b      	ldrh	r3, [r3, #2]
 8010abe:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010ac0:	429a      	cmp	r2, r3
 8010ac2:	d132      	bne.n	8010b2a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010ac4:	69fb      	ldr	r3, [r7, #28]
 8010ac6:	685a      	ldr	r2, [r3, #4]
 8010ac8:	4b8d      	ldr	r3, [pc, #564]	; (8010d00 <tcp_input+0x528>)
 8010aca:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010acc:	429a      	cmp	r2, r3
 8010ace:	d12c      	bne.n	8010b2a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010ad0:	69fb      	ldr	r3, [r7, #28]
 8010ad2:	681a      	ldr	r2, [r3, #0]
 8010ad4:	4b8a      	ldr	r3, [pc, #552]	; (8010d00 <tcp_input+0x528>)
 8010ad6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010ad8:	429a      	cmp	r2, r3
 8010ada:	d126      	bne.n	8010b2a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010adc:	69fb      	ldr	r3, [r7, #28]
 8010ade:	68db      	ldr	r3, [r3, #12]
 8010ae0:	69fa      	ldr	r2, [r7, #28]
 8010ae2:	429a      	cmp	r2, r3
 8010ae4:	d106      	bne.n	8010af4 <tcp_input+0x31c>
 8010ae6:	4b87      	ldr	r3, [pc, #540]	; (8010d04 <tcp_input+0x52c>)
 8010ae8:	f240 120d 	movw	r2, #269	; 0x10d
 8010aec:	4986      	ldr	r1, [pc, #536]	; (8010d08 <tcp_input+0x530>)
 8010aee:	4887      	ldr	r0, [pc, #540]	; (8010d0c <tcp_input+0x534>)
 8010af0:	f007 fa5c 	bl	8017fac <iprintf>
      if (prev != NULL) {
 8010af4:	69bb      	ldr	r3, [r7, #24]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d00a      	beq.n	8010b10 <tcp_input+0x338>
        prev->next = pcb->next;
 8010afa:	69fb      	ldr	r3, [r7, #28]
 8010afc:	68da      	ldr	r2, [r3, #12]
 8010afe:	69bb      	ldr	r3, [r7, #24]
 8010b00:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010b02:	4b83      	ldr	r3, [pc, #524]	; (8010d10 <tcp_input+0x538>)
 8010b04:	681a      	ldr	r2, [r3, #0]
 8010b06:	69fb      	ldr	r3, [r7, #28]
 8010b08:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8010b0a:	4a81      	ldr	r2, [pc, #516]	; (8010d10 <tcp_input+0x538>)
 8010b0c:	69fb      	ldr	r3, [r7, #28]
 8010b0e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010b10:	69fb      	ldr	r3, [r7, #28]
 8010b12:	68db      	ldr	r3, [r3, #12]
 8010b14:	69fa      	ldr	r2, [r7, #28]
 8010b16:	429a      	cmp	r2, r3
 8010b18:	d111      	bne.n	8010b3e <tcp_input+0x366>
 8010b1a:	4b7a      	ldr	r3, [pc, #488]	; (8010d04 <tcp_input+0x52c>)
 8010b1c:	f240 1215 	movw	r2, #277	; 0x115
 8010b20:	497c      	ldr	r1, [pc, #496]	; (8010d14 <tcp_input+0x53c>)
 8010b22:	487a      	ldr	r0, [pc, #488]	; (8010d0c <tcp_input+0x534>)
 8010b24:	f007 fa42 	bl	8017fac <iprintf>
      break;
 8010b28:	e009      	b.n	8010b3e <tcp_input+0x366>
    }
    prev = pcb;
 8010b2a:	69fb      	ldr	r3, [r7, #28]
 8010b2c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010b2e:	69fb      	ldr	r3, [r7, #28]
 8010b30:	68db      	ldr	r3, [r3, #12]
 8010b32:	61fb      	str	r3, [r7, #28]
 8010b34:	69fb      	ldr	r3, [r7, #28]
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	f47f af5e 	bne.w	80109f8 <tcp_input+0x220>
 8010b3c:	e000      	b.n	8010b40 <tcp_input+0x368>
      break;
 8010b3e:	bf00      	nop
  }

  if (pcb == NULL) {
 8010b40:	69fb      	ldr	r3, [r7, #28]
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	f040 8095 	bne.w	8010c72 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010b48:	4b73      	ldr	r3, [pc, #460]	; (8010d18 <tcp_input+0x540>)
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	61fb      	str	r3, [r7, #28]
 8010b4e:	e03f      	b.n	8010bd0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010b50:	69fb      	ldr	r3, [r7, #28]
 8010b52:	7d1b      	ldrb	r3, [r3, #20]
 8010b54:	2b0a      	cmp	r3, #10
 8010b56:	d006      	beq.n	8010b66 <tcp_input+0x38e>
 8010b58:	4b6a      	ldr	r3, [pc, #424]	; (8010d04 <tcp_input+0x52c>)
 8010b5a:	f240 121f 	movw	r2, #287	; 0x11f
 8010b5e:	496f      	ldr	r1, [pc, #444]	; (8010d1c <tcp_input+0x544>)
 8010b60:	486a      	ldr	r0, [pc, #424]	; (8010d0c <tcp_input+0x534>)
 8010b62:	f007 fa23 	bl	8017fac <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010b66:	69fb      	ldr	r3, [r7, #28]
 8010b68:	7a1b      	ldrb	r3, [r3, #8]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d009      	beq.n	8010b82 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010b6e:	69fb      	ldr	r3, [r7, #28]
 8010b70:	7a1a      	ldrb	r2, [r3, #8]
 8010b72:	4b63      	ldr	r3, [pc, #396]	; (8010d00 <tcp_input+0x528>)
 8010b74:	685b      	ldr	r3, [r3, #4]
 8010b76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010b7a:	3301      	adds	r3, #1
 8010b7c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010b7e:	429a      	cmp	r2, r3
 8010b80:	d122      	bne.n	8010bc8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8010b82:	69fb      	ldr	r3, [r7, #28]
 8010b84:	8b1a      	ldrh	r2, [r3, #24]
 8010b86:	4b5d      	ldr	r3, [pc, #372]	; (8010cfc <tcp_input+0x524>)
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	881b      	ldrh	r3, [r3, #0]
 8010b8c:	b29b      	uxth	r3, r3
 8010b8e:	429a      	cmp	r2, r3
 8010b90:	d11b      	bne.n	8010bca <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8010b92:	69fb      	ldr	r3, [r7, #28]
 8010b94:	8ada      	ldrh	r2, [r3, #22]
 8010b96:	4b59      	ldr	r3, [pc, #356]	; (8010cfc <tcp_input+0x524>)
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	885b      	ldrh	r3, [r3, #2]
 8010b9c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8010b9e:	429a      	cmp	r2, r3
 8010ba0:	d113      	bne.n	8010bca <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010ba2:	69fb      	ldr	r3, [r7, #28]
 8010ba4:	685a      	ldr	r2, [r3, #4]
 8010ba6:	4b56      	ldr	r3, [pc, #344]	; (8010d00 <tcp_input+0x528>)
 8010ba8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8010baa:	429a      	cmp	r2, r3
 8010bac:	d10d      	bne.n	8010bca <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010bae:	69fb      	ldr	r3, [r7, #28]
 8010bb0:	681a      	ldr	r2, [r3, #0]
 8010bb2:	4b53      	ldr	r3, [pc, #332]	; (8010d00 <tcp_input+0x528>)
 8010bb4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010bb6:	429a      	cmp	r2, r3
 8010bb8:	d107      	bne.n	8010bca <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8010bba:	69f8      	ldr	r0, [r7, #28]
 8010bbc:	f000 fb54 	bl	8011268 <tcp_timewait_input>
        }
        pbuf_free(p);
 8010bc0:	6878      	ldr	r0, [r7, #4]
 8010bc2:	f7fd fb87 	bl	800e2d4 <pbuf_free>
        return;
 8010bc6:	e1f0      	b.n	8010faa <tcp_input+0x7d2>
        continue;
 8010bc8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010bca:	69fb      	ldr	r3, [r7, #28]
 8010bcc:	68db      	ldr	r3, [r3, #12]
 8010bce:	61fb      	str	r3, [r7, #28]
 8010bd0:	69fb      	ldr	r3, [r7, #28]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d1bc      	bne.n	8010b50 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010bda:	4b51      	ldr	r3, [pc, #324]	; (8010d20 <tcp_input+0x548>)
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	617b      	str	r3, [r7, #20]
 8010be0:	e02a      	b.n	8010c38 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010be2:	697b      	ldr	r3, [r7, #20]
 8010be4:	7a1b      	ldrb	r3, [r3, #8]
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d00c      	beq.n	8010c04 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010bea:	697b      	ldr	r3, [r7, #20]
 8010bec:	7a1a      	ldrb	r2, [r3, #8]
 8010bee:	4b44      	ldr	r3, [pc, #272]	; (8010d00 <tcp_input+0x528>)
 8010bf0:	685b      	ldr	r3, [r3, #4]
 8010bf2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010bf6:	3301      	adds	r3, #1
 8010bf8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010bfa:	429a      	cmp	r2, r3
 8010bfc:	d002      	beq.n	8010c04 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8010bfe:	697b      	ldr	r3, [r7, #20]
 8010c00:	61bb      	str	r3, [r7, #24]
        continue;
 8010c02:	e016      	b.n	8010c32 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010c04:	697b      	ldr	r3, [r7, #20]
 8010c06:	8ada      	ldrh	r2, [r3, #22]
 8010c08:	4b3c      	ldr	r3, [pc, #240]	; (8010cfc <tcp_input+0x524>)
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	885b      	ldrh	r3, [r3, #2]
 8010c0e:	b29b      	uxth	r3, r3
 8010c10:	429a      	cmp	r2, r3
 8010c12:	d10c      	bne.n	8010c2e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010c14:	697b      	ldr	r3, [r7, #20]
 8010c16:	681a      	ldr	r2, [r3, #0]
 8010c18:	4b39      	ldr	r3, [pc, #228]	; (8010d00 <tcp_input+0x528>)
 8010c1a:	695b      	ldr	r3, [r3, #20]
 8010c1c:	429a      	cmp	r2, r3
 8010c1e:	d00f      	beq.n	8010c40 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010c20:	697b      	ldr	r3, [r7, #20]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d00d      	beq.n	8010c42 <tcp_input+0x46a>
 8010c26:	697b      	ldr	r3, [r7, #20]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d009      	beq.n	8010c42 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010c2e:	697b      	ldr	r3, [r7, #20]
 8010c30:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010c32:	697b      	ldr	r3, [r7, #20]
 8010c34:	68db      	ldr	r3, [r3, #12]
 8010c36:	617b      	str	r3, [r7, #20]
 8010c38:	697b      	ldr	r3, [r7, #20]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d1d1      	bne.n	8010be2 <tcp_input+0x40a>
 8010c3e:	e000      	b.n	8010c42 <tcp_input+0x46a>
            break;
 8010c40:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8010c42:	697b      	ldr	r3, [r7, #20]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d014      	beq.n	8010c72 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010c48:	69bb      	ldr	r3, [r7, #24]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d00a      	beq.n	8010c64 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010c4e:	697b      	ldr	r3, [r7, #20]
 8010c50:	68da      	ldr	r2, [r3, #12]
 8010c52:	69bb      	ldr	r3, [r7, #24]
 8010c54:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8010c56:	4b32      	ldr	r3, [pc, #200]	; (8010d20 <tcp_input+0x548>)
 8010c58:	681a      	ldr	r2, [r3, #0]
 8010c5a:	697b      	ldr	r3, [r7, #20]
 8010c5c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8010c5e:	4a30      	ldr	r2, [pc, #192]	; (8010d20 <tcp_input+0x548>)
 8010c60:	697b      	ldr	r3, [r7, #20]
 8010c62:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010c64:	6978      	ldr	r0, [r7, #20]
 8010c66:	f000 fa01 	bl	801106c <tcp_listen_input>
      }
      pbuf_free(p);
 8010c6a:	6878      	ldr	r0, [r7, #4]
 8010c6c:	f7fd fb32 	bl	800e2d4 <pbuf_free>
      return;
 8010c70:	e19b      	b.n	8010faa <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8010c72:	69fb      	ldr	r3, [r7, #28]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	f000 8160 	beq.w	8010f3a <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8010c7a:	4b2a      	ldr	r3, [pc, #168]	; (8010d24 <tcp_input+0x54c>)
 8010c7c:	2200      	movs	r2, #0
 8010c7e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	891a      	ldrh	r2, [r3, #8]
 8010c84:	4b27      	ldr	r3, [pc, #156]	; (8010d24 <tcp_input+0x54c>)
 8010c86:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8010c88:	4a26      	ldr	r2, [pc, #152]	; (8010d24 <tcp_input+0x54c>)
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010c8e:	4b1b      	ldr	r3, [pc, #108]	; (8010cfc <tcp_input+0x524>)
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	4a24      	ldr	r2, [pc, #144]	; (8010d24 <tcp_input+0x54c>)
 8010c94:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8010c96:	4b24      	ldr	r3, [pc, #144]	; (8010d28 <tcp_input+0x550>)
 8010c98:	2200      	movs	r2, #0
 8010c9a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010c9c:	4b23      	ldr	r3, [pc, #140]	; (8010d2c <tcp_input+0x554>)
 8010c9e:	2200      	movs	r2, #0
 8010ca0:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8010ca2:	4b23      	ldr	r3, [pc, #140]	; (8010d30 <tcp_input+0x558>)
 8010ca4:	2200      	movs	r2, #0
 8010ca6:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010ca8:	4b22      	ldr	r3, [pc, #136]	; (8010d34 <tcp_input+0x55c>)
 8010caa:	781b      	ldrb	r3, [r3, #0]
 8010cac:	f003 0308 	and.w	r3, r3, #8
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d006      	beq.n	8010cc2 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	7b5b      	ldrb	r3, [r3, #13]
 8010cb8:	f043 0301 	orr.w	r3, r3, #1
 8010cbc:	b2da      	uxtb	r2, r3
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8010cc2:	69fb      	ldr	r3, [r7, #28]
 8010cc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d038      	beq.n	8010d3c <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010cca:	69f8      	ldr	r0, [r7, #28]
 8010ccc:	f7ff f858 	bl	800fd80 <tcp_process_refused_data>
 8010cd0:	4603      	mov	r3, r0
 8010cd2:	f113 0f0d 	cmn.w	r3, #13
 8010cd6:	d007      	beq.n	8010ce8 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010cd8:	69fb      	ldr	r3, [r7, #28]
 8010cda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d02d      	beq.n	8010d3c <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010ce0:	4b15      	ldr	r3, [pc, #84]	; (8010d38 <tcp_input+0x560>)
 8010ce2:	881b      	ldrh	r3, [r3, #0]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d029      	beq.n	8010d3c <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8010ce8:	69fb      	ldr	r3, [r7, #28]
 8010cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	f040 8104 	bne.w	8010efa <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8010cf2:	69f8      	ldr	r0, [r7, #28]
 8010cf4:	f003 fe16 	bl	8014924 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8010cf8:	e0ff      	b.n	8010efa <tcp_input+0x722>
 8010cfa:	bf00      	nop
 8010cfc:	20000a68 	.word	0x20000a68
 8010d00:	20003e00 	.word	0x20003e00
 8010d04:	0801c3bc 	.word	0x0801c3bc
 8010d08:	0801c4e8 	.word	0x0801c4e8
 8010d0c:	0801c408 	.word	0x0801c408
 8010d10:	20009504 	.word	0x20009504
 8010d14:	0801c514 	.word	0x0801c514
 8010d18:	20009514 	.word	0x20009514
 8010d1c:	0801c540 	.word	0x0801c540
 8010d20:	2000950c 	.word	0x2000950c
 8010d24:	20000a58 	.word	0x20000a58
 8010d28:	20000a88 	.word	0x20000a88
 8010d2c:	20000a85 	.word	0x20000a85
 8010d30:	20000a80 	.word	0x20000a80
 8010d34:	20000a84 	.word	0x20000a84
 8010d38:	20000a82 	.word	0x20000a82
      }
    }
    tcp_input_pcb = pcb;
 8010d3c:	4a9c      	ldr	r2, [pc, #624]	; (8010fb0 <tcp_input+0x7d8>)
 8010d3e:	69fb      	ldr	r3, [r7, #28]
 8010d40:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8010d42:	69f8      	ldr	r0, [r7, #28]
 8010d44:	f000 fb0a 	bl	801135c <tcp_process>
 8010d48:	4603      	mov	r3, r0
 8010d4a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8010d4c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010d50:	f113 0f0d 	cmn.w	r3, #13
 8010d54:	f000 80d3 	beq.w	8010efe <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8010d58:	4b96      	ldr	r3, [pc, #600]	; (8010fb4 <tcp_input+0x7dc>)
 8010d5a:	781b      	ldrb	r3, [r3, #0]
 8010d5c:	f003 0308 	and.w	r3, r3, #8
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d015      	beq.n	8010d90 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8010d64:	69fb      	ldr	r3, [r7, #28]
 8010d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d008      	beq.n	8010d80 <tcp_input+0x5a8>
 8010d6e:	69fb      	ldr	r3, [r7, #28]
 8010d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d74:	69fa      	ldr	r2, [r7, #28]
 8010d76:	6912      	ldr	r2, [r2, #16]
 8010d78:	f06f 010d 	mvn.w	r1, #13
 8010d7c:	4610      	mov	r0, r2
 8010d7e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010d80:	69f9      	ldr	r1, [r7, #28]
 8010d82:	488d      	ldr	r0, [pc, #564]	; (8010fb8 <tcp_input+0x7e0>)
 8010d84:	f7ff fbb0 	bl	80104e8 <tcp_pcb_remove>
        tcp_free(pcb);
 8010d88:	69f8      	ldr	r0, [r7, #28]
 8010d8a:	f7fd fde5 	bl	800e958 <tcp_free>
 8010d8e:	e0c1      	b.n	8010f14 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8010d90:	2300      	movs	r3, #0
 8010d92:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8010d94:	4b89      	ldr	r3, [pc, #548]	; (8010fbc <tcp_input+0x7e4>)
 8010d96:	881b      	ldrh	r3, [r3, #0]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d01d      	beq.n	8010dd8 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010d9c:	4b87      	ldr	r3, [pc, #540]	; (8010fbc <tcp_input+0x7e4>)
 8010d9e:	881b      	ldrh	r3, [r3, #0]
 8010da0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8010da2:	69fb      	ldr	r3, [r7, #28]
 8010da4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d00a      	beq.n	8010dc2 <tcp_input+0x5ea>
 8010dac:	69fb      	ldr	r3, [r7, #28]
 8010dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010db2:	69fa      	ldr	r2, [r7, #28]
 8010db4:	6910      	ldr	r0, [r2, #16]
 8010db6:	89fa      	ldrh	r2, [r7, #14]
 8010db8:	69f9      	ldr	r1, [r7, #28]
 8010dba:	4798      	blx	r3
 8010dbc:	4603      	mov	r3, r0
 8010dbe:	74fb      	strb	r3, [r7, #19]
 8010dc0:	e001      	b.n	8010dc6 <tcp_input+0x5ee>
 8010dc2:	2300      	movs	r3, #0
 8010dc4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010dc6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010dca:	f113 0f0d 	cmn.w	r3, #13
 8010dce:	f000 8098 	beq.w	8010f02 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8010dd2:	4b7a      	ldr	r3, [pc, #488]	; (8010fbc <tcp_input+0x7e4>)
 8010dd4:	2200      	movs	r2, #0
 8010dd6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8010dd8:	69f8      	ldr	r0, [r7, #28]
 8010dda:	f000 f907 	bl	8010fec <tcp_input_delayed_close>
 8010dde:	4603      	mov	r3, r0
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	f040 8090 	bne.w	8010f06 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8010de6:	4b76      	ldr	r3, [pc, #472]	; (8010fc0 <tcp_input+0x7e8>)
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d041      	beq.n	8010e72 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8010dee:	69fb      	ldr	r3, [r7, #28]
 8010df0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d006      	beq.n	8010e04 <tcp_input+0x62c>
 8010df6:	4b73      	ldr	r3, [pc, #460]	; (8010fc4 <tcp_input+0x7ec>)
 8010df8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010dfc:	4972      	ldr	r1, [pc, #456]	; (8010fc8 <tcp_input+0x7f0>)
 8010dfe:	4873      	ldr	r0, [pc, #460]	; (8010fcc <tcp_input+0x7f4>)
 8010e00:	f007 f8d4 	bl	8017fac <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8010e04:	69fb      	ldr	r3, [r7, #28]
 8010e06:	8b5b      	ldrh	r3, [r3, #26]
 8010e08:	f003 0310 	and.w	r3, r3, #16
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d008      	beq.n	8010e22 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010e10:	4b6b      	ldr	r3, [pc, #428]	; (8010fc0 <tcp_input+0x7e8>)
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	4618      	mov	r0, r3
 8010e16:	f7fd fa5d 	bl	800e2d4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8010e1a:	69f8      	ldr	r0, [r7, #28]
 8010e1c:	f7fe f884 	bl	800ef28 <tcp_abort>
            goto aborted;
 8010e20:	e078      	b.n	8010f14 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8010e22:	69fb      	ldr	r3, [r7, #28]
 8010e24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d00c      	beq.n	8010e46 <tcp_input+0x66e>
 8010e2c:	69fb      	ldr	r3, [r7, #28]
 8010e2e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010e32:	69fb      	ldr	r3, [r7, #28]
 8010e34:	6918      	ldr	r0, [r3, #16]
 8010e36:	4b62      	ldr	r3, [pc, #392]	; (8010fc0 <tcp_input+0x7e8>)
 8010e38:	681a      	ldr	r2, [r3, #0]
 8010e3a:	2300      	movs	r3, #0
 8010e3c:	69f9      	ldr	r1, [r7, #28]
 8010e3e:	47a0      	blx	r4
 8010e40:	4603      	mov	r3, r0
 8010e42:	74fb      	strb	r3, [r7, #19]
 8010e44:	e008      	b.n	8010e58 <tcp_input+0x680>
 8010e46:	4b5e      	ldr	r3, [pc, #376]	; (8010fc0 <tcp_input+0x7e8>)
 8010e48:	681a      	ldr	r2, [r3, #0]
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	69f9      	ldr	r1, [r7, #28]
 8010e4e:	2000      	movs	r0, #0
 8010e50:	f7ff f88a 	bl	800ff68 <tcp_recv_null>
 8010e54:	4603      	mov	r3, r0
 8010e56:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8010e58:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010e5c:	f113 0f0d 	cmn.w	r3, #13
 8010e60:	d053      	beq.n	8010f0a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8010e62:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d003      	beq.n	8010e72 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8010e6a:	4b55      	ldr	r3, [pc, #340]	; (8010fc0 <tcp_input+0x7e8>)
 8010e6c:	681a      	ldr	r2, [r3, #0]
 8010e6e:	69fb      	ldr	r3, [r7, #28]
 8010e70:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8010e72:	4b50      	ldr	r3, [pc, #320]	; (8010fb4 <tcp_input+0x7dc>)
 8010e74:	781b      	ldrb	r3, [r3, #0]
 8010e76:	f003 0320 	and.w	r3, r3, #32
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d030      	beq.n	8010ee0 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8010e7e:	69fb      	ldr	r3, [r7, #28]
 8010e80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d009      	beq.n	8010e9a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8010e86:	69fb      	ldr	r3, [r7, #28]
 8010e88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010e8a:	7b5a      	ldrb	r2, [r3, #13]
 8010e8c:	69fb      	ldr	r3, [r7, #28]
 8010e8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010e90:	f042 0220 	orr.w	r2, r2, #32
 8010e94:	b2d2      	uxtb	r2, r2
 8010e96:	735a      	strb	r2, [r3, #13]
 8010e98:	e022      	b.n	8010ee0 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010e9a:	69fb      	ldr	r3, [r7, #28]
 8010e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010e9e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010ea2:	d005      	beq.n	8010eb0 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8010ea4:	69fb      	ldr	r3, [r7, #28]
 8010ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010ea8:	3301      	adds	r3, #1
 8010eaa:	b29a      	uxth	r2, r3
 8010eac:	69fb      	ldr	r3, [r7, #28]
 8010eae:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010eb0:	69fb      	ldr	r3, [r7, #28]
 8010eb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d00b      	beq.n	8010ed2 <tcp_input+0x6fa>
 8010eba:	69fb      	ldr	r3, [r7, #28]
 8010ebc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010ec0:	69fb      	ldr	r3, [r7, #28]
 8010ec2:	6918      	ldr	r0, [r3, #16]
 8010ec4:	2300      	movs	r3, #0
 8010ec6:	2200      	movs	r2, #0
 8010ec8:	69f9      	ldr	r1, [r7, #28]
 8010eca:	47a0      	blx	r4
 8010ecc:	4603      	mov	r3, r0
 8010ece:	74fb      	strb	r3, [r7, #19]
 8010ed0:	e001      	b.n	8010ed6 <tcp_input+0x6fe>
 8010ed2:	2300      	movs	r3, #0
 8010ed4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010ed6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010eda:	f113 0f0d 	cmn.w	r3, #13
 8010ede:	d016      	beq.n	8010f0e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010ee0:	4b33      	ldr	r3, [pc, #204]	; (8010fb0 <tcp_input+0x7d8>)
 8010ee2:	2200      	movs	r2, #0
 8010ee4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8010ee6:	69f8      	ldr	r0, [r7, #28]
 8010ee8:	f000 f880 	bl	8010fec <tcp_input_delayed_close>
 8010eec:	4603      	mov	r3, r0
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d10f      	bne.n	8010f12 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8010ef2:	69f8      	ldr	r0, [r7, #28]
 8010ef4:	f002 ff10 	bl	8013d18 <tcp_output>
 8010ef8:	e00c      	b.n	8010f14 <tcp_input+0x73c>
        goto aborted;
 8010efa:	bf00      	nop
 8010efc:	e00a      	b.n	8010f14 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8010efe:	bf00      	nop
 8010f00:	e008      	b.n	8010f14 <tcp_input+0x73c>
              goto aborted;
 8010f02:	bf00      	nop
 8010f04:	e006      	b.n	8010f14 <tcp_input+0x73c>
          goto aborted;
 8010f06:	bf00      	nop
 8010f08:	e004      	b.n	8010f14 <tcp_input+0x73c>
            goto aborted;
 8010f0a:	bf00      	nop
 8010f0c:	e002      	b.n	8010f14 <tcp_input+0x73c>
              goto aborted;
 8010f0e:	bf00      	nop
 8010f10:	e000      	b.n	8010f14 <tcp_input+0x73c>
          goto aborted;
 8010f12:	bf00      	nop
    tcp_input_pcb = NULL;
 8010f14:	4b26      	ldr	r3, [pc, #152]	; (8010fb0 <tcp_input+0x7d8>)
 8010f16:	2200      	movs	r2, #0
 8010f18:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8010f1a:	4b29      	ldr	r3, [pc, #164]	; (8010fc0 <tcp_input+0x7e8>)
 8010f1c:	2200      	movs	r2, #0
 8010f1e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8010f20:	4b2b      	ldr	r3, [pc, #172]	; (8010fd0 <tcp_input+0x7f8>)
 8010f22:	685b      	ldr	r3, [r3, #4]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d03f      	beq.n	8010fa8 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8010f28:	4b29      	ldr	r3, [pc, #164]	; (8010fd0 <tcp_input+0x7f8>)
 8010f2a:	685b      	ldr	r3, [r3, #4]
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	f7fd f9d1 	bl	800e2d4 <pbuf_free>
      inseg.p = NULL;
 8010f32:	4b27      	ldr	r3, [pc, #156]	; (8010fd0 <tcp_input+0x7f8>)
 8010f34:	2200      	movs	r2, #0
 8010f36:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8010f38:	e036      	b.n	8010fa8 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8010f3a:	4b26      	ldr	r3, [pc, #152]	; (8010fd4 <tcp_input+0x7fc>)
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	899b      	ldrh	r3, [r3, #12]
 8010f40:	b29b      	uxth	r3, r3
 8010f42:	4618      	mov	r0, r3
 8010f44:	f7fb ff12 	bl	800cd6c <lwip_htons>
 8010f48:	4603      	mov	r3, r0
 8010f4a:	b2db      	uxtb	r3, r3
 8010f4c:	f003 0304 	and.w	r3, r3, #4
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d118      	bne.n	8010f86 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010f54:	4b20      	ldr	r3, [pc, #128]	; (8010fd8 <tcp_input+0x800>)
 8010f56:	6819      	ldr	r1, [r3, #0]
 8010f58:	4b20      	ldr	r3, [pc, #128]	; (8010fdc <tcp_input+0x804>)
 8010f5a:	881b      	ldrh	r3, [r3, #0]
 8010f5c:	461a      	mov	r2, r3
 8010f5e:	4b20      	ldr	r3, [pc, #128]	; (8010fe0 <tcp_input+0x808>)
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010f64:	4b1b      	ldr	r3, [pc, #108]	; (8010fd4 <tcp_input+0x7fc>)
 8010f66:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010f68:	885b      	ldrh	r3, [r3, #2]
 8010f6a:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010f6c:	4a19      	ldr	r2, [pc, #100]	; (8010fd4 <tcp_input+0x7fc>)
 8010f6e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010f70:	8812      	ldrh	r2, [r2, #0]
 8010f72:	b292      	uxth	r2, r2
 8010f74:	9202      	str	r2, [sp, #8]
 8010f76:	9301      	str	r3, [sp, #4]
 8010f78:	4b1a      	ldr	r3, [pc, #104]	; (8010fe4 <tcp_input+0x80c>)
 8010f7a:	9300      	str	r3, [sp, #0]
 8010f7c:	4b1a      	ldr	r3, [pc, #104]	; (8010fe8 <tcp_input+0x810>)
 8010f7e:	4602      	mov	r2, r0
 8010f80:	2000      	movs	r0, #0
 8010f82:	f003 fc7d 	bl	8014880 <tcp_rst>
    pbuf_free(p);
 8010f86:	6878      	ldr	r0, [r7, #4]
 8010f88:	f7fd f9a4 	bl	800e2d4 <pbuf_free>
  return;
 8010f8c:	e00c      	b.n	8010fa8 <tcp_input+0x7d0>
    goto dropped;
 8010f8e:	bf00      	nop
 8010f90:	e006      	b.n	8010fa0 <tcp_input+0x7c8>
    goto dropped;
 8010f92:	bf00      	nop
 8010f94:	e004      	b.n	8010fa0 <tcp_input+0x7c8>
    goto dropped;
 8010f96:	bf00      	nop
 8010f98:	e002      	b.n	8010fa0 <tcp_input+0x7c8>
      goto dropped;
 8010f9a:	bf00      	nop
 8010f9c:	e000      	b.n	8010fa0 <tcp_input+0x7c8>
      goto dropped;
 8010f9e:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8010fa0:	6878      	ldr	r0, [r7, #4]
 8010fa2:	f7fd f997 	bl	800e2d4 <pbuf_free>
 8010fa6:	e000      	b.n	8010faa <tcp_input+0x7d2>
  return;
 8010fa8:	bf00      	nop
}
 8010faa:	3724      	adds	r7, #36	; 0x24
 8010fac:	46bd      	mov	sp, r7
 8010fae:	bd90      	pop	{r4, r7, pc}
 8010fb0:	20009518 	.word	0x20009518
 8010fb4:	20000a85 	.word	0x20000a85
 8010fb8:	20009504 	.word	0x20009504
 8010fbc:	20000a80 	.word	0x20000a80
 8010fc0:	20000a88 	.word	0x20000a88
 8010fc4:	0801c3bc 	.word	0x0801c3bc
 8010fc8:	0801c570 	.word	0x0801c570
 8010fcc:	0801c408 	.word	0x0801c408
 8010fd0:	20000a58 	.word	0x20000a58
 8010fd4:	20000a68 	.word	0x20000a68
 8010fd8:	20000a7c 	.word	0x20000a7c
 8010fdc:	20000a82 	.word	0x20000a82
 8010fe0:	20000a78 	.word	0x20000a78
 8010fe4:	20003e10 	.word	0x20003e10
 8010fe8:	20003e14 	.word	0x20003e14

08010fec <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b082      	sub	sp, #8
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d106      	bne.n	8011008 <tcp_input_delayed_close+0x1c>
 8010ffa:	4b17      	ldr	r3, [pc, #92]	; (8011058 <tcp_input_delayed_close+0x6c>)
 8010ffc:	f240 225a 	movw	r2, #602	; 0x25a
 8011000:	4916      	ldr	r1, [pc, #88]	; (801105c <tcp_input_delayed_close+0x70>)
 8011002:	4817      	ldr	r0, [pc, #92]	; (8011060 <tcp_input_delayed_close+0x74>)
 8011004:	f006 ffd2 	bl	8017fac <iprintf>

  if (recv_flags & TF_CLOSED) {
 8011008:	4b16      	ldr	r3, [pc, #88]	; (8011064 <tcp_input_delayed_close+0x78>)
 801100a:	781b      	ldrb	r3, [r3, #0]
 801100c:	f003 0310 	and.w	r3, r3, #16
 8011010:	2b00      	cmp	r3, #0
 8011012:	d01c      	beq.n	801104e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	8b5b      	ldrh	r3, [r3, #26]
 8011018:	f003 0310 	and.w	r3, r3, #16
 801101c:	2b00      	cmp	r3, #0
 801101e:	d10d      	bne.n	801103c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011026:	2b00      	cmp	r3, #0
 8011028:	d008      	beq.n	801103c <tcp_input_delayed_close+0x50>
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011030:	687a      	ldr	r2, [r7, #4]
 8011032:	6912      	ldr	r2, [r2, #16]
 8011034:	f06f 010e 	mvn.w	r1, #14
 8011038:	4610      	mov	r0, r2
 801103a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801103c:	6879      	ldr	r1, [r7, #4]
 801103e:	480a      	ldr	r0, [pc, #40]	; (8011068 <tcp_input_delayed_close+0x7c>)
 8011040:	f7ff fa52 	bl	80104e8 <tcp_pcb_remove>
    tcp_free(pcb);
 8011044:	6878      	ldr	r0, [r7, #4]
 8011046:	f7fd fc87 	bl	800e958 <tcp_free>
    return 1;
 801104a:	2301      	movs	r3, #1
 801104c:	e000      	b.n	8011050 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801104e:	2300      	movs	r3, #0
}
 8011050:	4618      	mov	r0, r3
 8011052:	3708      	adds	r7, #8
 8011054:	46bd      	mov	sp, r7
 8011056:	bd80      	pop	{r7, pc}
 8011058:	0801c3bc 	.word	0x0801c3bc
 801105c:	0801c58c 	.word	0x0801c58c
 8011060:	0801c408 	.word	0x0801c408
 8011064:	20000a85 	.word	0x20000a85
 8011068:	20009504 	.word	0x20009504

0801106c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801106c:	b590      	push	{r4, r7, lr}
 801106e:	b08b      	sub	sp, #44	; 0x2c
 8011070:	af04      	add	r7, sp, #16
 8011072:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011074:	4b6f      	ldr	r3, [pc, #444]	; (8011234 <tcp_listen_input+0x1c8>)
 8011076:	781b      	ldrb	r3, [r3, #0]
 8011078:	f003 0304 	and.w	r3, r3, #4
 801107c:	2b00      	cmp	r3, #0
 801107e:	f040 80d2 	bne.w	8011226 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	2b00      	cmp	r3, #0
 8011086:	d106      	bne.n	8011096 <tcp_listen_input+0x2a>
 8011088:	4b6b      	ldr	r3, [pc, #428]	; (8011238 <tcp_listen_input+0x1cc>)
 801108a:	f240 2281 	movw	r2, #641	; 0x281
 801108e:	496b      	ldr	r1, [pc, #428]	; (801123c <tcp_listen_input+0x1d0>)
 8011090:	486b      	ldr	r0, [pc, #428]	; (8011240 <tcp_listen_input+0x1d4>)
 8011092:	f006 ff8b 	bl	8017fac <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8011096:	4b67      	ldr	r3, [pc, #412]	; (8011234 <tcp_listen_input+0x1c8>)
 8011098:	781b      	ldrb	r3, [r3, #0]
 801109a:	f003 0310 	and.w	r3, r3, #16
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d019      	beq.n	80110d6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80110a2:	4b68      	ldr	r3, [pc, #416]	; (8011244 <tcp_listen_input+0x1d8>)
 80110a4:	6819      	ldr	r1, [r3, #0]
 80110a6:	4b68      	ldr	r3, [pc, #416]	; (8011248 <tcp_listen_input+0x1dc>)
 80110a8:	881b      	ldrh	r3, [r3, #0]
 80110aa:	461a      	mov	r2, r3
 80110ac:	4b67      	ldr	r3, [pc, #412]	; (801124c <tcp_listen_input+0x1e0>)
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80110b2:	4b67      	ldr	r3, [pc, #412]	; (8011250 <tcp_listen_input+0x1e4>)
 80110b4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80110b6:	885b      	ldrh	r3, [r3, #2]
 80110b8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80110ba:	4a65      	ldr	r2, [pc, #404]	; (8011250 <tcp_listen_input+0x1e4>)
 80110bc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80110be:	8812      	ldrh	r2, [r2, #0]
 80110c0:	b292      	uxth	r2, r2
 80110c2:	9202      	str	r2, [sp, #8]
 80110c4:	9301      	str	r3, [sp, #4]
 80110c6:	4b63      	ldr	r3, [pc, #396]	; (8011254 <tcp_listen_input+0x1e8>)
 80110c8:	9300      	str	r3, [sp, #0]
 80110ca:	4b63      	ldr	r3, [pc, #396]	; (8011258 <tcp_listen_input+0x1ec>)
 80110cc:	4602      	mov	r2, r0
 80110ce:	6878      	ldr	r0, [r7, #4]
 80110d0:	f003 fbd6 	bl	8014880 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80110d4:	e0a9      	b.n	801122a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80110d6:	4b57      	ldr	r3, [pc, #348]	; (8011234 <tcp_listen_input+0x1c8>)
 80110d8:	781b      	ldrb	r3, [r3, #0]
 80110da:	f003 0302 	and.w	r3, r3, #2
 80110de:	2b00      	cmp	r3, #0
 80110e0:	f000 80a3 	beq.w	801122a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	7d5b      	ldrb	r3, [r3, #21]
 80110e8:	4618      	mov	r0, r3
 80110ea:	f7ff f861 	bl	80101b0 <tcp_alloc>
 80110ee:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80110f0:	697b      	ldr	r3, [r7, #20]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d111      	bne.n	801111a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	699b      	ldr	r3, [r3, #24]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d00a      	beq.n	8011114 <tcp_listen_input+0xa8>
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	699b      	ldr	r3, [r3, #24]
 8011102:	687a      	ldr	r2, [r7, #4]
 8011104:	6910      	ldr	r0, [r2, #16]
 8011106:	f04f 32ff 	mov.w	r2, #4294967295
 801110a:	2100      	movs	r1, #0
 801110c:	4798      	blx	r3
 801110e:	4603      	mov	r3, r0
 8011110:	73bb      	strb	r3, [r7, #14]
      return;
 8011112:	e08b      	b.n	801122c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011114:	23f0      	movs	r3, #240	; 0xf0
 8011116:	73bb      	strb	r3, [r7, #14]
      return;
 8011118:	e088      	b.n	801122c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801111a:	4b50      	ldr	r3, [pc, #320]	; (801125c <tcp_listen_input+0x1f0>)
 801111c:	695a      	ldr	r2, [r3, #20]
 801111e:	697b      	ldr	r3, [r7, #20]
 8011120:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011122:	4b4e      	ldr	r3, [pc, #312]	; (801125c <tcp_listen_input+0x1f0>)
 8011124:	691a      	ldr	r2, [r3, #16]
 8011126:	697b      	ldr	r3, [r7, #20]
 8011128:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	8ada      	ldrh	r2, [r3, #22]
 801112e:	697b      	ldr	r3, [r7, #20]
 8011130:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8011132:	4b47      	ldr	r3, [pc, #284]	; (8011250 <tcp_listen_input+0x1e4>)
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	881b      	ldrh	r3, [r3, #0]
 8011138:	b29a      	uxth	r2, r3
 801113a:	697b      	ldr	r3, [r7, #20]
 801113c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801113e:	697b      	ldr	r3, [r7, #20]
 8011140:	2203      	movs	r2, #3
 8011142:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8011144:	4b41      	ldr	r3, [pc, #260]	; (801124c <tcp_listen_input+0x1e0>)
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	1c5a      	adds	r2, r3, #1
 801114a:	697b      	ldr	r3, [r7, #20]
 801114c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801114e:	697b      	ldr	r3, [r7, #20]
 8011150:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011152:	697b      	ldr	r3, [r7, #20]
 8011154:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8011156:	6978      	ldr	r0, [r7, #20]
 8011158:	f7ff fa5a 	bl	8010610 <tcp_next_iss>
 801115c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801115e:	697b      	ldr	r3, [r7, #20]
 8011160:	693a      	ldr	r2, [r7, #16]
 8011162:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8011164:	697b      	ldr	r3, [r7, #20]
 8011166:	693a      	ldr	r2, [r7, #16]
 8011168:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801116a:	697b      	ldr	r3, [r7, #20]
 801116c:	693a      	ldr	r2, [r7, #16]
 801116e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8011170:	697b      	ldr	r3, [r7, #20]
 8011172:	693a      	ldr	r2, [r7, #16]
 8011174:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8011176:	4b35      	ldr	r3, [pc, #212]	; (801124c <tcp_listen_input+0x1e0>)
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	1e5a      	subs	r2, r3, #1
 801117c:	697b      	ldr	r3, [r7, #20]
 801117e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	691a      	ldr	r2, [r3, #16]
 8011184:	697b      	ldr	r3, [r7, #20]
 8011186:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8011188:	697b      	ldr	r3, [r7, #20]
 801118a:	687a      	ldr	r2, [r7, #4]
 801118c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	7a5b      	ldrb	r3, [r3, #9]
 8011192:	f003 030c 	and.w	r3, r3, #12
 8011196:	b2da      	uxtb	r2, r3
 8011198:	697b      	ldr	r3, [r7, #20]
 801119a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	7a1a      	ldrb	r2, [r3, #8]
 80111a0:	697b      	ldr	r3, [r7, #20]
 80111a2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80111a4:	4b2e      	ldr	r3, [pc, #184]	; (8011260 <tcp_listen_input+0x1f4>)
 80111a6:	681a      	ldr	r2, [r3, #0]
 80111a8:	697b      	ldr	r3, [r7, #20]
 80111aa:	60da      	str	r2, [r3, #12]
 80111ac:	4a2c      	ldr	r2, [pc, #176]	; (8011260 <tcp_listen_input+0x1f4>)
 80111ae:	697b      	ldr	r3, [r7, #20]
 80111b0:	6013      	str	r3, [r2, #0]
 80111b2:	f003 fd27 	bl	8014c04 <tcp_timer_needed>
 80111b6:	4b2b      	ldr	r3, [pc, #172]	; (8011264 <tcp_listen_input+0x1f8>)
 80111b8:	2201      	movs	r2, #1
 80111ba:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80111bc:	6978      	ldr	r0, [r7, #20]
 80111be:	f001 fd8d 	bl	8012cdc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80111c2:	4b23      	ldr	r3, [pc, #140]	; (8011250 <tcp_listen_input+0x1e4>)
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	89db      	ldrh	r3, [r3, #14]
 80111c8:	b29a      	uxth	r2, r3
 80111ca:	697b      	ldr	r3, [r7, #20]
 80111cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80111d0:	697b      	ldr	r3, [r7, #20]
 80111d2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80111d6:	697b      	ldr	r3, [r7, #20]
 80111d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80111dc:	697b      	ldr	r3, [r7, #20]
 80111de:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80111e0:	697b      	ldr	r3, [r7, #20]
 80111e2:	3304      	adds	r3, #4
 80111e4:	4618      	mov	r0, r3
 80111e6:	f005 f8eb 	bl	80163c0 <ip4_route>
 80111ea:	4601      	mov	r1, r0
 80111ec:	697b      	ldr	r3, [r7, #20]
 80111ee:	3304      	adds	r3, #4
 80111f0:	461a      	mov	r2, r3
 80111f2:	4620      	mov	r0, r4
 80111f4:	f7ff fa32 	bl	801065c <tcp_eff_send_mss_netif>
 80111f8:	4603      	mov	r3, r0
 80111fa:	461a      	mov	r2, r3
 80111fc:	697b      	ldr	r3, [r7, #20]
 80111fe:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011200:	2112      	movs	r1, #18
 8011202:	6978      	ldr	r0, [r7, #20]
 8011204:	f002 fc9a 	bl	8013b3c <tcp_enqueue_flags>
 8011208:	4603      	mov	r3, r0
 801120a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801120c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d004      	beq.n	801121e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8011214:	2100      	movs	r1, #0
 8011216:	6978      	ldr	r0, [r7, #20]
 8011218:	f7fd fdc8 	bl	800edac <tcp_abandon>
      return;
 801121c:	e006      	b.n	801122c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801121e:	6978      	ldr	r0, [r7, #20]
 8011220:	f002 fd7a 	bl	8013d18 <tcp_output>
  return;
 8011224:	e001      	b.n	801122a <tcp_listen_input+0x1be>
    return;
 8011226:	bf00      	nop
 8011228:	e000      	b.n	801122c <tcp_listen_input+0x1c0>
  return;
 801122a:	bf00      	nop
}
 801122c:	371c      	adds	r7, #28
 801122e:	46bd      	mov	sp, r7
 8011230:	bd90      	pop	{r4, r7, pc}
 8011232:	bf00      	nop
 8011234:	20000a84 	.word	0x20000a84
 8011238:	0801c3bc 	.word	0x0801c3bc
 801123c:	0801c5b4 	.word	0x0801c5b4
 8011240:	0801c408 	.word	0x0801c408
 8011244:	20000a7c 	.word	0x20000a7c
 8011248:	20000a82 	.word	0x20000a82
 801124c:	20000a78 	.word	0x20000a78
 8011250:	20000a68 	.word	0x20000a68
 8011254:	20003e10 	.word	0x20003e10
 8011258:	20003e14 	.word	0x20003e14
 801125c:	20003e00 	.word	0x20003e00
 8011260:	20009504 	.word	0x20009504
 8011264:	20009500 	.word	0x20009500

08011268 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8011268:	b580      	push	{r7, lr}
 801126a:	b086      	sub	sp, #24
 801126c:	af04      	add	r7, sp, #16
 801126e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8011270:	4b2f      	ldr	r3, [pc, #188]	; (8011330 <tcp_timewait_input+0xc8>)
 8011272:	781b      	ldrb	r3, [r3, #0]
 8011274:	f003 0304 	and.w	r3, r3, #4
 8011278:	2b00      	cmp	r3, #0
 801127a:	d153      	bne.n	8011324 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d106      	bne.n	8011290 <tcp_timewait_input+0x28>
 8011282:	4b2c      	ldr	r3, [pc, #176]	; (8011334 <tcp_timewait_input+0xcc>)
 8011284:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011288:	492b      	ldr	r1, [pc, #172]	; (8011338 <tcp_timewait_input+0xd0>)
 801128a:	482c      	ldr	r0, [pc, #176]	; (801133c <tcp_timewait_input+0xd4>)
 801128c:	f006 fe8e 	bl	8017fac <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8011290:	4b27      	ldr	r3, [pc, #156]	; (8011330 <tcp_timewait_input+0xc8>)
 8011292:	781b      	ldrb	r3, [r3, #0]
 8011294:	f003 0302 	and.w	r3, r3, #2
 8011298:	2b00      	cmp	r3, #0
 801129a:	d02a      	beq.n	80112f2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801129c:	4b28      	ldr	r3, [pc, #160]	; (8011340 <tcp_timewait_input+0xd8>)
 801129e:	681a      	ldr	r2, [r3, #0]
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112a4:	1ad3      	subs	r3, r2, r3
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	db2d      	blt.n	8011306 <tcp_timewait_input+0x9e>
 80112aa:	4b25      	ldr	r3, [pc, #148]	; (8011340 <tcp_timewait_input+0xd8>)
 80112ac:	681a      	ldr	r2, [r3, #0]
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112b2:	6879      	ldr	r1, [r7, #4]
 80112b4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80112b6:	440b      	add	r3, r1
 80112b8:	1ad3      	subs	r3, r2, r3
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	dc23      	bgt.n	8011306 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80112be:	4b21      	ldr	r3, [pc, #132]	; (8011344 <tcp_timewait_input+0xdc>)
 80112c0:	6819      	ldr	r1, [r3, #0]
 80112c2:	4b21      	ldr	r3, [pc, #132]	; (8011348 <tcp_timewait_input+0xe0>)
 80112c4:	881b      	ldrh	r3, [r3, #0]
 80112c6:	461a      	mov	r2, r3
 80112c8:	4b1d      	ldr	r3, [pc, #116]	; (8011340 <tcp_timewait_input+0xd8>)
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80112ce:	4b1f      	ldr	r3, [pc, #124]	; (801134c <tcp_timewait_input+0xe4>)
 80112d0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80112d2:	885b      	ldrh	r3, [r3, #2]
 80112d4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80112d6:	4a1d      	ldr	r2, [pc, #116]	; (801134c <tcp_timewait_input+0xe4>)
 80112d8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80112da:	8812      	ldrh	r2, [r2, #0]
 80112dc:	b292      	uxth	r2, r2
 80112de:	9202      	str	r2, [sp, #8]
 80112e0:	9301      	str	r3, [sp, #4]
 80112e2:	4b1b      	ldr	r3, [pc, #108]	; (8011350 <tcp_timewait_input+0xe8>)
 80112e4:	9300      	str	r3, [sp, #0]
 80112e6:	4b1b      	ldr	r3, [pc, #108]	; (8011354 <tcp_timewait_input+0xec>)
 80112e8:	4602      	mov	r2, r0
 80112ea:	6878      	ldr	r0, [r7, #4]
 80112ec:	f003 fac8 	bl	8014880 <tcp_rst>
      return;
 80112f0:	e01b      	b.n	801132a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80112f2:	4b0f      	ldr	r3, [pc, #60]	; (8011330 <tcp_timewait_input+0xc8>)
 80112f4:	781b      	ldrb	r3, [r3, #0]
 80112f6:	f003 0301 	and.w	r3, r3, #1
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d003      	beq.n	8011306 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80112fe:	4b16      	ldr	r3, [pc, #88]	; (8011358 <tcp_timewait_input+0xf0>)
 8011300:	681a      	ldr	r2, [r3, #0]
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8011306:	4b10      	ldr	r3, [pc, #64]	; (8011348 <tcp_timewait_input+0xe0>)
 8011308:	881b      	ldrh	r3, [r3, #0]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d00c      	beq.n	8011328 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	8b5b      	ldrh	r3, [r3, #26]
 8011312:	f043 0302 	orr.w	r3, r3, #2
 8011316:	b29a      	uxth	r2, r3
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801131c:	6878      	ldr	r0, [r7, #4]
 801131e:	f002 fcfb 	bl	8013d18 <tcp_output>
  }
  return;
 8011322:	e001      	b.n	8011328 <tcp_timewait_input+0xc0>
    return;
 8011324:	bf00      	nop
 8011326:	e000      	b.n	801132a <tcp_timewait_input+0xc2>
  return;
 8011328:	bf00      	nop
}
 801132a:	3708      	adds	r7, #8
 801132c:	46bd      	mov	sp, r7
 801132e:	bd80      	pop	{r7, pc}
 8011330:	20000a84 	.word	0x20000a84
 8011334:	0801c3bc 	.word	0x0801c3bc
 8011338:	0801c5d4 	.word	0x0801c5d4
 801133c:	0801c408 	.word	0x0801c408
 8011340:	20000a78 	.word	0x20000a78
 8011344:	20000a7c 	.word	0x20000a7c
 8011348:	20000a82 	.word	0x20000a82
 801134c:	20000a68 	.word	0x20000a68
 8011350:	20003e10 	.word	0x20003e10
 8011354:	20003e14 	.word	0x20003e14
 8011358:	20009508 	.word	0x20009508

0801135c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801135c:	b590      	push	{r4, r7, lr}
 801135e:	b08d      	sub	sp, #52	; 0x34
 8011360:	af04      	add	r7, sp, #16
 8011362:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8011364:	2300      	movs	r3, #0
 8011366:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8011368:	2300      	movs	r3, #0
 801136a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	2b00      	cmp	r3, #0
 8011370:	d106      	bne.n	8011380 <tcp_process+0x24>
 8011372:	4ba5      	ldr	r3, [pc, #660]	; (8011608 <tcp_process+0x2ac>)
 8011374:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8011378:	49a4      	ldr	r1, [pc, #656]	; (801160c <tcp_process+0x2b0>)
 801137a:	48a5      	ldr	r0, [pc, #660]	; (8011610 <tcp_process+0x2b4>)
 801137c:	f006 fe16 	bl	8017fac <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8011380:	4ba4      	ldr	r3, [pc, #656]	; (8011614 <tcp_process+0x2b8>)
 8011382:	781b      	ldrb	r3, [r3, #0]
 8011384:	f003 0304 	and.w	r3, r3, #4
 8011388:	2b00      	cmp	r3, #0
 801138a:	d04e      	beq.n	801142a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	7d1b      	ldrb	r3, [r3, #20]
 8011390:	2b02      	cmp	r3, #2
 8011392:	d108      	bne.n	80113a6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011398:	4b9f      	ldr	r3, [pc, #636]	; (8011618 <tcp_process+0x2bc>)
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	429a      	cmp	r2, r3
 801139e:	d123      	bne.n	80113e8 <tcp_process+0x8c>
        acceptable = 1;
 80113a0:	2301      	movs	r3, #1
 80113a2:	76fb      	strb	r3, [r7, #27]
 80113a4:	e020      	b.n	80113e8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80113aa:	4b9c      	ldr	r3, [pc, #624]	; (801161c <tcp_process+0x2c0>)
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	429a      	cmp	r2, r3
 80113b0:	d102      	bne.n	80113b8 <tcp_process+0x5c>
        acceptable = 1;
 80113b2:	2301      	movs	r3, #1
 80113b4:	76fb      	strb	r3, [r7, #27]
 80113b6:	e017      	b.n	80113e8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80113b8:	4b98      	ldr	r3, [pc, #608]	; (801161c <tcp_process+0x2c0>)
 80113ba:	681a      	ldr	r2, [r3, #0]
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113c0:	1ad3      	subs	r3, r2, r3
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	db10      	blt.n	80113e8 <tcp_process+0x8c>
 80113c6:	4b95      	ldr	r3, [pc, #596]	; (801161c <tcp_process+0x2c0>)
 80113c8:	681a      	ldr	r2, [r3, #0]
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113ce:	6879      	ldr	r1, [r7, #4]
 80113d0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80113d2:	440b      	add	r3, r1
 80113d4:	1ad3      	subs	r3, r2, r3
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	dc06      	bgt.n	80113e8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	8b5b      	ldrh	r3, [r3, #26]
 80113de:	f043 0302 	orr.w	r3, r3, #2
 80113e2:	b29a      	uxth	r2, r3
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80113e8:	7efb      	ldrb	r3, [r7, #27]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d01b      	beq.n	8011426 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	7d1b      	ldrb	r3, [r3, #20]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d106      	bne.n	8011404 <tcp_process+0xa8>
 80113f6:	4b84      	ldr	r3, [pc, #528]	; (8011608 <tcp_process+0x2ac>)
 80113f8:	f44f 724e 	mov.w	r2, #824	; 0x338
 80113fc:	4988      	ldr	r1, [pc, #544]	; (8011620 <tcp_process+0x2c4>)
 80113fe:	4884      	ldr	r0, [pc, #528]	; (8011610 <tcp_process+0x2b4>)
 8011400:	f006 fdd4 	bl	8017fac <iprintf>
      recv_flags |= TF_RESET;
 8011404:	4b87      	ldr	r3, [pc, #540]	; (8011624 <tcp_process+0x2c8>)
 8011406:	781b      	ldrb	r3, [r3, #0]
 8011408:	f043 0308 	orr.w	r3, r3, #8
 801140c:	b2da      	uxtb	r2, r3
 801140e:	4b85      	ldr	r3, [pc, #532]	; (8011624 <tcp_process+0x2c8>)
 8011410:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	8b5b      	ldrh	r3, [r3, #26]
 8011416:	f023 0301 	bic.w	r3, r3, #1
 801141a:	b29a      	uxth	r2, r3
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8011420:	f06f 030d 	mvn.w	r3, #13
 8011424:	e37a      	b.n	8011b1c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8011426:	2300      	movs	r3, #0
 8011428:	e378      	b.n	8011b1c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801142a:	4b7a      	ldr	r3, [pc, #488]	; (8011614 <tcp_process+0x2b8>)
 801142c:	781b      	ldrb	r3, [r3, #0]
 801142e:	f003 0302 	and.w	r3, r3, #2
 8011432:	2b00      	cmp	r3, #0
 8011434:	d010      	beq.n	8011458 <tcp_process+0xfc>
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	7d1b      	ldrb	r3, [r3, #20]
 801143a:	2b02      	cmp	r3, #2
 801143c:	d00c      	beq.n	8011458 <tcp_process+0xfc>
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	7d1b      	ldrb	r3, [r3, #20]
 8011442:	2b03      	cmp	r3, #3
 8011444:	d008      	beq.n	8011458 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	8b5b      	ldrh	r3, [r3, #26]
 801144a:	f043 0302 	orr.w	r3, r3, #2
 801144e:	b29a      	uxth	r2, r3
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8011454:	2300      	movs	r3, #0
 8011456:	e361      	b.n	8011b1c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	8b5b      	ldrh	r3, [r3, #26]
 801145c:	f003 0310 	and.w	r3, r3, #16
 8011460:	2b00      	cmp	r3, #0
 8011462:	d103      	bne.n	801146c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8011464:	4b70      	ldr	r3, [pc, #448]	; (8011628 <tcp_process+0x2cc>)
 8011466:	681a      	ldr	r2, [r3, #0]
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	2200      	movs	r2, #0
 8011470:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	2200      	movs	r2, #0
 8011478:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 801147c:	6878      	ldr	r0, [r7, #4]
 801147e:	f001 fc2d 	bl	8012cdc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	7d1b      	ldrb	r3, [r3, #20]
 8011486:	3b02      	subs	r3, #2
 8011488:	2b07      	cmp	r3, #7
 801148a:	f200 8337 	bhi.w	8011afc <tcp_process+0x7a0>
 801148e:	a201      	add	r2, pc, #4	; (adr r2, 8011494 <tcp_process+0x138>)
 8011490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011494:	080114b5 	.word	0x080114b5
 8011498:	080116e5 	.word	0x080116e5
 801149c:	0801185d 	.word	0x0801185d
 80114a0:	08011887 	.word	0x08011887
 80114a4:	080119ab 	.word	0x080119ab
 80114a8:	0801185d 	.word	0x0801185d
 80114ac:	08011a37 	.word	0x08011a37
 80114b0:	08011ac7 	.word	0x08011ac7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80114b4:	4b57      	ldr	r3, [pc, #348]	; (8011614 <tcp_process+0x2b8>)
 80114b6:	781b      	ldrb	r3, [r3, #0]
 80114b8:	f003 0310 	and.w	r3, r3, #16
 80114bc:	2b00      	cmp	r3, #0
 80114be:	f000 80e4 	beq.w	801168a <tcp_process+0x32e>
 80114c2:	4b54      	ldr	r3, [pc, #336]	; (8011614 <tcp_process+0x2b8>)
 80114c4:	781b      	ldrb	r3, [r3, #0]
 80114c6:	f003 0302 	and.w	r3, r3, #2
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	f000 80dd 	beq.w	801168a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80114d4:	1c5a      	adds	r2, r3, #1
 80114d6:	4b50      	ldr	r3, [pc, #320]	; (8011618 <tcp_process+0x2bc>)
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	429a      	cmp	r2, r3
 80114dc:	f040 80d5 	bne.w	801168a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80114e0:	4b4e      	ldr	r3, [pc, #312]	; (801161c <tcp_process+0x2c0>)
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	1c5a      	adds	r2, r3, #1
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80114f2:	4b49      	ldr	r3, [pc, #292]	; (8011618 <tcp_process+0x2bc>)
 80114f4:	681a      	ldr	r2, [r3, #0]
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80114fa:	4b4c      	ldr	r3, [pc, #304]	; (801162c <tcp_process+0x2d0>)
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	89db      	ldrh	r3, [r3, #14]
 8011500:	b29a      	uxth	r2, r3
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8011514:	4b41      	ldr	r3, [pc, #260]	; (801161c <tcp_process+0x2c0>)
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	1e5a      	subs	r2, r3, #1
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	2204      	movs	r2, #4
 8011522:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	3304      	adds	r3, #4
 801152c:	4618      	mov	r0, r3
 801152e:	f004 ff47 	bl	80163c0 <ip4_route>
 8011532:	4601      	mov	r1, r0
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	3304      	adds	r3, #4
 8011538:	461a      	mov	r2, r3
 801153a:	4620      	mov	r0, r4
 801153c:	f7ff f88e 	bl	801065c <tcp_eff_send_mss_netif>
 8011540:	4603      	mov	r3, r0
 8011542:	461a      	mov	r2, r3
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801154c:	009a      	lsls	r2, r3, #2
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011552:	005b      	lsls	r3, r3, #1
 8011554:	f241 111c 	movw	r1, #4380	; 0x111c
 8011558:	428b      	cmp	r3, r1
 801155a:	bf38      	it	cc
 801155c:	460b      	movcc	r3, r1
 801155e:	429a      	cmp	r2, r3
 8011560:	d204      	bcs.n	801156c <tcp_process+0x210>
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011566:	009b      	lsls	r3, r3, #2
 8011568:	b29b      	uxth	r3, r3
 801156a:	e00d      	b.n	8011588 <tcp_process+0x22c>
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011570:	005b      	lsls	r3, r3, #1
 8011572:	f241 121c 	movw	r2, #4380	; 0x111c
 8011576:	4293      	cmp	r3, r2
 8011578:	d904      	bls.n	8011584 <tcp_process+0x228>
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801157e:	005b      	lsls	r3, r3, #1
 8011580:	b29b      	uxth	r3, r3
 8011582:	e001      	b.n	8011588 <tcp_process+0x22c>
 8011584:	f241 131c 	movw	r3, #4380	; 0x111c
 8011588:	687a      	ldr	r2, [r7, #4]
 801158a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011594:	2b00      	cmp	r3, #0
 8011596:	d106      	bne.n	80115a6 <tcp_process+0x24a>
 8011598:	4b1b      	ldr	r3, [pc, #108]	; (8011608 <tcp_process+0x2ac>)
 801159a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801159e:	4924      	ldr	r1, [pc, #144]	; (8011630 <tcp_process+0x2d4>)
 80115a0:	481b      	ldr	r0, [pc, #108]	; (8011610 <tcp_process+0x2b4>)
 80115a2:	f006 fd03 	bl	8017fac <iprintf>
        --pcb->snd_queuelen;
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80115ac:	3b01      	subs	r3, #1
 80115ae:	b29a      	uxth	r2, r3
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80115ba:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80115bc:	69fb      	ldr	r3, [r7, #28]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d111      	bne.n	80115e6 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115c6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80115c8:	69fb      	ldr	r3, [r7, #28]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d106      	bne.n	80115dc <tcp_process+0x280>
 80115ce:	4b0e      	ldr	r3, [pc, #56]	; (8011608 <tcp_process+0x2ac>)
 80115d0:	f44f 725d 	mov.w	r2, #884	; 0x374
 80115d4:	4917      	ldr	r1, [pc, #92]	; (8011634 <tcp_process+0x2d8>)
 80115d6:	480e      	ldr	r0, [pc, #56]	; (8011610 <tcp_process+0x2b4>)
 80115d8:	f006 fce8 	bl	8017fac <iprintf>
          pcb->unsent = rseg->next;
 80115dc:	69fb      	ldr	r3, [r7, #28]
 80115de:	681a      	ldr	r2, [r3, #0]
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	66da      	str	r2, [r3, #108]	; 0x6c
 80115e4:	e003      	b.n	80115ee <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 80115e6:	69fb      	ldr	r3, [r7, #28]
 80115e8:	681a      	ldr	r2, [r3, #0]
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80115ee:	69f8      	ldr	r0, [r7, #28]
 80115f0:	f7fe fc57 	bl	800fea2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d11d      	bne.n	8011638 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011602:	861a      	strh	r2, [r3, #48]	; 0x30
 8011604:	e01f      	b.n	8011646 <tcp_process+0x2ea>
 8011606:	bf00      	nop
 8011608:	0801c3bc 	.word	0x0801c3bc
 801160c:	0801c5f4 	.word	0x0801c5f4
 8011610:	0801c408 	.word	0x0801c408
 8011614:	20000a84 	.word	0x20000a84
 8011618:	20000a7c 	.word	0x20000a7c
 801161c:	20000a78 	.word	0x20000a78
 8011620:	0801c610 	.word	0x0801c610
 8011624:	20000a85 	.word	0x20000a85
 8011628:	20009508 	.word	0x20009508
 801162c:	20000a68 	.word	0x20000a68
 8011630:	0801c630 	.word	0x0801c630
 8011634:	0801c648 	.word	0x0801c648
        } else {
          pcb->rtime = 0;
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	2200      	movs	r2, #0
 801163c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	2200      	movs	r2, #0
 8011642:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801164c:	2b00      	cmp	r3, #0
 801164e:	d00a      	beq.n	8011666 <tcp_process+0x30a>
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011656:	687a      	ldr	r2, [r7, #4]
 8011658:	6910      	ldr	r0, [r2, #16]
 801165a:	2200      	movs	r2, #0
 801165c:	6879      	ldr	r1, [r7, #4]
 801165e:	4798      	blx	r3
 8011660:	4603      	mov	r3, r0
 8011662:	76bb      	strb	r3, [r7, #26]
 8011664:	e001      	b.n	801166a <tcp_process+0x30e>
 8011666:	2300      	movs	r3, #0
 8011668:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801166a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801166e:	f113 0f0d 	cmn.w	r3, #13
 8011672:	d102      	bne.n	801167a <tcp_process+0x31e>
          return ERR_ABRT;
 8011674:	f06f 030c 	mvn.w	r3, #12
 8011678:	e250      	b.n	8011b1c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	8b5b      	ldrh	r3, [r3, #26]
 801167e:	f043 0302 	orr.w	r3, r3, #2
 8011682:	b29a      	uxth	r2, r3
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8011688:	e23a      	b.n	8011b00 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801168a:	4b9d      	ldr	r3, [pc, #628]	; (8011900 <tcp_process+0x5a4>)
 801168c:	781b      	ldrb	r3, [r3, #0]
 801168e:	f003 0310 	and.w	r3, r3, #16
 8011692:	2b00      	cmp	r3, #0
 8011694:	f000 8234 	beq.w	8011b00 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011698:	4b9a      	ldr	r3, [pc, #616]	; (8011904 <tcp_process+0x5a8>)
 801169a:	6819      	ldr	r1, [r3, #0]
 801169c:	4b9a      	ldr	r3, [pc, #616]	; (8011908 <tcp_process+0x5ac>)
 801169e:	881b      	ldrh	r3, [r3, #0]
 80116a0:	461a      	mov	r2, r3
 80116a2:	4b9a      	ldr	r3, [pc, #616]	; (801190c <tcp_process+0x5b0>)
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80116a8:	4b99      	ldr	r3, [pc, #612]	; (8011910 <tcp_process+0x5b4>)
 80116aa:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80116ac:	885b      	ldrh	r3, [r3, #2]
 80116ae:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80116b0:	4a97      	ldr	r2, [pc, #604]	; (8011910 <tcp_process+0x5b4>)
 80116b2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80116b4:	8812      	ldrh	r2, [r2, #0]
 80116b6:	b292      	uxth	r2, r2
 80116b8:	9202      	str	r2, [sp, #8]
 80116ba:	9301      	str	r3, [sp, #4]
 80116bc:	4b95      	ldr	r3, [pc, #596]	; (8011914 <tcp_process+0x5b8>)
 80116be:	9300      	str	r3, [sp, #0]
 80116c0:	4b95      	ldr	r3, [pc, #596]	; (8011918 <tcp_process+0x5bc>)
 80116c2:	4602      	mov	r2, r0
 80116c4:	6878      	ldr	r0, [r7, #4]
 80116c6:	f003 f8db 	bl	8014880 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80116d0:	2b05      	cmp	r3, #5
 80116d2:	f200 8215 	bhi.w	8011b00 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	2200      	movs	r2, #0
 80116da:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80116dc:	6878      	ldr	r0, [r7, #4]
 80116de:	f002 fea5 	bl	801442c <tcp_rexmit_rto>
      break;
 80116e2:	e20d      	b.n	8011b00 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80116e4:	4b86      	ldr	r3, [pc, #536]	; (8011900 <tcp_process+0x5a4>)
 80116e6:	781b      	ldrb	r3, [r3, #0]
 80116e8:	f003 0310 	and.w	r3, r3, #16
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	f000 80a1 	beq.w	8011834 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80116f2:	4b84      	ldr	r3, [pc, #528]	; (8011904 <tcp_process+0x5a8>)
 80116f4:	681a      	ldr	r2, [r3, #0]
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80116fa:	1ad3      	subs	r3, r2, r3
 80116fc:	3b01      	subs	r3, #1
 80116fe:	2b00      	cmp	r3, #0
 8011700:	db7e      	blt.n	8011800 <tcp_process+0x4a4>
 8011702:	4b80      	ldr	r3, [pc, #512]	; (8011904 <tcp_process+0x5a8>)
 8011704:	681a      	ldr	r2, [r3, #0]
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801170a:	1ad3      	subs	r3, r2, r3
 801170c:	2b00      	cmp	r3, #0
 801170e:	dc77      	bgt.n	8011800 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	2204      	movs	r2, #4
 8011714:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801171a:	2b00      	cmp	r3, #0
 801171c:	d102      	bne.n	8011724 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801171e:	23fa      	movs	r3, #250	; 0xfa
 8011720:	76bb      	strb	r3, [r7, #26]
 8011722:	e01d      	b.n	8011760 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011728:	699b      	ldr	r3, [r3, #24]
 801172a:	2b00      	cmp	r3, #0
 801172c:	d106      	bne.n	801173c <tcp_process+0x3e0>
 801172e:	4b7b      	ldr	r3, [pc, #492]	; (801191c <tcp_process+0x5c0>)
 8011730:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8011734:	497a      	ldr	r1, [pc, #488]	; (8011920 <tcp_process+0x5c4>)
 8011736:	487b      	ldr	r0, [pc, #492]	; (8011924 <tcp_process+0x5c8>)
 8011738:	f006 fc38 	bl	8017fac <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011740:	699b      	ldr	r3, [r3, #24]
 8011742:	2b00      	cmp	r3, #0
 8011744:	d00a      	beq.n	801175c <tcp_process+0x400>
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801174a:	699b      	ldr	r3, [r3, #24]
 801174c:	687a      	ldr	r2, [r7, #4]
 801174e:	6910      	ldr	r0, [r2, #16]
 8011750:	2200      	movs	r2, #0
 8011752:	6879      	ldr	r1, [r7, #4]
 8011754:	4798      	blx	r3
 8011756:	4603      	mov	r3, r0
 8011758:	76bb      	strb	r3, [r7, #26]
 801175a:	e001      	b.n	8011760 <tcp_process+0x404>
 801175c:	23f0      	movs	r3, #240	; 0xf0
 801175e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8011760:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011764:	2b00      	cmp	r3, #0
 8011766:	d00a      	beq.n	801177e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8011768:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801176c:	f113 0f0d 	cmn.w	r3, #13
 8011770:	d002      	beq.n	8011778 <tcp_process+0x41c>
              tcp_abort(pcb);
 8011772:	6878      	ldr	r0, [r7, #4]
 8011774:	f7fd fbd8 	bl	800ef28 <tcp_abort>
            }
            return ERR_ABRT;
 8011778:	f06f 030c 	mvn.w	r3, #12
 801177c:	e1ce      	b.n	8011b1c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801177e:	6878      	ldr	r0, [r7, #4]
 8011780:	f000 fae0 	bl	8011d44 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8011784:	4b68      	ldr	r3, [pc, #416]	; (8011928 <tcp_process+0x5cc>)
 8011786:	881b      	ldrh	r3, [r3, #0]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d005      	beq.n	8011798 <tcp_process+0x43c>
            recv_acked--;
 801178c:	4b66      	ldr	r3, [pc, #408]	; (8011928 <tcp_process+0x5cc>)
 801178e:	881b      	ldrh	r3, [r3, #0]
 8011790:	3b01      	subs	r3, #1
 8011792:	b29a      	uxth	r2, r3
 8011794:	4b64      	ldr	r3, [pc, #400]	; (8011928 <tcp_process+0x5cc>)
 8011796:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801179c:	009a      	lsls	r2, r3, #2
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80117a2:	005b      	lsls	r3, r3, #1
 80117a4:	f241 111c 	movw	r1, #4380	; 0x111c
 80117a8:	428b      	cmp	r3, r1
 80117aa:	bf38      	it	cc
 80117ac:	460b      	movcc	r3, r1
 80117ae:	429a      	cmp	r2, r3
 80117b0:	d204      	bcs.n	80117bc <tcp_process+0x460>
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80117b6:	009b      	lsls	r3, r3, #2
 80117b8:	b29b      	uxth	r3, r3
 80117ba:	e00d      	b.n	80117d8 <tcp_process+0x47c>
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80117c0:	005b      	lsls	r3, r3, #1
 80117c2:	f241 121c 	movw	r2, #4380	; 0x111c
 80117c6:	4293      	cmp	r3, r2
 80117c8:	d904      	bls.n	80117d4 <tcp_process+0x478>
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80117ce:	005b      	lsls	r3, r3, #1
 80117d0:	b29b      	uxth	r3, r3
 80117d2:	e001      	b.n	80117d8 <tcp_process+0x47c>
 80117d4:	f241 131c 	movw	r3, #4380	; 0x111c
 80117d8:	687a      	ldr	r2, [r7, #4]
 80117da:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80117de:	4b53      	ldr	r3, [pc, #332]	; (801192c <tcp_process+0x5d0>)
 80117e0:	781b      	ldrb	r3, [r3, #0]
 80117e2:	f003 0320 	and.w	r3, r3, #32
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d037      	beq.n	801185a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	8b5b      	ldrh	r3, [r3, #26]
 80117ee:	f043 0302 	orr.w	r3, r3, #2
 80117f2:	b29a      	uxth	r2, r3
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	2207      	movs	r2, #7
 80117fc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80117fe:	e02c      	b.n	801185a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011800:	4b40      	ldr	r3, [pc, #256]	; (8011904 <tcp_process+0x5a8>)
 8011802:	6819      	ldr	r1, [r3, #0]
 8011804:	4b40      	ldr	r3, [pc, #256]	; (8011908 <tcp_process+0x5ac>)
 8011806:	881b      	ldrh	r3, [r3, #0]
 8011808:	461a      	mov	r2, r3
 801180a:	4b40      	ldr	r3, [pc, #256]	; (801190c <tcp_process+0x5b0>)
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011810:	4b3f      	ldr	r3, [pc, #252]	; (8011910 <tcp_process+0x5b4>)
 8011812:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011814:	885b      	ldrh	r3, [r3, #2]
 8011816:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011818:	4a3d      	ldr	r2, [pc, #244]	; (8011910 <tcp_process+0x5b4>)
 801181a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801181c:	8812      	ldrh	r2, [r2, #0]
 801181e:	b292      	uxth	r2, r2
 8011820:	9202      	str	r2, [sp, #8]
 8011822:	9301      	str	r3, [sp, #4]
 8011824:	4b3b      	ldr	r3, [pc, #236]	; (8011914 <tcp_process+0x5b8>)
 8011826:	9300      	str	r3, [sp, #0]
 8011828:	4b3b      	ldr	r3, [pc, #236]	; (8011918 <tcp_process+0x5bc>)
 801182a:	4602      	mov	r2, r0
 801182c:	6878      	ldr	r0, [r7, #4]
 801182e:	f003 f827 	bl	8014880 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8011832:	e167      	b.n	8011b04 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011834:	4b32      	ldr	r3, [pc, #200]	; (8011900 <tcp_process+0x5a4>)
 8011836:	781b      	ldrb	r3, [r3, #0]
 8011838:	f003 0302 	and.w	r3, r3, #2
 801183c:	2b00      	cmp	r3, #0
 801183e:	f000 8161 	beq.w	8011b04 <tcp_process+0x7a8>
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011846:	1e5a      	subs	r2, r3, #1
 8011848:	4b30      	ldr	r3, [pc, #192]	; (801190c <tcp_process+0x5b0>)
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	429a      	cmp	r2, r3
 801184e:	f040 8159 	bne.w	8011b04 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8011852:	6878      	ldr	r0, [r7, #4]
 8011854:	f002 fe0c 	bl	8014470 <tcp_rexmit>
      break;
 8011858:	e154      	b.n	8011b04 <tcp_process+0x7a8>
 801185a:	e153      	b.n	8011b04 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801185c:	6878      	ldr	r0, [r7, #4]
 801185e:	f000 fa71 	bl	8011d44 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8011862:	4b32      	ldr	r3, [pc, #200]	; (801192c <tcp_process+0x5d0>)
 8011864:	781b      	ldrb	r3, [r3, #0]
 8011866:	f003 0320 	and.w	r3, r3, #32
 801186a:	2b00      	cmp	r3, #0
 801186c:	f000 814c 	beq.w	8011b08 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	8b5b      	ldrh	r3, [r3, #26]
 8011874:	f043 0302 	orr.w	r3, r3, #2
 8011878:	b29a      	uxth	r2, r3
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	2207      	movs	r2, #7
 8011882:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011884:	e140      	b.n	8011b08 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8011886:	6878      	ldr	r0, [r7, #4]
 8011888:	f000 fa5c 	bl	8011d44 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801188c:	4b27      	ldr	r3, [pc, #156]	; (801192c <tcp_process+0x5d0>)
 801188e:	781b      	ldrb	r3, [r3, #0]
 8011890:	f003 0320 	and.w	r3, r3, #32
 8011894:	2b00      	cmp	r3, #0
 8011896:	d071      	beq.n	801197c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011898:	4b19      	ldr	r3, [pc, #100]	; (8011900 <tcp_process+0x5a4>)
 801189a:	781b      	ldrb	r3, [r3, #0]
 801189c:	f003 0310 	and.w	r3, r3, #16
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d060      	beq.n	8011966 <tcp_process+0x60a>
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80118a8:	4b16      	ldr	r3, [pc, #88]	; (8011904 <tcp_process+0x5a8>)
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	429a      	cmp	r2, r3
 80118ae:	d15a      	bne.n	8011966 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d156      	bne.n	8011966 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	8b5b      	ldrh	r3, [r3, #26]
 80118bc:	f043 0302 	orr.w	r3, r3, #2
 80118c0:	b29a      	uxth	r2, r3
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80118c6:	6878      	ldr	r0, [r7, #4]
 80118c8:	f7fe fdbe 	bl	8010448 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80118cc:	4b18      	ldr	r3, [pc, #96]	; (8011930 <tcp_process+0x5d4>)
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	687a      	ldr	r2, [r7, #4]
 80118d2:	429a      	cmp	r2, r3
 80118d4:	d105      	bne.n	80118e2 <tcp_process+0x586>
 80118d6:	4b16      	ldr	r3, [pc, #88]	; (8011930 <tcp_process+0x5d4>)
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	68db      	ldr	r3, [r3, #12]
 80118dc:	4a14      	ldr	r2, [pc, #80]	; (8011930 <tcp_process+0x5d4>)
 80118de:	6013      	str	r3, [r2, #0]
 80118e0:	e02e      	b.n	8011940 <tcp_process+0x5e4>
 80118e2:	4b13      	ldr	r3, [pc, #76]	; (8011930 <tcp_process+0x5d4>)
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	617b      	str	r3, [r7, #20]
 80118e8:	e027      	b.n	801193a <tcp_process+0x5de>
 80118ea:	697b      	ldr	r3, [r7, #20]
 80118ec:	68db      	ldr	r3, [r3, #12]
 80118ee:	687a      	ldr	r2, [r7, #4]
 80118f0:	429a      	cmp	r2, r3
 80118f2:	d11f      	bne.n	8011934 <tcp_process+0x5d8>
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	68da      	ldr	r2, [r3, #12]
 80118f8:	697b      	ldr	r3, [r7, #20]
 80118fa:	60da      	str	r2, [r3, #12]
 80118fc:	e020      	b.n	8011940 <tcp_process+0x5e4>
 80118fe:	bf00      	nop
 8011900:	20000a84 	.word	0x20000a84
 8011904:	20000a7c 	.word	0x20000a7c
 8011908:	20000a82 	.word	0x20000a82
 801190c:	20000a78 	.word	0x20000a78
 8011910:	20000a68 	.word	0x20000a68
 8011914:	20003e10 	.word	0x20003e10
 8011918:	20003e14 	.word	0x20003e14
 801191c:	0801c3bc 	.word	0x0801c3bc
 8011920:	0801c65c 	.word	0x0801c65c
 8011924:	0801c408 	.word	0x0801c408
 8011928:	20000a80 	.word	0x20000a80
 801192c:	20000a85 	.word	0x20000a85
 8011930:	20009504 	.word	0x20009504
 8011934:	697b      	ldr	r3, [r7, #20]
 8011936:	68db      	ldr	r3, [r3, #12]
 8011938:	617b      	str	r3, [r7, #20]
 801193a:	697b      	ldr	r3, [r7, #20]
 801193c:	2b00      	cmp	r3, #0
 801193e:	d1d4      	bne.n	80118ea <tcp_process+0x58e>
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	2200      	movs	r2, #0
 8011944:	60da      	str	r2, [r3, #12]
 8011946:	4b77      	ldr	r3, [pc, #476]	; (8011b24 <tcp_process+0x7c8>)
 8011948:	2201      	movs	r2, #1
 801194a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	220a      	movs	r2, #10
 8011950:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8011952:	4b75      	ldr	r3, [pc, #468]	; (8011b28 <tcp_process+0x7cc>)
 8011954:	681a      	ldr	r2, [r3, #0]
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	60da      	str	r2, [r3, #12]
 801195a:	4a73      	ldr	r2, [pc, #460]	; (8011b28 <tcp_process+0x7cc>)
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	6013      	str	r3, [r2, #0]
 8011960:	f003 f950 	bl	8014c04 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011964:	e0d2      	b.n	8011b0c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	8b5b      	ldrh	r3, [r3, #26]
 801196a:	f043 0302 	orr.w	r3, r3, #2
 801196e:	b29a      	uxth	r2, r3
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	2208      	movs	r2, #8
 8011978:	751a      	strb	r2, [r3, #20]
      break;
 801197a:	e0c7      	b.n	8011b0c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801197c:	4b6b      	ldr	r3, [pc, #428]	; (8011b2c <tcp_process+0x7d0>)
 801197e:	781b      	ldrb	r3, [r3, #0]
 8011980:	f003 0310 	and.w	r3, r3, #16
 8011984:	2b00      	cmp	r3, #0
 8011986:	f000 80c1 	beq.w	8011b0c <tcp_process+0x7b0>
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801198e:	4b68      	ldr	r3, [pc, #416]	; (8011b30 <tcp_process+0x7d4>)
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	429a      	cmp	r2, r3
 8011994:	f040 80ba 	bne.w	8011b0c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801199c:	2b00      	cmp	r3, #0
 801199e:	f040 80b5 	bne.w	8011b0c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	2206      	movs	r2, #6
 80119a6:	751a      	strb	r2, [r3, #20]
      break;
 80119a8:	e0b0      	b.n	8011b0c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80119aa:	6878      	ldr	r0, [r7, #4]
 80119ac:	f000 f9ca 	bl	8011d44 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80119b0:	4b60      	ldr	r3, [pc, #384]	; (8011b34 <tcp_process+0x7d8>)
 80119b2:	781b      	ldrb	r3, [r3, #0]
 80119b4:	f003 0320 	and.w	r3, r3, #32
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	f000 80a9 	beq.w	8011b10 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	8b5b      	ldrh	r3, [r3, #26]
 80119c2:	f043 0302 	orr.w	r3, r3, #2
 80119c6:	b29a      	uxth	r2, r3
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80119cc:	6878      	ldr	r0, [r7, #4]
 80119ce:	f7fe fd3b 	bl	8010448 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80119d2:	4b59      	ldr	r3, [pc, #356]	; (8011b38 <tcp_process+0x7dc>)
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	687a      	ldr	r2, [r7, #4]
 80119d8:	429a      	cmp	r2, r3
 80119da:	d105      	bne.n	80119e8 <tcp_process+0x68c>
 80119dc:	4b56      	ldr	r3, [pc, #344]	; (8011b38 <tcp_process+0x7dc>)
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	68db      	ldr	r3, [r3, #12]
 80119e2:	4a55      	ldr	r2, [pc, #340]	; (8011b38 <tcp_process+0x7dc>)
 80119e4:	6013      	str	r3, [r2, #0]
 80119e6:	e013      	b.n	8011a10 <tcp_process+0x6b4>
 80119e8:	4b53      	ldr	r3, [pc, #332]	; (8011b38 <tcp_process+0x7dc>)
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	613b      	str	r3, [r7, #16]
 80119ee:	e00c      	b.n	8011a0a <tcp_process+0x6ae>
 80119f0:	693b      	ldr	r3, [r7, #16]
 80119f2:	68db      	ldr	r3, [r3, #12]
 80119f4:	687a      	ldr	r2, [r7, #4]
 80119f6:	429a      	cmp	r2, r3
 80119f8:	d104      	bne.n	8011a04 <tcp_process+0x6a8>
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	68da      	ldr	r2, [r3, #12]
 80119fe:	693b      	ldr	r3, [r7, #16]
 8011a00:	60da      	str	r2, [r3, #12]
 8011a02:	e005      	b.n	8011a10 <tcp_process+0x6b4>
 8011a04:	693b      	ldr	r3, [r7, #16]
 8011a06:	68db      	ldr	r3, [r3, #12]
 8011a08:	613b      	str	r3, [r7, #16]
 8011a0a:	693b      	ldr	r3, [r7, #16]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d1ef      	bne.n	80119f0 <tcp_process+0x694>
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	2200      	movs	r2, #0
 8011a14:	60da      	str	r2, [r3, #12]
 8011a16:	4b43      	ldr	r3, [pc, #268]	; (8011b24 <tcp_process+0x7c8>)
 8011a18:	2201      	movs	r2, #1
 8011a1a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	220a      	movs	r2, #10
 8011a20:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011a22:	4b41      	ldr	r3, [pc, #260]	; (8011b28 <tcp_process+0x7cc>)
 8011a24:	681a      	ldr	r2, [r3, #0]
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	60da      	str	r2, [r3, #12]
 8011a2a:	4a3f      	ldr	r2, [pc, #252]	; (8011b28 <tcp_process+0x7cc>)
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	6013      	str	r3, [r2, #0]
 8011a30:	f003 f8e8 	bl	8014c04 <tcp_timer_needed>
      }
      break;
 8011a34:	e06c      	b.n	8011b10 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8011a36:	6878      	ldr	r0, [r7, #4]
 8011a38:	f000 f984 	bl	8011d44 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011a3c:	4b3b      	ldr	r3, [pc, #236]	; (8011b2c <tcp_process+0x7d0>)
 8011a3e:	781b      	ldrb	r3, [r3, #0]
 8011a40:	f003 0310 	and.w	r3, r3, #16
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d065      	beq.n	8011b14 <tcp_process+0x7b8>
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011a4c:	4b38      	ldr	r3, [pc, #224]	; (8011b30 <tcp_process+0x7d4>)
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	429a      	cmp	r2, r3
 8011a52:	d15f      	bne.n	8011b14 <tcp_process+0x7b8>
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d15b      	bne.n	8011b14 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011a5c:	6878      	ldr	r0, [r7, #4]
 8011a5e:	f7fe fcf3 	bl	8010448 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011a62:	4b35      	ldr	r3, [pc, #212]	; (8011b38 <tcp_process+0x7dc>)
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	687a      	ldr	r2, [r7, #4]
 8011a68:	429a      	cmp	r2, r3
 8011a6a:	d105      	bne.n	8011a78 <tcp_process+0x71c>
 8011a6c:	4b32      	ldr	r3, [pc, #200]	; (8011b38 <tcp_process+0x7dc>)
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	68db      	ldr	r3, [r3, #12]
 8011a72:	4a31      	ldr	r2, [pc, #196]	; (8011b38 <tcp_process+0x7dc>)
 8011a74:	6013      	str	r3, [r2, #0]
 8011a76:	e013      	b.n	8011aa0 <tcp_process+0x744>
 8011a78:	4b2f      	ldr	r3, [pc, #188]	; (8011b38 <tcp_process+0x7dc>)
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	60fb      	str	r3, [r7, #12]
 8011a7e:	e00c      	b.n	8011a9a <tcp_process+0x73e>
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	68db      	ldr	r3, [r3, #12]
 8011a84:	687a      	ldr	r2, [r7, #4]
 8011a86:	429a      	cmp	r2, r3
 8011a88:	d104      	bne.n	8011a94 <tcp_process+0x738>
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	68da      	ldr	r2, [r3, #12]
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	60da      	str	r2, [r3, #12]
 8011a92:	e005      	b.n	8011aa0 <tcp_process+0x744>
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	68db      	ldr	r3, [r3, #12]
 8011a98:	60fb      	str	r3, [r7, #12]
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d1ef      	bne.n	8011a80 <tcp_process+0x724>
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	2200      	movs	r2, #0
 8011aa4:	60da      	str	r2, [r3, #12]
 8011aa6:	4b1f      	ldr	r3, [pc, #124]	; (8011b24 <tcp_process+0x7c8>)
 8011aa8:	2201      	movs	r2, #1
 8011aaa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	220a      	movs	r2, #10
 8011ab0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011ab2:	4b1d      	ldr	r3, [pc, #116]	; (8011b28 <tcp_process+0x7cc>)
 8011ab4:	681a      	ldr	r2, [r3, #0]
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	60da      	str	r2, [r3, #12]
 8011aba:	4a1b      	ldr	r2, [pc, #108]	; (8011b28 <tcp_process+0x7cc>)
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	6013      	str	r3, [r2, #0]
 8011ac0:	f003 f8a0 	bl	8014c04 <tcp_timer_needed>
      }
      break;
 8011ac4:	e026      	b.n	8011b14 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8011ac6:	6878      	ldr	r0, [r7, #4]
 8011ac8:	f000 f93c 	bl	8011d44 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011acc:	4b17      	ldr	r3, [pc, #92]	; (8011b2c <tcp_process+0x7d0>)
 8011ace:	781b      	ldrb	r3, [r3, #0]
 8011ad0:	f003 0310 	and.w	r3, r3, #16
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d01f      	beq.n	8011b18 <tcp_process+0x7bc>
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011adc:	4b14      	ldr	r3, [pc, #80]	; (8011b30 <tcp_process+0x7d4>)
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	429a      	cmp	r2, r3
 8011ae2:	d119      	bne.n	8011b18 <tcp_process+0x7bc>
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d115      	bne.n	8011b18 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011aec:	4b11      	ldr	r3, [pc, #68]	; (8011b34 <tcp_process+0x7d8>)
 8011aee:	781b      	ldrb	r3, [r3, #0]
 8011af0:	f043 0310 	orr.w	r3, r3, #16
 8011af4:	b2da      	uxtb	r2, r3
 8011af6:	4b0f      	ldr	r3, [pc, #60]	; (8011b34 <tcp_process+0x7d8>)
 8011af8:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011afa:	e00d      	b.n	8011b18 <tcp_process+0x7bc>
    default:
      break;
 8011afc:	bf00      	nop
 8011afe:	e00c      	b.n	8011b1a <tcp_process+0x7be>
      break;
 8011b00:	bf00      	nop
 8011b02:	e00a      	b.n	8011b1a <tcp_process+0x7be>
      break;
 8011b04:	bf00      	nop
 8011b06:	e008      	b.n	8011b1a <tcp_process+0x7be>
      break;
 8011b08:	bf00      	nop
 8011b0a:	e006      	b.n	8011b1a <tcp_process+0x7be>
      break;
 8011b0c:	bf00      	nop
 8011b0e:	e004      	b.n	8011b1a <tcp_process+0x7be>
      break;
 8011b10:	bf00      	nop
 8011b12:	e002      	b.n	8011b1a <tcp_process+0x7be>
      break;
 8011b14:	bf00      	nop
 8011b16:	e000      	b.n	8011b1a <tcp_process+0x7be>
      break;
 8011b18:	bf00      	nop
  }
  return ERR_OK;
 8011b1a:	2300      	movs	r3, #0
}
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	3724      	adds	r7, #36	; 0x24
 8011b20:	46bd      	mov	sp, r7
 8011b22:	bd90      	pop	{r4, r7, pc}
 8011b24:	20009500 	.word	0x20009500
 8011b28:	20009514 	.word	0x20009514
 8011b2c:	20000a84 	.word	0x20000a84
 8011b30:	20000a7c 	.word	0x20000a7c
 8011b34:	20000a85 	.word	0x20000a85
 8011b38:	20009504 	.word	0x20009504

08011b3c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011b3c:	b590      	push	{r4, r7, lr}
 8011b3e:	b085      	sub	sp, #20
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	6078      	str	r0, [r7, #4]
 8011b44:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d106      	bne.n	8011b5a <tcp_oos_insert_segment+0x1e>
 8011b4c:	4b3b      	ldr	r3, [pc, #236]	; (8011c3c <tcp_oos_insert_segment+0x100>)
 8011b4e:	f240 421f 	movw	r2, #1055	; 0x41f
 8011b52:	493b      	ldr	r1, [pc, #236]	; (8011c40 <tcp_oos_insert_segment+0x104>)
 8011b54:	483b      	ldr	r0, [pc, #236]	; (8011c44 <tcp_oos_insert_segment+0x108>)
 8011b56:	f006 fa29 	bl	8017fac <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	68db      	ldr	r3, [r3, #12]
 8011b5e:	899b      	ldrh	r3, [r3, #12]
 8011b60:	b29b      	uxth	r3, r3
 8011b62:	4618      	mov	r0, r3
 8011b64:	f7fb f902 	bl	800cd6c <lwip_htons>
 8011b68:	4603      	mov	r3, r0
 8011b6a:	b2db      	uxtb	r3, r3
 8011b6c:	f003 0301 	and.w	r3, r3, #1
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d028      	beq.n	8011bc6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011b74:	6838      	ldr	r0, [r7, #0]
 8011b76:	f7fe f97f 	bl	800fe78 <tcp_segs_free>
    next = NULL;
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	603b      	str	r3, [r7, #0]
 8011b7e:	e056      	b.n	8011c2e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011b80:	683b      	ldr	r3, [r7, #0]
 8011b82:	68db      	ldr	r3, [r3, #12]
 8011b84:	899b      	ldrh	r3, [r3, #12]
 8011b86:	b29b      	uxth	r3, r3
 8011b88:	4618      	mov	r0, r3
 8011b8a:	f7fb f8ef 	bl	800cd6c <lwip_htons>
 8011b8e:	4603      	mov	r3, r0
 8011b90:	b2db      	uxtb	r3, r3
 8011b92:	f003 0301 	and.w	r3, r3, #1
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d00d      	beq.n	8011bb6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	68db      	ldr	r3, [r3, #12]
 8011b9e:	899b      	ldrh	r3, [r3, #12]
 8011ba0:	b29c      	uxth	r4, r3
 8011ba2:	2001      	movs	r0, #1
 8011ba4:	f7fb f8e2 	bl	800cd6c <lwip_htons>
 8011ba8:	4603      	mov	r3, r0
 8011baa:	461a      	mov	r2, r3
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	68db      	ldr	r3, [r3, #12]
 8011bb0:	4322      	orrs	r2, r4
 8011bb2:	b292      	uxth	r2, r2
 8011bb4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8011bb6:	683b      	ldr	r3, [r7, #0]
 8011bb8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8011bba:	683b      	ldr	r3, [r7, #0]
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011bc0:	68f8      	ldr	r0, [r7, #12]
 8011bc2:	f7fe f96e 	bl	800fea2 <tcp_seg_free>
    while (next &&
 8011bc6:	683b      	ldr	r3, [r7, #0]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d00e      	beq.n	8011bea <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	891b      	ldrh	r3, [r3, #8]
 8011bd0:	461a      	mov	r2, r3
 8011bd2:	4b1d      	ldr	r3, [pc, #116]	; (8011c48 <tcp_oos_insert_segment+0x10c>)
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	441a      	add	r2, r3
 8011bd8:	683b      	ldr	r3, [r7, #0]
 8011bda:	68db      	ldr	r3, [r3, #12]
 8011bdc:	685b      	ldr	r3, [r3, #4]
 8011bde:	6839      	ldr	r1, [r7, #0]
 8011be0:	8909      	ldrh	r1, [r1, #8]
 8011be2:	440b      	add	r3, r1
 8011be4:	1ad3      	subs	r3, r2, r3
    while (next &&
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	daca      	bge.n	8011b80 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8011bea:	683b      	ldr	r3, [r7, #0]
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d01e      	beq.n	8011c2e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	891b      	ldrh	r3, [r3, #8]
 8011bf4:	461a      	mov	r2, r3
 8011bf6:	4b14      	ldr	r3, [pc, #80]	; (8011c48 <tcp_oos_insert_segment+0x10c>)
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	441a      	add	r2, r3
 8011bfc:	683b      	ldr	r3, [r7, #0]
 8011bfe:	68db      	ldr	r3, [r3, #12]
 8011c00:	685b      	ldr	r3, [r3, #4]
 8011c02:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	dd12      	ble.n	8011c2e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8011c08:	683b      	ldr	r3, [r7, #0]
 8011c0a:	68db      	ldr	r3, [r3, #12]
 8011c0c:	685b      	ldr	r3, [r3, #4]
 8011c0e:	b29a      	uxth	r2, r3
 8011c10:	4b0d      	ldr	r3, [pc, #52]	; (8011c48 <tcp_oos_insert_segment+0x10c>)
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	b29b      	uxth	r3, r3
 8011c16:	1ad3      	subs	r3, r2, r3
 8011c18:	b29a      	uxth	r2, r3
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	685a      	ldr	r2, [r3, #4]
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	891b      	ldrh	r3, [r3, #8]
 8011c26:	4619      	mov	r1, r3
 8011c28:	4610      	mov	r0, r2
 8011c2a:	f7fc f9cd 	bl	800dfc8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	683a      	ldr	r2, [r7, #0]
 8011c32:	601a      	str	r2, [r3, #0]
}
 8011c34:	bf00      	nop
 8011c36:	3714      	adds	r7, #20
 8011c38:	46bd      	mov	sp, r7
 8011c3a:	bd90      	pop	{r4, r7, pc}
 8011c3c:	0801c3bc 	.word	0x0801c3bc
 8011c40:	0801c67c 	.word	0x0801c67c
 8011c44:	0801c408 	.word	0x0801c408
 8011c48:	20000a78 	.word	0x20000a78

08011c4c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011c4c:	b5b0      	push	{r4, r5, r7, lr}
 8011c4e:	b086      	sub	sp, #24
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	60f8      	str	r0, [r7, #12]
 8011c54:	60b9      	str	r1, [r7, #8]
 8011c56:	607a      	str	r2, [r7, #4]
 8011c58:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8011c5a:	e03e      	b.n	8011cda <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011c5c:	68bb      	ldr	r3, [r7, #8]
 8011c5e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011c60:	68bb      	ldr	r3, [r7, #8]
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8011c66:	697b      	ldr	r3, [r7, #20]
 8011c68:	685b      	ldr	r3, [r3, #4]
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	f7fc fbba 	bl	800e3e4 <pbuf_clen>
 8011c70:	4603      	mov	r3, r0
 8011c72:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011c7a:	8a7a      	ldrh	r2, [r7, #18]
 8011c7c:	429a      	cmp	r2, r3
 8011c7e:	d906      	bls.n	8011c8e <tcp_free_acked_segments+0x42>
 8011c80:	4b2a      	ldr	r3, [pc, #168]	; (8011d2c <tcp_free_acked_segments+0xe0>)
 8011c82:	f240 4257 	movw	r2, #1111	; 0x457
 8011c86:	492a      	ldr	r1, [pc, #168]	; (8011d30 <tcp_free_acked_segments+0xe4>)
 8011c88:	482a      	ldr	r0, [pc, #168]	; (8011d34 <tcp_free_acked_segments+0xe8>)
 8011c8a:	f006 f98f 	bl	8017fac <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8011c94:	8a7b      	ldrh	r3, [r7, #18]
 8011c96:	1ad3      	subs	r3, r2, r3
 8011c98:	b29a      	uxth	r2, r3
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011ca0:	697b      	ldr	r3, [r7, #20]
 8011ca2:	891a      	ldrh	r2, [r3, #8]
 8011ca4:	4b24      	ldr	r3, [pc, #144]	; (8011d38 <tcp_free_acked_segments+0xec>)
 8011ca6:	881b      	ldrh	r3, [r3, #0]
 8011ca8:	4413      	add	r3, r2
 8011caa:	b29a      	uxth	r2, r3
 8011cac:	4b22      	ldr	r3, [pc, #136]	; (8011d38 <tcp_free_acked_segments+0xec>)
 8011cae:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011cb0:	6978      	ldr	r0, [r7, #20]
 8011cb2:	f7fe f8f6 	bl	800fea2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d00c      	beq.n	8011cda <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011cc0:	68bb      	ldr	r3, [r7, #8]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d109      	bne.n	8011cda <tcp_free_acked_segments+0x8e>
 8011cc6:	683b      	ldr	r3, [r7, #0]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d106      	bne.n	8011cda <tcp_free_acked_segments+0x8e>
 8011ccc:	4b17      	ldr	r3, [pc, #92]	; (8011d2c <tcp_free_acked_segments+0xe0>)
 8011cce:	f240 4261 	movw	r2, #1121	; 0x461
 8011cd2:	491a      	ldr	r1, [pc, #104]	; (8011d3c <tcp_free_acked_segments+0xf0>)
 8011cd4:	4817      	ldr	r0, [pc, #92]	; (8011d34 <tcp_free_acked_segments+0xe8>)
 8011cd6:	f006 f969 	bl	8017fac <iprintf>
  while (seg_list != NULL &&
 8011cda:	68bb      	ldr	r3, [r7, #8]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d020      	beq.n	8011d22 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011ce0:	68bb      	ldr	r3, [r7, #8]
 8011ce2:	68db      	ldr	r3, [r3, #12]
 8011ce4:	685b      	ldr	r3, [r3, #4]
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	f7fb f855 	bl	800cd96 <lwip_htonl>
 8011cec:	4604      	mov	r4, r0
 8011cee:	68bb      	ldr	r3, [r7, #8]
 8011cf0:	891b      	ldrh	r3, [r3, #8]
 8011cf2:	461d      	mov	r5, r3
 8011cf4:	68bb      	ldr	r3, [r7, #8]
 8011cf6:	68db      	ldr	r3, [r3, #12]
 8011cf8:	899b      	ldrh	r3, [r3, #12]
 8011cfa:	b29b      	uxth	r3, r3
 8011cfc:	4618      	mov	r0, r3
 8011cfe:	f7fb f835 	bl	800cd6c <lwip_htons>
 8011d02:	4603      	mov	r3, r0
 8011d04:	b2db      	uxtb	r3, r3
 8011d06:	f003 0303 	and.w	r3, r3, #3
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d001      	beq.n	8011d12 <tcp_free_acked_segments+0xc6>
 8011d0e:	2301      	movs	r3, #1
 8011d10:	e000      	b.n	8011d14 <tcp_free_acked_segments+0xc8>
 8011d12:	2300      	movs	r3, #0
 8011d14:	442b      	add	r3, r5
 8011d16:	18e2      	adds	r2, r4, r3
 8011d18:	4b09      	ldr	r3, [pc, #36]	; (8011d40 <tcp_free_acked_segments+0xf4>)
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	dd9c      	ble.n	8011c5c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8011d22:	68bb      	ldr	r3, [r7, #8]
}
 8011d24:	4618      	mov	r0, r3
 8011d26:	3718      	adds	r7, #24
 8011d28:	46bd      	mov	sp, r7
 8011d2a:	bdb0      	pop	{r4, r5, r7, pc}
 8011d2c:	0801c3bc 	.word	0x0801c3bc
 8011d30:	0801c6a4 	.word	0x0801c6a4
 8011d34:	0801c408 	.word	0x0801c408
 8011d38:	20000a80 	.word	0x20000a80
 8011d3c:	0801c6cc 	.word	0x0801c6cc
 8011d40:	20000a7c 	.word	0x20000a7c

08011d44 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8011d44:	b5b0      	push	{r4, r5, r7, lr}
 8011d46:	b094      	sub	sp, #80	; 0x50
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8011d4c:	2300      	movs	r3, #0
 8011d4e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d106      	bne.n	8011d64 <tcp_receive+0x20>
 8011d56:	4ba6      	ldr	r3, [pc, #664]	; (8011ff0 <tcp_receive+0x2ac>)
 8011d58:	f240 427b 	movw	r2, #1147	; 0x47b
 8011d5c:	49a5      	ldr	r1, [pc, #660]	; (8011ff4 <tcp_receive+0x2b0>)
 8011d5e:	48a6      	ldr	r0, [pc, #664]	; (8011ff8 <tcp_receive+0x2b4>)
 8011d60:	f006 f924 	bl	8017fac <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	7d1b      	ldrb	r3, [r3, #20]
 8011d68:	2b03      	cmp	r3, #3
 8011d6a:	d806      	bhi.n	8011d7a <tcp_receive+0x36>
 8011d6c:	4ba0      	ldr	r3, [pc, #640]	; (8011ff0 <tcp_receive+0x2ac>)
 8011d6e:	f240 427c 	movw	r2, #1148	; 0x47c
 8011d72:	49a2      	ldr	r1, [pc, #648]	; (8011ffc <tcp_receive+0x2b8>)
 8011d74:	48a0      	ldr	r0, [pc, #640]	; (8011ff8 <tcp_receive+0x2b4>)
 8011d76:	f006 f919 	bl	8017fac <iprintf>

  if (flags & TCP_ACK) {
 8011d7a:	4ba1      	ldr	r3, [pc, #644]	; (8012000 <tcp_receive+0x2bc>)
 8011d7c:	781b      	ldrb	r3, [r3, #0]
 8011d7e:	f003 0310 	and.w	r3, r3, #16
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	f000 8263 	beq.w	801224e <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011d8e:	461a      	mov	r2, r3
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d94:	4413      	add	r3, r2
 8011d96:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011d9c:	4b99      	ldr	r3, [pc, #612]	; (8012004 <tcp_receive+0x2c0>)
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	1ad3      	subs	r3, r2, r3
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	db1b      	blt.n	8011dde <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011daa:	4b96      	ldr	r3, [pc, #600]	; (8012004 <tcp_receive+0x2c0>)
 8011dac:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011dae:	429a      	cmp	r2, r3
 8011db0:	d106      	bne.n	8011dc0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011db6:	4b94      	ldr	r3, [pc, #592]	; (8012008 <tcp_receive+0x2c4>)
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	1ad3      	subs	r3, r2, r3
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	db0e      	blt.n	8011dde <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011dc4:	4b90      	ldr	r3, [pc, #576]	; (8012008 <tcp_receive+0x2c4>)
 8011dc6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011dc8:	429a      	cmp	r2, r3
 8011dca:	d125      	bne.n	8011e18 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011dcc:	4b8f      	ldr	r3, [pc, #572]	; (801200c <tcp_receive+0x2c8>)
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	89db      	ldrh	r3, [r3, #14]
 8011dd2:	b29a      	uxth	r2, r3
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011dda:	429a      	cmp	r2, r3
 8011ddc:	d91c      	bls.n	8011e18 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8011dde:	4b8b      	ldr	r3, [pc, #556]	; (801200c <tcp_receive+0x2c8>)
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	89db      	ldrh	r3, [r3, #14]
 8011de4:	b29a      	uxth	r2, r3
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011df8:	429a      	cmp	r2, r3
 8011dfa:	d205      	bcs.n	8011e08 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8011e08:	4b7e      	ldr	r3, [pc, #504]	; (8012004 <tcp_receive+0x2c0>)
 8011e0a:	681a      	ldr	r2, [r3, #0]
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8011e10:	4b7d      	ldr	r3, [pc, #500]	; (8012008 <tcp_receive+0x2c4>)
 8011e12:	681a      	ldr	r2, [r3, #0]
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8011e18:	4b7b      	ldr	r3, [pc, #492]	; (8012008 <tcp_receive+0x2c4>)
 8011e1a:	681a      	ldr	r2, [r3, #0]
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e20:	1ad3      	subs	r3, r2, r3
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	dc58      	bgt.n	8011ed8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8011e26:	4b7a      	ldr	r3, [pc, #488]	; (8012010 <tcp_receive+0x2cc>)
 8011e28:	881b      	ldrh	r3, [r3, #0]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d14b      	bne.n	8011ec6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011e32:	687a      	ldr	r2, [r7, #4]
 8011e34:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8011e38:	4413      	add	r3, r2
 8011e3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011e3c:	429a      	cmp	r2, r3
 8011e3e:	d142      	bne.n	8011ec6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	db3d      	blt.n	8011ec6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011e4e:	4b6e      	ldr	r3, [pc, #440]	; (8012008 <tcp_receive+0x2c4>)
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	429a      	cmp	r2, r3
 8011e54:	d137      	bne.n	8011ec6 <tcp_receive+0x182>
              found_dupack = 1;
 8011e56:	2301      	movs	r3, #1
 8011e58:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011e60:	2bff      	cmp	r3, #255	; 0xff
 8011e62:	d007      	beq.n	8011e74 <tcp_receive+0x130>
                ++pcb->dupacks;
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011e6a:	3301      	adds	r3, #1
 8011e6c:	b2da      	uxtb	r2, r3
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011e7a:	2b03      	cmp	r3, #3
 8011e7c:	d91b      	bls.n	8011eb6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e88:	4413      	add	r3, r2
 8011e8a:	b29a      	uxth	r2, r3
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011e92:	429a      	cmp	r2, r3
 8011e94:	d30a      	bcc.n	8011eac <tcp_receive+0x168>
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ea0:	4413      	add	r3, r2
 8011ea2:	b29a      	uxth	r2, r3
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011eaa:	e004      	b.n	8011eb6 <tcp_receive+0x172>
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011eb2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011ebc:	2b02      	cmp	r3, #2
 8011ebe:	d902      	bls.n	8011ec6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011ec0:	6878      	ldr	r0, [r7, #4]
 8011ec2:	f002 fb41 	bl	8014548 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8011ec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	f040 8160 	bne.w	801218e <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	2200      	movs	r2, #0
 8011ed2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011ed6:	e15a      	b.n	801218e <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011ed8:	4b4b      	ldr	r3, [pc, #300]	; (8012008 <tcp_receive+0x2c4>)
 8011eda:	681a      	ldr	r2, [r3, #0]
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011ee0:	1ad3      	subs	r3, r2, r3
 8011ee2:	3b01      	subs	r3, #1
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	f2c0 814d 	blt.w	8012184 <tcp_receive+0x440>
 8011eea:	4b47      	ldr	r3, [pc, #284]	; (8012008 <tcp_receive+0x2c4>)
 8011eec:	681a      	ldr	r2, [r3, #0]
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011ef2:	1ad3      	subs	r3, r2, r3
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	f300 8145 	bgt.w	8012184 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	8b5b      	ldrh	r3, [r3, #26]
 8011efe:	f003 0304 	and.w	r3, r3, #4
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d010      	beq.n	8011f28 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	8b5b      	ldrh	r3, [r3, #26]
 8011f0a:	f023 0304 	bic.w	r3, r3, #4
 8011f0e:	b29a      	uxth	r2, r3
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	2200      	movs	r2, #0
 8011f24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	2200      	movs	r2, #0
 8011f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011f36:	10db      	asrs	r3, r3, #3
 8011f38:	b21b      	sxth	r3, r3
 8011f3a:	b29a      	uxth	r2, r3
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011f42:	b29b      	uxth	r3, r3
 8011f44:	4413      	add	r3, r2
 8011f46:	b29b      	uxth	r3, r3
 8011f48:	b21a      	sxth	r2, r3
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011f50:	4b2d      	ldr	r3, [pc, #180]	; (8012008 <tcp_receive+0x2c4>)
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	b29a      	uxth	r2, r3
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011f5a:	b29b      	uxth	r3, r3
 8011f5c:	1ad3      	subs	r3, r2, r3
 8011f5e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	2200      	movs	r2, #0
 8011f64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8011f68:	4b27      	ldr	r3, [pc, #156]	; (8012008 <tcp_receive+0x2c4>)
 8011f6a:	681a      	ldr	r2, [r3, #0]
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	7d1b      	ldrb	r3, [r3, #20]
 8011f74:	2b03      	cmp	r3, #3
 8011f76:	f240 8096 	bls.w	80120a6 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011f86:	429a      	cmp	r2, r3
 8011f88:	d244      	bcs.n	8012014 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	8b5b      	ldrh	r3, [r3, #26]
 8011f8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d001      	beq.n	8011f9a <tcp_receive+0x256>
 8011f96:	2301      	movs	r3, #1
 8011f98:	e000      	b.n	8011f9c <tcp_receive+0x258>
 8011f9a:	2302      	movs	r3, #2
 8011f9c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8011fa0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011fa4:	b29a      	uxth	r2, r3
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011faa:	fb12 f303 	smulbb	r3, r2, r3
 8011fae:	b29b      	uxth	r3, r3
 8011fb0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011fb2:	4293      	cmp	r3, r2
 8011fb4:	bf28      	it	cs
 8011fb6:	4613      	movcs	r3, r2
 8011fb8:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011fc0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011fc2:	4413      	add	r3, r2
 8011fc4:	b29a      	uxth	r2, r3
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011fcc:	429a      	cmp	r2, r3
 8011fce:	d309      	bcc.n	8011fe4 <tcp_receive+0x2a0>
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011fd6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011fd8:	4413      	add	r3, r2
 8011fda:	b29a      	uxth	r2, r3
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011fe2:	e060      	b.n	80120a6 <tcp_receive+0x362>
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011fea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011fee:	e05a      	b.n	80120a6 <tcp_receive+0x362>
 8011ff0:	0801c3bc 	.word	0x0801c3bc
 8011ff4:	0801c6ec 	.word	0x0801c6ec
 8011ff8:	0801c408 	.word	0x0801c408
 8011ffc:	0801c708 	.word	0x0801c708
 8012000:	20000a84 	.word	0x20000a84
 8012004:	20000a78 	.word	0x20000a78
 8012008:	20000a7c 	.word	0x20000a7c
 801200c:	20000a68 	.word	0x20000a68
 8012010:	20000a82 	.word	0x20000a82
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801201a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801201c:	4413      	add	r3, r2
 801201e:	b29a      	uxth	r2, r3
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012026:	429a      	cmp	r2, r3
 8012028:	d309      	bcc.n	801203e <tcp_receive+0x2fa>
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012030:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012032:	4413      	add	r3, r2
 8012034:	b29a      	uxth	r2, r3
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801203c:	e004      	b.n	8012048 <tcp_receive+0x304>
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012044:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012054:	429a      	cmp	r2, r3
 8012056:	d326      	bcc.n	80120a6 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012064:	1ad3      	subs	r3, r2, r3
 8012066:	b29a      	uxth	r2, r3
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012078:	4413      	add	r3, r2
 801207a:	b29a      	uxth	r2, r3
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012082:	429a      	cmp	r2, r3
 8012084:	d30a      	bcc.n	801209c <tcp_receive+0x358>
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012090:	4413      	add	r3, r2
 8012092:	b29a      	uxth	r2, r3
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801209a:	e004      	b.n	80120a6 <tcp_receive+0x362>
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80120a2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120ae:	4a98      	ldr	r2, [pc, #608]	; (8012310 <tcp_receive+0x5cc>)
 80120b0:	6878      	ldr	r0, [r7, #4]
 80120b2:	f7ff fdcb 	bl	8011c4c <tcp_free_acked_segments>
 80120b6:	4602      	mov	r2, r0
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120c4:	4a93      	ldr	r2, [pc, #588]	; (8012314 <tcp_receive+0x5d0>)
 80120c6:	6878      	ldr	r0, [r7, #4]
 80120c8:	f7ff fdc0 	bl	8011c4c <tcp_free_acked_segments>
 80120cc:	4602      	mov	r2, r0
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d104      	bne.n	80120e4 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80120e0:	861a      	strh	r2, [r3, #48]	; 0x30
 80120e2:	e002      	b.n	80120ea <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	2200      	movs	r2, #0
 80120e8:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	2200      	movs	r2, #0
 80120ee:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d103      	bne.n	8012100 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	2200      	movs	r2, #0
 80120fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012106:	4b84      	ldr	r3, [pc, #528]	; (8012318 <tcp_receive+0x5d4>)
 8012108:	881b      	ldrh	r3, [r3, #0]
 801210a:	4413      	add	r3, r2
 801210c:	b29a      	uxth	r2, r3
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	8b5b      	ldrh	r3, [r3, #26]
 8012118:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801211c:	2b00      	cmp	r3, #0
 801211e:	d035      	beq.n	801218c <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012124:	2b00      	cmp	r3, #0
 8012126:	d118      	bne.n	801215a <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801212c:	2b00      	cmp	r3, #0
 801212e:	d00c      	beq.n	801214a <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012138:	68db      	ldr	r3, [r3, #12]
 801213a:	685b      	ldr	r3, [r3, #4]
 801213c:	4618      	mov	r0, r3
 801213e:	f7fa fe2a 	bl	800cd96 <lwip_htonl>
 8012142:	4603      	mov	r3, r0
 8012144:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8012146:	2b00      	cmp	r3, #0
 8012148:	dc20      	bgt.n	801218c <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	8b5b      	ldrh	r3, [r3, #26]
 801214e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012152:	b29a      	uxth	r2, r3
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012158:	e018      	b.n	801218c <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012162:	68db      	ldr	r3, [r3, #12]
 8012164:	685b      	ldr	r3, [r3, #4]
 8012166:	4618      	mov	r0, r3
 8012168:	f7fa fe15 	bl	800cd96 <lwip_htonl>
 801216c:	4603      	mov	r3, r0
 801216e:	1ae3      	subs	r3, r4, r3
 8012170:	2b00      	cmp	r3, #0
 8012172:	dc0b      	bgt.n	801218c <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	8b5b      	ldrh	r3, [r3, #26]
 8012178:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801217c:	b29a      	uxth	r2, r3
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012182:	e003      	b.n	801218c <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8012184:	6878      	ldr	r0, [r7, #4]
 8012186:	f002 fbcd 	bl	8014924 <tcp_send_empty_ack>
 801218a:	e000      	b.n	801218e <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801218c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012192:	2b00      	cmp	r3, #0
 8012194:	d05b      	beq.n	801224e <tcp_receive+0x50a>
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801219a:	4b60      	ldr	r3, [pc, #384]	; (801231c <tcp_receive+0x5d8>)
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	1ad3      	subs	r3, r2, r3
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	da54      	bge.n	801224e <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80121a4:	4b5e      	ldr	r3, [pc, #376]	; (8012320 <tcp_receive+0x5dc>)
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	b29a      	uxth	r2, r3
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80121ae:	b29b      	uxth	r3, r3
 80121b0:	1ad3      	subs	r3, r2, r3
 80121b2:	b29b      	uxth	r3, r3
 80121b4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80121b8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80121c2:	10db      	asrs	r3, r3, #3
 80121c4:	b21b      	sxth	r3, r3
 80121c6:	b29b      	uxth	r3, r3
 80121c8:	1ad3      	subs	r3, r2, r3
 80121ca:	b29b      	uxth	r3, r3
 80121cc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80121d6:	b29a      	uxth	r2, r3
 80121d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80121dc:	4413      	add	r3, r2
 80121de:	b29b      	uxth	r3, r3
 80121e0:	b21a      	sxth	r2, r3
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80121e6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	da05      	bge.n	80121fa <tcp_receive+0x4b6>
        m = (s16_t) - m;
 80121ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80121f2:	425b      	negs	r3, r3
 80121f4:	b29b      	uxth	r3, r3
 80121f6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80121fa:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012204:	109b      	asrs	r3, r3, #2
 8012206:	b21b      	sxth	r3, r3
 8012208:	b29b      	uxth	r3, r3
 801220a:	1ad3      	subs	r3, r2, r3
 801220c:	b29b      	uxth	r3, r3
 801220e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012218:	b29a      	uxth	r2, r3
 801221a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801221e:	4413      	add	r3, r2
 8012220:	b29b      	uxth	r3, r3
 8012222:	b21a      	sxth	r2, r3
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801222e:	10db      	asrs	r3, r3, #3
 8012230:	b21b      	sxth	r3, r3
 8012232:	b29a      	uxth	r2, r3
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801223a:	b29b      	uxth	r3, r3
 801223c:	4413      	add	r3, r2
 801223e:	b29b      	uxth	r3, r3
 8012240:	b21a      	sxth	r2, r3
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	2200      	movs	r2, #0
 801224c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801224e:	4b35      	ldr	r3, [pc, #212]	; (8012324 <tcp_receive+0x5e0>)
 8012250:	881b      	ldrh	r3, [r3, #0]
 8012252:	2b00      	cmp	r3, #0
 8012254:	f000 84e1 	beq.w	8012c1a <tcp_receive+0xed6>
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	7d1b      	ldrb	r3, [r3, #20]
 801225c:	2b06      	cmp	r3, #6
 801225e:	f200 84dc 	bhi.w	8012c1a <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012266:	4b30      	ldr	r3, [pc, #192]	; (8012328 <tcp_receive+0x5e4>)
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	1ad3      	subs	r3, r2, r3
 801226c:	3b01      	subs	r3, #1
 801226e:	2b00      	cmp	r3, #0
 8012270:	f2c0 808e 	blt.w	8012390 <tcp_receive+0x64c>
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012278:	4b2a      	ldr	r3, [pc, #168]	; (8012324 <tcp_receive+0x5e0>)
 801227a:	881b      	ldrh	r3, [r3, #0]
 801227c:	4619      	mov	r1, r3
 801227e:	4b2a      	ldr	r3, [pc, #168]	; (8012328 <tcp_receive+0x5e4>)
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	440b      	add	r3, r1
 8012284:	1ad3      	subs	r3, r2, r3
 8012286:	3301      	adds	r3, #1
 8012288:	2b00      	cmp	r3, #0
 801228a:	f300 8081 	bgt.w	8012390 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801228e:	4b27      	ldr	r3, [pc, #156]	; (801232c <tcp_receive+0x5e8>)
 8012290:	685b      	ldr	r3, [r3, #4]
 8012292:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012298:	4b23      	ldr	r3, [pc, #140]	; (8012328 <tcp_receive+0x5e4>)
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	1ad3      	subs	r3, r2, r3
 801229e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80122a0:	4b22      	ldr	r3, [pc, #136]	; (801232c <tcp_receive+0x5e8>)
 80122a2:	685b      	ldr	r3, [r3, #4]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d106      	bne.n	80122b6 <tcp_receive+0x572>
 80122a8:	4b21      	ldr	r3, [pc, #132]	; (8012330 <tcp_receive+0x5ec>)
 80122aa:	f240 5294 	movw	r2, #1428	; 0x594
 80122ae:	4921      	ldr	r1, [pc, #132]	; (8012334 <tcp_receive+0x5f0>)
 80122b0:	4821      	ldr	r0, [pc, #132]	; (8012338 <tcp_receive+0x5f4>)
 80122b2:	f005 fe7b 	bl	8017fac <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80122b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122b8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80122bc:	4293      	cmp	r3, r2
 80122be:	d906      	bls.n	80122ce <tcp_receive+0x58a>
 80122c0:	4b1b      	ldr	r3, [pc, #108]	; (8012330 <tcp_receive+0x5ec>)
 80122c2:	f240 5295 	movw	r2, #1429	; 0x595
 80122c6:	491d      	ldr	r1, [pc, #116]	; (801233c <tcp_receive+0x5f8>)
 80122c8:	481b      	ldr	r0, [pc, #108]	; (8012338 <tcp_receive+0x5f4>)
 80122ca:	f005 fe6f 	bl	8017fac <iprintf>
      off = (u16_t)off32;
 80122ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122d0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80122d4:	4b15      	ldr	r3, [pc, #84]	; (801232c <tcp_receive+0x5e8>)
 80122d6:	685b      	ldr	r3, [r3, #4]
 80122d8:	891b      	ldrh	r3, [r3, #8]
 80122da:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80122de:	429a      	cmp	r2, r3
 80122e0:	d906      	bls.n	80122f0 <tcp_receive+0x5ac>
 80122e2:	4b13      	ldr	r3, [pc, #76]	; (8012330 <tcp_receive+0x5ec>)
 80122e4:	f240 5297 	movw	r2, #1431	; 0x597
 80122e8:	4915      	ldr	r1, [pc, #84]	; (8012340 <tcp_receive+0x5fc>)
 80122ea:	4813      	ldr	r0, [pc, #76]	; (8012338 <tcp_receive+0x5f4>)
 80122ec:	f005 fe5e 	bl	8017fac <iprintf>
      inseg.len -= off;
 80122f0:	4b0e      	ldr	r3, [pc, #56]	; (801232c <tcp_receive+0x5e8>)
 80122f2:	891a      	ldrh	r2, [r3, #8]
 80122f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80122f8:	1ad3      	subs	r3, r2, r3
 80122fa:	b29a      	uxth	r2, r3
 80122fc:	4b0b      	ldr	r3, [pc, #44]	; (801232c <tcp_receive+0x5e8>)
 80122fe:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8012300:	4b0a      	ldr	r3, [pc, #40]	; (801232c <tcp_receive+0x5e8>)
 8012302:	685b      	ldr	r3, [r3, #4]
 8012304:	891a      	ldrh	r2, [r3, #8]
 8012306:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801230a:	1ad3      	subs	r3, r2, r3
 801230c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801230e:	e029      	b.n	8012364 <tcp_receive+0x620>
 8012310:	0801c724 	.word	0x0801c724
 8012314:	0801c72c 	.word	0x0801c72c
 8012318:	20000a80 	.word	0x20000a80
 801231c:	20000a7c 	.word	0x20000a7c
 8012320:	20009508 	.word	0x20009508
 8012324:	20000a82 	.word	0x20000a82
 8012328:	20000a78 	.word	0x20000a78
 801232c:	20000a58 	.word	0x20000a58
 8012330:	0801c3bc 	.word	0x0801c3bc
 8012334:	0801c734 	.word	0x0801c734
 8012338:	0801c408 	.word	0x0801c408
 801233c:	0801c744 	.word	0x0801c744
 8012340:	0801c754 	.word	0x0801c754
        off -= p->len;
 8012344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012346:	895b      	ldrh	r3, [r3, #10]
 8012348:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801234c:	1ad3      	subs	r3, r2, r3
 801234e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8012352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012354:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012356:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8012358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801235a:	2200      	movs	r2, #0
 801235c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801235e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8012364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012366:	895b      	ldrh	r3, [r3, #10]
 8012368:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801236c:	429a      	cmp	r2, r3
 801236e:	d8e9      	bhi.n	8012344 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8012370:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012374:	4619      	mov	r1, r3
 8012376:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012378:	f7fb ff26 	bl	800e1c8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012380:	4a91      	ldr	r2, [pc, #580]	; (80125c8 <tcp_receive+0x884>)
 8012382:	6013      	str	r3, [r2, #0]
 8012384:	4b91      	ldr	r3, [pc, #580]	; (80125cc <tcp_receive+0x888>)
 8012386:	68db      	ldr	r3, [r3, #12]
 8012388:	4a8f      	ldr	r2, [pc, #572]	; (80125c8 <tcp_receive+0x884>)
 801238a:	6812      	ldr	r2, [r2, #0]
 801238c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801238e:	e00d      	b.n	80123ac <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8012390:	4b8d      	ldr	r3, [pc, #564]	; (80125c8 <tcp_receive+0x884>)
 8012392:	681a      	ldr	r2, [r3, #0]
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012398:	1ad3      	subs	r3, r2, r3
 801239a:	2b00      	cmp	r3, #0
 801239c:	da06      	bge.n	80123ac <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	8b5b      	ldrh	r3, [r3, #26]
 80123a2:	f043 0302 	orr.w	r3, r3, #2
 80123a6:	b29a      	uxth	r2, r3
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80123ac:	4b86      	ldr	r3, [pc, #536]	; (80125c8 <tcp_receive+0x884>)
 80123ae:	681a      	ldr	r2, [r3, #0]
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123b4:	1ad3      	subs	r3, r2, r3
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	f2c0 842a 	blt.w	8012c10 <tcp_receive+0xecc>
 80123bc:	4b82      	ldr	r3, [pc, #520]	; (80125c8 <tcp_receive+0x884>)
 80123be:	681a      	ldr	r2, [r3, #0]
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123c4:	6879      	ldr	r1, [r7, #4]
 80123c6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80123c8:	440b      	add	r3, r1
 80123ca:	1ad3      	subs	r3, r2, r3
 80123cc:	3301      	adds	r3, #1
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	f300 841e 	bgt.w	8012c10 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80123d8:	4b7b      	ldr	r3, [pc, #492]	; (80125c8 <tcp_receive+0x884>)
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	429a      	cmp	r2, r3
 80123de:	f040 829a 	bne.w	8012916 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80123e2:	4b7a      	ldr	r3, [pc, #488]	; (80125cc <tcp_receive+0x888>)
 80123e4:	891c      	ldrh	r4, [r3, #8]
 80123e6:	4b79      	ldr	r3, [pc, #484]	; (80125cc <tcp_receive+0x888>)
 80123e8:	68db      	ldr	r3, [r3, #12]
 80123ea:	899b      	ldrh	r3, [r3, #12]
 80123ec:	b29b      	uxth	r3, r3
 80123ee:	4618      	mov	r0, r3
 80123f0:	f7fa fcbc 	bl	800cd6c <lwip_htons>
 80123f4:	4603      	mov	r3, r0
 80123f6:	b2db      	uxtb	r3, r3
 80123f8:	f003 0303 	and.w	r3, r3, #3
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d001      	beq.n	8012404 <tcp_receive+0x6c0>
 8012400:	2301      	movs	r3, #1
 8012402:	e000      	b.n	8012406 <tcp_receive+0x6c2>
 8012404:	2300      	movs	r3, #0
 8012406:	4423      	add	r3, r4
 8012408:	b29a      	uxth	r2, r3
 801240a:	4b71      	ldr	r3, [pc, #452]	; (80125d0 <tcp_receive+0x88c>)
 801240c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012412:	4b6f      	ldr	r3, [pc, #444]	; (80125d0 <tcp_receive+0x88c>)
 8012414:	881b      	ldrh	r3, [r3, #0]
 8012416:	429a      	cmp	r2, r3
 8012418:	d275      	bcs.n	8012506 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801241a:	4b6c      	ldr	r3, [pc, #432]	; (80125cc <tcp_receive+0x888>)
 801241c:	68db      	ldr	r3, [r3, #12]
 801241e:	899b      	ldrh	r3, [r3, #12]
 8012420:	b29b      	uxth	r3, r3
 8012422:	4618      	mov	r0, r3
 8012424:	f7fa fca2 	bl	800cd6c <lwip_htons>
 8012428:	4603      	mov	r3, r0
 801242a:	b2db      	uxtb	r3, r3
 801242c:	f003 0301 	and.w	r3, r3, #1
 8012430:	2b00      	cmp	r3, #0
 8012432:	d01f      	beq.n	8012474 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012434:	4b65      	ldr	r3, [pc, #404]	; (80125cc <tcp_receive+0x888>)
 8012436:	68db      	ldr	r3, [r3, #12]
 8012438:	899b      	ldrh	r3, [r3, #12]
 801243a:	b29b      	uxth	r3, r3
 801243c:	b21b      	sxth	r3, r3
 801243e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012442:	b21c      	sxth	r4, r3
 8012444:	4b61      	ldr	r3, [pc, #388]	; (80125cc <tcp_receive+0x888>)
 8012446:	68db      	ldr	r3, [r3, #12]
 8012448:	899b      	ldrh	r3, [r3, #12]
 801244a:	b29b      	uxth	r3, r3
 801244c:	4618      	mov	r0, r3
 801244e:	f7fa fc8d 	bl	800cd6c <lwip_htons>
 8012452:	4603      	mov	r3, r0
 8012454:	b2db      	uxtb	r3, r3
 8012456:	b29b      	uxth	r3, r3
 8012458:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801245c:	b29b      	uxth	r3, r3
 801245e:	4618      	mov	r0, r3
 8012460:	f7fa fc84 	bl	800cd6c <lwip_htons>
 8012464:	4603      	mov	r3, r0
 8012466:	b21b      	sxth	r3, r3
 8012468:	4323      	orrs	r3, r4
 801246a:	b21a      	sxth	r2, r3
 801246c:	4b57      	ldr	r3, [pc, #348]	; (80125cc <tcp_receive+0x888>)
 801246e:	68db      	ldr	r3, [r3, #12]
 8012470:	b292      	uxth	r2, r2
 8012472:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012478:	4b54      	ldr	r3, [pc, #336]	; (80125cc <tcp_receive+0x888>)
 801247a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801247c:	4b53      	ldr	r3, [pc, #332]	; (80125cc <tcp_receive+0x888>)
 801247e:	68db      	ldr	r3, [r3, #12]
 8012480:	899b      	ldrh	r3, [r3, #12]
 8012482:	b29b      	uxth	r3, r3
 8012484:	4618      	mov	r0, r3
 8012486:	f7fa fc71 	bl	800cd6c <lwip_htons>
 801248a:	4603      	mov	r3, r0
 801248c:	b2db      	uxtb	r3, r3
 801248e:	f003 0302 	and.w	r3, r3, #2
 8012492:	2b00      	cmp	r3, #0
 8012494:	d005      	beq.n	80124a2 <tcp_receive+0x75e>
            inseg.len -= 1;
 8012496:	4b4d      	ldr	r3, [pc, #308]	; (80125cc <tcp_receive+0x888>)
 8012498:	891b      	ldrh	r3, [r3, #8]
 801249a:	3b01      	subs	r3, #1
 801249c:	b29a      	uxth	r2, r3
 801249e:	4b4b      	ldr	r3, [pc, #300]	; (80125cc <tcp_receive+0x888>)
 80124a0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80124a2:	4b4a      	ldr	r3, [pc, #296]	; (80125cc <tcp_receive+0x888>)
 80124a4:	685b      	ldr	r3, [r3, #4]
 80124a6:	4a49      	ldr	r2, [pc, #292]	; (80125cc <tcp_receive+0x888>)
 80124a8:	8912      	ldrh	r2, [r2, #8]
 80124aa:	4611      	mov	r1, r2
 80124ac:	4618      	mov	r0, r3
 80124ae:	f7fb fd8b 	bl	800dfc8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80124b2:	4b46      	ldr	r3, [pc, #280]	; (80125cc <tcp_receive+0x888>)
 80124b4:	891c      	ldrh	r4, [r3, #8]
 80124b6:	4b45      	ldr	r3, [pc, #276]	; (80125cc <tcp_receive+0x888>)
 80124b8:	68db      	ldr	r3, [r3, #12]
 80124ba:	899b      	ldrh	r3, [r3, #12]
 80124bc:	b29b      	uxth	r3, r3
 80124be:	4618      	mov	r0, r3
 80124c0:	f7fa fc54 	bl	800cd6c <lwip_htons>
 80124c4:	4603      	mov	r3, r0
 80124c6:	b2db      	uxtb	r3, r3
 80124c8:	f003 0303 	and.w	r3, r3, #3
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d001      	beq.n	80124d4 <tcp_receive+0x790>
 80124d0:	2301      	movs	r3, #1
 80124d2:	e000      	b.n	80124d6 <tcp_receive+0x792>
 80124d4:	2300      	movs	r3, #0
 80124d6:	4423      	add	r3, r4
 80124d8:	b29a      	uxth	r2, r3
 80124da:	4b3d      	ldr	r3, [pc, #244]	; (80125d0 <tcp_receive+0x88c>)
 80124dc:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80124de:	4b3c      	ldr	r3, [pc, #240]	; (80125d0 <tcp_receive+0x88c>)
 80124e0:	881b      	ldrh	r3, [r3, #0]
 80124e2:	461a      	mov	r2, r3
 80124e4:	4b38      	ldr	r3, [pc, #224]	; (80125c8 <tcp_receive+0x884>)
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	441a      	add	r2, r3
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124ee:	6879      	ldr	r1, [r7, #4]
 80124f0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80124f2:	440b      	add	r3, r1
 80124f4:	429a      	cmp	r2, r3
 80124f6:	d006      	beq.n	8012506 <tcp_receive+0x7c2>
 80124f8:	4b36      	ldr	r3, [pc, #216]	; (80125d4 <tcp_receive+0x890>)
 80124fa:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80124fe:	4936      	ldr	r1, [pc, #216]	; (80125d8 <tcp_receive+0x894>)
 8012500:	4836      	ldr	r0, [pc, #216]	; (80125dc <tcp_receive+0x898>)
 8012502:	f005 fd53 	bl	8017fac <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801250a:	2b00      	cmp	r3, #0
 801250c:	f000 80e7 	beq.w	80126de <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012510:	4b2e      	ldr	r3, [pc, #184]	; (80125cc <tcp_receive+0x888>)
 8012512:	68db      	ldr	r3, [r3, #12]
 8012514:	899b      	ldrh	r3, [r3, #12]
 8012516:	b29b      	uxth	r3, r3
 8012518:	4618      	mov	r0, r3
 801251a:	f7fa fc27 	bl	800cd6c <lwip_htons>
 801251e:	4603      	mov	r3, r0
 8012520:	b2db      	uxtb	r3, r3
 8012522:	f003 0301 	and.w	r3, r3, #1
 8012526:	2b00      	cmp	r3, #0
 8012528:	d010      	beq.n	801254c <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801252a:	e00a      	b.n	8012542 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012530:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012536:	681a      	ldr	r2, [r3, #0]
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801253c:	68f8      	ldr	r0, [r7, #12]
 801253e:	f7fd fcb0 	bl	800fea2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012546:	2b00      	cmp	r3, #0
 8012548:	d1f0      	bne.n	801252c <tcp_receive+0x7e8>
 801254a:	e0c8      	b.n	80126de <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012550:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8012552:	e052      	b.n	80125fa <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012556:	68db      	ldr	r3, [r3, #12]
 8012558:	899b      	ldrh	r3, [r3, #12]
 801255a:	b29b      	uxth	r3, r3
 801255c:	4618      	mov	r0, r3
 801255e:	f7fa fc05 	bl	800cd6c <lwip_htons>
 8012562:	4603      	mov	r3, r0
 8012564:	b2db      	uxtb	r3, r3
 8012566:	f003 0301 	and.w	r3, r3, #1
 801256a:	2b00      	cmp	r3, #0
 801256c:	d03d      	beq.n	80125ea <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801256e:	4b17      	ldr	r3, [pc, #92]	; (80125cc <tcp_receive+0x888>)
 8012570:	68db      	ldr	r3, [r3, #12]
 8012572:	899b      	ldrh	r3, [r3, #12]
 8012574:	b29b      	uxth	r3, r3
 8012576:	4618      	mov	r0, r3
 8012578:	f7fa fbf8 	bl	800cd6c <lwip_htons>
 801257c:	4603      	mov	r3, r0
 801257e:	b2db      	uxtb	r3, r3
 8012580:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012584:	2b00      	cmp	r3, #0
 8012586:	d130      	bne.n	80125ea <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8012588:	4b10      	ldr	r3, [pc, #64]	; (80125cc <tcp_receive+0x888>)
 801258a:	68db      	ldr	r3, [r3, #12]
 801258c:	899b      	ldrh	r3, [r3, #12]
 801258e:	b29c      	uxth	r4, r3
 8012590:	2001      	movs	r0, #1
 8012592:	f7fa fbeb 	bl	800cd6c <lwip_htons>
 8012596:	4603      	mov	r3, r0
 8012598:	461a      	mov	r2, r3
 801259a:	4b0c      	ldr	r3, [pc, #48]	; (80125cc <tcp_receive+0x888>)
 801259c:	68db      	ldr	r3, [r3, #12]
 801259e:	4322      	orrs	r2, r4
 80125a0:	b292      	uxth	r2, r2
 80125a2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80125a4:	4b09      	ldr	r3, [pc, #36]	; (80125cc <tcp_receive+0x888>)
 80125a6:	891c      	ldrh	r4, [r3, #8]
 80125a8:	4b08      	ldr	r3, [pc, #32]	; (80125cc <tcp_receive+0x888>)
 80125aa:	68db      	ldr	r3, [r3, #12]
 80125ac:	899b      	ldrh	r3, [r3, #12]
 80125ae:	b29b      	uxth	r3, r3
 80125b0:	4618      	mov	r0, r3
 80125b2:	f7fa fbdb 	bl	800cd6c <lwip_htons>
 80125b6:	4603      	mov	r3, r0
 80125b8:	b2db      	uxtb	r3, r3
 80125ba:	f003 0303 	and.w	r3, r3, #3
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d00e      	beq.n	80125e0 <tcp_receive+0x89c>
 80125c2:	2301      	movs	r3, #1
 80125c4:	e00d      	b.n	80125e2 <tcp_receive+0x89e>
 80125c6:	bf00      	nop
 80125c8:	20000a78 	.word	0x20000a78
 80125cc:	20000a58 	.word	0x20000a58
 80125d0:	20000a82 	.word	0x20000a82
 80125d4:	0801c3bc 	.word	0x0801c3bc
 80125d8:	0801c764 	.word	0x0801c764
 80125dc:	0801c408 	.word	0x0801c408
 80125e0:	2300      	movs	r3, #0
 80125e2:	4423      	add	r3, r4
 80125e4:	b29a      	uxth	r2, r3
 80125e6:	4b98      	ldr	r3, [pc, #608]	; (8012848 <tcp_receive+0xb04>)
 80125e8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80125ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125ec:	613b      	str	r3, [r7, #16]
              next = next->next;
 80125ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80125f4:	6938      	ldr	r0, [r7, #16]
 80125f6:	f7fd fc54 	bl	800fea2 <tcp_seg_free>
            while (next &&
 80125fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d00e      	beq.n	801261e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8012600:	4b91      	ldr	r3, [pc, #580]	; (8012848 <tcp_receive+0xb04>)
 8012602:	881b      	ldrh	r3, [r3, #0]
 8012604:	461a      	mov	r2, r3
 8012606:	4b91      	ldr	r3, [pc, #580]	; (801284c <tcp_receive+0xb08>)
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	441a      	add	r2, r3
 801260c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801260e:	68db      	ldr	r3, [r3, #12]
 8012610:	685b      	ldr	r3, [r3, #4]
 8012612:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012614:	8909      	ldrh	r1, [r1, #8]
 8012616:	440b      	add	r3, r1
 8012618:	1ad3      	subs	r3, r2, r3
            while (next &&
 801261a:	2b00      	cmp	r3, #0
 801261c:	da9a      	bge.n	8012554 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801261e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012620:	2b00      	cmp	r3, #0
 8012622:	d059      	beq.n	80126d8 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8012624:	4b88      	ldr	r3, [pc, #544]	; (8012848 <tcp_receive+0xb04>)
 8012626:	881b      	ldrh	r3, [r3, #0]
 8012628:	461a      	mov	r2, r3
 801262a:	4b88      	ldr	r3, [pc, #544]	; (801284c <tcp_receive+0xb08>)
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	441a      	add	r2, r3
 8012630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012632:	68db      	ldr	r3, [r3, #12]
 8012634:	685b      	ldr	r3, [r3, #4]
 8012636:	1ad3      	subs	r3, r2, r3
            if (next &&
 8012638:	2b00      	cmp	r3, #0
 801263a:	dd4d      	ble.n	80126d8 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801263c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801263e:	68db      	ldr	r3, [r3, #12]
 8012640:	685b      	ldr	r3, [r3, #4]
 8012642:	b29a      	uxth	r2, r3
 8012644:	4b81      	ldr	r3, [pc, #516]	; (801284c <tcp_receive+0xb08>)
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	b29b      	uxth	r3, r3
 801264a:	1ad3      	subs	r3, r2, r3
 801264c:	b29a      	uxth	r2, r3
 801264e:	4b80      	ldr	r3, [pc, #512]	; (8012850 <tcp_receive+0xb0c>)
 8012650:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012652:	4b7f      	ldr	r3, [pc, #508]	; (8012850 <tcp_receive+0xb0c>)
 8012654:	68db      	ldr	r3, [r3, #12]
 8012656:	899b      	ldrh	r3, [r3, #12]
 8012658:	b29b      	uxth	r3, r3
 801265a:	4618      	mov	r0, r3
 801265c:	f7fa fb86 	bl	800cd6c <lwip_htons>
 8012660:	4603      	mov	r3, r0
 8012662:	b2db      	uxtb	r3, r3
 8012664:	f003 0302 	and.w	r3, r3, #2
 8012668:	2b00      	cmp	r3, #0
 801266a:	d005      	beq.n	8012678 <tcp_receive+0x934>
                inseg.len -= 1;
 801266c:	4b78      	ldr	r3, [pc, #480]	; (8012850 <tcp_receive+0xb0c>)
 801266e:	891b      	ldrh	r3, [r3, #8]
 8012670:	3b01      	subs	r3, #1
 8012672:	b29a      	uxth	r2, r3
 8012674:	4b76      	ldr	r3, [pc, #472]	; (8012850 <tcp_receive+0xb0c>)
 8012676:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8012678:	4b75      	ldr	r3, [pc, #468]	; (8012850 <tcp_receive+0xb0c>)
 801267a:	685b      	ldr	r3, [r3, #4]
 801267c:	4a74      	ldr	r2, [pc, #464]	; (8012850 <tcp_receive+0xb0c>)
 801267e:	8912      	ldrh	r2, [r2, #8]
 8012680:	4611      	mov	r1, r2
 8012682:	4618      	mov	r0, r3
 8012684:	f7fb fca0 	bl	800dfc8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8012688:	4b71      	ldr	r3, [pc, #452]	; (8012850 <tcp_receive+0xb0c>)
 801268a:	891c      	ldrh	r4, [r3, #8]
 801268c:	4b70      	ldr	r3, [pc, #448]	; (8012850 <tcp_receive+0xb0c>)
 801268e:	68db      	ldr	r3, [r3, #12]
 8012690:	899b      	ldrh	r3, [r3, #12]
 8012692:	b29b      	uxth	r3, r3
 8012694:	4618      	mov	r0, r3
 8012696:	f7fa fb69 	bl	800cd6c <lwip_htons>
 801269a:	4603      	mov	r3, r0
 801269c:	b2db      	uxtb	r3, r3
 801269e:	f003 0303 	and.w	r3, r3, #3
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d001      	beq.n	80126aa <tcp_receive+0x966>
 80126a6:	2301      	movs	r3, #1
 80126a8:	e000      	b.n	80126ac <tcp_receive+0x968>
 80126aa:	2300      	movs	r3, #0
 80126ac:	4423      	add	r3, r4
 80126ae:	b29a      	uxth	r2, r3
 80126b0:	4b65      	ldr	r3, [pc, #404]	; (8012848 <tcp_receive+0xb04>)
 80126b2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80126b4:	4b64      	ldr	r3, [pc, #400]	; (8012848 <tcp_receive+0xb04>)
 80126b6:	881b      	ldrh	r3, [r3, #0]
 80126b8:	461a      	mov	r2, r3
 80126ba:	4b64      	ldr	r3, [pc, #400]	; (801284c <tcp_receive+0xb08>)
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	441a      	add	r2, r3
 80126c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126c2:	68db      	ldr	r3, [r3, #12]
 80126c4:	685b      	ldr	r3, [r3, #4]
 80126c6:	429a      	cmp	r2, r3
 80126c8:	d006      	beq.n	80126d8 <tcp_receive+0x994>
 80126ca:	4b62      	ldr	r3, [pc, #392]	; (8012854 <tcp_receive+0xb10>)
 80126cc:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80126d0:	4961      	ldr	r1, [pc, #388]	; (8012858 <tcp_receive+0xb14>)
 80126d2:	4862      	ldr	r0, [pc, #392]	; (801285c <tcp_receive+0xb18>)
 80126d4:	f005 fc6a 	bl	8017fac <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80126dc:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80126de:	4b5a      	ldr	r3, [pc, #360]	; (8012848 <tcp_receive+0xb04>)
 80126e0:	881b      	ldrh	r3, [r3, #0]
 80126e2:	461a      	mov	r2, r3
 80126e4:	4b59      	ldr	r3, [pc, #356]	; (801284c <tcp_receive+0xb08>)
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	441a      	add	r2, r3
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80126f2:	4b55      	ldr	r3, [pc, #340]	; (8012848 <tcp_receive+0xb04>)
 80126f4:	881b      	ldrh	r3, [r3, #0]
 80126f6:	429a      	cmp	r2, r3
 80126f8:	d206      	bcs.n	8012708 <tcp_receive+0x9c4>
 80126fa:	4b56      	ldr	r3, [pc, #344]	; (8012854 <tcp_receive+0xb10>)
 80126fc:	f240 6207 	movw	r2, #1543	; 0x607
 8012700:	4957      	ldr	r1, [pc, #348]	; (8012860 <tcp_receive+0xb1c>)
 8012702:	4856      	ldr	r0, [pc, #344]	; (801285c <tcp_receive+0xb18>)
 8012704:	f005 fc52 	bl	8017fac <iprintf>
        pcb->rcv_wnd -= tcplen;
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801270c:	4b4e      	ldr	r3, [pc, #312]	; (8012848 <tcp_receive+0xb04>)
 801270e:	881b      	ldrh	r3, [r3, #0]
 8012710:	1ad3      	subs	r3, r2, r3
 8012712:	b29a      	uxth	r2, r3
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8012718:	6878      	ldr	r0, [r7, #4]
 801271a:	f7fc fd85 	bl	800f228 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801271e:	4b4c      	ldr	r3, [pc, #304]	; (8012850 <tcp_receive+0xb0c>)
 8012720:	685b      	ldr	r3, [r3, #4]
 8012722:	891b      	ldrh	r3, [r3, #8]
 8012724:	2b00      	cmp	r3, #0
 8012726:	d006      	beq.n	8012736 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8012728:	4b49      	ldr	r3, [pc, #292]	; (8012850 <tcp_receive+0xb0c>)
 801272a:	685b      	ldr	r3, [r3, #4]
 801272c:	4a4d      	ldr	r2, [pc, #308]	; (8012864 <tcp_receive+0xb20>)
 801272e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8012730:	4b47      	ldr	r3, [pc, #284]	; (8012850 <tcp_receive+0xb0c>)
 8012732:	2200      	movs	r2, #0
 8012734:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012736:	4b46      	ldr	r3, [pc, #280]	; (8012850 <tcp_receive+0xb0c>)
 8012738:	68db      	ldr	r3, [r3, #12]
 801273a:	899b      	ldrh	r3, [r3, #12]
 801273c:	b29b      	uxth	r3, r3
 801273e:	4618      	mov	r0, r3
 8012740:	f7fa fb14 	bl	800cd6c <lwip_htons>
 8012744:	4603      	mov	r3, r0
 8012746:	b2db      	uxtb	r3, r3
 8012748:	f003 0301 	and.w	r3, r3, #1
 801274c:	2b00      	cmp	r3, #0
 801274e:	f000 80b8 	beq.w	80128c2 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8012752:	4b45      	ldr	r3, [pc, #276]	; (8012868 <tcp_receive+0xb24>)
 8012754:	781b      	ldrb	r3, [r3, #0]
 8012756:	f043 0320 	orr.w	r3, r3, #32
 801275a:	b2da      	uxtb	r2, r3
 801275c:	4b42      	ldr	r3, [pc, #264]	; (8012868 <tcp_receive+0xb24>)
 801275e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8012760:	e0af      	b.n	80128c2 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012766:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801276c:	68db      	ldr	r3, [r3, #12]
 801276e:	685b      	ldr	r3, [r3, #4]
 8012770:	4a36      	ldr	r2, [pc, #216]	; (801284c <tcp_receive+0xb08>)
 8012772:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8012774:	68bb      	ldr	r3, [r7, #8]
 8012776:	891b      	ldrh	r3, [r3, #8]
 8012778:	461c      	mov	r4, r3
 801277a:	68bb      	ldr	r3, [r7, #8]
 801277c:	68db      	ldr	r3, [r3, #12]
 801277e:	899b      	ldrh	r3, [r3, #12]
 8012780:	b29b      	uxth	r3, r3
 8012782:	4618      	mov	r0, r3
 8012784:	f7fa faf2 	bl	800cd6c <lwip_htons>
 8012788:	4603      	mov	r3, r0
 801278a:	b2db      	uxtb	r3, r3
 801278c:	f003 0303 	and.w	r3, r3, #3
 8012790:	2b00      	cmp	r3, #0
 8012792:	d001      	beq.n	8012798 <tcp_receive+0xa54>
 8012794:	2301      	movs	r3, #1
 8012796:	e000      	b.n	801279a <tcp_receive+0xa56>
 8012798:	2300      	movs	r3, #0
 801279a:	191a      	adds	r2, r3, r4
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127a0:	441a      	add	r2, r3
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80127aa:	461c      	mov	r4, r3
 80127ac:	68bb      	ldr	r3, [r7, #8]
 80127ae:	891b      	ldrh	r3, [r3, #8]
 80127b0:	461d      	mov	r5, r3
 80127b2:	68bb      	ldr	r3, [r7, #8]
 80127b4:	68db      	ldr	r3, [r3, #12]
 80127b6:	899b      	ldrh	r3, [r3, #12]
 80127b8:	b29b      	uxth	r3, r3
 80127ba:	4618      	mov	r0, r3
 80127bc:	f7fa fad6 	bl	800cd6c <lwip_htons>
 80127c0:	4603      	mov	r3, r0
 80127c2:	b2db      	uxtb	r3, r3
 80127c4:	f003 0303 	and.w	r3, r3, #3
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d001      	beq.n	80127d0 <tcp_receive+0xa8c>
 80127cc:	2301      	movs	r3, #1
 80127ce:	e000      	b.n	80127d2 <tcp_receive+0xa8e>
 80127d0:	2300      	movs	r3, #0
 80127d2:	442b      	add	r3, r5
 80127d4:	429c      	cmp	r4, r3
 80127d6:	d206      	bcs.n	80127e6 <tcp_receive+0xaa2>
 80127d8:	4b1e      	ldr	r3, [pc, #120]	; (8012854 <tcp_receive+0xb10>)
 80127da:	f240 622b 	movw	r2, #1579	; 0x62b
 80127de:	4923      	ldr	r1, [pc, #140]	; (801286c <tcp_receive+0xb28>)
 80127e0:	481e      	ldr	r0, [pc, #120]	; (801285c <tcp_receive+0xb18>)
 80127e2:	f005 fbe3 	bl	8017fac <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80127e6:	68bb      	ldr	r3, [r7, #8]
 80127e8:	891b      	ldrh	r3, [r3, #8]
 80127ea:	461c      	mov	r4, r3
 80127ec:	68bb      	ldr	r3, [r7, #8]
 80127ee:	68db      	ldr	r3, [r3, #12]
 80127f0:	899b      	ldrh	r3, [r3, #12]
 80127f2:	b29b      	uxth	r3, r3
 80127f4:	4618      	mov	r0, r3
 80127f6:	f7fa fab9 	bl	800cd6c <lwip_htons>
 80127fa:	4603      	mov	r3, r0
 80127fc:	b2db      	uxtb	r3, r3
 80127fe:	f003 0303 	and.w	r3, r3, #3
 8012802:	2b00      	cmp	r3, #0
 8012804:	d001      	beq.n	801280a <tcp_receive+0xac6>
 8012806:	2301      	movs	r3, #1
 8012808:	e000      	b.n	801280c <tcp_receive+0xac8>
 801280a:	2300      	movs	r3, #0
 801280c:	1919      	adds	r1, r3, r4
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012812:	b28b      	uxth	r3, r1
 8012814:	1ad3      	subs	r3, r2, r3
 8012816:	b29a      	uxth	r2, r3
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801281c:	6878      	ldr	r0, [r7, #4]
 801281e:	f7fc fd03 	bl	800f228 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8012822:	68bb      	ldr	r3, [r7, #8]
 8012824:	685b      	ldr	r3, [r3, #4]
 8012826:	891b      	ldrh	r3, [r3, #8]
 8012828:	2b00      	cmp	r3, #0
 801282a:	d028      	beq.n	801287e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801282c:	4b0d      	ldr	r3, [pc, #52]	; (8012864 <tcp_receive+0xb20>)
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d01d      	beq.n	8012870 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8012834:	4b0b      	ldr	r3, [pc, #44]	; (8012864 <tcp_receive+0xb20>)
 8012836:	681a      	ldr	r2, [r3, #0]
 8012838:	68bb      	ldr	r3, [r7, #8]
 801283a:	685b      	ldr	r3, [r3, #4]
 801283c:	4619      	mov	r1, r3
 801283e:	4610      	mov	r0, r2
 8012840:	f7fb fe0a 	bl	800e458 <pbuf_cat>
 8012844:	e018      	b.n	8012878 <tcp_receive+0xb34>
 8012846:	bf00      	nop
 8012848:	20000a82 	.word	0x20000a82
 801284c:	20000a78 	.word	0x20000a78
 8012850:	20000a58 	.word	0x20000a58
 8012854:	0801c3bc 	.word	0x0801c3bc
 8012858:	0801c79c 	.word	0x0801c79c
 801285c:	0801c408 	.word	0x0801c408
 8012860:	0801c7d8 	.word	0x0801c7d8
 8012864:	20000a88 	.word	0x20000a88
 8012868:	20000a85 	.word	0x20000a85
 801286c:	0801c7f8 	.word	0x0801c7f8
            } else {
              recv_data = cseg->p;
 8012870:	68bb      	ldr	r3, [r7, #8]
 8012872:	685b      	ldr	r3, [r3, #4]
 8012874:	4a70      	ldr	r2, [pc, #448]	; (8012a38 <tcp_receive+0xcf4>)
 8012876:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8012878:	68bb      	ldr	r3, [r7, #8]
 801287a:	2200      	movs	r2, #0
 801287c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801287e:	68bb      	ldr	r3, [r7, #8]
 8012880:	68db      	ldr	r3, [r3, #12]
 8012882:	899b      	ldrh	r3, [r3, #12]
 8012884:	b29b      	uxth	r3, r3
 8012886:	4618      	mov	r0, r3
 8012888:	f7fa fa70 	bl	800cd6c <lwip_htons>
 801288c:	4603      	mov	r3, r0
 801288e:	b2db      	uxtb	r3, r3
 8012890:	f003 0301 	and.w	r3, r3, #1
 8012894:	2b00      	cmp	r3, #0
 8012896:	d00d      	beq.n	80128b4 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8012898:	4b68      	ldr	r3, [pc, #416]	; (8012a3c <tcp_receive+0xcf8>)
 801289a:	781b      	ldrb	r3, [r3, #0]
 801289c:	f043 0320 	orr.w	r3, r3, #32
 80128a0:	b2da      	uxtb	r2, r3
 80128a2:	4b66      	ldr	r3, [pc, #408]	; (8012a3c <tcp_receive+0xcf8>)
 80128a4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	7d1b      	ldrb	r3, [r3, #20]
 80128aa:	2b04      	cmp	r3, #4
 80128ac:	d102      	bne.n	80128b4 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	2207      	movs	r2, #7
 80128b2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80128b4:	68bb      	ldr	r3, [r7, #8]
 80128b6:	681a      	ldr	r2, [r3, #0]
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80128bc:	68b8      	ldr	r0, [r7, #8]
 80128be:	f7fd faf0 	bl	800fea2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d008      	beq.n	80128dc <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80128ce:	68db      	ldr	r3, [r3, #12]
 80128d0:	685a      	ldr	r2, [r3, #4]
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80128d6:	429a      	cmp	r2, r3
 80128d8:	f43f af43 	beq.w	8012762 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	8b5b      	ldrh	r3, [r3, #26]
 80128e0:	f003 0301 	and.w	r3, r3, #1
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d00e      	beq.n	8012906 <tcp_receive+0xbc2>
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	8b5b      	ldrh	r3, [r3, #26]
 80128ec:	f023 0301 	bic.w	r3, r3, #1
 80128f0:	b29a      	uxth	r2, r3
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	835a      	strh	r2, [r3, #26]
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	8b5b      	ldrh	r3, [r3, #26]
 80128fa:	f043 0302 	orr.w	r3, r3, #2
 80128fe:	b29a      	uxth	r2, r3
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012904:	e188      	b.n	8012c18 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	8b5b      	ldrh	r3, [r3, #26]
 801290a:	f043 0301 	orr.w	r3, r3, #1
 801290e:	b29a      	uxth	r2, r3
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012914:	e180      	b.n	8012c18 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801291a:	2b00      	cmp	r3, #0
 801291c:	d106      	bne.n	801292c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801291e:	4848      	ldr	r0, [pc, #288]	; (8012a40 <tcp_receive+0xcfc>)
 8012920:	f7fd faf6 	bl	800ff10 <tcp_seg_copy>
 8012924:	4602      	mov	r2, r0
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	675a      	str	r2, [r3, #116]	; 0x74
 801292a:	e16d      	b.n	8012c08 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801292c:	2300      	movs	r3, #0
 801292e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012934:	63bb      	str	r3, [r7, #56]	; 0x38
 8012936:	e157      	b.n	8012be8 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8012938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801293a:	68db      	ldr	r3, [r3, #12]
 801293c:	685a      	ldr	r2, [r3, #4]
 801293e:	4b41      	ldr	r3, [pc, #260]	; (8012a44 <tcp_receive+0xd00>)
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	429a      	cmp	r2, r3
 8012944:	d11d      	bne.n	8012982 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8012946:	4b3e      	ldr	r3, [pc, #248]	; (8012a40 <tcp_receive+0xcfc>)
 8012948:	891a      	ldrh	r2, [r3, #8]
 801294a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801294c:	891b      	ldrh	r3, [r3, #8]
 801294e:	429a      	cmp	r2, r3
 8012950:	f240 814f 	bls.w	8012bf2 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012954:	483a      	ldr	r0, [pc, #232]	; (8012a40 <tcp_receive+0xcfc>)
 8012956:	f7fd fadb 	bl	800ff10 <tcp_seg_copy>
 801295a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801295c:	697b      	ldr	r3, [r7, #20]
 801295e:	2b00      	cmp	r3, #0
 8012960:	f000 8149 	beq.w	8012bf6 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8012964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012966:	2b00      	cmp	r3, #0
 8012968:	d003      	beq.n	8012972 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801296a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801296c:	697a      	ldr	r2, [r7, #20]
 801296e:	601a      	str	r2, [r3, #0]
 8012970:	e002      	b.n	8012978 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	697a      	ldr	r2, [r7, #20]
 8012976:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8012978:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801297a:	6978      	ldr	r0, [r7, #20]
 801297c:	f7ff f8de 	bl	8011b3c <tcp_oos_insert_segment>
                }
                break;
 8012980:	e139      	b.n	8012bf6 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8012982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012984:	2b00      	cmp	r3, #0
 8012986:	d117      	bne.n	80129b8 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8012988:	4b2e      	ldr	r3, [pc, #184]	; (8012a44 <tcp_receive+0xd00>)
 801298a:	681a      	ldr	r2, [r3, #0]
 801298c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801298e:	68db      	ldr	r3, [r3, #12]
 8012990:	685b      	ldr	r3, [r3, #4]
 8012992:	1ad3      	subs	r3, r2, r3
 8012994:	2b00      	cmp	r3, #0
 8012996:	da57      	bge.n	8012a48 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012998:	4829      	ldr	r0, [pc, #164]	; (8012a40 <tcp_receive+0xcfc>)
 801299a:	f7fd fab9 	bl	800ff10 <tcp_seg_copy>
 801299e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80129a0:	69bb      	ldr	r3, [r7, #24]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	f000 8129 	beq.w	8012bfa <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	69ba      	ldr	r2, [r7, #24]
 80129ac:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80129ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80129b0:	69b8      	ldr	r0, [r7, #24]
 80129b2:	f7ff f8c3 	bl	8011b3c <tcp_oos_insert_segment>
                  }
                  break;
 80129b6:	e120      	b.n	8012bfa <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80129b8:	4b22      	ldr	r3, [pc, #136]	; (8012a44 <tcp_receive+0xd00>)
 80129ba:	681a      	ldr	r2, [r3, #0]
 80129bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129be:	68db      	ldr	r3, [r3, #12]
 80129c0:	685b      	ldr	r3, [r3, #4]
 80129c2:	1ad3      	subs	r3, r2, r3
 80129c4:	3b01      	subs	r3, #1
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	db3e      	blt.n	8012a48 <tcp_receive+0xd04>
 80129ca:	4b1e      	ldr	r3, [pc, #120]	; (8012a44 <tcp_receive+0xd00>)
 80129cc:	681a      	ldr	r2, [r3, #0]
 80129ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129d0:	68db      	ldr	r3, [r3, #12]
 80129d2:	685b      	ldr	r3, [r3, #4]
 80129d4:	1ad3      	subs	r3, r2, r3
 80129d6:	3301      	adds	r3, #1
 80129d8:	2b00      	cmp	r3, #0
 80129da:	dc35      	bgt.n	8012a48 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80129dc:	4818      	ldr	r0, [pc, #96]	; (8012a40 <tcp_receive+0xcfc>)
 80129de:	f7fd fa97 	bl	800ff10 <tcp_seg_copy>
 80129e2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80129e4:	69fb      	ldr	r3, [r7, #28]
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	f000 8109 	beq.w	8012bfe <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80129ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129ee:	68db      	ldr	r3, [r3, #12]
 80129f0:	685b      	ldr	r3, [r3, #4]
 80129f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80129f4:	8912      	ldrh	r2, [r2, #8]
 80129f6:	441a      	add	r2, r3
 80129f8:	4b12      	ldr	r3, [pc, #72]	; (8012a44 <tcp_receive+0xd00>)
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	1ad3      	subs	r3, r2, r3
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	dd12      	ble.n	8012a28 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8012a02:	4b10      	ldr	r3, [pc, #64]	; (8012a44 <tcp_receive+0xd00>)
 8012a04:	681b      	ldr	r3, [r3, #0]
 8012a06:	b29a      	uxth	r2, r3
 8012a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a0a:	68db      	ldr	r3, [r3, #12]
 8012a0c:	685b      	ldr	r3, [r3, #4]
 8012a0e:	b29b      	uxth	r3, r3
 8012a10:	1ad3      	subs	r3, r2, r3
 8012a12:	b29a      	uxth	r2, r3
 8012a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a16:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8012a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a1a:	685a      	ldr	r2, [r3, #4]
 8012a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a1e:	891b      	ldrh	r3, [r3, #8]
 8012a20:	4619      	mov	r1, r3
 8012a22:	4610      	mov	r0, r2
 8012a24:	f7fb fad0 	bl	800dfc8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8012a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a2a:	69fa      	ldr	r2, [r7, #28]
 8012a2c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012a2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012a30:	69f8      	ldr	r0, [r7, #28]
 8012a32:	f7ff f883 	bl	8011b3c <tcp_oos_insert_segment>
                  }
                  break;
 8012a36:	e0e2      	b.n	8012bfe <tcp_receive+0xeba>
 8012a38:	20000a88 	.word	0x20000a88
 8012a3c:	20000a85 	.word	0x20000a85
 8012a40:	20000a58 	.word	0x20000a58
 8012a44:	20000a78 	.word	0x20000a78
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8012a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a4a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	f040 80c6 	bne.w	8012be2 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8012a56:	4b80      	ldr	r3, [pc, #512]	; (8012c58 <tcp_receive+0xf14>)
 8012a58:	681a      	ldr	r2, [r3, #0]
 8012a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a5c:	68db      	ldr	r3, [r3, #12]
 8012a5e:	685b      	ldr	r3, [r3, #4]
 8012a60:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	f340 80bd 	ble.w	8012be2 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a6a:	68db      	ldr	r3, [r3, #12]
 8012a6c:	899b      	ldrh	r3, [r3, #12]
 8012a6e:	b29b      	uxth	r3, r3
 8012a70:	4618      	mov	r0, r3
 8012a72:	f7fa f97b 	bl	800cd6c <lwip_htons>
 8012a76:	4603      	mov	r3, r0
 8012a78:	b2db      	uxtb	r3, r3
 8012a7a:	f003 0301 	and.w	r3, r3, #1
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	f040 80bf 	bne.w	8012c02 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012a84:	4875      	ldr	r0, [pc, #468]	; (8012c5c <tcp_receive+0xf18>)
 8012a86:	f7fd fa43 	bl	800ff10 <tcp_seg_copy>
 8012a8a:	4602      	mov	r2, r0
 8012a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a8e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	f000 80b6 	beq.w	8012c06 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8012a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a9c:	68db      	ldr	r3, [r3, #12]
 8012a9e:	685b      	ldr	r3, [r3, #4]
 8012aa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012aa2:	8912      	ldrh	r2, [r2, #8]
 8012aa4:	441a      	add	r2, r3
 8012aa6:	4b6c      	ldr	r3, [pc, #432]	; (8012c58 <tcp_receive+0xf14>)
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	1ad3      	subs	r3, r2, r3
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	dd12      	ble.n	8012ad6 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012ab0:	4b69      	ldr	r3, [pc, #420]	; (8012c58 <tcp_receive+0xf14>)
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	b29a      	uxth	r2, r3
 8012ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ab8:	68db      	ldr	r3, [r3, #12]
 8012aba:	685b      	ldr	r3, [r3, #4]
 8012abc:	b29b      	uxth	r3, r3
 8012abe:	1ad3      	subs	r3, r2, r3
 8012ac0:	b29a      	uxth	r2, r3
 8012ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ac4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8012ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ac8:	685a      	ldr	r2, [r3, #4]
 8012aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012acc:	891b      	ldrh	r3, [r3, #8]
 8012ace:	4619      	mov	r1, r3
 8012ad0:	4610      	mov	r0, r2
 8012ad2:	f7fb fa79 	bl	800dfc8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8012ad6:	4b62      	ldr	r3, [pc, #392]	; (8012c60 <tcp_receive+0xf1c>)
 8012ad8:	881b      	ldrh	r3, [r3, #0]
 8012ada:	461a      	mov	r2, r3
 8012adc:	4b5e      	ldr	r3, [pc, #376]	; (8012c58 <tcp_receive+0xf14>)
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	441a      	add	r2, r3
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ae6:	6879      	ldr	r1, [r7, #4]
 8012ae8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012aea:	440b      	add	r3, r1
 8012aec:	1ad3      	subs	r3, r2, r3
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	f340 8089 	ble.w	8012c06 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	68db      	ldr	r3, [r3, #12]
 8012afa:	899b      	ldrh	r3, [r3, #12]
 8012afc:	b29b      	uxth	r3, r3
 8012afe:	4618      	mov	r0, r3
 8012b00:	f7fa f934 	bl	800cd6c <lwip_htons>
 8012b04:	4603      	mov	r3, r0
 8012b06:	b2db      	uxtb	r3, r3
 8012b08:	f003 0301 	and.w	r3, r3, #1
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d022      	beq.n	8012b56 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	68db      	ldr	r3, [r3, #12]
 8012b16:	899b      	ldrh	r3, [r3, #12]
 8012b18:	b29b      	uxth	r3, r3
 8012b1a:	b21b      	sxth	r3, r3
 8012b1c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012b20:	b21c      	sxth	r4, r3
 8012b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	68db      	ldr	r3, [r3, #12]
 8012b28:	899b      	ldrh	r3, [r3, #12]
 8012b2a:	b29b      	uxth	r3, r3
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	f7fa f91d 	bl	800cd6c <lwip_htons>
 8012b32:	4603      	mov	r3, r0
 8012b34:	b2db      	uxtb	r3, r3
 8012b36:	b29b      	uxth	r3, r3
 8012b38:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012b3c:	b29b      	uxth	r3, r3
 8012b3e:	4618      	mov	r0, r3
 8012b40:	f7fa f914 	bl	800cd6c <lwip_htons>
 8012b44:	4603      	mov	r3, r0
 8012b46:	b21b      	sxth	r3, r3
 8012b48:	4323      	orrs	r3, r4
 8012b4a:	b21a      	sxth	r2, r3
 8012b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	68db      	ldr	r3, [r3, #12]
 8012b52:	b292      	uxth	r2, r2
 8012b54:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b5a:	b29a      	uxth	r2, r3
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012b60:	4413      	add	r3, r2
 8012b62:	b299      	uxth	r1, r3
 8012b64:	4b3c      	ldr	r3, [pc, #240]	; (8012c58 <tcp_receive+0xf14>)
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	b29a      	uxth	r2, r3
 8012b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	1a8a      	subs	r2, r1, r2
 8012b70:	b292      	uxth	r2, r2
 8012b72:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	685a      	ldr	r2, [r3, #4]
 8012b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	891b      	ldrh	r3, [r3, #8]
 8012b80:	4619      	mov	r1, r3
 8012b82:	4610      	mov	r0, r2
 8012b84:	f7fb fa20 	bl	800dfc8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8012b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	891c      	ldrh	r4, [r3, #8]
 8012b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	68db      	ldr	r3, [r3, #12]
 8012b94:	899b      	ldrh	r3, [r3, #12]
 8012b96:	b29b      	uxth	r3, r3
 8012b98:	4618      	mov	r0, r3
 8012b9a:	f7fa f8e7 	bl	800cd6c <lwip_htons>
 8012b9e:	4603      	mov	r3, r0
 8012ba0:	b2db      	uxtb	r3, r3
 8012ba2:	f003 0303 	and.w	r3, r3, #3
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d001      	beq.n	8012bae <tcp_receive+0xe6a>
 8012baa:	2301      	movs	r3, #1
 8012bac:	e000      	b.n	8012bb0 <tcp_receive+0xe6c>
 8012bae:	2300      	movs	r3, #0
 8012bb0:	4423      	add	r3, r4
 8012bb2:	b29a      	uxth	r2, r3
 8012bb4:	4b2a      	ldr	r3, [pc, #168]	; (8012c60 <tcp_receive+0xf1c>)
 8012bb6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012bb8:	4b29      	ldr	r3, [pc, #164]	; (8012c60 <tcp_receive+0xf1c>)
 8012bba:	881b      	ldrh	r3, [r3, #0]
 8012bbc:	461a      	mov	r2, r3
 8012bbe:	4b26      	ldr	r3, [pc, #152]	; (8012c58 <tcp_receive+0xf14>)
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	441a      	add	r2, r3
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bc8:	6879      	ldr	r1, [r7, #4]
 8012bca:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012bcc:	440b      	add	r3, r1
 8012bce:	429a      	cmp	r2, r3
 8012bd0:	d019      	beq.n	8012c06 <tcp_receive+0xec2>
 8012bd2:	4b24      	ldr	r3, [pc, #144]	; (8012c64 <tcp_receive+0xf20>)
 8012bd4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8012bd8:	4923      	ldr	r1, [pc, #140]	; (8012c68 <tcp_receive+0xf24>)
 8012bda:	4824      	ldr	r0, [pc, #144]	; (8012c6c <tcp_receive+0xf28>)
 8012bdc:	f005 f9e6 	bl	8017fac <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8012be0:	e011      	b.n	8012c06 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	63bb      	str	r3, [r7, #56]	; 0x38
 8012be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	f47f aea4 	bne.w	8012938 <tcp_receive+0xbf4>
 8012bf0:	e00a      	b.n	8012c08 <tcp_receive+0xec4>
                break;
 8012bf2:	bf00      	nop
 8012bf4:	e008      	b.n	8012c08 <tcp_receive+0xec4>
                break;
 8012bf6:	bf00      	nop
 8012bf8:	e006      	b.n	8012c08 <tcp_receive+0xec4>
                  break;
 8012bfa:	bf00      	nop
 8012bfc:	e004      	b.n	8012c08 <tcp_receive+0xec4>
                  break;
 8012bfe:	bf00      	nop
 8012c00:	e002      	b.n	8012c08 <tcp_receive+0xec4>
                  break;
 8012c02:	bf00      	nop
 8012c04:	e000      	b.n	8012c08 <tcp_receive+0xec4>
                break;
 8012c06:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8012c08:	6878      	ldr	r0, [r7, #4]
 8012c0a:	f001 fe8b 	bl	8014924 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8012c0e:	e003      	b.n	8012c18 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012c10:	6878      	ldr	r0, [r7, #4]
 8012c12:	f001 fe87 	bl	8014924 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012c16:	e01a      	b.n	8012c4e <tcp_receive+0xf0a>
 8012c18:	e019      	b.n	8012c4e <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8012c1a:	4b0f      	ldr	r3, [pc, #60]	; (8012c58 <tcp_receive+0xf14>)
 8012c1c:	681a      	ldr	r2, [r3, #0]
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c22:	1ad3      	subs	r3, r2, r3
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	db0a      	blt.n	8012c3e <tcp_receive+0xefa>
 8012c28:	4b0b      	ldr	r3, [pc, #44]	; (8012c58 <tcp_receive+0xf14>)
 8012c2a:	681a      	ldr	r2, [r3, #0]
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c30:	6879      	ldr	r1, [r7, #4]
 8012c32:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012c34:	440b      	add	r3, r1
 8012c36:	1ad3      	subs	r3, r2, r3
 8012c38:	3301      	adds	r3, #1
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	dd07      	ble.n	8012c4e <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	8b5b      	ldrh	r3, [r3, #26]
 8012c42:	f043 0302 	orr.w	r3, r3, #2
 8012c46:	b29a      	uxth	r2, r3
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8012c4c:	e7ff      	b.n	8012c4e <tcp_receive+0xf0a>
 8012c4e:	bf00      	nop
 8012c50:	3750      	adds	r7, #80	; 0x50
 8012c52:	46bd      	mov	sp, r7
 8012c54:	bdb0      	pop	{r4, r5, r7, pc}
 8012c56:	bf00      	nop
 8012c58:	20000a78 	.word	0x20000a78
 8012c5c:	20000a58 	.word	0x20000a58
 8012c60:	20000a82 	.word	0x20000a82
 8012c64:	0801c3bc 	.word	0x0801c3bc
 8012c68:	0801c764 	.word	0x0801c764
 8012c6c:	0801c408 	.word	0x0801c408

08012c70 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012c70:	b480      	push	{r7}
 8012c72:	b083      	sub	sp, #12
 8012c74:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8012c76:	4b15      	ldr	r3, [pc, #84]	; (8012ccc <tcp_get_next_optbyte+0x5c>)
 8012c78:	881b      	ldrh	r3, [r3, #0]
 8012c7a:	1c5a      	adds	r2, r3, #1
 8012c7c:	b291      	uxth	r1, r2
 8012c7e:	4a13      	ldr	r2, [pc, #76]	; (8012ccc <tcp_get_next_optbyte+0x5c>)
 8012c80:	8011      	strh	r1, [r2, #0]
 8012c82:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012c84:	4b12      	ldr	r3, [pc, #72]	; (8012cd0 <tcp_get_next_optbyte+0x60>)
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d004      	beq.n	8012c96 <tcp_get_next_optbyte+0x26>
 8012c8c:	4b11      	ldr	r3, [pc, #68]	; (8012cd4 <tcp_get_next_optbyte+0x64>)
 8012c8e:	881b      	ldrh	r3, [r3, #0]
 8012c90:	88fa      	ldrh	r2, [r7, #6]
 8012c92:	429a      	cmp	r2, r3
 8012c94:	d208      	bcs.n	8012ca8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8012c96:	4b10      	ldr	r3, [pc, #64]	; (8012cd8 <tcp_get_next_optbyte+0x68>)
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	3314      	adds	r3, #20
 8012c9c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8012c9e:	88fb      	ldrh	r3, [r7, #6]
 8012ca0:	683a      	ldr	r2, [r7, #0]
 8012ca2:	4413      	add	r3, r2
 8012ca4:	781b      	ldrb	r3, [r3, #0]
 8012ca6:	e00b      	b.n	8012cc0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012ca8:	88fb      	ldrh	r3, [r7, #6]
 8012caa:	b2da      	uxtb	r2, r3
 8012cac:	4b09      	ldr	r3, [pc, #36]	; (8012cd4 <tcp_get_next_optbyte+0x64>)
 8012cae:	881b      	ldrh	r3, [r3, #0]
 8012cb0:	b2db      	uxtb	r3, r3
 8012cb2:	1ad3      	subs	r3, r2, r3
 8012cb4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8012cb6:	4b06      	ldr	r3, [pc, #24]	; (8012cd0 <tcp_get_next_optbyte+0x60>)
 8012cb8:	681a      	ldr	r2, [r3, #0]
 8012cba:	797b      	ldrb	r3, [r7, #5]
 8012cbc:	4413      	add	r3, r2
 8012cbe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012cc0:	4618      	mov	r0, r3
 8012cc2:	370c      	adds	r7, #12
 8012cc4:	46bd      	mov	sp, r7
 8012cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cca:	4770      	bx	lr
 8012ccc:	20000a74 	.word	0x20000a74
 8012cd0:	20000a70 	.word	0x20000a70
 8012cd4:	20000a6e 	.word	0x20000a6e
 8012cd8:	20000a68 	.word	0x20000a68

08012cdc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012cdc:	b580      	push	{r7, lr}
 8012cde:	b084      	sub	sp, #16
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d106      	bne.n	8012cf8 <tcp_parseopt+0x1c>
 8012cea:	4b32      	ldr	r3, [pc, #200]	; (8012db4 <tcp_parseopt+0xd8>)
 8012cec:	f240 727d 	movw	r2, #1917	; 0x77d
 8012cf0:	4931      	ldr	r1, [pc, #196]	; (8012db8 <tcp_parseopt+0xdc>)
 8012cf2:	4832      	ldr	r0, [pc, #200]	; (8012dbc <tcp_parseopt+0xe0>)
 8012cf4:	f005 f95a 	bl	8017fac <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012cf8:	4b31      	ldr	r3, [pc, #196]	; (8012dc0 <tcp_parseopt+0xe4>)
 8012cfa:	881b      	ldrh	r3, [r3, #0]
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d055      	beq.n	8012dac <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012d00:	4b30      	ldr	r3, [pc, #192]	; (8012dc4 <tcp_parseopt+0xe8>)
 8012d02:	2200      	movs	r2, #0
 8012d04:	801a      	strh	r2, [r3, #0]
 8012d06:	e045      	b.n	8012d94 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8012d08:	f7ff ffb2 	bl	8012c70 <tcp_get_next_optbyte>
 8012d0c:	4603      	mov	r3, r0
 8012d0e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8012d10:	7bfb      	ldrb	r3, [r7, #15]
 8012d12:	2b02      	cmp	r3, #2
 8012d14:	d006      	beq.n	8012d24 <tcp_parseopt+0x48>
 8012d16:	2b02      	cmp	r3, #2
 8012d18:	dc2b      	bgt.n	8012d72 <tcp_parseopt+0x96>
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d041      	beq.n	8012da2 <tcp_parseopt+0xc6>
 8012d1e:	2b01      	cmp	r3, #1
 8012d20:	d127      	bne.n	8012d72 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8012d22:	e037      	b.n	8012d94 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012d24:	f7ff ffa4 	bl	8012c70 <tcp_get_next_optbyte>
 8012d28:	4603      	mov	r3, r0
 8012d2a:	2b04      	cmp	r3, #4
 8012d2c:	d13b      	bne.n	8012da6 <tcp_parseopt+0xca>
 8012d2e:	4b25      	ldr	r3, [pc, #148]	; (8012dc4 <tcp_parseopt+0xe8>)
 8012d30:	881b      	ldrh	r3, [r3, #0]
 8012d32:	3301      	adds	r3, #1
 8012d34:	4a22      	ldr	r2, [pc, #136]	; (8012dc0 <tcp_parseopt+0xe4>)
 8012d36:	8812      	ldrh	r2, [r2, #0]
 8012d38:	4293      	cmp	r3, r2
 8012d3a:	da34      	bge.n	8012da6 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8012d3c:	f7ff ff98 	bl	8012c70 <tcp_get_next_optbyte>
 8012d40:	4603      	mov	r3, r0
 8012d42:	b29b      	uxth	r3, r3
 8012d44:	021b      	lsls	r3, r3, #8
 8012d46:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8012d48:	f7ff ff92 	bl	8012c70 <tcp_get_next_optbyte>
 8012d4c:	4603      	mov	r3, r0
 8012d4e:	b29a      	uxth	r2, r3
 8012d50:	89bb      	ldrh	r3, [r7, #12]
 8012d52:	4313      	orrs	r3, r2
 8012d54:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8012d56:	89bb      	ldrh	r3, [r7, #12]
 8012d58:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8012d5c:	d804      	bhi.n	8012d68 <tcp_parseopt+0x8c>
 8012d5e:	89bb      	ldrh	r3, [r7, #12]
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d001      	beq.n	8012d68 <tcp_parseopt+0x8c>
 8012d64:	89ba      	ldrh	r2, [r7, #12]
 8012d66:	e001      	b.n	8012d6c <tcp_parseopt+0x90>
 8012d68:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8012d70:	e010      	b.n	8012d94 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8012d72:	f7ff ff7d 	bl	8012c70 <tcp_get_next_optbyte>
 8012d76:	4603      	mov	r3, r0
 8012d78:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8012d7a:	7afb      	ldrb	r3, [r7, #11]
 8012d7c:	2b01      	cmp	r3, #1
 8012d7e:	d914      	bls.n	8012daa <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012d80:	7afb      	ldrb	r3, [r7, #11]
 8012d82:	b29a      	uxth	r2, r3
 8012d84:	4b0f      	ldr	r3, [pc, #60]	; (8012dc4 <tcp_parseopt+0xe8>)
 8012d86:	881b      	ldrh	r3, [r3, #0]
 8012d88:	4413      	add	r3, r2
 8012d8a:	b29b      	uxth	r3, r3
 8012d8c:	3b02      	subs	r3, #2
 8012d8e:	b29a      	uxth	r2, r3
 8012d90:	4b0c      	ldr	r3, [pc, #48]	; (8012dc4 <tcp_parseopt+0xe8>)
 8012d92:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012d94:	4b0b      	ldr	r3, [pc, #44]	; (8012dc4 <tcp_parseopt+0xe8>)
 8012d96:	881a      	ldrh	r2, [r3, #0]
 8012d98:	4b09      	ldr	r3, [pc, #36]	; (8012dc0 <tcp_parseopt+0xe4>)
 8012d9a:	881b      	ldrh	r3, [r3, #0]
 8012d9c:	429a      	cmp	r2, r3
 8012d9e:	d3b3      	bcc.n	8012d08 <tcp_parseopt+0x2c>
 8012da0:	e004      	b.n	8012dac <tcp_parseopt+0xd0>
          return;
 8012da2:	bf00      	nop
 8012da4:	e002      	b.n	8012dac <tcp_parseopt+0xd0>
            return;
 8012da6:	bf00      	nop
 8012da8:	e000      	b.n	8012dac <tcp_parseopt+0xd0>
            return;
 8012daa:	bf00      	nop
      }
    }
  }
}
 8012dac:	3710      	adds	r7, #16
 8012dae:	46bd      	mov	sp, r7
 8012db0:	bd80      	pop	{r7, pc}
 8012db2:	bf00      	nop
 8012db4:	0801c3bc 	.word	0x0801c3bc
 8012db8:	0801c820 	.word	0x0801c820
 8012dbc:	0801c408 	.word	0x0801c408
 8012dc0:	20000a6c 	.word	0x20000a6c
 8012dc4:	20000a74 	.word	0x20000a74

08012dc8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012dc8:	b480      	push	{r7}
 8012dca:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8012dcc:	4b05      	ldr	r3, [pc, #20]	; (8012de4 <tcp_trigger_input_pcb_close+0x1c>)
 8012dce:	781b      	ldrb	r3, [r3, #0]
 8012dd0:	f043 0310 	orr.w	r3, r3, #16
 8012dd4:	b2da      	uxtb	r2, r3
 8012dd6:	4b03      	ldr	r3, [pc, #12]	; (8012de4 <tcp_trigger_input_pcb_close+0x1c>)
 8012dd8:	701a      	strb	r2, [r3, #0]
}
 8012dda:	bf00      	nop
 8012ddc:	46bd      	mov	sp, r7
 8012dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012de2:	4770      	bx	lr
 8012de4:	20000a85 	.word	0x20000a85

08012de8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012de8:	b580      	push	{r7, lr}
 8012dea:	b084      	sub	sp, #16
 8012dec:	af00      	add	r7, sp, #0
 8012dee:	60f8      	str	r0, [r7, #12]
 8012df0:	60b9      	str	r1, [r7, #8]
 8012df2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d00a      	beq.n	8012e10 <tcp_route+0x28>
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	7a1b      	ldrb	r3, [r3, #8]
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d006      	beq.n	8012e10 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	7a1b      	ldrb	r3, [r3, #8]
 8012e06:	4618      	mov	r0, r3
 8012e08:	f7fa ff04 	bl	800dc14 <netif_get_by_index>
 8012e0c:	4603      	mov	r3, r0
 8012e0e:	e003      	b.n	8012e18 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8012e10:	6878      	ldr	r0, [r7, #4]
 8012e12:	f003 fad5 	bl	80163c0 <ip4_route>
 8012e16:	4603      	mov	r3, r0
  }
}
 8012e18:	4618      	mov	r0, r3
 8012e1a:	3710      	adds	r7, #16
 8012e1c:	46bd      	mov	sp, r7
 8012e1e:	bd80      	pop	{r7, pc}

08012e20 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8012e20:	b590      	push	{r4, r7, lr}
 8012e22:	b087      	sub	sp, #28
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	60f8      	str	r0, [r7, #12]
 8012e28:	60b9      	str	r1, [r7, #8]
 8012e2a:	603b      	str	r3, [r7, #0]
 8012e2c:	4613      	mov	r3, r2
 8012e2e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d105      	bne.n	8012e42 <tcp_create_segment+0x22>
 8012e36:	4b44      	ldr	r3, [pc, #272]	; (8012f48 <tcp_create_segment+0x128>)
 8012e38:	22a3      	movs	r2, #163	; 0xa3
 8012e3a:	4944      	ldr	r1, [pc, #272]	; (8012f4c <tcp_create_segment+0x12c>)
 8012e3c:	4844      	ldr	r0, [pc, #272]	; (8012f50 <tcp_create_segment+0x130>)
 8012e3e:	f005 f8b5 	bl	8017fac <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8012e42:	68bb      	ldr	r3, [r7, #8]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d105      	bne.n	8012e54 <tcp_create_segment+0x34>
 8012e48:	4b3f      	ldr	r3, [pc, #252]	; (8012f48 <tcp_create_segment+0x128>)
 8012e4a:	22a4      	movs	r2, #164	; 0xa4
 8012e4c:	4941      	ldr	r1, [pc, #260]	; (8012f54 <tcp_create_segment+0x134>)
 8012e4e:	4840      	ldr	r0, [pc, #256]	; (8012f50 <tcp_create_segment+0x130>)
 8012e50:	f005 f8ac 	bl	8017fac <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012e54:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012e58:	009b      	lsls	r3, r3, #2
 8012e5a:	b2db      	uxtb	r3, r3
 8012e5c:	f003 0304 	and.w	r3, r3, #4
 8012e60:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8012e62:	2003      	movs	r0, #3
 8012e64:	f7fa fbd8 	bl	800d618 <memp_malloc>
 8012e68:	6138      	str	r0, [r7, #16]
 8012e6a:	693b      	ldr	r3, [r7, #16]
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d104      	bne.n	8012e7a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012e70:	68b8      	ldr	r0, [r7, #8]
 8012e72:	f7fb fa2f 	bl	800e2d4 <pbuf_free>
    return NULL;
 8012e76:	2300      	movs	r3, #0
 8012e78:	e061      	b.n	8012f3e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8012e7a:	693b      	ldr	r3, [r7, #16]
 8012e7c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012e80:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8012e82:	693b      	ldr	r3, [r7, #16]
 8012e84:	2200      	movs	r2, #0
 8012e86:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8012e88:	693b      	ldr	r3, [r7, #16]
 8012e8a:	68ba      	ldr	r2, [r7, #8]
 8012e8c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8012e8e:	68bb      	ldr	r3, [r7, #8]
 8012e90:	891a      	ldrh	r2, [r3, #8]
 8012e92:	7dfb      	ldrb	r3, [r7, #23]
 8012e94:	b29b      	uxth	r3, r3
 8012e96:	429a      	cmp	r2, r3
 8012e98:	d205      	bcs.n	8012ea6 <tcp_create_segment+0x86>
 8012e9a:	4b2b      	ldr	r3, [pc, #172]	; (8012f48 <tcp_create_segment+0x128>)
 8012e9c:	22b0      	movs	r2, #176	; 0xb0
 8012e9e:	492e      	ldr	r1, [pc, #184]	; (8012f58 <tcp_create_segment+0x138>)
 8012ea0:	482b      	ldr	r0, [pc, #172]	; (8012f50 <tcp_create_segment+0x130>)
 8012ea2:	f005 f883 	bl	8017fac <iprintf>
  seg->len = p->tot_len - optlen;
 8012ea6:	68bb      	ldr	r3, [r7, #8]
 8012ea8:	891a      	ldrh	r2, [r3, #8]
 8012eaa:	7dfb      	ldrb	r3, [r7, #23]
 8012eac:	b29b      	uxth	r3, r3
 8012eae:	1ad3      	subs	r3, r2, r3
 8012eb0:	b29a      	uxth	r2, r3
 8012eb2:	693b      	ldr	r3, [r7, #16]
 8012eb4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8012eb6:	2114      	movs	r1, #20
 8012eb8:	68b8      	ldr	r0, [r7, #8]
 8012eba:	f7fb f975 	bl	800e1a8 <pbuf_add_header>
 8012ebe:	4603      	mov	r3, r0
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d004      	beq.n	8012ece <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8012ec4:	6938      	ldr	r0, [r7, #16]
 8012ec6:	f7fc ffec 	bl	800fea2 <tcp_seg_free>
    return NULL;
 8012eca:	2300      	movs	r3, #0
 8012ecc:	e037      	b.n	8012f3e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8012ece:	693b      	ldr	r3, [r7, #16]
 8012ed0:	685b      	ldr	r3, [r3, #4]
 8012ed2:	685a      	ldr	r2, [r3, #4]
 8012ed4:	693b      	ldr	r3, [r7, #16]
 8012ed6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	8ada      	ldrh	r2, [r3, #22]
 8012edc:	693b      	ldr	r3, [r7, #16]
 8012ede:	68dc      	ldr	r4, [r3, #12]
 8012ee0:	4610      	mov	r0, r2
 8012ee2:	f7f9 ff43 	bl	800cd6c <lwip_htons>
 8012ee6:	4603      	mov	r3, r0
 8012ee8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	8b1a      	ldrh	r2, [r3, #24]
 8012eee:	693b      	ldr	r3, [r7, #16]
 8012ef0:	68dc      	ldr	r4, [r3, #12]
 8012ef2:	4610      	mov	r0, r2
 8012ef4:	f7f9 ff3a 	bl	800cd6c <lwip_htons>
 8012ef8:	4603      	mov	r3, r0
 8012efa:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8012efc:	693b      	ldr	r3, [r7, #16]
 8012efe:	68dc      	ldr	r4, [r3, #12]
 8012f00:	6838      	ldr	r0, [r7, #0]
 8012f02:	f7f9 ff48 	bl	800cd96 <lwip_htonl>
 8012f06:	4603      	mov	r3, r0
 8012f08:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8012f0a:	7dfb      	ldrb	r3, [r7, #23]
 8012f0c:	089b      	lsrs	r3, r3, #2
 8012f0e:	b2db      	uxtb	r3, r3
 8012f10:	b29b      	uxth	r3, r3
 8012f12:	3305      	adds	r3, #5
 8012f14:	b29b      	uxth	r3, r3
 8012f16:	031b      	lsls	r3, r3, #12
 8012f18:	b29a      	uxth	r2, r3
 8012f1a:	79fb      	ldrb	r3, [r7, #7]
 8012f1c:	b29b      	uxth	r3, r3
 8012f1e:	4313      	orrs	r3, r2
 8012f20:	b29a      	uxth	r2, r3
 8012f22:	693b      	ldr	r3, [r7, #16]
 8012f24:	68dc      	ldr	r4, [r3, #12]
 8012f26:	4610      	mov	r0, r2
 8012f28:	f7f9 ff20 	bl	800cd6c <lwip_htons>
 8012f2c:	4603      	mov	r3, r0
 8012f2e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8012f30:	693b      	ldr	r3, [r7, #16]
 8012f32:	68db      	ldr	r3, [r3, #12]
 8012f34:	2200      	movs	r2, #0
 8012f36:	749a      	strb	r2, [r3, #18]
 8012f38:	2200      	movs	r2, #0
 8012f3a:	74da      	strb	r2, [r3, #19]
  return seg;
 8012f3c:	693b      	ldr	r3, [r7, #16]
}
 8012f3e:	4618      	mov	r0, r3
 8012f40:	371c      	adds	r7, #28
 8012f42:	46bd      	mov	sp, r7
 8012f44:	bd90      	pop	{r4, r7, pc}
 8012f46:	bf00      	nop
 8012f48:	0801c83c 	.word	0x0801c83c
 8012f4c:	0801c870 	.word	0x0801c870
 8012f50:	0801c890 	.word	0x0801c890
 8012f54:	0801c8b8 	.word	0x0801c8b8
 8012f58:	0801c8dc 	.word	0x0801c8dc

08012f5c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b086      	sub	sp, #24
 8012f60:	af00      	add	r7, sp, #0
 8012f62:	607b      	str	r3, [r7, #4]
 8012f64:	4603      	mov	r3, r0
 8012f66:	73fb      	strb	r3, [r7, #15]
 8012f68:	460b      	mov	r3, r1
 8012f6a:	81bb      	strh	r3, [r7, #12]
 8012f6c:	4613      	mov	r3, r2
 8012f6e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8012f70:	89bb      	ldrh	r3, [r7, #12]
 8012f72:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d105      	bne.n	8012f86 <tcp_pbuf_prealloc+0x2a>
 8012f7a:	4b30      	ldr	r3, [pc, #192]	; (801303c <tcp_pbuf_prealloc+0xe0>)
 8012f7c:	22e8      	movs	r2, #232	; 0xe8
 8012f7e:	4930      	ldr	r1, [pc, #192]	; (8013040 <tcp_pbuf_prealloc+0xe4>)
 8012f80:	4830      	ldr	r0, [pc, #192]	; (8013044 <tcp_pbuf_prealloc+0xe8>)
 8012f82:	f005 f813 	bl	8017fac <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8012f86:	6a3b      	ldr	r3, [r7, #32]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d105      	bne.n	8012f98 <tcp_pbuf_prealloc+0x3c>
 8012f8c:	4b2b      	ldr	r3, [pc, #172]	; (801303c <tcp_pbuf_prealloc+0xe0>)
 8012f8e:	22e9      	movs	r2, #233	; 0xe9
 8012f90:	492d      	ldr	r1, [pc, #180]	; (8013048 <tcp_pbuf_prealloc+0xec>)
 8012f92:	482c      	ldr	r0, [pc, #176]	; (8013044 <tcp_pbuf_prealloc+0xe8>)
 8012f94:	f005 f80a 	bl	8017fac <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8012f98:	89ba      	ldrh	r2, [r7, #12]
 8012f9a:	897b      	ldrh	r3, [r7, #10]
 8012f9c:	429a      	cmp	r2, r3
 8012f9e:	d221      	bcs.n	8012fe4 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012fa0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012fa4:	f003 0302 	and.w	r3, r3, #2
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d111      	bne.n	8012fd0 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8012fac:	6a3b      	ldr	r3, [r7, #32]
 8012fae:	8b5b      	ldrh	r3, [r3, #26]
 8012fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d115      	bne.n	8012fe4 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8012fb8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d007      	beq.n	8012fd0 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8012fc0:	6a3b      	ldr	r3, [r7, #32]
 8012fc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d103      	bne.n	8012fd0 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8012fc8:	6a3b      	ldr	r3, [r7, #32]
 8012fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d009      	beq.n	8012fe4 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8012fd0:	89bb      	ldrh	r3, [r7, #12]
 8012fd2:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8012fd6:	f023 0203 	bic.w	r2, r3, #3
 8012fda:	897b      	ldrh	r3, [r7, #10]
 8012fdc:	4293      	cmp	r3, r2
 8012fde:	bf28      	it	cs
 8012fe0:	4613      	movcs	r3, r2
 8012fe2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8012fe4:	8af9      	ldrh	r1, [r7, #22]
 8012fe6:	7bfb      	ldrb	r3, [r7, #15]
 8012fe8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012fec:	4618      	mov	r0, r3
 8012fee:	f7fa fe8d 	bl	800dd0c <pbuf_alloc>
 8012ff2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012ff4:	693b      	ldr	r3, [r7, #16]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d101      	bne.n	8012ffe <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8012ffa:	2300      	movs	r3, #0
 8012ffc:	e019      	b.n	8013032 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8012ffe:	693b      	ldr	r3, [r7, #16]
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	2b00      	cmp	r3, #0
 8013004:	d006      	beq.n	8013014 <tcp_pbuf_prealloc+0xb8>
 8013006:	4b0d      	ldr	r3, [pc, #52]	; (801303c <tcp_pbuf_prealloc+0xe0>)
 8013008:	f240 120b 	movw	r2, #267	; 0x10b
 801300c:	490f      	ldr	r1, [pc, #60]	; (801304c <tcp_pbuf_prealloc+0xf0>)
 801300e:	480d      	ldr	r0, [pc, #52]	; (8013044 <tcp_pbuf_prealloc+0xe8>)
 8013010:	f004 ffcc 	bl	8017fac <iprintf>
  *oversize = p->len - length;
 8013014:	693b      	ldr	r3, [r7, #16]
 8013016:	895a      	ldrh	r2, [r3, #10]
 8013018:	89bb      	ldrh	r3, [r7, #12]
 801301a:	1ad3      	subs	r3, r2, r3
 801301c:	b29a      	uxth	r2, r3
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8013022:	693b      	ldr	r3, [r7, #16]
 8013024:	89ba      	ldrh	r2, [r7, #12]
 8013026:	811a      	strh	r2, [r3, #8]
 8013028:	693b      	ldr	r3, [r7, #16]
 801302a:	891a      	ldrh	r2, [r3, #8]
 801302c:	693b      	ldr	r3, [r7, #16]
 801302e:	815a      	strh	r2, [r3, #10]
  return p;
 8013030:	693b      	ldr	r3, [r7, #16]
}
 8013032:	4618      	mov	r0, r3
 8013034:	3718      	adds	r7, #24
 8013036:	46bd      	mov	sp, r7
 8013038:	bd80      	pop	{r7, pc}
 801303a:	bf00      	nop
 801303c:	0801c83c 	.word	0x0801c83c
 8013040:	0801c8f4 	.word	0x0801c8f4
 8013044:	0801c890 	.word	0x0801c890
 8013048:	0801c918 	.word	0x0801c918
 801304c:	0801c938 	.word	0x0801c938

08013050 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8013050:	b580      	push	{r7, lr}
 8013052:	b082      	sub	sp, #8
 8013054:	af00      	add	r7, sp, #0
 8013056:	6078      	str	r0, [r7, #4]
 8013058:	460b      	mov	r3, r1
 801305a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	2b00      	cmp	r3, #0
 8013060:	d106      	bne.n	8013070 <tcp_write_checks+0x20>
 8013062:	4b33      	ldr	r3, [pc, #204]	; (8013130 <tcp_write_checks+0xe0>)
 8013064:	f240 1233 	movw	r2, #307	; 0x133
 8013068:	4932      	ldr	r1, [pc, #200]	; (8013134 <tcp_write_checks+0xe4>)
 801306a:	4833      	ldr	r0, [pc, #204]	; (8013138 <tcp_write_checks+0xe8>)
 801306c:	f004 ff9e 	bl	8017fac <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	7d1b      	ldrb	r3, [r3, #20]
 8013074:	2b04      	cmp	r3, #4
 8013076:	d00e      	beq.n	8013096 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801307c:	2b07      	cmp	r3, #7
 801307e:	d00a      	beq.n	8013096 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8013084:	2b02      	cmp	r3, #2
 8013086:	d006      	beq.n	8013096 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801308c:	2b03      	cmp	r3, #3
 801308e:	d002      	beq.n	8013096 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8013090:	f06f 030a 	mvn.w	r3, #10
 8013094:	e048      	b.n	8013128 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8013096:	887b      	ldrh	r3, [r7, #2]
 8013098:	2b00      	cmp	r3, #0
 801309a:	d101      	bne.n	80130a0 <tcp_write_checks+0x50>
    return ERR_OK;
 801309c:	2300      	movs	r3, #0
 801309e:	e043      	b.n	8013128 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80130a6:	887a      	ldrh	r2, [r7, #2]
 80130a8:	429a      	cmp	r2, r3
 80130aa:	d909      	bls.n	80130c0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	8b5b      	ldrh	r3, [r3, #26]
 80130b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80130b4:	b29a      	uxth	r2, r3
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80130ba:	f04f 33ff 	mov.w	r3, #4294967295
 80130be:	e033      	b.n	8013128 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80130c6:	2b08      	cmp	r3, #8
 80130c8:	d909      	bls.n	80130de <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	8b5b      	ldrh	r3, [r3, #26]
 80130ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80130d2:	b29a      	uxth	r2, r3
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80130d8:	f04f 33ff 	mov.w	r3, #4294967295
 80130dc:	e024      	b.n	8013128 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d00f      	beq.n	8013108 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d11a      	bne.n	8013126 <tcp_write_checks+0xd6>
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d116      	bne.n	8013126 <tcp_write_checks+0xd6>
 80130f8:	4b0d      	ldr	r3, [pc, #52]	; (8013130 <tcp_write_checks+0xe0>)
 80130fa:	f240 1255 	movw	r2, #341	; 0x155
 80130fe:	490f      	ldr	r1, [pc, #60]	; (801313c <tcp_write_checks+0xec>)
 8013100:	480d      	ldr	r0, [pc, #52]	; (8013138 <tcp_write_checks+0xe8>)
 8013102:	f004 ff53 	bl	8017fac <iprintf>
 8013106:	e00e      	b.n	8013126 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801310c:	2b00      	cmp	r3, #0
 801310e:	d103      	bne.n	8013118 <tcp_write_checks+0xc8>
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013114:	2b00      	cmp	r3, #0
 8013116:	d006      	beq.n	8013126 <tcp_write_checks+0xd6>
 8013118:	4b05      	ldr	r3, [pc, #20]	; (8013130 <tcp_write_checks+0xe0>)
 801311a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801311e:	4908      	ldr	r1, [pc, #32]	; (8013140 <tcp_write_checks+0xf0>)
 8013120:	4805      	ldr	r0, [pc, #20]	; (8013138 <tcp_write_checks+0xe8>)
 8013122:	f004 ff43 	bl	8017fac <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8013126:	2300      	movs	r3, #0
}
 8013128:	4618      	mov	r0, r3
 801312a:	3708      	adds	r7, #8
 801312c:	46bd      	mov	sp, r7
 801312e:	bd80      	pop	{r7, pc}
 8013130:	0801c83c 	.word	0x0801c83c
 8013134:	0801c94c 	.word	0x0801c94c
 8013138:	0801c890 	.word	0x0801c890
 801313c:	0801c96c 	.word	0x0801c96c
 8013140:	0801c9a8 	.word	0x0801c9a8

08013144 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8013144:	b590      	push	{r4, r7, lr}
 8013146:	b09b      	sub	sp, #108	; 0x6c
 8013148:	af04      	add	r7, sp, #16
 801314a:	60f8      	str	r0, [r7, #12]
 801314c:	60b9      	str	r1, [r7, #8]
 801314e:	4611      	mov	r1, r2
 8013150:	461a      	mov	r2, r3
 8013152:	460b      	mov	r3, r1
 8013154:	80fb      	strh	r3, [r7, #6]
 8013156:	4613      	mov	r3, r2
 8013158:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801315a:	2300      	movs	r3, #0
 801315c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801315e:	2300      	movs	r3, #0
 8013160:	653b      	str	r3, [r7, #80]	; 0x50
 8013162:	2300      	movs	r3, #0
 8013164:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013166:	2300      	movs	r3, #0
 8013168:	64bb      	str	r3, [r7, #72]	; 0x48
 801316a:	2300      	movs	r3, #0
 801316c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801316e:	2300      	movs	r3, #0
 8013170:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8013174:	2300      	movs	r3, #0
 8013176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801317a:	2300      	movs	r3, #0
 801317c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801317e:	2300      	movs	r3, #0
 8013180:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8013182:	2300      	movs	r3, #0
 8013184:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	2b00      	cmp	r3, #0
 801318a:	d109      	bne.n	80131a0 <tcp_write+0x5c>
 801318c:	4ba4      	ldr	r3, [pc, #656]	; (8013420 <tcp_write+0x2dc>)
 801318e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8013192:	49a4      	ldr	r1, [pc, #656]	; (8013424 <tcp_write+0x2e0>)
 8013194:	48a4      	ldr	r0, [pc, #656]	; (8013428 <tcp_write+0x2e4>)
 8013196:	f004 ff09 	bl	8017fac <iprintf>
 801319a:	f06f 030f 	mvn.w	r3, #15
 801319e:	e32a      	b.n	80137f6 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80131a6:	085b      	lsrs	r3, r3, #1
 80131a8:	b29a      	uxth	r2, r3
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80131ae:	4293      	cmp	r3, r2
 80131b0:	bf28      	it	cs
 80131b2:	4613      	movcs	r3, r2
 80131b4:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80131b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d102      	bne.n	80131c2 <tcp_write+0x7e>
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80131c0:	e000      	b.n	80131c4 <tcp_write+0x80>
 80131c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80131c4:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80131c6:	68bb      	ldr	r3, [r7, #8]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d109      	bne.n	80131e0 <tcp_write+0x9c>
 80131cc:	4b94      	ldr	r3, [pc, #592]	; (8013420 <tcp_write+0x2dc>)
 80131ce:	f240 12ad 	movw	r2, #429	; 0x1ad
 80131d2:	4996      	ldr	r1, [pc, #600]	; (801342c <tcp_write+0x2e8>)
 80131d4:	4894      	ldr	r0, [pc, #592]	; (8013428 <tcp_write+0x2e4>)
 80131d6:	f004 fee9 	bl	8017fac <iprintf>
 80131da:	f06f 030f 	mvn.w	r3, #15
 80131de:	e30a      	b.n	80137f6 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80131e0:	88fb      	ldrh	r3, [r7, #6]
 80131e2:	4619      	mov	r1, r3
 80131e4:	68f8      	ldr	r0, [r7, #12]
 80131e6:	f7ff ff33 	bl	8013050 <tcp_write_checks>
 80131ea:	4603      	mov	r3, r0
 80131ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80131f0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d002      	beq.n	80131fe <tcp_write+0xba>
    return err;
 80131f8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80131fc:	e2fb      	b.n	80137f6 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013204:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013208:	2300      	movs	r3, #0
 801320a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801320e:	68fb      	ldr	r3, [r7, #12]
 8013210:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013212:	2b00      	cmp	r3, #0
 8013214:	f000 80f6 	beq.w	8013404 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801321c:	653b      	str	r3, [r7, #80]	; 0x50
 801321e:	e002      	b.n	8013226 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8013220:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	2b00      	cmp	r3, #0
 801322c:	d1f8      	bne.n	8013220 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801322e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013230:	7a9b      	ldrb	r3, [r3, #10]
 8013232:	009b      	lsls	r3, r3, #2
 8013234:	b29b      	uxth	r3, r3
 8013236:	f003 0304 	and.w	r3, r3, #4
 801323a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801323c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801323e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013240:	891b      	ldrh	r3, [r3, #8]
 8013242:	4619      	mov	r1, r3
 8013244:	8c3b      	ldrh	r3, [r7, #32]
 8013246:	440b      	add	r3, r1
 8013248:	429a      	cmp	r2, r3
 801324a:	da06      	bge.n	801325a <tcp_write+0x116>
 801324c:	4b74      	ldr	r3, [pc, #464]	; (8013420 <tcp_write+0x2dc>)
 801324e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8013252:	4977      	ldr	r1, [pc, #476]	; (8013430 <tcp_write+0x2ec>)
 8013254:	4874      	ldr	r0, [pc, #464]	; (8013428 <tcp_write+0x2e4>)
 8013256:	f004 fea9 	bl	8017fac <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801325a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801325c:	891a      	ldrh	r2, [r3, #8]
 801325e:	8c3b      	ldrh	r3, [r7, #32]
 8013260:	4413      	add	r3, r2
 8013262:	b29b      	uxth	r3, r3
 8013264:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013266:	1ad3      	subs	r3, r2, r3
 8013268:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801326a:	68fb      	ldr	r3, [r7, #12]
 801326c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013270:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8013272:	8a7b      	ldrh	r3, [r7, #18]
 8013274:	2b00      	cmp	r3, #0
 8013276:	d026      	beq.n	80132c6 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8013278:	8a7b      	ldrh	r3, [r7, #18]
 801327a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801327c:	429a      	cmp	r2, r3
 801327e:	d206      	bcs.n	801328e <tcp_write+0x14a>
 8013280:	4b67      	ldr	r3, [pc, #412]	; (8013420 <tcp_write+0x2dc>)
 8013282:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8013286:	496b      	ldr	r1, [pc, #428]	; (8013434 <tcp_write+0x2f0>)
 8013288:	4867      	ldr	r0, [pc, #412]	; (8013428 <tcp_write+0x2e4>)
 801328a:	f004 fe8f 	bl	8017fac <iprintf>
      seg = last_unsent;
 801328e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013290:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8013292:	8a7b      	ldrh	r3, [r7, #18]
 8013294:	88fa      	ldrh	r2, [r7, #6]
 8013296:	4293      	cmp	r3, r2
 8013298:	bf28      	it	cs
 801329a:	4613      	movcs	r3, r2
 801329c:	b29b      	uxth	r3, r3
 801329e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80132a0:	4293      	cmp	r3, r2
 80132a2:	bf28      	it	cs
 80132a4:	4613      	movcs	r3, r2
 80132a6:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80132a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80132ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80132ae:	4413      	add	r3, r2
 80132b0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80132b4:	8a7a      	ldrh	r2, [r7, #18]
 80132b6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80132b8:	1ad3      	subs	r3, r2, r3
 80132ba:	b29b      	uxth	r3, r3
 80132bc:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80132be:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80132c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80132c2:	1ad3      	subs	r3, r2, r3
 80132c4:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80132c6:	8a7b      	ldrh	r3, [r7, #18]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d00b      	beq.n	80132e4 <tcp_write+0x1a0>
 80132cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80132d0:	88fb      	ldrh	r3, [r7, #6]
 80132d2:	429a      	cmp	r2, r3
 80132d4:	d006      	beq.n	80132e4 <tcp_write+0x1a0>
 80132d6:	4b52      	ldr	r3, [pc, #328]	; (8013420 <tcp_write+0x2dc>)
 80132d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80132dc:	4956      	ldr	r1, [pc, #344]	; (8013438 <tcp_write+0x2f4>)
 80132de:	4852      	ldr	r0, [pc, #328]	; (8013428 <tcp_write+0x2e4>)
 80132e0:	f004 fe64 	bl	8017fac <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80132e4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80132e8:	88fb      	ldrh	r3, [r7, #6]
 80132ea:	429a      	cmp	r2, r3
 80132ec:	f080 8167 	bcs.w	80135be <tcp_write+0x47a>
 80132f0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	f000 8163 	beq.w	80135be <tcp_write+0x47a>
 80132f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80132fa:	891b      	ldrh	r3, [r3, #8]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	f000 815e 	beq.w	80135be <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8013302:	88fa      	ldrh	r2, [r7, #6]
 8013304:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013308:	1ad2      	subs	r2, r2, r3
 801330a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801330c:	4293      	cmp	r3, r2
 801330e:	bfa8      	it	ge
 8013310:	4613      	movge	r3, r2
 8013312:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8013314:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013316:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8013318:	797b      	ldrb	r3, [r7, #5]
 801331a:	f003 0301 	and.w	r3, r3, #1
 801331e:	2b00      	cmp	r3, #0
 8013320:	d027      	beq.n	8013372 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8013322:	f107 0012 	add.w	r0, r7, #18
 8013326:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013328:	8bf9      	ldrh	r1, [r7, #30]
 801332a:	2301      	movs	r3, #1
 801332c:	9302      	str	r3, [sp, #8]
 801332e:	797b      	ldrb	r3, [r7, #5]
 8013330:	9301      	str	r3, [sp, #4]
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	9300      	str	r3, [sp, #0]
 8013336:	4603      	mov	r3, r0
 8013338:	2000      	movs	r0, #0
 801333a:	f7ff fe0f 	bl	8012f5c <tcp_pbuf_prealloc>
 801333e:	6578      	str	r0, [r7, #84]	; 0x54
 8013340:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013342:	2b00      	cmp	r3, #0
 8013344:	f000 8225 	beq.w	8013792 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8013348:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801334a:	6858      	ldr	r0, [r3, #4]
 801334c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013350:	68ba      	ldr	r2, [r7, #8]
 8013352:	4413      	add	r3, r2
 8013354:	8bfa      	ldrh	r2, [r7, #30]
 8013356:	4619      	mov	r1, r3
 8013358:	f004 fd4e 	bl	8017df8 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801335c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801335e:	f7fb f841 	bl	800e3e4 <pbuf_clen>
 8013362:	4603      	mov	r3, r0
 8013364:	461a      	mov	r2, r3
 8013366:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801336a:	4413      	add	r3, r2
 801336c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8013370:	e041      	b.n	80133f6 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8013372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013374:	685b      	ldr	r3, [r3, #4]
 8013376:	637b      	str	r3, [r7, #52]	; 0x34
 8013378:	e002      	b.n	8013380 <tcp_write+0x23c>
 801337a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801337c:	681b      	ldr	r3, [r3, #0]
 801337e:	637b      	str	r3, [r7, #52]	; 0x34
 8013380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013382:	681b      	ldr	r3, [r3, #0]
 8013384:	2b00      	cmp	r3, #0
 8013386:	d1f8      	bne.n	801337a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8013388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801338a:	7b1b      	ldrb	r3, [r3, #12]
 801338c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8013390:	2b00      	cmp	r3, #0
 8013392:	d115      	bne.n	80133c0 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8013394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013396:	685b      	ldr	r3, [r3, #4]
 8013398:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801339a:	8952      	ldrh	r2, [r2, #10]
 801339c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801339e:	68ba      	ldr	r2, [r7, #8]
 80133a0:	429a      	cmp	r2, r3
 80133a2:	d10d      	bne.n	80133c0 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80133a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d006      	beq.n	80133ba <tcp_write+0x276>
 80133ac:	4b1c      	ldr	r3, [pc, #112]	; (8013420 <tcp_write+0x2dc>)
 80133ae:	f240 2231 	movw	r2, #561	; 0x231
 80133b2:	4922      	ldr	r1, [pc, #136]	; (801343c <tcp_write+0x2f8>)
 80133b4:	481c      	ldr	r0, [pc, #112]	; (8013428 <tcp_write+0x2e4>)
 80133b6:	f004 fdf9 	bl	8017fac <iprintf>
          extendlen = seglen;
 80133ba:	8bfb      	ldrh	r3, [r7, #30]
 80133bc:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80133be:	e01a      	b.n	80133f6 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80133c0:	8bfb      	ldrh	r3, [r7, #30]
 80133c2:	2201      	movs	r2, #1
 80133c4:	4619      	mov	r1, r3
 80133c6:	2000      	movs	r0, #0
 80133c8:	f7fa fca0 	bl	800dd0c <pbuf_alloc>
 80133cc:	6578      	str	r0, [r7, #84]	; 0x54
 80133ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	f000 81e0 	beq.w	8013796 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80133d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80133da:	68ba      	ldr	r2, [r7, #8]
 80133dc:	441a      	add	r2, r3
 80133de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80133e0:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80133e2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80133e4:	f7fa fffe 	bl	800e3e4 <pbuf_clen>
 80133e8:	4603      	mov	r3, r0
 80133ea:	461a      	mov	r2, r3
 80133ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80133f0:	4413      	add	r3, r2
 80133f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80133f6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80133fa:	8bfb      	ldrh	r3, [r7, #30]
 80133fc:	4413      	add	r3, r2
 80133fe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8013402:	e0dc      	b.n	80135be <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801340a:	2b00      	cmp	r3, #0
 801340c:	f000 80d7 	beq.w	80135be <tcp_write+0x47a>
 8013410:	4b03      	ldr	r3, [pc, #12]	; (8013420 <tcp_write+0x2dc>)
 8013412:	f240 224a 	movw	r2, #586	; 0x24a
 8013416:	490a      	ldr	r1, [pc, #40]	; (8013440 <tcp_write+0x2fc>)
 8013418:	4803      	ldr	r0, [pc, #12]	; (8013428 <tcp_write+0x2e4>)
 801341a:	f004 fdc7 	bl	8017fac <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801341e:	e0ce      	b.n	80135be <tcp_write+0x47a>
 8013420:	0801c83c 	.word	0x0801c83c
 8013424:	0801c9dc 	.word	0x0801c9dc
 8013428:	0801c890 	.word	0x0801c890
 801342c:	0801c9f4 	.word	0x0801c9f4
 8013430:	0801ca28 	.word	0x0801ca28
 8013434:	0801ca40 	.word	0x0801ca40
 8013438:	0801ca60 	.word	0x0801ca60
 801343c:	0801ca80 	.word	0x0801ca80
 8013440:	0801caac 	.word	0x0801caac
    struct pbuf *p;
    u16_t left = len - pos;
 8013444:	88fa      	ldrh	r2, [r7, #6]
 8013446:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801344a:	1ad3      	subs	r3, r2, r3
 801344c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801344e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013452:	b29b      	uxth	r3, r3
 8013454:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013456:	1ad3      	subs	r3, r2, r3
 8013458:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801345a:	8b7a      	ldrh	r2, [r7, #26]
 801345c:	8bbb      	ldrh	r3, [r7, #28]
 801345e:	4293      	cmp	r3, r2
 8013460:	bf28      	it	cs
 8013462:	4613      	movcs	r3, r2
 8013464:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8013466:	797b      	ldrb	r3, [r7, #5]
 8013468:	f003 0301 	and.w	r3, r3, #1
 801346c:	2b00      	cmp	r3, #0
 801346e:	d036      	beq.n	80134de <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8013470:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013474:	b29a      	uxth	r2, r3
 8013476:	8b3b      	ldrh	r3, [r7, #24]
 8013478:	4413      	add	r3, r2
 801347a:	b299      	uxth	r1, r3
 801347c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801347e:	2b00      	cmp	r3, #0
 8013480:	bf0c      	ite	eq
 8013482:	2301      	moveq	r3, #1
 8013484:	2300      	movne	r3, #0
 8013486:	b2db      	uxtb	r3, r3
 8013488:	f107 0012 	add.w	r0, r7, #18
 801348c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801348e:	9302      	str	r3, [sp, #8]
 8013490:	797b      	ldrb	r3, [r7, #5]
 8013492:	9301      	str	r3, [sp, #4]
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	9300      	str	r3, [sp, #0]
 8013498:	4603      	mov	r3, r0
 801349a:	2036      	movs	r0, #54	; 0x36
 801349c:	f7ff fd5e 	bl	8012f5c <tcp_pbuf_prealloc>
 80134a0:	6338      	str	r0, [r7, #48]	; 0x30
 80134a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	f000 8178 	beq.w	801379a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80134aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134ac:	895b      	ldrh	r3, [r3, #10]
 80134ae:	8b3a      	ldrh	r2, [r7, #24]
 80134b0:	429a      	cmp	r2, r3
 80134b2:	d906      	bls.n	80134c2 <tcp_write+0x37e>
 80134b4:	4b8c      	ldr	r3, [pc, #560]	; (80136e8 <tcp_write+0x5a4>)
 80134b6:	f240 2266 	movw	r2, #614	; 0x266
 80134ba:	498c      	ldr	r1, [pc, #560]	; (80136ec <tcp_write+0x5a8>)
 80134bc:	488c      	ldr	r0, [pc, #560]	; (80136f0 <tcp_write+0x5ac>)
 80134be:	f004 fd75 	bl	8017fac <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80134c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134c4:	685a      	ldr	r2, [r3, #4]
 80134c6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80134ca:	18d0      	adds	r0, r2, r3
 80134cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80134d0:	68ba      	ldr	r2, [r7, #8]
 80134d2:	4413      	add	r3, r2
 80134d4:	8b3a      	ldrh	r2, [r7, #24]
 80134d6:	4619      	mov	r1, r3
 80134d8:	f004 fc8e 	bl	8017df8 <memcpy>
 80134dc:	e02f      	b.n	801353e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80134de:	8a7b      	ldrh	r3, [r7, #18]
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d006      	beq.n	80134f2 <tcp_write+0x3ae>
 80134e4:	4b80      	ldr	r3, [pc, #512]	; (80136e8 <tcp_write+0x5a4>)
 80134e6:	f240 2271 	movw	r2, #625	; 0x271
 80134ea:	4982      	ldr	r1, [pc, #520]	; (80136f4 <tcp_write+0x5b0>)
 80134ec:	4880      	ldr	r0, [pc, #512]	; (80136f0 <tcp_write+0x5ac>)
 80134ee:	f004 fd5d 	bl	8017fac <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80134f2:	8b3b      	ldrh	r3, [r7, #24]
 80134f4:	2201      	movs	r2, #1
 80134f6:	4619      	mov	r1, r3
 80134f8:	2036      	movs	r0, #54	; 0x36
 80134fa:	f7fa fc07 	bl	800dd0c <pbuf_alloc>
 80134fe:	6178      	str	r0, [r7, #20]
 8013500:	697b      	ldr	r3, [r7, #20]
 8013502:	2b00      	cmp	r3, #0
 8013504:	f000 814b 	beq.w	801379e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8013508:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801350c:	68ba      	ldr	r2, [r7, #8]
 801350e:	441a      	add	r2, r3
 8013510:	697b      	ldr	r3, [r7, #20]
 8013512:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013514:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013518:	b29b      	uxth	r3, r3
 801351a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801351e:	4619      	mov	r1, r3
 8013520:	2036      	movs	r0, #54	; 0x36
 8013522:	f7fa fbf3 	bl	800dd0c <pbuf_alloc>
 8013526:	6338      	str	r0, [r7, #48]	; 0x30
 8013528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801352a:	2b00      	cmp	r3, #0
 801352c:	d103      	bne.n	8013536 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801352e:	6978      	ldr	r0, [r7, #20]
 8013530:	f7fa fed0 	bl	800e2d4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8013534:	e136      	b.n	80137a4 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8013536:	6979      	ldr	r1, [r7, #20]
 8013538:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801353a:	f7fa ff8d 	bl	800e458 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801353e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013540:	f7fa ff50 	bl	800e3e4 <pbuf_clen>
 8013544:	4603      	mov	r3, r0
 8013546:	461a      	mov	r2, r3
 8013548:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801354c:	4413      	add	r3, r2
 801354e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8013552:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013556:	2b09      	cmp	r3, #9
 8013558:	d903      	bls.n	8013562 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801355a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801355c:	f7fa feba 	bl	800e2d4 <pbuf_free>
      goto memerr;
 8013560:	e120      	b.n	80137a4 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013566:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801356a:	441a      	add	r2, r3
 801356c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013570:	9300      	str	r3, [sp, #0]
 8013572:	4613      	mov	r3, r2
 8013574:	2200      	movs	r2, #0
 8013576:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013578:	68f8      	ldr	r0, [r7, #12]
 801357a:	f7ff fc51 	bl	8012e20 <tcp_create_segment>
 801357e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8013580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013582:	2b00      	cmp	r3, #0
 8013584:	f000 810d 	beq.w	80137a2 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8013588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801358a:	2b00      	cmp	r3, #0
 801358c:	d102      	bne.n	8013594 <tcp_write+0x450>
      queue = seg;
 801358e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013590:	647b      	str	r3, [r7, #68]	; 0x44
 8013592:	e00c      	b.n	80135ae <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8013594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013596:	2b00      	cmp	r3, #0
 8013598:	d106      	bne.n	80135a8 <tcp_write+0x464>
 801359a:	4b53      	ldr	r3, [pc, #332]	; (80136e8 <tcp_write+0x5a4>)
 801359c:	f240 22ab 	movw	r2, #683	; 0x2ab
 80135a0:	4955      	ldr	r1, [pc, #340]	; (80136f8 <tcp_write+0x5b4>)
 80135a2:	4853      	ldr	r0, [pc, #332]	; (80136f0 <tcp_write+0x5ac>)
 80135a4:	f004 fd02 	bl	8017fac <iprintf>
      prev_seg->next = seg;
 80135a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80135aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80135ac:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80135ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80135b0:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80135b2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80135b6:	8b3b      	ldrh	r3, [r7, #24]
 80135b8:	4413      	add	r3, r2
 80135ba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80135be:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80135c2:	88fb      	ldrh	r3, [r7, #6]
 80135c4:	429a      	cmp	r2, r3
 80135c6:	f4ff af3d 	bcc.w	8013444 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80135ca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d02c      	beq.n	801362a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80135d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135d2:	685b      	ldr	r3, [r3, #4]
 80135d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80135d6:	e01e      	b.n	8013616 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80135d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135da:	891a      	ldrh	r2, [r3, #8]
 80135dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80135de:	4413      	add	r3, r2
 80135e0:	b29a      	uxth	r2, r3
 80135e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135e4:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80135e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d110      	bne.n	8013610 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80135ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135f0:	685b      	ldr	r3, [r3, #4]
 80135f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80135f4:	8952      	ldrh	r2, [r2, #10]
 80135f6:	4413      	add	r3, r2
 80135f8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80135fa:	68b9      	ldr	r1, [r7, #8]
 80135fc:	4618      	mov	r0, r3
 80135fe:	f004 fbfb 	bl	8017df8 <memcpy>
        p->len += oversize_used;
 8013602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013604:	895a      	ldrh	r2, [r3, #10]
 8013606:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013608:	4413      	add	r3, r2
 801360a:	b29a      	uxth	r2, r3
 801360c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801360e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8013610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013618:	2b00      	cmp	r3, #0
 801361a:	d1dd      	bne.n	80135d8 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801361c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801361e:	891a      	ldrh	r2, [r3, #8]
 8013620:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013622:	4413      	add	r3, r2
 8013624:	b29a      	uxth	r2, r3
 8013626:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013628:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801362a:	8a7a      	ldrh	r2, [r7, #18]
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8013632:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013634:	2b00      	cmp	r3, #0
 8013636:	d018      	beq.n	801366a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8013638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801363a:	2b00      	cmp	r3, #0
 801363c:	d106      	bne.n	801364c <tcp_write+0x508>
 801363e:	4b2a      	ldr	r3, [pc, #168]	; (80136e8 <tcp_write+0x5a4>)
 8013640:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8013644:	492d      	ldr	r1, [pc, #180]	; (80136fc <tcp_write+0x5b8>)
 8013646:	482a      	ldr	r0, [pc, #168]	; (80136f0 <tcp_write+0x5ac>)
 8013648:	f004 fcb0 	bl	8017fac <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801364c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801364e:	685b      	ldr	r3, [r3, #4]
 8013650:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013652:	4618      	mov	r0, r3
 8013654:	f7fa ff00 	bl	800e458 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8013658:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801365a:	891a      	ldrh	r2, [r3, #8]
 801365c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801365e:	891b      	ldrh	r3, [r3, #8]
 8013660:	4413      	add	r3, r2
 8013662:	b29a      	uxth	r2, r3
 8013664:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013666:	811a      	strh	r2, [r3, #8]
 8013668:	e037      	b.n	80136da <tcp_write+0x596>
  } else if (extendlen > 0) {
 801366a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801366c:	2b00      	cmp	r3, #0
 801366e:	d034      	beq.n	80136da <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8013670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013672:	2b00      	cmp	r3, #0
 8013674:	d003      	beq.n	801367e <tcp_write+0x53a>
 8013676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013678:	685b      	ldr	r3, [r3, #4]
 801367a:	2b00      	cmp	r3, #0
 801367c:	d106      	bne.n	801368c <tcp_write+0x548>
 801367e:	4b1a      	ldr	r3, [pc, #104]	; (80136e8 <tcp_write+0x5a4>)
 8013680:	f240 22e6 	movw	r2, #742	; 0x2e6
 8013684:	491e      	ldr	r1, [pc, #120]	; (8013700 <tcp_write+0x5bc>)
 8013686:	481a      	ldr	r0, [pc, #104]	; (80136f0 <tcp_write+0x5ac>)
 8013688:	f004 fc90 	bl	8017fac <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801368c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801368e:	685b      	ldr	r3, [r3, #4]
 8013690:	62bb      	str	r3, [r7, #40]	; 0x28
 8013692:	e009      	b.n	80136a8 <tcp_write+0x564>
      p->tot_len += extendlen;
 8013694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013696:	891a      	ldrh	r2, [r3, #8]
 8013698:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801369a:	4413      	add	r3, r2
 801369c:	b29a      	uxth	r2, r3
 801369e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136a0:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80136a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80136a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d1f1      	bne.n	8013694 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80136b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136b2:	891a      	ldrh	r2, [r3, #8]
 80136b4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80136b6:	4413      	add	r3, r2
 80136b8:	b29a      	uxth	r2, r3
 80136ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136bc:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80136be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136c0:	895a      	ldrh	r2, [r3, #10]
 80136c2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80136c4:	4413      	add	r3, r2
 80136c6:	b29a      	uxth	r2, r3
 80136c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136ca:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80136cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80136ce:	891a      	ldrh	r2, [r3, #8]
 80136d0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80136d2:	4413      	add	r3, r2
 80136d4:	b29a      	uxth	r2, r3
 80136d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80136d8:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80136da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d111      	bne.n	8013704 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80136e4:	66da      	str	r2, [r3, #108]	; 0x6c
 80136e6:	e010      	b.n	801370a <tcp_write+0x5c6>
 80136e8:	0801c83c 	.word	0x0801c83c
 80136ec:	0801cadc 	.word	0x0801cadc
 80136f0:	0801c890 	.word	0x0801c890
 80136f4:	0801cb1c 	.word	0x0801cb1c
 80136f8:	0801cb2c 	.word	0x0801cb2c
 80136fc:	0801cb40 	.word	0x0801cb40
 8013700:	0801cb78 	.word	0x0801cb78
  } else {
    last_unsent->next = queue;
 8013704:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013706:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013708:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801370e:	88fb      	ldrh	r3, [r7, #6]
 8013710:	441a      	add	r2, r3
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801371c:	88fb      	ldrh	r3, [r7, #6]
 801371e:	1ad3      	subs	r3, r2, r3
 8013720:	b29a      	uxth	r2, r3
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8013728:	68fb      	ldr	r3, [r7, #12]
 801372a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801372e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013738:	2b00      	cmp	r3, #0
 801373a:	d00e      	beq.n	801375a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013740:	2b00      	cmp	r3, #0
 8013742:	d10a      	bne.n	801375a <tcp_write+0x616>
 8013744:	68fb      	ldr	r3, [r7, #12]
 8013746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013748:	2b00      	cmp	r3, #0
 801374a:	d106      	bne.n	801375a <tcp_write+0x616>
 801374c:	4b2c      	ldr	r3, [pc, #176]	; (8013800 <tcp_write+0x6bc>)
 801374e:	f240 3212 	movw	r2, #786	; 0x312
 8013752:	492c      	ldr	r1, [pc, #176]	; (8013804 <tcp_write+0x6c0>)
 8013754:	482c      	ldr	r0, [pc, #176]	; (8013808 <tcp_write+0x6c4>)
 8013756:	f004 fc29 	bl	8017fac <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801375a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801375c:	2b00      	cmp	r3, #0
 801375e:	d016      	beq.n	801378e <tcp_write+0x64a>
 8013760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013762:	68db      	ldr	r3, [r3, #12]
 8013764:	2b00      	cmp	r3, #0
 8013766:	d012      	beq.n	801378e <tcp_write+0x64a>
 8013768:	797b      	ldrb	r3, [r7, #5]
 801376a:	f003 0302 	and.w	r3, r3, #2
 801376e:	2b00      	cmp	r3, #0
 8013770:	d10d      	bne.n	801378e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8013772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013774:	68db      	ldr	r3, [r3, #12]
 8013776:	899b      	ldrh	r3, [r3, #12]
 8013778:	b29c      	uxth	r4, r3
 801377a:	2008      	movs	r0, #8
 801377c:	f7f9 faf6 	bl	800cd6c <lwip_htons>
 8013780:	4603      	mov	r3, r0
 8013782:	461a      	mov	r2, r3
 8013784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013786:	68db      	ldr	r3, [r3, #12]
 8013788:	4322      	orrs	r2, r4
 801378a:	b292      	uxth	r2, r2
 801378c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801378e:	2300      	movs	r3, #0
 8013790:	e031      	b.n	80137f6 <tcp_write+0x6b2>
          goto memerr;
 8013792:	bf00      	nop
 8013794:	e006      	b.n	80137a4 <tcp_write+0x660>
            goto memerr;
 8013796:	bf00      	nop
 8013798:	e004      	b.n	80137a4 <tcp_write+0x660>
        goto memerr;
 801379a:	bf00      	nop
 801379c:	e002      	b.n	80137a4 <tcp_write+0x660>
        goto memerr;
 801379e:	bf00      	nop
 80137a0:	e000      	b.n	80137a4 <tcp_write+0x660>
      goto memerr;
 80137a2:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	8b5b      	ldrh	r3, [r3, #26]
 80137a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80137ac:	b29a      	uxth	r2, r3
 80137ae:	68fb      	ldr	r3, [r7, #12]
 80137b0:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80137b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d002      	beq.n	80137be <tcp_write+0x67a>
    pbuf_free(concat_p);
 80137b8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80137ba:	f7fa fd8b 	bl	800e2d4 <pbuf_free>
  }
  if (queue != NULL) {
 80137be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d002      	beq.n	80137ca <tcp_write+0x686>
    tcp_segs_free(queue);
 80137c4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80137c6:	f7fc fb57 	bl	800fe78 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80137ca:	68fb      	ldr	r3, [r7, #12]
 80137cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d00e      	beq.n	80137f2 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d10a      	bne.n	80137f2 <tcp_write+0x6ae>
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d106      	bne.n	80137f2 <tcp_write+0x6ae>
 80137e4:	4b06      	ldr	r3, [pc, #24]	; (8013800 <tcp_write+0x6bc>)
 80137e6:	f240 3227 	movw	r2, #807	; 0x327
 80137ea:	4906      	ldr	r1, [pc, #24]	; (8013804 <tcp_write+0x6c0>)
 80137ec:	4806      	ldr	r0, [pc, #24]	; (8013808 <tcp_write+0x6c4>)
 80137ee:	f004 fbdd 	bl	8017fac <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80137f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80137f6:	4618      	mov	r0, r3
 80137f8:	375c      	adds	r7, #92	; 0x5c
 80137fa:	46bd      	mov	sp, r7
 80137fc:	bd90      	pop	{r4, r7, pc}
 80137fe:	bf00      	nop
 8013800:	0801c83c 	.word	0x0801c83c
 8013804:	0801cbb0 	.word	0x0801cbb0
 8013808:	0801c890 	.word	0x0801c890

0801380c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801380c:	b590      	push	{r4, r7, lr}
 801380e:	b08b      	sub	sp, #44	; 0x2c
 8013810:	af02      	add	r7, sp, #8
 8013812:	6078      	str	r0, [r7, #4]
 8013814:	460b      	mov	r3, r1
 8013816:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8013818:	2300      	movs	r3, #0
 801381a:	61fb      	str	r3, [r7, #28]
 801381c:	2300      	movs	r3, #0
 801381e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8013820:	2300      	movs	r3, #0
 8013822:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	2b00      	cmp	r3, #0
 8013828:	d106      	bne.n	8013838 <tcp_split_unsent_seg+0x2c>
 801382a:	4b95      	ldr	r3, [pc, #596]	; (8013a80 <tcp_split_unsent_seg+0x274>)
 801382c:	f240 324b 	movw	r2, #843	; 0x34b
 8013830:	4994      	ldr	r1, [pc, #592]	; (8013a84 <tcp_split_unsent_seg+0x278>)
 8013832:	4895      	ldr	r0, [pc, #596]	; (8013a88 <tcp_split_unsent_seg+0x27c>)
 8013834:	f004 fbba 	bl	8017fac <iprintf>

  useg = pcb->unsent;
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801383c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801383e:	697b      	ldr	r3, [r7, #20]
 8013840:	2b00      	cmp	r3, #0
 8013842:	d102      	bne.n	801384a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013844:	f04f 33ff 	mov.w	r3, #4294967295
 8013848:	e116      	b.n	8013a78 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801384a:	887b      	ldrh	r3, [r7, #2]
 801384c:	2b00      	cmp	r3, #0
 801384e:	d109      	bne.n	8013864 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8013850:	4b8b      	ldr	r3, [pc, #556]	; (8013a80 <tcp_split_unsent_seg+0x274>)
 8013852:	f240 3253 	movw	r2, #851	; 0x353
 8013856:	498d      	ldr	r1, [pc, #564]	; (8013a8c <tcp_split_unsent_seg+0x280>)
 8013858:	488b      	ldr	r0, [pc, #556]	; (8013a88 <tcp_split_unsent_seg+0x27c>)
 801385a:	f004 fba7 	bl	8017fac <iprintf>
    return ERR_VAL;
 801385e:	f06f 0305 	mvn.w	r3, #5
 8013862:	e109      	b.n	8013a78 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8013864:	697b      	ldr	r3, [r7, #20]
 8013866:	891b      	ldrh	r3, [r3, #8]
 8013868:	887a      	ldrh	r2, [r7, #2]
 801386a:	429a      	cmp	r2, r3
 801386c:	d301      	bcc.n	8013872 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801386e:	2300      	movs	r3, #0
 8013870:	e102      	b.n	8013a78 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013876:	887a      	ldrh	r2, [r7, #2]
 8013878:	429a      	cmp	r2, r3
 801387a:	d906      	bls.n	801388a <tcp_split_unsent_seg+0x7e>
 801387c:	4b80      	ldr	r3, [pc, #512]	; (8013a80 <tcp_split_unsent_seg+0x274>)
 801387e:	f240 325b 	movw	r2, #859	; 0x35b
 8013882:	4983      	ldr	r1, [pc, #524]	; (8013a90 <tcp_split_unsent_seg+0x284>)
 8013884:	4880      	ldr	r0, [pc, #512]	; (8013a88 <tcp_split_unsent_seg+0x27c>)
 8013886:	f004 fb91 	bl	8017fac <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801388a:	697b      	ldr	r3, [r7, #20]
 801388c:	891b      	ldrh	r3, [r3, #8]
 801388e:	2b00      	cmp	r3, #0
 8013890:	d106      	bne.n	80138a0 <tcp_split_unsent_seg+0x94>
 8013892:	4b7b      	ldr	r3, [pc, #492]	; (8013a80 <tcp_split_unsent_seg+0x274>)
 8013894:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8013898:	497e      	ldr	r1, [pc, #504]	; (8013a94 <tcp_split_unsent_seg+0x288>)
 801389a:	487b      	ldr	r0, [pc, #492]	; (8013a88 <tcp_split_unsent_seg+0x27c>)
 801389c:	f004 fb86 	bl	8017fac <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80138a0:	697b      	ldr	r3, [r7, #20]
 80138a2:	7a9b      	ldrb	r3, [r3, #10]
 80138a4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80138a6:	7bfb      	ldrb	r3, [r7, #15]
 80138a8:	009b      	lsls	r3, r3, #2
 80138aa:	b2db      	uxtb	r3, r3
 80138ac:	f003 0304 	and.w	r3, r3, #4
 80138b0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80138b2:	697b      	ldr	r3, [r7, #20]
 80138b4:	891a      	ldrh	r2, [r3, #8]
 80138b6:	887b      	ldrh	r3, [r7, #2]
 80138b8:	1ad3      	subs	r3, r2, r3
 80138ba:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80138bc:	7bbb      	ldrb	r3, [r7, #14]
 80138be:	b29a      	uxth	r2, r3
 80138c0:	89bb      	ldrh	r3, [r7, #12]
 80138c2:	4413      	add	r3, r2
 80138c4:	b29b      	uxth	r3, r3
 80138c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80138ca:	4619      	mov	r1, r3
 80138cc:	2036      	movs	r0, #54	; 0x36
 80138ce:	f7fa fa1d 	bl	800dd0c <pbuf_alloc>
 80138d2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80138d4:	693b      	ldr	r3, [r7, #16]
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	f000 80b7 	beq.w	8013a4a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80138dc:	697b      	ldr	r3, [r7, #20]
 80138de:	685b      	ldr	r3, [r3, #4]
 80138e0:	891a      	ldrh	r2, [r3, #8]
 80138e2:	697b      	ldr	r3, [r7, #20]
 80138e4:	891b      	ldrh	r3, [r3, #8]
 80138e6:	1ad3      	subs	r3, r2, r3
 80138e8:	b29a      	uxth	r2, r3
 80138ea:	887b      	ldrh	r3, [r7, #2]
 80138ec:	4413      	add	r3, r2
 80138ee:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80138f0:	697b      	ldr	r3, [r7, #20]
 80138f2:	6858      	ldr	r0, [r3, #4]
 80138f4:	693b      	ldr	r3, [r7, #16]
 80138f6:	685a      	ldr	r2, [r3, #4]
 80138f8:	7bbb      	ldrb	r3, [r7, #14]
 80138fa:	18d1      	adds	r1, r2, r3
 80138fc:	897b      	ldrh	r3, [r7, #10]
 80138fe:	89ba      	ldrh	r2, [r7, #12]
 8013900:	f7fa fee2 	bl	800e6c8 <pbuf_copy_partial>
 8013904:	4603      	mov	r3, r0
 8013906:	461a      	mov	r2, r3
 8013908:	89bb      	ldrh	r3, [r7, #12]
 801390a:	4293      	cmp	r3, r2
 801390c:	f040 809f 	bne.w	8013a4e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8013910:	697b      	ldr	r3, [r7, #20]
 8013912:	68db      	ldr	r3, [r3, #12]
 8013914:	899b      	ldrh	r3, [r3, #12]
 8013916:	b29b      	uxth	r3, r3
 8013918:	4618      	mov	r0, r3
 801391a:	f7f9 fa27 	bl	800cd6c <lwip_htons>
 801391e:	4603      	mov	r3, r0
 8013920:	b2db      	uxtb	r3, r3
 8013922:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013926:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8013928:	2300      	movs	r3, #0
 801392a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801392c:	7efb      	ldrb	r3, [r7, #27]
 801392e:	f003 0308 	and.w	r3, r3, #8
 8013932:	2b00      	cmp	r3, #0
 8013934:	d007      	beq.n	8013946 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8013936:	7efb      	ldrb	r3, [r7, #27]
 8013938:	f023 0308 	bic.w	r3, r3, #8
 801393c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801393e:	7ebb      	ldrb	r3, [r7, #26]
 8013940:	f043 0308 	orr.w	r3, r3, #8
 8013944:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8013946:	7efb      	ldrb	r3, [r7, #27]
 8013948:	f003 0301 	and.w	r3, r3, #1
 801394c:	2b00      	cmp	r3, #0
 801394e:	d007      	beq.n	8013960 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8013950:	7efb      	ldrb	r3, [r7, #27]
 8013952:	f023 0301 	bic.w	r3, r3, #1
 8013956:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8013958:	7ebb      	ldrb	r3, [r7, #26]
 801395a:	f043 0301 	orr.w	r3, r3, #1
 801395e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8013960:	697b      	ldr	r3, [r7, #20]
 8013962:	68db      	ldr	r3, [r3, #12]
 8013964:	685b      	ldr	r3, [r3, #4]
 8013966:	4618      	mov	r0, r3
 8013968:	f7f9 fa15 	bl	800cd96 <lwip_htonl>
 801396c:	4602      	mov	r2, r0
 801396e:	887b      	ldrh	r3, [r7, #2]
 8013970:	18d1      	adds	r1, r2, r3
 8013972:	7eba      	ldrb	r2, [r7, #26]
 8013974:	7bfb      	ldrb	r3, [r7, #15]
 8013976:	9300      	str	r3, [sp, #0]
 8013978:	460b      	mov	r3, r1
 801397a:	6939      	ldr	r1, [r7, #16]
 801397c:	6878      	ldr	r0, [r7, #4]
 801397e:	f7ff fa4f 	bl	8012e20 <tcp_create_segment>
 8013982:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8013984:	69fb      	ldr	r3, [r7, #28]
 8013986:	2b00      	cmp	r3, #0
 8013988:	d063      	beq.n	8013a52 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801398a:	697b      	ldr	r3, [r7, #20]
 801398c:	685b      	ldr	r3, [r3, #4]
 801398e:	4618      	mov	r0, r3
 8013990:	f7fa fd28 	bl	800e3e4 <pbuf_clen>
 8013994:	4603      	mov	r3, r0
 8013996:	461a      	mov	r2, r3
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801399e:	1a9b      	subs	r3, r3, r2
 80139a0:	b29a      	uxth	r2, r3
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80139a8:	697b      	ldr	r3, [r7, #20]
 80139aa:	6858      	ldr	r0, [r3, #4]
 80139ac:	697b      	ldr	r3, [r7, #20]
 80139ae:	685b      	ldr	r3, [r3, #4]
 80139b0:	891a      	ldrh	r2, [r3, #8]
 80139b2:	89bb      	ldrh	r3, [r7, #12]
 80139b4:	1ad3      	subs	r3, r2, r3
 80139b6:	b29b      	uxth	r3, r3
 80139b8:	4619      	mov	r1, r3
 80139ba:	f7fa fb05 	bl	800dfc8 <pbuf_realloc>
  useg->len -= remainder;
 80139be:	697b      	ldr	r3, [r7, #20]
 80139c0:	891a      	ldrh	r2, [r3, #8]
 80139c2:	89bb      	ldrh	r3, [r7, #12]
 80139c4:	1ad3      	subs	r3, r2, r3
 80139c6:	b29a      	uxth	r2, r3
 80139c8:	697b      	ldr	r3, [r7, #20]
 80139ca:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80139cc:	697b      	ldr	r3, [r7, #20]
 80139ce:	68db      	ldr	r3, [r3, #12]
 80139d0:	899b      	ldrh	r3, [r3, #12]
 80139d2:	b29c      	uxth	r4, r3
 80139d4:	7efb      	ldrb	r3, [r7, #27]
 80139d6:	b29b      	uxth	r3, r3
 80139d8:	4618      	mov	r0, r3
 80139da:	f7f9 f9c7 	bl	800cd6c <lwip_htons>
 80139de:	4603      	mov	r3, r0
 80139e0:	461a      	mov	r2, r3
 80139e2:	697b      	ldr	r3, [r7, #20]
 80139e4:	68db      	ldr	r3, [r3, #12]
 80139e6:	4322      	orrs	r2, r4
 80139e8:	b292      	uxth	r2, r2
 80139ea:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80139ec:	697b      	ldr	r3, [r7, #20]
 80139ee:	685b      	ldr	r3, [r3, #4]
 80139f0:	4618      	mov	r0, r3
 80139f2:	f7fa fcf7 	bl	800e3e4 <pbuf_clen>
 80139f6:	4603      	mov	r3, r0
 80139f8:	461a      	mov	r2, r3
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013a00:	4413      	add	r3, r2
 8013a02:	b29a      	uxth	r2, r3
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013a0a:	69fb      	ldr	r3, [r7, #28]
 8013a0c:	685b      	ldr	r3, [r3, #4]
 8013a0e:	4618      	mov	r0, r3
 8013a10:	f7fa fce8 	bl	800e3e4 <pbuf_clen>
 8013a14:	4603      	mov	r3, r0
 8013a16:	461a      	mov	r2, r3
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013a1e:	4413      	add	r3, r2
 8013a20:	b29a      	uxth	r2, r3
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8013a28:	697b      	ldr	r3, [r7, #20]
 8013a2a:	681a      	ldr	r2, [r3, #0]
 8013a2c:	69fb      	ldr	r3, [r7, #28]
 8013a2e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013a30:	697b      	ldr	r3, [r7, #20]
 8013a32:	69fa      	ldr	r2, [r7, #28]
 8013a34:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8013a36:	69fb      	ldr	r3, [r7, #28]
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d103      	bne.n	8013a46 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	2200      	movs	r2, #0
 8013a42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8013a46:	2300      	movs	r3, #0
 8013a48:	e016      	b.n	8013a78 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8013a4a:	bf00      	nop
 8013a4c:	e002      	b.n	8013a54 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013a4e:	bf00      	nop
 8013a50:	e000      	b.n	8013a54 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013a52:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013a54:	69fb      	ldr	r3, [r7, #28]
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d006      	beq.n	8013a68 <tcp_split_unsent_seg+0x25c>
 8013a5a:	4b09      	ldr	r3, [pc, #36]	; (8013a80 <tcp_split_unsent_seg+0x274>)
 8013a5c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8013a60:	490d      	ldr	r1, [pc, #52]	; (8013a98 <tcp_split_unsent_seg+0x28c>)
 8013a62:	4809      	ldr	r0, [pc, #36]	; (8013a88 <tcp_split_unsent_seg+0x27c>)
 8013a64:	f004 faa2 	bl	8017fac <iprintf>
  if (p != NULL) {
 8013a68:	693b      	ldr	r3, [r7, #16]
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d002      	beq.n	8013a74 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8013a6e:	6938      	ldr	r0, [r7, #16]
 8013a70:	f7fa fc30 	bl	800e2d4 <pbuf_free>
  }

  return ERR_MEM;
 8013a74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013a78:	4618      	mov	r0, r3
 8013a7a:	3724      	adds	r7, #36	; 0x24
 8013a7c:	46bd      	mov	sp, r7
 8013a7e:	bd90      	pop	{r4, r7, pc}
 8013a80:	0801c83c 	.word	0x0801c83c
 8013a84:	0801cbd0 	.word	0x0801cbd0
 8013a88:	0801c890 	.word	0x0801c890
 8013a8c:	0801cbf4 	.word	0x0801cbf4
 8013a90:	0801cc18 	.word	0x0801cc18
 8013a94:	0801cc28 	.word	0x0801cc28
 8013a98:	0801cc38 	.word	0x0801cc38

08013a9c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013a9c:	b590      	push	{r4, r7, lr}
 8013a9e:	b085      	sub	sp, #20
 8013aa0:	af00      	add	r7, sp, #0
 8013aa2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d106      	bne.n	8013ab8 <tcp_send_fin+0x1c>
 8013aaa:	4b21      	ldr	r3, [pc, #132]	; (8013b30 <tcp_send_fin+0x94>)
 8013aac:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8013ab0:	4920      	ldr	r1, [pc, #128]	; (8013b34 <tcp_send_fin+0x98>)
 8013ab2:	4821      	ldr	r0, [pc, #132]	; (8013b38 <tcp_send_fin+0x9c>)
 8013ab4:	f004 fa7a 	bl	8017fac <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d02e      	beq.n	8013b1e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ac4:	60fb      	str	r3, [r7, #12]
 8013ac6:	e002      	b.n	8013ace <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	681b      	ldr	r3, [r3, #0]
 8013acc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d1f8      	bne.n	8013ac8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	68db      	ldr	r3, [r3, #12]
 8013ada:	899b      	ldrh	r3, [r3, #12]
 8013adc:	b29b      	uxth	r3, r3
 8013ade:	4618      	mov	r0, r3
 8013ae0:	f7f9 f944 	bl	800cd6c <lwip_htons>
 8013ae4:	4603      	mov	r3, r0
 8013ae6:	b2db      	uxtb	r3, r3
 8013ae8:	f003 0307 	and.w	r3, r3, #7
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d116      	bne.n	8013b1e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	68db      	ldr	r3, [r3, #12]
 8013af4:	899b      	ldrh	r3, [r3, #12]
 8013af6:	b29c      	uxth	r4, r3
 8013af8:	2001      	movs	r0, #1
 8013afa:	f7f9 f937 	bl	800cd6c <lwip_htons>
 8013afe:	4603      	mov	r3, r0
 8013b00:	461a      	mov	r2, r3
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	68db      	ldr	r3, [r3, #12]
 8013b06:	4322      	orrs	r2, r4
 8013b08:	b292      	uxth	r2, r2
 8013b0a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	8b5b      	ldrh	r3, [r3, #26]
 8013b10:	f043 0320 	orr.w	r3, r3, #32
 8013b14:	b29a      	uxth	r2, r3
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8013b1a:	2300      	movs	r3, #0
 8013b1c:	e004      	b.n	8013b28 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013b1e:	2101      	movs	r1, #1
 8013b20:	6878      	ldr	r0, [r7, #4]
 8013b22:	f000 f80b 	bl	8013b3c <tcp_enqueue_flags>
 8013b26:	4603      	mov	r3, r0
}
 8013b28:	4618      	mov	r0, r3
 8013b2a:	3714      	adds	r7, #20
 8013b2c:	46bd      	mov	sp, r7
 8013b2e:	bd90      	pop	{r4, r7, pc}
 8013b30:	0801c83c 	.word	0x0801c83c
 8013b34:	0801cc44 	.word	0x0801cc44
 8013b38:	0801c890 	.word	0x0801c890

08013b3c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013b3c:	b580      	push	{r7, lr}
 8013b3e:	b08a      	sub	sp, #40	; 0x28
 8013b40:	af02      	add	r7, sp, #8
 8013b42:	6078      	str	r0, [r7, #4]
 8013b44:	460b      	mov	r3, r1
 8013b46:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013b48:	2300      	movs	r3, #0
 8013b4a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013b4c:	2300      	movs	r3, #0
 8013b4e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013b50:	78fb      	ldrb	r3, [r7, #3]
 8013b52:	f003 0303 	and.w	r3, r3, #3
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d106      	bne.n	8013b68 <tcp_enqueue_flags+0x2c>
 8013b5a:	4b67      	ldr	r3, [pc, #412]	; (8013cf8 <tcp_enqueue_flags+0x1bc>)
 8013b5c:	f240 4211 	movw	r2, #1041	; 0x411
 8013b60:	4966      	ldr	r1, [pc, #408]	; (8013cfc <tcp_enqueue_flags+0x1c0>)
 8013b62:	4867      	ldr	r0, [pc, #412]	; (8013d00 <tcp_enqueue_flags+0x1c4>)
 8013b64:	f004 fa22 	bl	8017fac <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d106      	bne.n	8013b7c <tcp_enqueue_flags+0x40>
 8013b6e:	4b62      	ldr	r3, [pc, #392]	; (8013cf8 <tcp_enqueue_flags+0x1bc>)
 8013b70:	f240 4213 	movw	r2, #1043	; 0x413
 8013b74:	4963      	ldr	r1, [pc, #396]	; (8013d04 <tcp_enqueue_flags+0x1c8>)
 8013b76:	4862      	ldr	r0, [pc, #392]	; (8013d00 <tcp_enqueue_flags+0x1c4>)
 8013b78:	f004 fa18 	bl	8017fac <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013b7c:	78fb      	ldrb	r3, [r7, #3]
 8013b7e:	f003 0302 	and.w	r3, r3, #2
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d001      	beq.n	8013b8a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8013b86:	2301      	movs	r3, #1
 8013b88:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013b8a:	7ffb      	ldrb	r3, [r7, #31]
 8013b8c:	009b      	lsls	r3, r3, #2
 8013b8e:	b2db      	uxtb	r3, r3
 8013b90:	f003 0304 	and.w	r3, r3, #4
 8013b94:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013b96:	7dfb      	ldrb	r3, [r7, #23]
 8013b98:	b29b      	uxth	r3, r3
 8013b9a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013b9e:	4619      	mov	r1, r3
 8013ba0:	2036      	movs	r0, #54	; 0x36
 8013ba2:	f7fa f8b3 	bl	800dd0c <pbuf_alloc>
 8013ba6:	6138      	str	r0, [r7, #16]
 8013ba8:	693b      	ldr	r3, [r7, #16]
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d109      	bne.n	8013bc2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	8b5b      	ldrh	r3, [r3, #26]
 8013bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013bb6:	b29a      	uxth	r2, r3
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8013bc0:	e095      	b.n	8013cee <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013bc2:	693b      	ldr	r3, [r7, #16]
 8013bc4:	895a      	ldrh	r2, [r3, #10]
 8013bc6:	7dfb      	ldrb	r3, [r7, #23]
 8013bc8:	b29b      	uxth	r3, r3
 8013bca:	429a      	cmp	r2, r3
 8013bcc:	d206      	bcs.n	8013bdc <tcp_enqueue_flags+0xa0>
 8013bce:	4b4a      	ldr	r3, [pc, #296]	; (8013cf8 <tcp_enqueue_flags+0x1bc>)
 8013bd0:	f240 4239 	movw	r2, #1081	; 0x439
 8013bd4:	494c      	ldr	r1, [pc, #304]	; (8013d08 <tcp_enqueue_flags+0x1cc>)
 8013bd6:	484a      	ldr	r0, [pc, #296]	; (8013d00 <tcp_enqueue_flags+0x1c4>)
 8013bd8:	f004 f9e8 	bl	8017fac <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013be0:	78fa      	ldrb	r2, [r7, #3]
 8013be2:	7ffb      	ldrb	r3, [r7, #31]
 8013be4:	9300      	str	r3, [sp, #0]
 8013be6:	460b      	mov	r3, r1
 8013be8:	6939      	ldr	r1, [r7, #16]
 8013bea:	6878      	ldr	r0, [r7, #4]
 8013bec:	f7ff f918 	bl	8012e20 <tcp_create_segment>
 8013bf0:	60f8      	str	r0, [r7, #12]
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d109      	bne.n	8013c0c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	8b5b      	ldrh	r3, [r3, #26]
 8013bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013c00:	b29a      	uxth	r2, r3
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013c06:	f04f 33ff 	mov.w	r3, #4294967295
 8013c0a:	e070      	b.n	8013cee <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013c0c:	68fb      	ldr	r3, [r7, #12]
 8013c0e:	68db      	ldr	r3, [r3, #12]
 8013c10:	f003 0303 	and.w	r3, r3, #3
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d006      	beq.n	8013c26 <tcp_enqueue_flags+0xea>
 8013c18:	4b37      	ldr	r3, [pc, #220]	; (8013cf8 <tcp_enqueue_flags+0x1bc>)
 8013c1a:	f240 4242 	movw	r2, #1090	; 0x442
 8013c1e:	493b      	ldr	r1, [pc, #236]	; (8013d0c <tcp_enqueue_flags+0x1d0>)
 8013c20:	4837      	ldr	r0, [pc, #220]	; (8013d00 <tcp_enqueue_flags+0x1c4>)
 8013c22:	f004 f9c3 	bl	8017fac <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	891b      	ldrh	r3, [r3, #8]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d006      	beq.n	8013c3c <tcp_enqueue_flags+0x100>
 8013c2e:	4b32      	ldr	r3, [pc, #200]	; (8013cf8 <tcp_enqueue_flags+0x1bc>)
 8013c30:	f240 4243 	movw	r2, #1091	; 0x443
 8013c34:	4936      	ldr	r1, [pc, #216]	; (8013d10 <tcp_enqueue_flags+0x1d4>)
 8013c36:	4832      	ldr	r0, [pc, #200]	; (8013d00 <tcp_enqueue_flags+0x1c4>)
 8013c38:	f004 f9b8 	bl	8017fac <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d103      	bne.n	8013c4c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	68fa      	ldr	r2, [r7, #12]
 8013c48:	66da      	str	r2, [r3, #108]	; 0x6c
 8013c4a:	e00d      	b.n	8013c68 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c50:	61bb      	str	r3, [r7, #24]
 8013c52:	e002      	b.n	8013c5a <tcp_enqueue_flags+0x11e>
 8013c54:	69bb      	ldr	r3, [r7, #24]
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	61bb      	str	r3, [r7, #24]
 8013c5a:	69bb      	ldr	r3, [r7, #24]
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d1f8      	bne.n	8013c54 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8013c62:	69bb      	ldr	r3, [r7, #24]
 8013c64:	68fa      	ldr	r2, [r7, #12]
 8013c66:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	2200      	movs	r2, #0
 8013c6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013c70:	78fb      	ldrb	r3, [r7, #3]
 8013c72:	f003 0302 	and.w	r3, r3, #2
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d104      	bne.n	8013c84 <tcp_enqueue_flags+0x148>
 8013c7a:	78fb      	ldrb	r3, [r7, #3]
 8013c7c:	f003 0301 	and.w	r3, r3, #1
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d004      	beq.n	8013c8e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013c88:	1c5a      	adds	r2, r3, #1
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013c8e:	78fb      	ldrb	r3, [r7, #3]
 8013c90:	f003 0301 	and.w	r3, r3, #1
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d006      	beq.n	8013ca6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	8b5b      	ldrh	r3, [r3, #26]
 8013c9c:	f043 0320 	orr.w	r3, r3, #32
 8013ca0:	b29a      	uxth	r2, r3
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	685b      	ldr	r3, [r3, #4]
 8013caa:	4618      	mov	r0, r3
 8013cac:	f7fa fb9a 	bl	800e3e4 <pbuf_clen>
 8013cb0:	4603      	mov	r3, r0
 8013cb2:	461a      	mov	r2, r3
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013cba:	4413      	add	r3, r2
 8013cbc:	b29a      	uxth	r2, r3
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d00e      	beq.n	8013cec <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d10a      	bne.n	8013cec <tcp_enqueue_flags+0x1b0>
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d106      	bne.n	8013cec <tcp_enqueue_flags+0x1b0>
 8013cde:	4b06      	ldr	r3, [pc, #24]	; (8013cf8 <tcp_enqueue_flags+0x1bc>)
 8013ce0:	f240 4265 	movw	r2, #1125	; 0x465
 8013ce4:	490b      	ldr	r1, [pc, #44]	; (8013d14 <tcp_enqueue_flags+0x1d8>)
 8013ce6:	4806      	ldr	r0, [pc, #24]	; (8013d00 <tcp_enqueue_flags+0x1c4>)
 8013ce8:	f004 f960 	bl	8017fac <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013cec:	2300      	movs	r3, #0
}
 8013cee:	4618      	mov	r0, r3
 8013cf0:	3720      	adds	r7, #32
 8013cf2:	46bd      	mov	sp, r7
 8013cf4:	bd80      	pop	{r7, pc}
 8013cf6:	bf00      	nop
 8013cf8:	0801c83c 	.word	0x0801c83c
 8013cfc:	0801cc60 	.word	0x0801cc60
 8013d00:	0801c890 	.word	0x0801c890
 8013d04:	0801ccb8 	.word	0x0801ccb8
 8013d08:	0801ccd8 	.word	0x0801ccd8
 8013d0c:	0801cd14 	.word	0x0801cd14
 8013d10:	0801cd2c 	.word	0x0801cd2c
 8013d14:	0801cd58 	.word	0x0801cd58

08013d18 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8013d18:	b5b0      	push	{r4, r5, r7, lr}
 8013d1a:	b08a      	sub	sp, #40	; 0x28
 8013d1c:	af00      	add	r7, sp, #0
 8013d1e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d106      	bne.n	8013d34 <tcp_output+0x1c>
 8013d26:	4b9e      	ldr	r3, [pc, #632]	; (8013fa0 <tcp_output+0x288>)
 8013d28:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8013d2c:	499d      	ldr	r1, [pc, #628]	; (8013fa4 <tcp_output+0x28c>)
 8013d2e:	489e      	ldr	r0, [pc, #632]	; (8013fa8 <tcp_output+0x290>)
 8013d30:	f004 f93c 	bl	8017fac <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	7d1b      	ldrb	r3, [r3, #20]
 8013d38:	2b01      	cmp	r3, #1
 8013d3a:	d106      	bne.n	8013d4a <tcp_output+0x32>
 8013d3c:	4b98      	ldr	r3, [pc, #608]	; (8013fa0 <tcp_output+0x288>)
 8013d3e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8013d42:	499a      	ldr	r1, [pc, #616]	; (8013fac <tcp_output+0x294>)
 8013d44:	4898      	ldr	r0, [pc, #608]	; (8013fa8 <tcp_output+0x290>)
 8013d46:	f004 f931 	bl	8017fac <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8013d4a:	4b99      	ldr	r3, [pc, #612]	; (8013fb0 <tcp_output+0x298>)
 8013d4c:	681b      	ldr	r3, [r3, #0]
 8013d4e:	687a      	ldr	r2, [r7, #4]
 8013d50:	429a      	cmp	r2, r3
 8013d52:	d101      	bne.n	8013d58 <tcp_output+0x40>
    return ERR_OK;
 8013d54:	2300      	movs	r3, #0
 8013d56:	e1ce      	b.n	80140f6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013d64:	4293      	cmp	r3, r2
 8013d66:	bf28      	it	cs
 8013d68:	4613      	movcs	r3, r2
 8013d6a:	b29b      	uxth	r3, r3
 8013d6c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d72:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8013d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d10b      	bne.n	8013d92 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	8b5b      	ldrh	r3, [r3, #26]
 8013d7e:	f003 0302 	and.w	r3, r3, #2
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	f000 81aa 	beq.w	80140dc <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8013d88:	6878      	ldr	r0, [r7, #4]
 8013d8a:	f000 fdcb 	bl	8014924 <tcp_send_empty_ack>
 8013d8e:	4603      	mov	r3, r0
 8013d90:	e1b1      	b.n	80140f6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8013d92:	6879      	ldr	r1, [r7, #4]
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	3304      	adds	r3, #4
 8013d98:	461a      	mov	r2, r3
 8013d9a:	6878      	ldr	r0, [r7, #4]
 8013d9c:	f7ff f824 	bl	8012de8 <tcp_route>
 8013da0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8013da2:	697b      	ldr	r3, [r7, #20]
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d102      	bne.n	8013dae <tcp_output+0x96>
    return ERR_RTE;
 8013da8:	f06f 0303 	mvn.w	r3, #3
 8013dac:	e1a3      	b.n	80140f6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d003      	beq.n	8013dbc <tcp_output+0xa4>
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d111      	bne.n	8013de0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013dbc:	697b      	ldr	r3, [r7, #20]
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d002      	beq.n	8013dc8 <tcp_output+0xb0>
 8013dc2:	697b      	ldr	r3, [r7, #20]
 8013dc4:	3304      	adds	r3, #4
 8013dc6:	e000      	b.n	8013dca <tcp_output+0xb2>
 8013dc8:	2300      	movs	r3, #0
 8013dca:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013dcc:	693b      	ldr	r3, [r7, #16]
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d102      	bne.n	8013dd8 <tcp_output+0xc0>
      return ERR_RTE;
 8013dd2:	f06f 0303 	mvn.w	r3, #3
 8013dd6:	e18e      	b.n	80140f6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8013dd8:	693b      	ldr	r3, [r7, #16]
 8013dda:	681a      	ldr	r2, [r3, #0]
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8013de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013de2:	68db      	ldr	r3, [r3, #12]
 8013de4:	685b      	ldr	r3, [r3, #4]
 8013de6:	4618      	mov	r0, r3
 8013de8:	f7f8 ffd5 	bl	800cd96 <lwip_htonl>
 8013dec:	4602      	mov	r2, r0
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013df2:	1ad3      	subs	r3, r2, r3
 8013df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013df6:	8912      	ldrh	r2, [r2, #8]
 8013df8:	4413      	add	r3, r2
 8013dfa:	69ba      	ldr	r2, [r7, #24]
 8013dfc:	429a      	cmp	r2, r3
 8013dfe:	d227      	bcs.n	8013e50 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013e06:	461a      	mov	r2, r3
 8013e08:	69bb      	ldr	r3, [r7, #24]
 8013e0a:	4293      	cmp	r3, r2
 8013e0c:	d114      	bne.n	8013e38 <tcp_output+0x120>
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d110      	bne.n	8013e38 <tcp_output+0x120>
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d10b      	bne.n	8013e38 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	2200      	movs	r2, #0
 8013e24:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	2201      	movs	r2, #1
 8013e2c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	2200      	movs	r2, #0
 8013e34:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	8b5b      	ldrh	r3, [r3, #26]
 8013e3c:	f003 0302 	and.w	r3, r3, #2
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	f000 814d 	beq.w	80140e0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8013e46:	6878      	ldr	r0, [r7, #4]
 8013e48:	f000 fd6c 	bl	8014924 <tcp_send_empty_ack>
 8013e4c:	4603      	mov	r3, r0
 8013e4e:	e152      	b.n	80140f6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	2200      	movs	r2, #0
 8013e54:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e5c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8013e5e:	6a3b      	ldr	r3, [r7, #32]
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	f000 811c 	beq.w	801409e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8013e66:	e002      	b.n	8013e6e <tcp_output+0x156>
 8013e68:	6a3b      	ldr	r3, [r7, #32]
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	623b      	str	r3, [r7, #32]
 8013e6e:	6a3b      	ldr	r3, [r7, #32]
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d1f8      	bne.n	8013e68 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8013e76:	e112      	b.n	801409e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8013e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e7a:	68db      	ldr	r3, [r3, #12]
 8013e7c:	899b      	ldrh	r3, [r3, #12]
 8013e7e:	b29b      	uxth	r3, r3
 8013e80:	4618      	mov	r0, r3
 8013e82:	f7f8 ff73 	bl	800cd6c <lwip_htons>
 8013e86:	4603      	mov	r3, r0
 8013e88:	b2db      	uxtb	r3, r3
 8013e8a:	f003 0304 	and.w	r3, r3, #4
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d006      	beq.n	8013ea0 <tcp_output+0x188>
 8013e92:	4b43      	ldr	r3, [pc, #268]	; (8013fa0 <tcp_output+0x288>)
 8013e94:	f240 5236 	movw	r2, #1334	; 0x536
 8013e98:	4946      	ldr	r1, [pc, #280]	; (8013fb4 <tcp_output+0x29c>)
 8013e9a:	4843      	ldr	r0, [pc, #268]	; (8013fa8 <tcp_output+0x290>)
 8013e9c:	f004 f886 	bl	8017fac <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d01f      	beq.n	8013ee8 <tcp_output+0x1d0>
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	8b5b      	ldrh	r3, [r3, #26]
 8013eac:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d119      	bne.n	8013ee8 <tcp_output+0x1d0>
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d00b      	beq.n	8013ed4 <tcp_output+0x1bc>
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d110      	bne.n	8013ee8 <tcp_output+0x1d0>
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013eca:	891a      	ldrh	r2, [r3, #8]
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013ed0:	429a      	cmp	r2, r3
 8013ed2:	d209      	bcs.n	8013ee8 <tcp_output+0x1d0>
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d004      	beq.n	8013ee8 <tcp_output+0x1d0>
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013ee4:	2b08      	cmp	r3, #8
 8013ee6:	d901      	bls.n	8013eec <tcp_output+0x1d4>
 8013ee8:	2301      	movs	r3, #1
 8013eea:	e000      	b.n	8013eee <tcp_output+0x1d6>
 8013eec:	2300      	movs	r3, #0
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d106      	bne.n	8013f00 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	8b5b      	ldrh	r3, [r3, #26]
 8013ef6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	f000 80e4 	beq.w	80140c8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	7d1b      	ldrb	r3, [r3, #20]
 8013f04:	2b02      	cmp	r3, #2
 8013f06:	d00d      	beq.n	8013f24 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8013f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f0a:	68db      	ldr	r3, [r3, #12]
 8013f0c:	899b      	ldrh	r3, [r3, #12]
 8013f0e:	b29c      	uxth	r4, r3
 8013f10:	2010      	movs	r0, #16
 8013f12:	f7f8 ff2b 	bl	800cd6c <lwip_htons>
 8013f16:	4603      	mov	r3, r0
 8013f18:	461a      	mov	r2, r3
 8013f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f1c:	68db      	ldr	r3, [r3, #12]
 8013f1e:	4322      	orrs	r2, r4
 8013f20:	b292      	uxth	r2, r2
 8013f22:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8013f24:	697a      	ldr	r2, [r7, #20]
 8013f26:	6879      	ldr	r1, [r7, #4]
 8013f28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013f2a:	f000 f909 	bl	8014140 <tcp_output_segment>
 8013f2e:	4603      	mov	r3, r0
 8013f30:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8013f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d009      	beq.n	8013f4e <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	8b5b      	ldrh	r3, [r3, #26]
 8013f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013f42:	b29a      	uxth	r2, r3
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	835a      	strh	r2, [r3, #26]
      return err;
 8013f48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013f4c:	e0d3      	b.n	80140f6 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8013f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f50:	681a      	ldr	r2, [r3, #0]
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	7d1b      	ldrb	r3, [r3, #20]
 8013f5a:	2b02      	cmp	r3, #2
 8013f5c:	d006      	beq.n	8013f6c <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	8b5b      	ldrh	r3, [r3, #26]
 8013f62:	f023 0303 	bic.w	r3, r3, #3
 8013f66:	b29a      	uxth	r2, r3
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f6e:	68db      	ldr	r3, [r3, #12]
 8013f70:	685b      	ldr	r3, [r3, #4]
 8013f72:	4618      	mov	r0, r3
 8013f74:	f7f8 ff0f 	bl	800cd96 <lwip_htonl>
 8013f78:	4604      	mov	r4, r0
 8013f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f7c:	891b      	ldrh	r3, [r3, #8]
 8013f7e:	461d      	mov	r5, r3
 8013f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f82:	68db      	ldr	r3, [r3, #12]
 8013f84:	899b      	ldrh	r3, [r3, #12]
 8013f86:	b29b      	uxth	r3, r3
 8013f88:	4618      	mov	r0, r3
 8013f8a:	f7f8 feef 	bl	800cd6c <lwip_htons>
 8013f8e:	4603      	mov	r3, r0
 8013f90:	b2db      	uxtb	r3, r3
 8013f92:	f003 0303 	and.w	r3, r3, #3
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d00e      	beq.n	8013fb8 <tcp_output+0x2a0>
 8013f9a:	2301      	movs	r3, #1
 8013f9c:	e00d      	b.n	8013fba <tcp_output+0x2a2>
 8013f9e:	bf00      	nop
 8013fa0:	0801c83c 	.word	0x0801c83c
 8013fa4:	0801cd80 	.word	0x0801cd80
 8013fa8:	0801c890 	.word	0x0801c890
 8013fac:	0801cd98 	.word	0x0801cd98
 8013fb0:	20009518 	.word	0x20009518
 8013fb4:	0801cdc0 	.word	0x0801cdc0
 8013fb8:	2300      	movs	r3, #0
 8013fba:	442b      	add	r3, r5
 8013fbc:	4423      	add	r3, r4
 8013fbe:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013fc4:	68bb      	ldr	r3, [r7, #8]
 8013fc6:	1ad3      	subs	r3, r2, r3
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	da02      	bge.n	8013fd2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	68ba      	ldr	r2, [r7, #8]
 8013fd0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8013fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fd4:	891b      	ldrh	r3, [r3, #8]
 8013fd6:	461c      	mov	r4, r3
 8013fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fda:	68db      	ldr	r3, [r3, #12]
 8013fdc:	899b      	ldrh	r3, [r3, #12]
 8013fde:	b29b      	uxth	r3, r3
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	f7f8 fec3 	bl	800cd6c <lwip_htons>
 8013fe6:	4603      	mov	r3, r0
 8013fe8:	b2db      	uxtb	r3, r3
 8013fea:	f003 0303 	and.w	r3, r3, #3
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d001      	beq.n	8013ff6 <tcp_output+0x2de>
 8013ff2:	2301      	movs	r3, #1
 8013ff4:	e000      	b.n	8013ff8 <tcp_output+0x2e0>
 8013ff6:	2300      	movs	r3, #0
 8013ff8:	4423      	add	r3, r4
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d049      	beq.n	8014092 <tcp_output+0x37a>
      seg->next = NULL;
 8013ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014000:	2200      	movs	r2, #0
 8014002:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014008:	2b00      	cmp	r3, #0
 801400a:	d105      	bne.n	8014018 <tcp_output+0x300>
        pcb->unacked = seg;
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014010:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8014012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014014:	623b      	str	r3, [r7, #32]
 8014016:	e03f      	b.n	8014098 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8014018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801401a:	68db      	ldr	r3, [r3, #12]
 801401c:	685b      	ldr	r3, [r3, #4]
 801401e:	4618      	mov	r0, r3
 8014020:	f7f8 feb9 	bl	800cd96 <lwip_htonl>
 8014024:	4604      	mov	r4, r0
 8014026:	6a3b      	ldr	r3, [r7, #32]
 8014028:	68db      	ldr	r3, [r3, #12]
 801402a:	685b      	ldr	r3, [r3, #4]
 801402c:	4618      	mov	r0, r3
 801402e:	f7f8 feb2 	bl	800cd96 <lwip_htonl>
 8014032:	4603      	mov	r3, r0
 8014034:	1ae3      	subs	r3, r4, r3
 8014036:	2b00      	cmp	r3, #0
 8014038:	da24      	bge.n	8014084 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	3370      	adds	r3, #112	; 0x70
 801403e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014040:	e002      	b.n	8014048 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8014042:	69fb      	ldr	r3, [r7, #28]
 8014044:	681b      	ldr	r3, [r3, #0]
 8014046:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014048:	69fb      	ldr	r3, [r7, #28]
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	2b00      	cmp	r3, #0
 801404e:	d011      	beq.n	8014074 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014050:	69fb      	ldr	r3, [r7, #28]
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	68db      	ldr	r3, [r3, #12]
 8014056:	685b      	ldr	r3, [r3, #4]
 8014058:	4618      	mov	r0, r3
 801405a:	f7f8 fe9c 	bl	800cd96 <lwip_htonl>
 801405e:	4604      	mov	r4, r0
 8014060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014062:	68db      	ldr	r3, [r3, #12]
 8014064:	685b      	ldr	r3, [r3, #4]
 8014066:	4618      	mov	r0, r3
 8014068:	f7f8 fe95 	bl	800cd96 <lwip_htonl>
 801406c:	4603      	mov	r3, r0
 801406e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8014070:	2b00      	cmp	r3, #0
 8014072:	dbe6      	blt.n	8014042 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8014074:	69fb      	ldr	r3, [r7, #28]
 8014076:	681a      	ldr	r2, [r3, #0]
 8014078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801407a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801407c:	69fb      	ldr	r3, [r7, #28]
 801407e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014080:	601a      	str	r2, [r3, #0]
 8014082:	e009      	b.n	8014098 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8014084:	6a3b      	ldr	r3, [r7, #32]
 8014086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014088:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801408a:	6a3b      	ldr	r3, [r7, #32]
 801408c:	681b      	ldr	r3, [r3, #0]
 801408e:	623b      	str	r3, [r7, #32]
 8014090:	e002      	b.n	8014098 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8014092:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014094:	f7fb ff05 	bl	800fea2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801409c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d012      	beq.n	80140ca <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80140a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140a6:	68db      	ldr	r3, [r3, #12]
 80140a8:	685b      	ldr	r3, [r3, #4]
 80140aa:	4618      	mov	r0, r3
 80140ac:	f7f8 fe73 	bl	800cd96 <lwip_htonl>
 80140b0:	4602      	mov	r2, r0
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80140b6:	1ad3      	subs	r3, r2, r3
 80140b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80140ba:	8912      	ldrh	r2, [r2, #8]
 80140bc:	4413      	add	r3, r2
  while (seg != NULL &&
 80140be:	69ba      	ldr	r2, [r7, #24]
 80140c0:	429a      	cmp	r2, r3
 80140c2:	f4bf aed9 	bcs.w	8013e78 <tcp_output+0x160>
 80140c6:	e000      	b.n	80140ca <tcp_output+0x3b2>
      break;
 80140c8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d108      	bne.n	80140e4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	2200      	movs	r2, #0
 80140d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80140da:	e004      	b.n	80140e6 <tcp_output+0x3ce>
    goto output_done;
 80140dc:	bf00      	nop
 80140de:	e002      	b.n	80140e6 <tcp_output+0x3ce>
    goto output_done;
 80140e0:	bf00      	nop
 80140e2:	e000      	b.n	80140e6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80140e4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	8b5b      	ldrh	r3, [r3, #26]
 80140ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80140ee:	b29a      	uxth	r2, r3
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80140f4:	2300      	movs	r3, #0
}
 80140f6:	4618      	mov	r0, r3
 80140f8:	3728      	adds	r7, #40	; 0x28
 80140fa:	46bd      	mov	sp, r7
 80140fc:	bdb0      	pop	{r4, r5, r7, pc}
 80140fe:	bf00      	nop

08014100 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8014100:	b580      	push	{r7, lr}
 8014102:	b082      	sub	sp, #8
 8014104:	af00      	add	r7, sp, #0
 8014106:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	2b00      	cmp	r3, #0
 801410c:	d106      	bne.n	801411c <tcp_output_segment_busy+0x1c>
 801410e:	4b09      	ldr	r3, [pc, #36]	; (8014134 <tcp_output_segment_busy+0x34>)
 8014110:	f240 529a 	movw	r2, #1434	; 0x59a
 8014114:	4908      	ldr	r1, [pc, #32]	; (8014138 <tcp_output_segment_busy+0x38>)
 8014116:	4809      	ldr	r0, [pc, #36]	; (801413c <tcp_output_segment_busy+0x3c>)
 8014118:	f003 ff48 	bl	8017fac <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	685b      	ldr	r3, [r3, #4]
 8014120:	7b9b      	ldrb	r3, [r3, #14]
 8014122:	2b01      	cmp	r3, #1
 8014124:	d001      	beq.n	801412a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8014126:	2301      	movs	r3, #1
 8014128:	e000      	b.n	801412c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801412a:	2300      	movs	r3, #0
}
 801412c:	4618      	mov	r0, r3
 801412e:	3708      	adds	r7, #8
 8014130:	46bd      	mov	sp, r7
 8014132:	bd80      	pop	{r7, pc}
 8014134:	0801c83c 	.word	0x0801c83c
 8014138:	0801cdd8 	.word	0x0801cdd8
 801413c:	0801c890 	.word	0x0801c890

08014140 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8014140:	b5b0      	push	{r4, r5, r7, lr}
 8014142:	b08c      	sub	sp, #48	; 0x30
 8014144:	af04      	add	r7, sp, #16
 8014146:	60f8      	str	r0, [r7, #12]
 8014148:	60b9      	str	r1, [r7, #8]
 801414a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801414c:	68fb      	ldr	r3, [r7, #12]
 801414e:	2b00      	cmp	r3, #0
 8014150:	d106      	bne.n	8014160 <tcp_output_segment+0x20>
 8014152:	4b63      	ldr	r3, [pc, #396]	; (80142e0 <tcp_output_segment+0x1a0>)
 8014154:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8014158:	4962      	ldr	r1, [pc, #392]	; (80142e4 <tcp_output_segment+0x1a4>)
 801415a:	4863      	ldr	r0, [pc, #396]	; (80142e8 <tcp_output_segment+0x1a8>)
 801415c:	f003 ff26 	bl	8017fac <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8014160:	68bb      	ldr	r3, [r7, #8]
 8014162:	2b00      	cmp	r3, #0
 8014164:	d106      	bne.n	8014174 <tcp_output_segment+0x34>
 8014166:	4b5e      	ldr	r3, [pc, #376]	; (80142e0 <tcp_output_segment+0x1a0>)
 8014168:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801416c:	495f      	ldr	r1, [pc, #380]	; (80142ec <tcp_output_segment+0x1ac>)
 801416e:	485e      	ldr	r0, [pc, #376]	; (80142e8 <tcp_output_segment+0x1a8>)
 8014170:	f003 ff1c 	bl	8017fac <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d106      	bne.n	8014188 <tcp_output_segment+0x48>
 801417a:	4b59      	ldr	r3, [pc, #356]	; (80142e0 <tcp_output_segment+0x1a0>)
 801417c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8014180:	495b      	ldr	r1, [pc, #364]	; (80142f0 <tcp_output_segment+0x1b0>)
 8014182:	4859      	ldr	r0, [pc, #356]	; (80142e8 <tcp_output_segment+0x1a8>)
 8014184:	f003 ff12 	bl	8017fac <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8014188:	68f8      	ldr	r0, [r7, #12]
 801418a:	f7ff ffb9 	bl	8014100 <tcp_output_segment_busy>
 801418e:	4603      	mov	r3, r0
 8014190:	2b00      	cmp	r3, #0
 8014192:	d001      	beq.n	8014198 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8014194:	2300      	movs	r3, #0
 8014196:	e09f      	b.n	80142d8 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8014198:	68bb      	ldr	r3, [r7, #8]
 801419a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801419c:	68fb      	ldr	r3, [r7, #12]
 801419e:	68dc      	ldr	r4, [r3, #12]
 80141a0:	4610      	mov	r0, r2
 80141a2:	f7f8 fdf8 	bl	800cd96 <lwip_htonl>
 80141a6:	4603      	mov	r3, r0
 80141a8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80141aa:	68bb      	ldr	r3, [r7, #8]
 80141ac:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80141ae:	68fb      	ldr	r3, [r7, #12]
 80141b0:	68dc      	ldr	r4, [r3, #12]
 80141b2:	4610      	mov	r0, r2
 80141b4:	f7f8 fdda 	bl	800cd6c <lwip_htons>
 80141b8:	4603      	mov	r3, r0
 80141ba:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80141bc:	68bb      	ldr	r3, [r7, #8]
 80141be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141c0:	68ba      	ldr	r2, [r7, #8]
 80141c2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80141c4:	441a      	add	r2, r3
 80141c6:	68bb      	ldr	r3, [r7, #8]
 80141c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	68db      	ldr	r3, [r3, #12]
 80141ce:	3314      	adds	r3, #20
 80141d0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80141d2:	68fb      	ldr	r3, [r7, #12]
 80141d4:	7a9b      	ldrb	r3, [r3, #10]
 80141d6:	f003 0301 	and.w	r3, r3, #1
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d015      	beq.n	801420a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80141de:	68bb      	ldr	r3, [r7, #8]
 80141e0:	3304      	adds	r3, #4
 80141e2:	461a      	mov	r2, r3
 80141e4:	6879      	ldr	r1, [r7, #4]
 80141e6:	f44f 7006 	mov.w	r0, #536	; 0x218
 80141ea:	f7fc fa37 	bl	801065c <tcp_eff_send_mss_netif>
 80141ee:	4603      	mov	r3, r0
 80141f0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80141f2:	8b7b      	ldrh	r3, [r7, #26]
 80141f4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80141f8:	4618      	mov	r0, r3
 80141fa:	f7f8 fdcc 	bl	800cd96 <lwip_htonl>
 80141fe:	4602      	mov	r2, r0
 8014200:	69fb      	ldr	r3, [r7, #28]
 8014202:	601a      	str	r2, [r3, #0]
    opts += 1;
 8014204:	69fb      	ldr	r3, [r7, #28]
 8014206:	3304      	adds	r3, #4
 8014208:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801420a:	68bb      	ldr	r3, [r7, #8]
 801420c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014210:	2b00      	cmp	r3, #0
 8014212:	da02      	bge.n	801421a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8014214:	68bb      	ldr	r3, [r7, #8]
 8014216:	2200      	movs	r2, #0
 8014218:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801421a:	68bb      	ldr	r3, [r7, #8]
 801421c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801421e:	2b00      	cmp	r3, #0
 8014220:	d10c      	bne.n	801423c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8014222:	4b34      	ldr	r3, [pc, #208]	; (80142f4 <tcp_output_segment+0x1b4>)
 8014224:	681a      	ldr	r2, [r3, #0]
 8014226:	68bb      	ldr	r3, [r7, #8]
 8014228:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	68db      	ldr	r3, [r3, #12]
 801422e:	685b      	ldr	r3, [r3, #4]
 8014230:	4618      	mov	r0, r3
 8014232:	f7f8 fdb0 	bl	800cd96 <lwip_htonl>
 8014236:	4602      	mov	r2, r0
 8014238:	68bb      	ldr	r3, [r7, #8]
 801423a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801423c:	68fb      	ldr	r3, [r7, #12]
 801423e:	68da      	ldr	r2, [r3, #12]
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	685b      	ldr	r3, [r3, #4]
 8014244:	685b      	ldr	r3, [r3, #4]
 8014246:	1ad3      	subs	r3, r2, r3
 8014248:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801424a:	68fb      	ldr	r3, [r7, #12]
 801424c:	685b      	ldr	r3, [r3, #4]
 801424e:	8959      	ldrh	r1, [r3, #10]
 8014250:	68fb      	ldr	r3, [r7, #12]
 8014252:	685b      	ldr	r3, [r3, #4]
 8014254:	8b3a      	ldrh	r2, [r7, #24]
 8014256:	1a8a      	subs	r2, r1, r2
 8014258:	b292      	uxth	r2, r2
 801425a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801425c:	68fb      	ldr	r3, [r7, #12]
 801425e:	685b      	ldr	r3, [r3, #4]
 8014260:	8919      	ldrh	r1, [r3, #8]
 8014262:	68fb      	ldr	r3, [r7, #12]
 8014264:	685b      	ldr	r3, [r3, #4]
 8014266:	8b3a      	ldrh	r2, [r7, #24]
 8014268:	1a8a      	subs	r2, r1, r2
 801426a:	b292      	uxth	r2, r2
 801426c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801426e:	68fb      	ldr	r3, [r7, #12]
 8014270:	685b      	ldr	r3, [r3, #4]
 8014272:	68fa      	ldr	r2, [r7, #12]
 8014274:	68d2      	ldr	r2, [r2, #12]
 8014276:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	68db      	ldr	r3, [r3, #12]
 801427c:	2200      	movs	r2, #0
 801427e:	741a      	strb	r2, [r3, #16]
 8014280:	2200      	movs	r2, #0
 8014282:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8014284:	68fb      	ldr	r3, [r7, #12]
 8014286:	68db      	ldr	r3, [r3, #12]
 8014288:	f103 0214 	add.w	r2, r3, #20
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	7a9b      	ldrb	r3, [r3, #10]
 8014290:	009b      	lsls	r3, r3, #2
 8014292:	f003 0304 	and.w	r3, r3, #4
 8014296:	4413      	add	r3, r2
 8014298:	69fa      	ldr	r2, [r7, #28]
 801429a:	429a      	cmp	r2, r3
 801429c:	d006      	beq.n	80142ac <tcp_output_segment+0x16c>
 801429e:	4b10      	ldr	r3, [pc, #64]	; (80142e0 <tcp_output_segment+0x1a0>)
 80142a0:	f240 621c 	movw	r2, #1564	; 0x61c
 80142a4:	4914      	ldr	r1, [pc, #80]	; (80142f8 <tcp_output_segment+0x1b8>)
 80142a6:	4810      	ldr	r0, [pc, #64]	; (80142e8 <tcp_output_segment+0x1a8>)
 80142a8:	f003 fe80 	bl	8017fac <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	6858      	ldr	r0, [r3, #4]
 80142b0:	68b9      	ldr	r1, [r7, #8]
 80142b2:	68bb      	ldr	r3, [r7, #8]
 80142b4:	1d1c      	adds	r4, r3, #4
 80142b6:	68bb      	ldr	r3, [r7, #8]
 80142b8:	7add      	ldrb	r5, [r3, #11]
 80142ba:	68bb      	ldr	r3, [r7, #8]
 80142bc:	7a9b      	ldrb	r3, [r3, #10]
 80142be:	687a      	ldr	r2, [r7, #4]
 80142c0:	9202      	str	r2, [sp, #8]
 80142c2:	2206      	movs	r2, #6
 80142c4:	9201      	str	r2, [sp, #4]
 80142c6:	9300      	str	r3, [sp, #0]
 80142c8:	462b      	mov	r3, r5
 80142ca:	4622      	mov	r2, r4
 80142cc:	f002 fa36 	bl	801673c <ip4_output_if>
 80142d0:	4603      	mov	r3, r0
 80142d2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80142d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80142d8:	4618      	mov	r0, r3
 80142da:	3720      	adds	r7, #32
 80142dc:	46bd      	mov	sp, r7
 80142de:	bdb0      	pop	{r4, r5, r7, pc}
 80142e0:	0801c83c 	.word	0x0801c83c
 80142e4:	0801ce00 	.word	0x0801ce00
 80142e8:	0801c890 	.word	0x0801c890
 80142ec:	0801ce20 	.word	0x0801ce20
 80142f0:	0801ce40 	.word	0x0801ce40
 80142f4:	20009508 	.word	0x20009508
 80142f8:	0801ce64 	.word	0x0801ce64

080142fc <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80142fc:	b5b0      	push	{r4, r5, r7, lr}
 80142fe:	b084      	sub	sp, #16
 8014300:	af00      	add	r7, sp, #0
 8014302:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	2b00      	cmp	r3, #0
 8014308:	d106      	bne.n	8014318 <tcp_rexmit_rto_prepare+0x1c>
 801430a:	4b31      	ldr	r3, [pc, #196]	; (80143d0 <tcp_rexmit_rto_prepare+0xd4>)
 801430c:	f240 6263 	movw	r2, #1635	; 0x663
 8014310:	4930      	ldr	r1, [pc, #192]	; (80143d4 <tcp_rexmit_rto_prepare+0xd8>)
 8014312:	4831      	ldr	r0, [pc, #196]	; (80143d8 <tcp_rexmit_rto_prepare+0xdc>)
 8014314:	f003 fe4a 	bl	8017fac <iprintf>

  if (pcb->unacked == NULL) {
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801431c:	2b00      	cmp	r3, #0
 801431e:	d102      	bne.n	8014326 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8014320:	f06f 0305 	mvn.w	r3, #5
 8014324:	e050      	b.n	80143c8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801432a:	60fb      	str	r3, [r7, #12]
 801432c:	e00b      	b.n	8014346 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801432e:	68f8      	ldr	r0, [r7, #12]
 8014330:	f7ff fee6 	bl	8014100 <tcp_output_segment_busy>
 8014334:	4603      	mov	r3, r0
 8014336:	2b00      	cmp	r3, #0
 8014338:	d002      	beq.n	8014340 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801433a:	f06f 0305 	mvn.w	r3, #5
 801433e:	e043      	b.n	80143c8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014340:	68fb      	ldr	r3, [r7, #12]
 8014342:	681b      	ldr	r3, [r3, #0]
 8014344:	60fb      	str	r3, [r7, #12]
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	2b00      	cmp	r3, #0
 801434c:	d1ef      	bne.n	801432e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801434e:	68f8      	ldr	r0, [r7, #12]
 8014350:	f7ff fed6 	bl	8014100 <tcp_output_segment_busy>
 8014354:	4603      	mov	r3, r0
 8014356:	2b00      	cmp	r3, #0
 8014358:	d002      	beq.n	8014360 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801435a:	f06f 0305 	mvn.w	r3, #5
 801435e:	e033      	b.n	80143c8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8014364:	68fb      	ldr	r3, [r7, #12]
 8014366:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	2200      	movs	r2, #0
 8014374:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	8b5b      	ldrh	r3, [r3, #26]
 801437a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801437e:	b29a      	uxth	r2, r3
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014384:	68fb      	ldr	r3, [r7, #12]
 8014386:	68db      	ldr	r3, [r3, #12]
 8014388:	685b      	ldr	r3, [r3, #4]
 801438a:	4618      	mov	r0, r3
 801438c:	f7f8 fd03 	bl	800cd96 <lwip_htonl>
 8014390:	4604      	mov	r4, r0
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	891b      	ldrh	r3, [r3, #8]
 8014396:	461d      	mov	r5, r3
 8014398:	68fb      	ldr	r3, [r7, #12]
 801439a:	68db      	ldr	r3, [r3, #12]
 801439c:	899b      	ldrh	r3, [r3, #12]
 801439e:	b29b      	uxth	r3, r3
 80143a0:	4618      	mov	r0, r3
 80143a2:	f7f8 fce3 	bl	800cd6c <lwip_htons>
 80143a6:	4603      	mov	r3, r0
 80143a8:	b2db      	uxtb	r3, r3
 80143aa:	f003 0303 	and.w	r3, r3, #3
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d001      	beq.n	80143b6 <tcp_rexmit_rto_prepare+0xba>
 80143b2:	2301      	movs	r3, #1
 80143b4:	e000      	b.n	80143b8 <tcp_rexmit_rto_prepare+0xbc>
 80143b6:	2300      	movs	r3, #0
 80143b8:	442b      	add	r3, r5
 80143ba:	18e2      	adds	r2, r4, r3
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	2200      	movs	r2, #0
 80143c4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80143c6:	2300      	movs	r3, #0
}
 80143c8:	4618      	mov	r0, r3
 80143ca:	3710      	adds	r7, #16
 80143cc:	46bd      	mov	sp, r7
 80143ce:	bdb0      	pop	{r4, r5, r7, pc}
 80143d0:	0801c83c 	.word	0x0801c83c
 80143d4:	0801ce78 	.word	0x0801ce78
 80143d8:	0801c890 	.word	0x0801c890

080143dc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80143dc:	b580      	push	{r7, lr}
 80143de:	b082      	sub	sp, #8
 80143e0:	af00      	add	r7, sp, #0
 80143e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d106      	bne.n	80143f8 <tcp_rexmit_rto_commit+0x1c>
 80143ea:	4b0d      	ldr	r3, [pc, #52]	; (8014420 <tcp_rexmit_rto_commit+0x44>)
 80143ec:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80143f0:	490c      	ldr	r1, [pc, #48]	; (8014424 <tcp_rexmit_rto_commit+0x48>)
 80143f2:	480d      	ldr	r0, [pc, #52]	; (8014428 <tcp_rexmit_rto_commit+0x4c>)
 80143f4:	f003 fdda 	bl	8017fac <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80143fe:	2bff      	cmp	r3, #255	; 0xff
 8014400:	d007      	beq.n	8014412 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014408:	3301      	adds	r3, #1
 801440a:	b2da      	uxtb	r2, r3
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8014412:	6878      	ldr	r0, [r7, #4]
 8014414:	f7ff fc80 	bl	8013d18 <tcp_output>
}
 8014418:	bf00      	nop
 801441a:	3708      	adds	r7, #8
 801441c:	46bd      	mov	sp, r7
 801441e:	bd80      	pop	{r7, pc}
 8014420:	0801c83c 	.word	0x0801c83c
 8014424:	0801ce9c 	.word	0x0801ce9c
 8014428:	0801c890 	.word	0x0801c890

0801442c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801442c:	b580      	push	{r7, lr}
 801442e:	b082      	sub	sp, #8
 8014430:	af00      	add	r7, sp, #0
 8014432:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	2b00      	cmp	r3, #0
 8014438:	d106      	bne.n	8014448 <tcp_rexmit_rto+0x1c>
 801443a:	4b0a      	ldr	r3, [pc, #40]	; (8014464 <tcp_rexmit_rto+0x38>)
 801443c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8014440:	4909      	ldr	r1, [pc, #36]	; (8014468 <tcp_rexmit_rto+0x3c>)
 8014442:	480a      	ldr	r0, [pc, #40]	; (801446c <tcp_rexmit_rto+0x40>)
 8014444:	f003 fdb2 	bl	8017fac <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8014448:	6878      	ldr	r0, [r7, #4]
 801444a:	f7ff ff57 	bl	80142fc <tcp_rexmit_rto_prepare>
 801444e:	4603      	mov	r3, r0
 8014450:	2b00      	cmp	r3, #0
 8014452:	d102      	bne.n	801445a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8014454:	6878      	ldr	r0, [r7, #4]
 8014456:	f7ff ffc1 	bl	80143dc <tcp_rexmit_rto_commit>
  }
}
 801445a:	bf00      	nop
 801445c:	3708      	adds	r7, #8
 801445e:	46bd      	mov	sp, r7
 8014460:	bd80      	pop	{r7, pc}
 8014462:	bf00      	nop
 8014464:	0801c83c 	.word	0x0801c83c
 8014468:	0801cec0 	.word	0x0801cec0
 801446c:	0801c890 	.word	0x0801c890

08014470 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8014470:	b590      	push	{r4, r7, lr}
 8014472:	b085      	sub	sp, #20
 8014474:	af00      	add	r7, sp, #0
 8014476:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	2b00      	cmp	r3, #0
 801447c:	d106      	bne.n	801448c <tcp_rexmit+0x1c>
 801447e:	4b2f      	ldr	r3, [pc, #188]	; (801453c <tcp_rexmit+0xcc>)
 8014480:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8014484:	492e      	ldr	r1, [pc, #184]	; (8014540 <tcp_rexmit+0xd0>)
 8014486:	482f      	ldr	r0, [pc, #188]	; (8014544 <tcp_rexmit+0xd4>)
 8014488:	f003 fd90 	bl	8017fac <iprintf>

  if (pcb->unacked == NULL) {
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014490:	2b00      	cmp	r3, #0
 8014492:	d102      	bne.n	801449a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8014494:	f06f 0305 	mvn.w	r3, #5
 8014498:	e04c      	b.n	8014534 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801449e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80144a0:	68b8      	ldr	r0, [r7, #8]
 80144a2:	f7ff fe2d 	bl	8014100 <tcp_output_segment_busy>
 80144a6:	4603      	mov	r3, r0
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d002      	beq.n	80144b2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80144ac:	f06f 0305 	mvn.w	r3, #5
 80144b0:	e040      	b.n	8014534 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80144b2:	68bb      	ldr	r3, [r7, #8]
 80144b4:	681a      	ldr	r2, [r3, #0]
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	336c      	adds	r3, #108	; 0x6c
 80144be:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80144c0:	e002      	b.n	80144c8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	681b      	ldr	r3, [r3, #0]
 80144c6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80144c8:	68fb      	ldr	r3, [r7, #12]
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d011      	beq.n	80144f4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80144d0:	68fb      	ldr	r3, [r7, #12]
 80144d2:	681b      	ldr	r3, [r3, #0]
 80144d4:	68db      	ldr	r3, [r3, #12]
 80144d6:	685b      	ldr	r3, [r3, #4]
 80144d8:	4618      	mov	r0, r3
 80144da:	f7f8 fc5c 	bl	800cd96 <lwip_htonl>
 80144de:	4604      	mov	r4, r0
 80144e0:	68bb      	ldr	r3, [r7, #8]
 80144e2:	68db      	ldr	r3, [r3, #12]
 80144e4:	685b      	ldr	r3, [r3, #4]
 80144e6:	4618      	mov	r0, r3
 80144e8:	f7f8 fc55 	bl	800cd96 <lwip_htonl>
 80144ec:	4603      	mov	r3, r0
 80144ee:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	dbe6      	blt.n	80144c2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	681a      	ldr	r2, [r3, #0]
 80144f8:	68bb      	ldr	r3, [r7, #8]
 80144fa:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	68ba      	ldr	r2, [r7, #8]
 8014500:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8014502:	68bb      	ldr	r3, [r7, #8]
 8014504:	681b      	ldr	r3, [r3, #0]
 8014506:	2b00      	cmp	r3, #0
 8014508:	d103      	bne.n	8014512 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	2200      	movs	r2, #0
 801450e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014518:	2bff      	cmp	r3, #255	; 0xff
 801451a:	d007      	beq.n	801452c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014522:	3301      	adds	r3, #1
 8014524:	b2da      	uxtb	r2, r3
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	2200      	movs	r2, #0
 8014530:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8014532:	2300      	movs	r3, #0
}
 8014534:	4618      	mov	r0, r3
 8014536:	3714      	adds	r7, #20
 8014538:	46bd      	mov	sp, r7
 801453a:	bd90      	pop	{r4, r7, pc}
 801453c:	0801c83c 	.word	0x0801c83c
 8014540:	0801cedc 	.word	0x0801cedc
 8014544:	0801c890 	.word	0x0801c890

08014548 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8014548:	b580      	push	{r7, lr}
 801454a:	b082      	sub	sp, #8
 801454c:	af00      	add	r7, sp, #0
 801454e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	2b00      	cmp	r3, #0
 8014554:	d106      	bne.n	8014564 <tcp_rexmit_fast+0x1c>
 8014556:	4b2a      	ldr	r3, [pc, #168]	; (8014600 <tcp_rexmit_fast+0xb8>)
 8014558:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801455c:	4929      	ldr	r1, [pc, #164]	; (8014604 <tcp_rexmit_fast+0xbc>)
 801455e:	482a      	ldr	r0, [pc, #168]	; (8014608 <tcp_rexmit_fast+0xc0>)
 8014560:	f003 fd24 	bl	8017fac <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014568:	2b00      	cmp	r3, #0
 801456a:	d044      	beq.n	80145f6 <tcp_rexmit_fast+0xae>
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	8b5b      	ldrh	r3, [r3, #26]
 8014570:	f003 0304 	and.w	r3, r3, #4
 8014574:	2b00      	cmp	r3, #0
 8014576:	d13e      	bne.n	80145f6 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8014578:	6878      	ldr	r0, [r7, #4]
 801457a:	f7ff ff79 	bl	8014470 <tcp_rexmit>
 801457e:	4603      	mov	r3, r0
 8014580:	2b00      	cmp	r3, #0
 8014582:	d138      	bne.n	80145f6 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014590:	4293      	cmp	r3, r2
 8014592:	bf28      	it	cs
 8014594:	4613      	movcs	r3, r2
 8014596:	b29b      	uxth	r3, r3
 8014598:	0fda      	lsrs	r2, r3, #31
 801459a:	4413      	add	r3, r2
 801459c:	105b      	asrs	r3, r3, #1
 801459e:	b29a      	uxth	r2, r3
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80145ac:	461a      	mov	r2, r3
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80145b2:	005b      	lsls	r3, r3, #1
 80145b4:	429a      	cmp	r2, r3
 80145b6:	d206      	bcs.n	80145c6 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80145bc:	005b      	lsls	r3, r3, #1
 80145be:	b29a      	uxth	r2, r3
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80145d0:	4619      	mov	r1, r3
 80145d2:	0049      	lsls	r1, r1, #1
 80145d4:	440b      	add	r3, r1
 80145d6:	b29b      	uxth	r3, r3
 80145d8:	4413      	add	r3, r2
 80145da:	b29a      	uxth	r2, r3
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	8b5b      	ldrh	r3, [r3, #26]
 80145e6:	f043 0304 	orr.w	r3, r3, #4
 80145ea:	b29a      	uxth	r2, r3
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	2200      	movs	r2, #0
 80145f4:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80145f6:	bf00      	nop
 80145f8:	3708      	adds	r7, #8
 80145fa:	46bd      	mov	sp, r7
 80145fc:	bd80      	pop	{r7, pc}
 80145fe:	bf00      	nop
 8014600:	0801c83c 	.word	0x0801c83c
 8014604:	0801cef4 	.word	0x0801cef4
 8014608:	0801c890 	.word	0x0801c890

0801460c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801460c:	b580      	push	{r7, lr}
 801460e:	b086      	sub	sp, #24
 8014610:	af00      	add	r7, sp, #0
 8014612:	60f8      	str	r0, [r7, #12]
 8014614:	607b      	str	r3, [r7, #4]
 8014616:	460b      	mov	r3, r1
 8014618:	817b      	strh	r3, [r7, #10]
 801461a:	4613      	mov	r3, r2
 801461c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801461e:	897a      	ldrh	r2, [r7, #10]
 8014620:	893b      	ldrh	r3, [r7, #8]
 8014622:	4413      	add	r3, r2
 8014624:	b29b      	uxth	r3, r3
 8014626:	3314      	adds	r3, #20
 8014628:	b29b      	uxth	r3, r3
 801462a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801462e:	4619      	mov	r1, r3
 8014630:	2022      	movs	r0, #34	; 0x22
 8014632:	f7f9 fb6b 	bl	800dd0c <pbuf_alloc>
 8014636:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8014638:	697b      	ldr	r3, [r7, #20]
 801463a:	2b00      	cmp	r3, #0
 801463c:	d04d      	beq.n	80146da <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801463e:	897b      	ldrh	r3, [r7, #10]
 8014640:	3313      	adds	r3, #19
 8014642:	697a      	ldr	r2, [r7, #20]
 8014644:	8952      	ldrh	r2, [r2, #10]
 8014646:	4293      	cmp	r3, r2
 8014648:	db06      	blt.n	8014658 <tcp_output_alloc_header_common+0x4c>
 801464a:	4b26      	ldr	r3, [pc, #152]	; (80146e4 <tcp_output_alloc_header_common+0xd8>)
 801464c:	f240 7223 	movw	r2, #1827	; 0x723
 8014650:	4925      	ldr	r1, [pc, #148]	; (80146e8 <tcp_output_alloc_header_common+0xdc>)
 8014652:	4826      	ldr	r0, [pc, #152]	; (80146ec <tcp_output_alloc_header_common+0xe0>)
 8014654:	f003 fcaa 	bl	8017fac <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8014658:	697b      	ldr	r3, [r7, #20]
 801465a:	685b      	ldr	r3, [r3, #4]
 801465c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801465e:	8c3b      	ldrh	r3, [r7, #32]
 8014660:	4618      	mov	r0, r3
 8014662:	f7f8 fb83 	bl	800cd6c <lwip_htons>
 8014666:	4603      	mov	r3, r0
 8014668:	461a      	mov	r2, r3
 801466a:	693b      	ldr	r3, [r7, #16]
 801466c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801466e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014670:	4618      	mov	r0, r3
 8014672:	f7f8 fb7b 	bl	800cd6c <lwip_htons>
 8014676:	4603      	mov	r3, r0
 8014678:	461a      	mov	r2, r3
 801467a:	693b      	ldr	r3, [r7, #16]
 801467c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801467e:	693b      	ldr	r3, [r7, #16]
 8014680:	687a      	ldr	r2, [r7, #4]
 8014682:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8014684:	68f8      	ldr	r0, [r7, #12]
 8014686:	f7f8 fb86 	bl	800cd96 <lwip_htonl>
 801468a:	4602      	mov	r2, r0
 801468c:	693b      	ldr	r3, [r7, #16]
 801468e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8014690:	897b      	ldrh	r3, [r7, #10]
 8014692:	089b      	lsrs	r3, r3, #2
 8014694:	b29b      	uxth	r3, r3
 8014696:	3305      	adds	r3, #5
 8014698:	b29b      	uxth	r3, r3
 801469a:	031b      	lsls	r3, r3, #12
 801469c:	b29a      	uxth	r2, r3
 801469e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80146a2:	b29b      	uxth	r3, r3
 80146a4:	4313      	orrs	r3, r2
 80146a6:	b29b      	uxth	r3, r3
 80146a8:	4618      	mov	r0, r3
 80146aa:	f7f8 fb5f 	bl	800cd6c <lwip_htons>
 80146ae:	4603      	mov	r3, r0
 80146b0:	461a      	mov	r2, r3
 80146b2:	693b      	ldr	r3, [r7, #16]
 80146b4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80146b6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80146b8:	4618      	mov	r0, r3
 80146ba:	f7f8 fb57 	bl	800cd6c <lwip_htons>
 80146be:	4603      	mov	r3, r0
 80146c0:	461a      	mov	r2, r3
 80146c2:	693b      	ldr	r3, [r7, #16]
 80146c4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80146c6:	693b      	ldr	r3, [r7, #16]
 80146c8:	2200      	movs	r2, #0
 80146ca:	741a      	strb	r2, [r3, #16]
 80146cc:	2200      	movs	r2, #0
 80146ce:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80146d0:	693b      	ldr	r3, [r7, #16]
 80146d2:	2200      	movs	r2, #0
 80146d4:	749a      	strb	r2, [r3, #18]
 80146d6:	2200      	movs	r2, #0
 80146d8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80146da:	697b      	ldr	r3, [r7, #20]
}
 80146dc:	4618      	mov	r0, r3
 80146de:	3718      	adds	r7, #24
 80146e0:	46bd      	mov	sp, r7
 80146e2:	bd80      	pop	{r7, pc}
 80146e4:	0801c83c 	.word	0x0801c83c
 80146e8:	0801cf14 	.word	0x0801cf14
 80146ec:	0801c890 	.word	0x0801c890

080146f0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80146f0:	b5b0      	push	{r4, r5, r7, lr}
 80146f2:	b08a      	sub	sp, #40	; 0x28
 80146f4:	af04      	add	r7, sp, #16
 80146f6:	60f8      	str	r0, [r7, #12]
 80146f8:	607b      	str	r3, [r7, #4]
 80146fa:	460b      	mov	r3, r1
 80146fc:	817b      	strh	r3, [r7, #10]
 80146fe:	4613      	mov	r3, r2
 8014700:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8014702:	68fb      	ldr	r3, [r7, #12]
 8014704:	2b00      	cmp	r3, #0
 8014706:	d106      	bne.n	8014716 <tcp_output_alloc_header+0x26>
 8014708:	4b15      	ldr	r3, [pc, #84]	; (8014760 <tcp_output_alloc_header+0x70>)
 801470a:	f240 7242 	movw	r2, #1858	; 0x742
 801470e:	4915      	ldr	r1, [pc, #84]	; (8014764 <tcp_output_alloc_header+0x74>)
 8014710:	4815      	ldr	r0, [pc, #84]	; (8014768 <tcp_output_alloc_header+0x78>)
 8014712:	f003 fc4b 	bl	8017fac <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801471a:	68fb      	ldr	r3, [r7, #12]
 801471c:	8adb      	ldrh	r3, [r3, #22]
 801471e:	68fa      	ldr	r2, [r7, #12]
 8014720:	8b12      	ldrh	r2, [r2, #24]
 8014722:	68f9      	ldr	r1, [r7, #12]
 8014724:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8014726:	893d      	ldrh	r5, [r7, #8]
 8014728:	897c      	ldrh	r4, [r7, #10]
 801472a:	9103      	str	r1, [sp, #12]
 801472c:	2110      	movs	r1, #16
 801472e:	9102      	str	r1, [sp, #8]
 8014730:	9201      	str	r2, [sp, #4]
 8014732:	9300      	str	r3, [sp, #0]
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	462a      	mov	r2, r5
 8014738:	4621      	mov	r1, r4
 801473a:	f7ff ff67 	bl	801460c <tcp_output_alloc_header_common>
 801473e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8014740:	697b      	ldr	r3, [r7, #20]
 8014742:	2b00      	cmp	r3, #0
 8014744:	d006      	beq.n	8014754 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801474a:	68fa      	ldr	r2, [r7, #12]
 801474c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801474e:	441a      	add	r2, r3
 8014750:	68fb      	ldr	r3, [r7, #12]
 8014752:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8014754:	697b      	ldr	r3, [r7, #20]
}
 8014756:	4618      	mov	r0, r3
 8014758:	3718      	adds	r7, #24
 801475a:	46bd      	mov	sp, r7
 801475c:	bdb0      	pop	{r4, r5, r7, pc}
 801475e:	bf00      	nop
 8014760:	0801c83c 	.word	0x0801c83c
 8014764:	0801cf44 	.word	0x0801cf44
 8014768:	0801c890 	.word	0x0801c890

0801476c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801476c:	b580      	push	{r7, lr}
 801476e:	b088      	sub	sp, #32
 8014770:	af00      	add	r7, sp, #0
 8014772:	60f8      	str	r0, [r7, #12]
 8014774:	60b9      	str	r1, [r7, #8]
 8014776:	4611      	mov	r1, r2
 8014778:	461a      	mov	r2, r3
 801477a:	460b      	mov	r3, r1
 801477c:	71fb      	strb	r3, [r7, #7]
 801477e:	4613      	mov	r3, r2
 8014780:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8014782:	2300      	movs	r3, #0
 8014784:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8014786:	68bb      	ldr	r3, [r7, #8]
 8014788:	2b00      	cmp	r3, #0
 801478a:	d106      	bne.n	801479a <tcp_output_fill_options+0x2e>
 801478c:	4b13      	ldr	r3, [pc, #76]	; (80147dc <tcp_output_fill_options+0x70>)
 801478e:	f240 7256 	movw	r2, #1878	; 0x756
 8014792:	4913      	ldr	r1, [pc, #76]	; (80147e0 <tcp_output_fill_options+0x74>)
 8014794:	4813      	ldr	r0, [pc, #76]	; (80147e4 <tcp_output_fill_options+0x78>)
 8014796:	f003 fc09 	bl	8017fac <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801479a:	68bb      	ldr	r3, [r7, #8]
 801479c:	685b      	ldr	r3, [r3, #4]
 801479e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80147a0:	69bb      	ldr	r3, [r7, #24]
 80147a2:	3314      	adds	r3, #20
 80147a4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80147a6:	69bb      	ldr	r3, [r7, #24]
 80147a8:	f103 0214 	add.w	r2, r3, #20
 80147ac:	8bfb      	ldrh	r3, [r7, #30]
 80147ae:	009b      	lsls	r3, r3, #2
 80147b0:	4619      	mov	r1, r3
 80147b2:	79fb      	ldrb	r3, [r7, #7]
 80147b4:	009b      	lsls	r3, r3, #2
 80147b6:	f003 0304 	and.w	r3, r3, #4
 80147ba:	440b      	add	r3, r1
 80147bc:	4413      	add	r3, r2
 80147be:	697a      	ldr	r2, [r7, #20]
 80147c0:	429a      	cmp	r2, r3
 80147c2:	d006      	beq.n	80147d2 <tcp_output_fill_options+0x66>
 80147c4:	4b05      	ldr	r3, [pc, #20]	; (80147dc <tcp_output_fill_options+0x70>)
 80147c6:	f240 7275 	movw	r2, #1909	; 0x775
 80147ca:	4907      	ldr	r1, [pc, #28]	; (80147e8 <tcp_output_fill_options+0x7c>)
 80147cc:	4805      	ldr	r0, [pc, #20]	; (80147e4 <tcp_output_fill_options+0x78>)
 80147ce:	f003 fbed 	bl	8017fac <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80147d2:	bf00      	nop
 80147d4:	3720      	adds	r7, #32
 80147d6:	46bd      	mov	sp, r7
 80147d8:	bd80      	pop	{r7, pc}
 80147da:	bf00      	nop
 80147dc:	0801c83c 	.word	0x0801c83c
 80147e0:	0801cf6c 	.word	0x0801cf6c
 80147e4:	0801c890 	.word	0x0801c890
 80147e8:	0801ce64 	.word	0x0801ce64

080147ec <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80147ec:	b580      	push	{r7, lr}
 80147ee:	b08a      	sub	sp, #40	; 0x28
 80147f0:	af04      	add	r7, sp, #16
 80147f2:	60f8      	str	r0, [r7, #12]
 80147f4:	60b9      	str	r1, [r7, #8]
 80147f6:	607a      	str	r2, [r7, #4]
 80147f8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80147fa:	68bb      	ldr	r3, [r7, #8]
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d106      	bne.n	801480e <tcp_output_control_segment+0x22>
 8014800:	4b1c      	ldr	r3, [pc, #112]	; (8014874 <tcp_output_control_segment+0x88>)
 8014802:	f240 7287 	movw	r2, #1927	; 0x787
 8014806:	491c      	ldr	r1, [pc, #112]	; (8014878 <tcp_output_control_segment+0x8c>)
 8014808:	481c      	ldr	r0, [pc, #112]	; (801487c <tcp_output_control_segment+0x90>)
 801480a:	f003 fbcf 	bl	8017fac <iprintf>

  netif = tcp_route(pcb, src, dst);
 801480e:	683a      	ldr	r2, [r7, #0]
 8014810:	6879      	ldr	r1, [r7, #4]
 8014812:	68f8      	ldr	r0, [r7, #12]
 8014814:	f7fe fae8 	bl	8012de8 <tcp_route>
 8014818:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801481a:	693b      	ldr	r3, [r7, #16]
 801481c:	2b00      	cmp	r3, #0
 801481e:	d102      	bne.n	8014826 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014820:	23fc      	movs	r3, #252	; 0xfc
 8014822:	75fb      	strb	r3, [r7, #23]
 8014824:	e01c      	b.n	8014860 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8014826:	68fb      	ldr	r3, [r7, #12]
 8014828:	2b00      	cmp	r3, #0
 801482a:	d006      	beq.n	801483a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	7adb      	ldrb	r3, [r3, #11]
 8014830:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	7a9b      	ldrb	r3, [r3, #10]
 8014836:	757b      	strb	r3, [r7, #21]
 8014838:	e003      	b.n	8014842 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801483a:	23ff      	movs	r3, #255	; 0xff
 801483c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801483e:	2300      	movs	r3, #0
 8014840:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8014842:	7dba      	ldrb	r2, [r7, #22]
 8014844:	693b      	ldr	r3, [r7, #16]
 8014846:	9302      	str	r3, [sp, #8]
 8014848:	2306      	movs	r3, #6
 801484a:	9301      	str	r3, [sp, #4]
 801484c:	7d7b      	ldrb	r3, [r7, #21]
 801484e:	9300      	str	r3, [sp, #0]
 8014850:	4613      	mov	r3, r2
 8014852:	683a      	ldr	r2, [r7, #0]
 8014854:	6879      	ldr	r1, [r7, #4]
 8014856:	68b8      	ldr	r0, [r7, #8]
 8014858:	f001 ff70 	bl	801673c <ip4_output_if>
 801485c:	4603      	mov	r3, r0
 801485e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014860:	68b8      	ldr	r0, [r7, #8]
 8014862:	f7f9 fd37 	bl	800e2d4 <pbuf_free>
  return err;
 8014866:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801486a:	4618      	mov	r0, r3
 801486c:	3718      	adds	r7, #24
 801486e:	46bd      	mov	sp, r7
 8014870:	bd80      	pop	{r7, pc}
 8014872:	bf00      	nop
 8014874:	0801c83c 	.word	0x0801c83c
 8014878:	0801cf94 	.word	0x0801cf94
 801487c:	0801c890 	.word	0x0801c890

08014880 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014880:	b590      	push	{r4, r7, lr}
 8014882:	b08b      	sub	sp, #44	; 0x2c
 8014884:	af04      	add	r7, sp, #16
 8014886:	60f8      	str	r0, [r7, #12]
 8014888:	60b9      	str	r1, [r7, #8]
 801488a:	607a      	str	r2, [r7, #4]
 801488c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801488e:	683b      	ldr	r3, [r7, #0]
 8014890:	2b00      	cmp	r3, #0
 8014892:	d106      	bne.n	80148a2 <tcp_rst+0x22>
 8014894:	4b1f      	ldr	r3, [pc, #124]	; (8014914 <tcp_rst+0x94>)
 8014896:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801489a:	491f      	ldr	r1, [pc, #124]	; (8014918 <tcp_rst+0x98>)
 801489c:	481f      	ldr	r0, [pc, #124]	; (801491c <tcp_rst+0x9c>)
 801489e:	f003 fb85 	bl	8017fac <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80148a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d106      	bne.n	80148b6 <tcp_rst+0x36>
 80148a8:	4b1a      	ldr	r3, [pc, #104]	; (8014914 <tcp_rst+0x94>)
 80148aa:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80148ae:	491c      	ldr	r1, [pc, #112]	; (8014920 <tcp_rst+0xa0>)
 80148b0:	481a      	ldr	r0, [pc, #104]	; (801491c <tcp_rst+0x9c>)
 80148b2:	f003 fb7b 	bl	8017fac <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80148b6:	2300      	movs	r3, #0
 80148b8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80148ba:	f246 0308 	movw	r3, #24584	; 0x6008
 80148be:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80148c0:	7dfb      	ldrb	r3, [r7, #23]
 80148c2:	b29c      	uxth	r4, r3
 80148c4:	68b8      	ldr	r0, [r7, #8]
 80148c6:	f7f8 fa66 	bl	800cd96 <lwip_htonl>
 80148ca:	4602      	mov	r2, r0
 80148cc:	8abb      	ldrh	r3, [r7, #20]
 80148ce:	9303      	str	r3, [sp, #12]
 80148d0:	2314      	movs	r3, #20
 80148d2:	9302      	str	r3, [sp, #8]
 80148d4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80148d6:	9301      	str	r3, [sp, #4]
 80148d8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80148da:	9300      	str	r3, [sp, #0]
 80148dc:	4613      	mov	r3, r2
 80148de:	2200      	movs	r2, #0
 80148e0:	4621      	mov	r1, r4
 80148e2:	6878      	ldr	r0, [r7, #4]
 80148e4:	f7ff fe92 	bl	801460c <tcp_output_alloc_header_common>
 80148e8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80148ea:	693b      	ldr	r3, [r7, #16]
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d00c      	beq.n	801490a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80148f0:	7dfb      	ldrb	r3, [r7, #23]
 80148f2:	2200      	movs	r2, #0
 80148f4:	6939      	ldr	r1, [r7, #16]
 80148f6:	68f8      	ldr	r0, [r7, #12]
 80148f8:	f7ff ff38 	bl	801476c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80148fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148fe:	683a      	ldr	r2, [r7, #0]
 8014900:	6939      	ldr	r1, [r7, #16]
 8014902:	68f8      	ldr	r0, [r7, #12]
 8014904:	f7ff ff72 	bl	80147ec <tcp_output_control_segment>
 8014908:	e000      	b.n	801490c <tcp_rst+0x8c>
    return;
 801490a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801490c:	371c      	adds	r7, #28
 801490e:	46bd      	mov	sp, r7
 8014910:	bd90      	pop	{r4, r7, pc}
 8014912:	bf00      	nop
 8014914:	0801c83c 	.word	0x0801c83c
 8014918:	0801cfc0 	.word	0x0801cfc0
 801491c:	0801c890 	.word	0x0801c890
 8014920:	0801cfdc 	.word	0x0801cfdc

08014924 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014924:	b590      	push	{r4, r7, lr}
 8014926:	b087      	sub	sp, #28
 8014928:	af00      	add	r7, sp, #0
 801492a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801492c:	2300      	movs	r3, #0
 801492e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8014930:	2300      	movs	r3, #0
 8014932:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	2b00      	cmp	r3, #0
 8014938:	d106      	bne.n	8014948 <tcp_send_empty_ack+0x24>
 801493a:	4b28      	ldr	r3, [pc, #160]	; (80149dc <tcp_send_empty_ack+0xb8>)
 801493c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8014940:	4927      	ldr	r1, [pc, #156]	; (80149e0 <tcp_send_empty_ack+0xbc>)
 8014942:	4828      	ldr	r0, [pc, #160]	; (80149e4 <tcp_send_empty_ack+0xc0>)
 8014944:	f003 fb32 	bl	8017fac <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014948:	7dfb      	ldrb	r3, [r7, #23]
 801494a:	009b      	lsls	r3, r3, #2
 801494c:	b2db      	uxtb	r3, r3
 801494e:	f003 0304 	and.w	r3, r3, #4
 8014952:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8014954:	7d7b      	ldrb	r3, [r7, #21]
 8014956:	b29c      	uxth	r4, r3
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801495c:	4618      	mov	r0, r3
 801495e:	f7f8 fa1a 	bl	800cd96 <lwip_htonl>
 8014962:	4603      	mov	r3, r0
 8014964:	2200      	movs	r2, #0
 8014966:	4621      	mov	r1, r4
 8014968:	6878      	ldr	r0, [r7, #4]
 801496a:	f7ff fec1 	bl	80146f0 <tcp_output_alloc_header>
 801496e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014970:	693b      	ldr	r3, [r7, #16]
 8014972:	2b00      	cmp	r3, #0
 8014974:	d109      	bne.n	801498a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	8b5b      	ldrh	r3, [r3, #26]
 801497a:	f043 0303 	orr.w	r3, r3, #3
 801497e:	b29a      	uxth	r2, r3
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014984:	f06f 0301 	mvn.w	r3, #1
 8014988:	e023      	b.n	80149d2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801498a:	7dbb      	ldrb	r3, [r7, #22]
 801498c:	7dfa      	ldrb	r2, [r7, #23]
 801498e:	6939      	ldr	r1, [r7, #16]
 8014990:	6878      	ldr	r0, [r7, #4]
 8014992:	f7ff feeb 	bl	801476c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014996:	687a      	ldr	r2, [r7, #4]
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	3304      	adds	r3, #4
 801499c:	6939      	ldr	r1, [r7, #16]
 801499e:	6878      	ldr	r0, [r7, #4]
 80149a0:	f7ff ff24 	bl	80147ec <tcp_output_control_segment>
 80149a4:	4603      	mov	r3, r0
 80149a6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80149a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d007      	beq.n	80149c0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	8b5b      	ldrh	r3, [r3, #26]
 80149b4:	f043 0303 	orr.w	r3, r3, #3
 80149b8:	b29a      	uxth	r2, r3
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	835a      	strh	r2, [r3, #26]
 80149be:	e006      	b.n	80149ce <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	8b5b      	ldrh	r3, [r3, #26]
 80149c4:	f023 0303 	bic.w	r3, r3, #3
 80149c8:	b29a      	uxth	r2, r3
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80149ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80149d2:	4618      	mov	r0, r3
 80149d4:	371c      	adds	r7, #28
 80149d6:	46bd      	mov	sp, r7
 80149d8:	bd90      	pop	{r4, r7, pc}
 80149da:	bf00      	nop
 80149dc:	0801c83c 	.word	0x0801c83c
 80149e0:	0801cff8 	.word	0x0801cff8
 80149e4:	0801c890 	.word	0x0801c890

080149e8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80149e8:	b590      	push	{r4, r7, lr}
 80149ea:	b087      	sub	sp, #28
 80149ec:	af00      	add	r7, sp, #0
 80149ee:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80149f0:	2300      	movs	r3, #0
 80149f2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d106      	bne.n	8014a08 <tcp_keepalive+0x20>
 80149fa:	4b18      	ldr	r3, [pc, #96]	; (8014a5c <tcp_keepalive+0x74>)
 80149fc:	f640 0224 	movw	r2, #2084	; 0x824
 8014a00:	4917      	ldr	r1, [pc, #92]	; (8014a60 <tcp_keepalive+0x78>)
 8014a02:	4818      	ldr	r0, [pc, #96]	; (8014a64 <tcp_keepalive+0x7c>)
 8014a04:	f003 fad2 	bl	8017fac <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014a08:	7dfb      	ldrb	r3, [r7, #23]
 8014a0a:	b29c      	uxth	r4, r3
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014a10:	3b01      	subs	r3, #1
 8014a12:	4618      	mov	r0, r3
 8014a14:	f7f8 f9bf 	bl	800cd96 <lwip_htonl>
 8014a18:	4603      	mov	r3, r0
 8014a1a:	2200      	movs	r2, #0
 8014a1c:	4621      	mov	r1, r4
 8014a1e:	6878      	ldr	r0, [r7, #4]
 8014a20:	f7ff fe66 	bl	80146f0 <tcp_output_alloc_header>
 8014a24:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014a26:	693b      	ldr	r3, [r7, #16]
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d102      	bne.n	8014a32 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8014a30:	e010      	b.n	8014a54 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014a32:	7dfb      	ldrb	r3, [r7, #23]
 8014a34:	2200      	movs	r2, #0
 8014a36:	6939      	ldr	r1, [r7, #16]
 8014a38:	6878      	ldr	r0, [r7, #4]
 8014a3a:	f7ff fe97 	bl	801476c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014a3e:	687a      	ldr	r2, [r7, #4]
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	3304      	adds	r3, #4
 8014a44:	6939      	ldr	r1, [r7, #16]
 8014a46:	6878      	ldr	r0, [r7, #4]
 8014a48:	f7ff fed0 	bl	80147ec <tcp_output_control_segment>
 8014a4c:	4603      	mov	r3, r0
 8014a4e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014a50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014a54:	4618      	mov	r0, r3
 8014a56:	371c      	adds	r7, #28
 8014a58:	46bd      	mov	sp, r7
 8014a5a:	bd90      	pop	{r4, r7, pc}
 8014a5c:	0801c83c 	.word	0x0801c83c
 8014a60:	0801d018 	.word	0x0801d018
 8014a64:	0801c890 	.word	0x0801c890

08014a68 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014a68:	b590      	push	{r4, r7, lr}
 8014a6a:	b08b      	sub	sp, #44	; 0x2c
 8014a6c:	af00      	add	r7, sp, #0
 8014a6e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014a70:	2300      	movs	r3, #0
 8014a72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d106      	bne.n	8014a8a <tcp_zero_window_probe+0x22>
 8014a7c:	4b4c      	ldr	r3, [pc, #304]	; (8014bb0 <tcp_zero_window_probe+0x148>)
 8014a7e:	f640 024f 	movw	r2, #2127	; 0x84f
 8014a82:	494c      	ldr	r1, [pc, #304]	; (8014bb4 <tcp_zero_window_probe+0x14c>)
 8014a84:	484c      	ldr	r0, [pc, #304]	; (8014bb8 <tcp_zero_window_probe+0x150>)
 8014a86:	f003 fa91 	bl	8017fac <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014a8e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8014a90:	6a3b      	ldr	r3, [r7, #32]
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d101      	bne.n	8014a9a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014a96:	2300      	movs	r3, #0
 8014a98:	e086      	b.n	8014ba8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014aa0:	2bff      	cmp	r3, #255	; 0xff
 8014aa2:	d007      	beq.n	8014ab4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014aaa:	3301      	adds	r3, #1
 8014aac:	b2da      	uxtb	r2, r3
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014ab4:	6a3b      	ldr	r3, [r7, #32]
 8014ab6:	68db      	ldr	r3, [r3, #12]
 8014ab8:	899b      	ldrh	r3, [r3, #12]
 8014aba:	b29b      	uxth	r3, r3
 8014abc:	4618      	mov	r0, r3
 8014abe:	f7f8 f955 	bl	800cd6c <lwip_htons>
 8014ac2:	4603      	mov	r3, r0
 8014ac4:	b2db      	uxtb	r3, r3
 8014ac6:	f003 0301 	and.w	r3, r3, #1
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d005      	beq.n	8014ada <tcp_zero_window_probe+0x72>
 8014ace:	6a3b      	ldr	r3, [r7, #32]
 8014ad0:	891b      	ldrh	r3, [r3, #8]
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d101      	bne.n	8014ada <tcp_zero_window_probe+0x72>
 8014ad6:	2301      	movs	r3, #1
 8014ad8:	e000      	b.n	8014adc <tcp_zero_window_probe+0x74>
 8014ada:	2300      	movs	r3, #0
 8014adc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014ade:	7ffb      	ldrb	r3, [r7, #31]
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	bf0c      	ite	eq
 8014ae4:	2301      	moveq	r3, #1
 8014ae6:	2300      	movne	r3, #0
 8014ae8:	b2db      	uxtb	r3, r3
 8014aea:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014aec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014af0:	b299      	uxth	r1, r3
 8014af2:	6a3b      	ldr	r3, [r7, #32]
 8014af4:	68db      	ldr	r3, [r3, #12]
 8014af6:	685b      	ldr	r3, [r3, #4]
 8014af8:	8bba      	ldrh	r2, [r7, #28]
 8014afa:	6878      	ldr	r0, [r7, #4]
 8014afc:	f7ff fdf8 	bl	80146f0 <tcp_output_alloc_header>
 8014b00:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8014b02:	69bb      	ldr	r3, [r7, #24]
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d102      	bne.n	8014b0e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014b08:	f04f 33ff 	mov.w	r3, #4294967295
 8014b0c:	e04c      	b.n	8014ba8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014b0e:	69bb      	ldr	r3, [r7, #24]
 8014b10:	685b      	ldr	r3, [r3, #4]
 8014b12:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014b14:	7ffb      	ldrb	r3, [r7, #31]
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d011      	beq.n	8014b3e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014b1a:	697b      	ldr	r3, [r7, #20]
 8014b1c:	899b      	ldrh	r3, [r3, #12]
 8014b1e:	b29b      	uxth	r3, r3
 8014b20:	b21b      	sxth	r3, r3
 8014b22:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014b26:	b21c      	sxth	r4, r3
 8014b28:	2011      	movs	r0, #17
 8014b2a:	f7f8 f91f 	bl	800cd6c <lwip_htons>
 8014b2e:	4603      	mov	r3, r0
 8014b30:	b21b      	sxth	r3, r3
 8014b32:	4323      	orrs	r3, r4
 8014b34:	b21b      	sxth	r3, r3
 8014b36:	b29a      	uxth	r2, r3
 8014b38:	697b      	ldr	r3, [r7, #20]
 8014b3a:	819a      	strh	r2, [r3, #12]
 8014b3c:	e010      	b.n	8014b60 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014b3e:	69bb      	ldr	r3, [r7, #24]
 8014b40:	685b      	ldr	r3, [r3, #4]
 8014b42:	3314      	adds	r3, #20
 8014b44:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014b46:	6a3b      	ldr	r3, [r7, #32]
 8014b48:	6858      	ldr	r0, [r3, #4]
 8014b4a:	6a3b      	ldr	r3, [r7, #32]
 8014b4c:	685b      	ldr	r3, [r3, #4]
 8014b4e:	891a      	ldrh	r2, [r3, #8]
 8014b50:	6a3b      	ldr	r3, [r7, #32]
 8014b52:	891b      	ldrh	r3, [r3, #8]
 8014b54:	1ad3      	subs	r3, r2, r3
 8014b56:	b29b      	uxth	r3, r3
 8014b58:	2201      	movs	r2, #1
 8014b5a:	6939      	ldr	r1, [r7, #16]
 8014b5c:	f7f9 fdb4 	bl	800e6c8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014b60:	6a3b      	ldr	r3, [r7, #32]
 8014b62:	68db      	ldr	r3, [r3, #12]
 8014b64:	685b      	ldr	r3, [r3, #4]
 8014b66:	4618      	mov	r0, r3
 8014b68:	f7f8 f915 	bl	800cd96 <lwip_htonl>
 8014b6c:	4603      	mov	r3, r0
 8014b6e:	3301      	adds	r3, #1
 8014b70:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	1ad3      	subs	r3, r2, r3
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	da02      	bge.n	8014b84 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	68fa      	ldr	r2, [r7, #12]
 8014b82:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014b84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b88:	2200      	movs	r2, #0
 8014b8a:	69b9      	ldr	r1, [r7, #24]
 8014b8c:	6878      	ldr	r0, [r7, #4]
 8014b8e:	f7ff fded 	bl	801476c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014b92:	687a      	ldr	r2, [r7, #4]
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	3304      	adds	r3, #4
 8014b98:	69b9      	ldr	r1, [r7, #24]
 8014b9a:	6878      	ldr	r0, [r7, #4]
 8014b9c:	f7ff fe26 	bl	80147ec <tcp_output_control_segment>
 8014ba0:	4603      	mov	r3, r0
 8014ba2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014ba4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014ba8:	4618      	mov	r0, r3
 8014baa:	372c      	adds	r7, #44	; 0x2c
 8014bac:	46bd      	mov	sp, r7
 8014bae:	bd90      	pop	{r4, r7, pc}
 8014bb0:	0801c83c 	.word	0x0801c83c
 8014bb4:	0801d034 	.word	0x0801d034
 8014bb8:	0801c890 	.word	0x0801c890

08014bbc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014bbc:	b580      	push	{r7, lr}
 8014bbe:	b082      	sub	sp, #8
 8014bc0:	af00      	add	r7, sp, #0
 8014bc2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014bc4:	f7f9 ff00 	bl	800e9c8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014bc8:	4b0a      	ldr	r3, [pc, #40]	; (8014bf4 <tcpip_tcp_timer+0x38>)
 8014bca:	681b      	ldr	r3, [r3, #0]
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d103      	bne.n	8014bd8 <tcpip_tcp_timer+0x1c>
 8014bd0:	4b09      	ldr	r3, [pc, #36]	; (8014bf8 <tcpip_tcp_timer+0x3c>)
 8014bd2:	681b      	ldr	r3, [r3, #0]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d005      	beq.n	8014be4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014bd8:	2200      	movs	r2, #0
 8014bda:	4908      	ldr	r1, [pc, #32]	; (8014bfc <tcpip_tcp_timer+0x40>)
 8014bdc:	20fa      	movs	r0, #250	; 0xfa
 8014bde:	f000 f8f3 	bl	8014dc8 <sys_timeout>
 8014be2:	e003      	b.n	8014bec <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014be4:	4b06      	ldr	r3, [pc, #24]	; (8014c00 <tcpip_tcp_timer+0x44>)
 8014be6:	2200      	movs	r2, #0
 8014be8:	601a      	str	r2, [r3, #0]
  }
}
 8014bea:	bf00      	nop
 8014bec:	bf00      	nop
 8014bee:	3708      	adds	r7, #8
 8014bf0:	46bd      	mov	sp, r7
 8014bf2:	bd80      	pop	{r7, pc}
 8014bf4:	20009504 	.word	0x20009504
 8014bf8:	20009514 	.word	0x20009514
 8014bfc:	08014bbd 	.word	0x08014bbd
 8014c00:	20000a94 	.word	0x20000a94

08014c04 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014c04:	b580      	push	{r7, lr}
 8014c06:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014c08:	4b0a      	ldr	r3, [pc, #40]	; (8014c34 <tcp_timer_needed+0x30>)
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d10f      	bne.n	8014c30 <tcp_timer_needed+0x2c>
 8014c10:	4b09      	ldr	r3, [pc, #36]	; (8014c38 <tcp_timer_needed+0x34>)
 8014c12:	681b      	ldr	r3, [r3, #0]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d103      	bne.n	8014c20 <tcp_timer_needed+0x1c>
 8014c18:	4b08      	ldr	r3, [pc, #32]	; (8014c3c <tcp_timer_needed+0x38>)
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d007      	beq.n	8014c30 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014c20:	4b04      	ldr	r3, [pc, #16]	; (8014c34 <tcp_timer_needed+0x30>)
 8014c22:	2201      	movs	r2, #1
 8014c24:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014c26:	2200      	movs	r2, #0
 8014c28:	4905      	ldr	r1, [pc, #20]	; (8014c40 <tcp_timer_needed+0x3c>)
 8014c2a:	20fa      	movs	r0, #250	; 0xfa
 8014c2c:	f000 f8cc 	bl	8014dc8 <sys_timeout>
  }
}
 8014c30:	bf00      	nop
 8014c32:	bd80      	pop	{r7, pc}
 8014c34:	20000a94 	.word	0x20000a94
 8014c38:	20009504 	.word	0x20009504
 8014c3c:	20009514 	.word	0x20009514
 8014c40:	08014bbd 	.word	0x08014bbd

08014c44 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014c44:	b580      	push	{r7, lr}
 8014c46:	b086      	sub	sp, #24
 8014c48:	af00      	add	r7, sp, #0
 8014c4a:	60f8      	str	r0, [r7, #12]
 8014c4c:	60b9      	str	r1, [r7, #8]
 8014c4e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014c50:	2006      	movs	r0, #6
 8014c52:	f7f8 fce1 	bl	800d618 <memp_malloc>
 8014c56:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014c58:	693b      	ldr	r3, [r7, #16]
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d109      	bne.n	8014c72 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014c5e:	693b      	ldr	r3, [r7, #16]
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d151      	bne.n	8014d08 <sys_timeout_abs+0xc4>
 8014c64:	4b2a      	ldr	r3, [pc, #168]	; (8014d10 <sys_timeout_abs+0xcc>)
 8014c66:	22be      	movs	r2, #190	; 0xbe
 8014c68:	492a      	ldr	r1, [pc, #168]	; (8014d14 <sys_timeout_abs+0xd0>)
 8014c6a:	482b      	ldr	r0, [pc, #172]	; (8014d18 <sys_timeout_abs+0xd4>)
 8014c6c:	f003 f99e 	bl	8017fac <iprintf>
    return;
 8014c70:	e04a      	b.n	8014d08 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8014c72:	693b      	ldr	r3, [r7, #16]
 8014c74:	2200      	movs	r2, #0
 8014c76:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014c78:	693b      	ldr	r3, [r7, #16]
 8014c7a:	68ba      	ldr	r2, [r7, #8]
 8014c7c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014c7e:	693b      	ldr	r3, [r7, #16]
 8014c80:	687a      	ldr	r2, [r7, #4]
 8014c82:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014c84:	693b      	ldr	r3, [r7, #16]
 8014c86:	68fa      	ldr	r2, [r7, #12]
 8014c88:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014c8a:	4b24      	ldr	r3, [pc, #144]	; (8014d1c <sys_timeout_abs+0xd8>)
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d103      	bne.n	8014c9a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8014c92:	4a22      	ldr	r2, [pc, #136]	; (8014d1c <sys_timeout_abs+0xd8>)
 8014c94:	693b      	ldr	r3, [r7, #16]
 8014c96:	6013      	str	r3, [r2, #0]
    return;
 8014c98:	e037      	b.n	8014d0a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8014c9a:	693b      	ldr	r3, [r7, #16]
 8014c9c:	685a      	ldr	r2, [r3, #4]
 8014c9e:	4b1f      	ldr	r3, [pc, #124]	; (8014d1c <sys_timeout_abs+0xd8>)
 8014ca0:	681b      	ldr	r3, [r3, #0]
 8014ca2:	685b      	ldr	r3, [r3, #4]
 8014ca4:	1ad3      	subs	r3, r2, r3
 8014ca6:	0fdb      	lsrs	r3, r3, #31
 8014ca8:	f003 0301 	and.w	r3, r3, #1
 8014cac:	b2db      	uxtb	r3, r3
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d007      	beq.n	8014cc2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8014cb2:	4b1a      	ldr	r3, [pc, #104]	; (8014d1c <sys_timeout_abs+0xd8>)
 8014cb4:	681a      	ldr	r2, [r3, #0]
 8014cb6:	693b      	ldr	r3, [r7, #16]
 8014cb8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014cba:	4a18      	ldr	r2, [pc, #96]	; (8014d1c <sys_timeout_abs+0xd8>)
 8014cbc:	693b      	ldr	r3, [r7, #16]
 8014cbe:	6013      	str	r3, [r2, #0]
 8014cc0:	e023      	b.n	8014d0a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014cc2:	4b16      	ldr	r3, [pc, #88]	; (8014d1c <sys_timeout_abs+0xd8>)
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	617b      	str	r3, [r7, #20]
 8014cc8:	e01a      	b.n	8014d00 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8014cca:	697b      	ldr	r3, [r7, #20]
 8014ccc:	681b      	ldr	r3, [r3, #0]
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d00b      	beq.n	8014cea <sys_timeout_abs+0xa6>
 8014cd2:	693b      	ldr	r3, [r7, #16]
 8014cd4:	685a      	ldr	r2, [r3, #4]
 8014cd6:	697b      	ldr	r3, [r7, #20]
 8014cd8:	681b      	ldr	r3, [r3, #0]
 8014cda:	685b      	ldr	r3, [r3, #4]
 8014cdc:	1ad3      	subs	r3, r2, r3
 8014cde:	0fdb      	lsrs	r3, r3, #31
 8014ce0:	f003 0301 	and.w	r3, r3, #1
 8014ce4:	b2db      	uxtb	r3, r3
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	d007      	beq.n	8014cfa <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8014cea:	697b      	ldr	r3, [r7, #20]
 8014cec:	681a      	ldr	r2, [r3, #0]
 8014cee:	693b      	ldr	r3, [r7, #16]
 8014cf0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8014cf2:	697b      	ldr	r3, [r7, #20]
 8014cf4:	693a      	ldr	r2, [r7, #16]
 8014cf6:	601a      	str	r2, [r3, #0]
        break;
 8014cf8:	e007      	b.n	8014d0a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014cfa:	697b      	ldr	r3, [r7, #20]
 8014cfc:	681b      	ldr	r3, [r3, #0]
 8014cfe:	617b      	str	r3, [r7, #20]
 8014d00:	697b      	ldr	r3, [r7, #20]
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d1e1      	bne.n	8014cca <sys_timeout_abs+0x86>
 8014d06:	e000      	b.n	8014d0a <sys_timeout_abs+0xc6>
    return;
 8014d08:	bf00      	nop
      }
    }
  }
}
 8014d0a:	3718      	adds	r7, #24
 8014d0c:	46bd      	mov	sp, r7
 8014d0e:	bd80      	pop	{r7, pc}
 8014d10:	0801d058 	.word	0x0801d058
 8014d14:	0801d08c 	.word	0x0801d08c
 8014d18:	0801d0cc 	.word	0x0801d0cc
 8014d1c:	20000a8c 	.word	0x20000a8c

08014d20 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014d20:	b580      	push	{r7, lr}
 8014d22:	b086      	sub	sp, #24
 8014d24:	af00      	add	r7, sp, #0
 8014d26:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014d2c:	697b      	ldr	r3, [r7, #20]
 8014d2e:	685b      	ldr	r3, [r3, #4]
 8014d30:	4798      	blx	r3

  now = sys_now();
 8014d32:	f7f7 ff6f 	bl	800cc14 <sys_now>
 8014d36:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014d38:	697b      	ldr	r3, [r7, #20]
 8014d3a:	681a      	ldr	r2, [r3, #0]
 8014d3c:	4b0f      	ldr	r3, [pc, #60]	; (8014d7c <lwip_cyclic_timer+0x5c>)
 8014d3e:	681b      	ldr	r3, [r3, #0]
 8014d40:	4413      	add	r3, r2
 8014d42:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8014d44:	68fa      	ldr	r2, [r7, #12]
 8014d46:	693b      	ldr	r3, [r7, #16]
 8014d48:	1ad3      	subs	r3, r2, r3
 8014d4a:	0fdb      	lsrs	r3, r3, #31
 8014d4c:	f003 0301 	and.w	r3, r3, #1
 8014d50:	b2db      	uxtb	r3, r3
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d009      	beq.n	8014d6a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8014d56:	697b      	ldr	r3, [r7, #20]
 8014d58:	681a      	ldr	r2, [r3, #0]
 8014d5a:	693b      	ldr	r3, [r7, #16]
 8014d5c:	4413      	add	r3, r2
 8014d5e:	687a      	ldr	r2, [r7, #4]
 8014d60:	4907      	ldr	r1, [pc, #28]	; (8014d80 <lwip_cyclic_timer+0x60>)
 8014d62:	4618      	mov	r0, r3
 8014d64:	f7ff ff6e 	bl	8014c44 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8014d68:	e004      	b.n	8014d74 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8014d6a:	687a      	ldr	r2, [r7, #4]
 8014d6c:	4904      	ldr	r1, [pc, #16]	; (8014d80 <lwip_cyclic_timer+0x60>)
 8014d6e:	68f8      	ldr	r0, [r7, #12]
 8014d70:	f7ff ff68 	bl	8014c44 <sys_timeout_abs>
}
 8014d74:	bf00      	nop
 8014d76:	3718      	adds	r7, #24
 8014d78:	46bd      	mov	sp, r7
 8014d7a:	bd80      	pop	{r7, pc}
 8014d7c:	20000a90 	.word	0x20000a90
 8014d80:	08014d21 	.word	0x08014d21

08014d84 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014d84:	b580      	push	{r7, lr}
 8014d86:	b082      	sub	sp, #8
 8014d88:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014d8a:	2301      	movs	r3, #1
 8014d8c:	607b      	str	r3, [r7, #4]
 8014d8e:	e00e      	b.n	8014dae <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8014d90:	4a0b      	ldr	r2, [pc, #44]	; (8014dc0 <sys_timeouts_init+0x3c>)
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	00db      	lsls	r3, r3, #3
 8014d9c:	4a08      	ldr	r2, [pc, #32]	; (8014dc0 <sys_timeouts_init+0x3c>)
 8014d9e:	4413      	add	r3, r2
 8014da0:	461a      	mov	r2, r3
 8014da2:	4908      	ldr	r1, [pc, #32]	; (8014dc4 <sys_timeouts_init+0x40>)
 8014da4:	f000 f810 	bl	8014dc8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	3301      	adds	r3, #1
 8014dac:	607b      	str	r3, [r7, #4]
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	2b02      	cmp	r3, #2
 8014db2:	d9ed      	bls.n	8014d90 <sys_timeouts_init+0xc>
  }
}
 8014db4:	bf00      	nop
 8014db6:	bf00      	nop
 8014db8:	3708      	adds	r7, #8
 8014dba:	46bd      	mov	sp, r7
 8014dbc:	bd80      	pop	{r7, pc}
 8014dbe:	bf00      	nop
 8014dc0:	0801de58 	.word	0x0801de58
 8014dc4:	08014d21 	.word	0x08014d21

08014dc8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8014dc8:	b580      	push	{r7, lr}
 8014dca:	b086      	sub	sp, #24
 8014dcc:	af00      	add	r7, sp, #0
 8014dce:	60f8      	str	r0, [r7, #12]
 8014dd0:	60b9      	str	r1, [r7, #8]
 8014dd2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014dd4:	68fb      	ldr	r3, [r7, #12]
 8014dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014dda:	d306      	bcc.n	8014dea <sys_timeout+0x22>
 8014ddc:	4b0a      	ldr	r3, [pc, #40]	; (8014e08 <sys_timeout+0x40>)
 8014dde:	f240 1229 	movw	r2, #297	; 0x129
 8014de2:	490a      	ldr	r1, [pc, #40]	; (8014e0c <sys_timeout+0x44>)
 8014de4:	480a      	ldr	r0, [pc, #40]	; (8014e10 <sys_timeout+0x48>)
 8014de6:	f003 f8e1 	bl	8017fac <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8014dea:	f7f7 ff13 	bl	800cc14 <sys_now>
 8014dee:	4602      	mov	r2, r0
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	4413      	add	r3, r2
 8014df4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8014df6:	687a      	ldr	r2, [r7, #4]
 8014df8:	68b9      	ldr	r1, [r7, #8]
 8014dfa:	6978      	ldr	r0, [r7, #20]
 8014dfc:	f7ff ff22 	bl	8014c44 <sys_timeout_abs>
#endif
}
 8014e00:	bf00      	nop
 8014e02:	3718      	adds	r7, #24
 8014e04:	46bd      	mov	sp, r7
 8014e06:	bd80      	pop	{r7, pc}
 8014e08:	0801d058 	.word	0x0801d058
 8014e0c:	0801d0f4 	.word	0x0801d0f4
 8014e10:	0801d0cc 	.word	0x0801d0cc

08014e14 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014e14:	b580      	push	{r7, lr}
 8014e16:	b084      	sub	sp, #16
 8014e18:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8014e1a:	f7f7 fefb 	bl	800cc14 <sys_now>
 8014e1e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8014e20:	4b1a      	ldr	r3, [pc, #104]	; (8014e8c <sys_check_timeouts+0x78>)
 8014e22:	781b      	ldrb	r3, [r3, #0]
 8014e24:	b2db      	uxtb	r3, r3
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d001      	beq.n	8014e2e <sys_check_timeouts+0x1a>
 8014e2a:	f7f8 ff19 	bl	800dc60 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8014e2e:	4b18      	ldr	r3, [pc, #96]	; (8014e90 <sys_check_timeouts+0x7c>)
 8014e30:	681b      	ldr	r3, [r3, #0]
 8014e32:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8014e34:	68bb      	ldr	r3, [r7, #8]
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d022      	beq.n	8014e80 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8014e3a:	68bb      	ldr	r3, [r7, #8]
 8014e3c:	685b      	ldr	r3, [r3, #4]
 8014e3e:	68fa      	ldr	r2, [r7, #12]
 8014e40:	1ad3      	subs	r3, r2, r3
 8014e42:	0fdb      	lsrs	r3, r3, #31
 8014e44:	f003 0301 	and.w	r3, r3, #1
 8014e48:	b2db      	uxtb	r3, r3
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d11a      	bne.n	8014e84 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014e4e:	68bb      	ldr	r3, [r7, #8]
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	4a0f      	ldr	r2, [pc, #60]	; (8014e90 <sys_check_timeouts+0x7c>)
 8014e54:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014e56:	68bb      	ldr	r3, [r7, #8]
 8014e58:	689b      	ldr	r3, [r3, #8]
 8014e5a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8014e5c:	68bb      	ldr	r3, [r7, #8]
 8014e5e:	68db      	ldr	r3, [r3, #12]
 8014e60:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014e62:	68bb      	ldr	r3, [r7, #8]
 8014e64:	685b      	ldr	r3, [r3, #4]
 8014e66:	4a0b      	ldr	r2, [pc, #44]	; (8014e94 <sys_check_timeouts+0x80>)
 8014e68:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014e6a:	68b9      	ldr	r1, [r7, #8]
 8014e6c:	2006      	movs	r0, #6
 8014e6e:	f7f8 fc1f 	bl	800d6b0 <memp_free>
    if (handler != NULL) {
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d0d3      	beq.n	8014e20 <sys_check_timeouts+0xc>
      handler(arg);
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	6838      	ldr	r0, [r7, #0]
 8014e7c:	4798      	blx	r3
  do {
 8014e7e:	e7cf      	b.n	8014e20 <sys_check_timeouts+0xc>
      return;
 8014e80:	bf00      	nop
 8014e82:	e000      	b.n	8014e86 <sys_check_timeouts+0x72>
      return;
 8014e84:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8014e86:	3710      	adds	r7, #16
 8014e88:	46bd      	mov	sp, r7
 8014e8a:	bd80      	pop	{r7, pc}
 8014e8c:	200094fc 	.word	0x200094fc
 8014e90:	20000a8c 	.word	0x20000a8c
 8014e94:	20000a90 	.word	0x20000a90

08014e98 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014e98:	b580      	push	{r7, lr}
 8014e9a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014e9c:	f003 f89e 	bl	8017fdc <rand>
 8014ea0:	4603      	mov	r3, r0
 8014ea2:	b29b      	uxth	r3, r3
 8014ea4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014ea8:	b29b      	uxth	r3, r3
 8014eaa:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8014eae:	b29a      	uxth	r2, r3
 8014eb0:	4b01      	ldr	r3, [pc, #4]	; (8014eb8 <udp_init+0x20>)
 8014eb2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014eb4:	bf00      	nop
 8014eb6:	bd80      	pop	{r7, pc}
 8014eb8:	20000018 	.word	0x20000018

08014ebc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8014ebc:	b580      	push	{r7, lr}
 8014ebe:	b084      	sub	sp, #16
 8014ec0:	af00      	add	r7, sp, #0
 8014ec2:	60f8      	str	r0, [r7, #12]
 8014ec4:	60b9      	str	r1, [r7, #8]
 8014ec6:	4613      	mov	r3, r2
 8014ec8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d105      	bne.n	8014edc <udp_input_local_match+0x20>
 8014ed0:	4b27      	ldr	r3, [pc, #156]	; (8014f70 <udp_input_local_match+0xb4>)
 8014ed2:	2287      	movs	r2, #135	; 0x87
 8014ed4:	4927      	ldr	r1, [pc, #156]	; (8014f74 <udp_input_local_match+0xb8>)
 8014ed6:	4828      	ldr	r0, [pc, #160]	; (8014f78 <udp_input_local_match+0xbc>)
 8014ed8:	f003 f868 	bl	8017fac <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8014edc:	68bb      	ldr	r3, [r7, #8]
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d105      	bne.n	8014eee <udp_input_local_match+0x32>
 8014ee2:	4b23      	ldr	r3, [pc, #140]	; (8014f70 <udp_input_local_match+0xb4>)
 8014ee4:	2288      	movs	r2, #136	; 0x88
 8014ee6:	4925      	ldr	r1, [pc, #148]	; (8014f7c <udp_input_local_match+0xc0>)
 8014ee8:	4823      	ldr	r0, [pc, #140]	; (8014f78 <udp_input_local_match+0xbc>)
 8014eea:	f003 f85f 	bl	8017fac <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	7a1b      	ldrb	r3, [r3, #8]
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d00b      	beq.n	8014f0e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014ef6:	68fb      	ldr	r3, [r7, #12]
 8014ef8:	7a1a      	ldrb	r2, [r3, #8]
 8014efa:	4b21      	ldr	r3, [pc, #132]	; (8014f80 <udp_input_local_match+0xc4>)
 8014efc:	685b      	ldr	r3, [r3, #4]
 8014efe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014f02:	3301      	adds	r3, #1
 8014f04:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014f06:	429a      	cmp	r2, r3
 8014f08:	d001      	beq.n	8014f0e <udp_input_local_match+0x52>
    return 0;
 8014f0a:	2300      	movs	r3, #0
 8014f0c:	e02b      	b.n	8014f66 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8014f0e:	79fb      	ldrb	r3, [r7, #7]
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d018      	beq.n	8014f46 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014f14:	68fb      	ldr	r3, [r7, #12]
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	d013      	beq.n	8014f42 <udp_input_local_match+0x86>
 8014f1a:	68fb      	ldr	r3, [r7, #12]
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d00f      	beq.n	8014f42 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014f22:	4b17      	ldr	r3, [pc, #92]	; (8014f80 <udp_input_local_match+0xc4>)
 8014f24:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f2a:	d00a      	beq.n	8014f42 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	681a      	ldr	r2, [r3, #0]
 8014f30:	4b13      	ldr	r3, [pc, #76]	; (8014f80 <udp_input_local_match+0xc4>)
 8014f32:	695b      	ldr	r3, [r3, #20]
 8014f34:	405a      	eors	r2, r3
 8014f36:	68bb      	ldr	r3, [r7, #8]
 8014f38:	3308      	adds	r3, #8
 8014f3a:	681b      	ldr	r3, [r3, #0]
 8014f3c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d110      	bne.n	8014f64 <udp_input_local_match+0xa8>
          return 1;
 8014f42:	2301      	movs	r3, #1
 8014f44:	e00f      	b.n	8014f66 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014f46:	68fb      	ldr	r3, [r7, #12]
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d009      	beq.n	8014f60 <udp_input_local_match+0xa4>
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d005      	beq.n	8014f60 <udp_input_local_match+0xa4>
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	681a      	ldr	r2, [r3, #0]
 8014f58:	4b09      	ldr	r3, [pc, #36]	; (8014f80 <udp_input_local_match+0xc4>)
 8014f5a:	695b      	ldr	r3, [r3, #20]
 8014f5c:	429a      	cmp	r2, r3
 8014f5e:	d101      	bne.n	8014f64 <udp_input_local_match+0xa8>
        return 1;
 8014f60:	2301      	movs	r3, #1
 8014f62:	e000      	b.n	8014f66 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8014f64:	2300      	movs	r3, #0
}
 8014f66:	4618      	mov	r0, r3
 8014f68:	3710      	adds	r7, #16
 8014f6a:	46bd      	mov	sp, r7
 8014f6c:	bd80      	pop	{r7, pc}
 8014f6e:	bf00      	nop
 8014f70:	0801d140 	.word	0x0801d140
 8014f74:	0801d170 	.word	0x0801d170
 8014f78:	0801d194 	.word	0x0801d194
 8014f7c:	0801d1bc 	.word	0x0801d1bc
 8014f80:	20003e00 	.word	0x20003e00

08014f84 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8014f84:	b590      	push	{r4, r7, lr}
 8014f86:	b08d      	sub	sp, #52	; 0x34
 8014f88:	af02      	add	r7, sp, #8
 8014f8a:	6078      	str	r0, [r7, #4]
 8014f8c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8014f8e:	2300      	movs	r3, #0
 8014f90:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	d105      	bne.n	8014fa4 <udp_input+0x20>
 8014f98:	4b7c      	ldr	r3, [pc, #496]	; (801518c <udp_input+0x208>)
 8014f9a:	22cf      	movs	r2, #207	; 0xcf
 8014f9c:	497c      	ldr	r1, [pc, #496]	; (8015190 <udp_input+0x20c>)
 8014f9e:	487d      	ldr	r0, [pc, #500]	; (8015194 <udp_input+0x210>)
 8014fa0:	f003 f804 	bl	8017fac <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8014fa4:	683b      	ldr	r3, [r7, #0]
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d105      	bne.n	8014fb6 <udp_input+0x32>
 8014faa:	4b78      	ldr	r3, [pc, #480]	; (801518c <udp_input+0x208>)
 8014fac:	22d0      	movs	r2, #208	; 0xd0
 8014fae:	497a      	ldr	r1, [pc, #488]	; (8015198 <udp_input+0x214>)
 8014fb0:	4878      	ldr	r0, [pc, #480]	; (8015194 <udp_input+0x210>)
 8014fb2:	f002 fffb 	bl	8017fac <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	895b      	ldrh	r3, [r3, #10]
 8014fba:	2b07      	cmp	r3, #7
 8014fbc:	d803      	bhi.n	8014fc6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8014fbe:	6878      	ldr	r0, [r7, #4]
 8014fc0:	f7f9 f988 	bl	800e2d4 <pbuf_free>
    goto end;
 8014fc4:	e0de      	b.n	8015184 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	685b      	ldr	r3, [r3, #4]
 8014fca:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8014fcc:	4b73      	ldr	r3, [pc, #460]	; (801519c <udp_input+0x218>)
 8014fce:	695b      	ldr	r3, [r3, #20]
 8014fd0:	4a72      	ldr	r2, [pc, #456]	; (801519c <udp_input+0x218>)
 8014fd2:	6812      	ldr	r2, [r2, #0]
 8014fd4:	4611      	mov	r1, r2
 8014fd6:	4618      	mov	r0, r3
 8014fd8:	f001 fc88 	bl	80168ec <ip4_addr_isbroadcast_u32>
 8014fdc:	4603      	mov	r3, r0
 8014fde:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8014fe0:	697b      	ldr	r3, [r7, #20]
 8014fe2:	881b      	ldrh	r3, [r3, #0]
 8014fe4:	b29b      	uxth	r3, r3
 8014fe6:	4618      	mov	r0, r3
 8014fe8:	f7f7 fec0 	bl	800cd6c <lwip_htons>
 8014fec:	4603      	mov	r3, r0
 8014fee:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8014ff0:	697b      	ldr	r3, [r7, #20]
 8014ff2:	885b      	ldrh	r3, [r3, #2]
 8014ff4:	b29b      	uxth	r3, r3
 8014ff6:	4618      	mov	r0, r3
 8014ff8:	f7f7 feb8 	bl	800cd6c <lwip_htons>
 8014ffc:	4603      	mov	r3, r0
 8014ffe:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8015000:	2300      	movs	r3, #0
 8015002:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8015004:	2300      	movs	r3, #0
 8015006:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8015008:	2300      	movs	r3, #0
 801500a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801500c:	4b64      	ldr	r3, [pc, #400]	; (80151a0 <udp_input+0x21c>)
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	627b      	str	r3, [r7, #36]	; 0x24
 8015012:	e054      	b.n	80150be <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8015014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015016:	8a5b      	ldrh	r3, [r3, #18]
 8015018:	89fa      	ldrh	r2, [r7, #14]
 801501a:	429a      	cmp	r2, r3
 801501c:	d14a      	bne.n	80150b4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801501e:	7cfb      	ldrb	r3, [r7, #19]
 8015020:	461a      	mov	r2, r3
 8015022:	6839      	ldr	r1, [r7, #0]
 8015024:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015026:	f7ff ff49 	bl	8014ebc <udp_input_local_match>
 801502a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801502c:	2b00      	cmp	r3, #0
 801502e:	d041      	beq.n	80150b4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8015030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015032:	7c1b      	ldrb	r3, [r3, #16]
 8015034:	f003 0304 	and.w	r3, r3, #4
 8015038:	2b00      	cmp	r3, #0
 801503a:	d11d      	bne.n	8015078 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801503c:	69fb      	ldr	r3, [r7, #28]
 801503e:	2b00      	cmp	r3, #0
 8015040:	d102      	bne.n	8015048 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8015042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015044:	61fb      	str	r3, [r7, #28]
 8015046:	e017      	b.n	8015078 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8015048:	7cfb      	ldrb	r3, [r7, #19]
 801504a:	2b00      	cmp	r3, #0
 801504c:	d014      	beq.n	8015078 <udp_input+0xf4>
 801504e:	4b53      	ldr	r3, [pc, #332]	; (801519c <udp_input+0x218>)
 8015050:	695b      	ldr	r3, [r3, #20]
 8015052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015056:	d10f      	bne.n	8015078 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8015058:	69fb      	ldr	r3, [r7, #28]
 801505a:	681a      	ldr	r2, [r3, #0]
 801505c:	683b      	ldr	r3, [r7, #0]
 801505e:	3304      	adds	r3, #4
 8015060:	681b      	ldr	r3, [r3, #0]
 8015062:	429a      	cmp	r2, r3
 8015064:	d008      	beq.n	8015078 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8015066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015068:	681a      	ldr	r2, [r3, #0]
 801506a:	683b      	ldr	r3, [r7, #0]
 801506c:	3304      	adds	r3, #4
 801506e:	681b      	ldr	r3, [r3, #0]
 8015070:	429a      	cmp	r2, r3
 8015072:	d101      	bne.n	8015078 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8015074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015076:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8015078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801507a:	8a9b      	ldrh	r3, [r3, #20]
 801507c:	8a3a      	ldrh	r2, [r7, #16]
 801507e:	429a      	cmp	r2, r3
 8015080:	d118      	bne.n	80150b4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015084:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8015086:	2b00      	cmp	r3, #0
 8015088:	d005      	beq.n	8015096 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801508c:	685a      	ldr	r2, [r3, #4]
 801508e:	4b43      	ldr	r3, [pc, #268]	; (801519c <udp_input+0x218>)
 8015090:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015092:	429a      	cmp	r2, r3
 8015094:	d10e      	bne.n	80150b4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8015096:	6a3b      	ldr	r3, [r7, #32]
 8015098:	2b00      	cmp	r3, #0
 801509a:	d014      	beq.n	80150c6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801509e:	68da      	ldr	r2, [r3, #12]
 80150a0:	6a3b      	ldr	r3, [r7, #32]
 80150a2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80150a4:	4b3e      	ldr	r3, [pc, #248]	; (80151a0 <udp_input+0x21c>)
 80150a6:	681a      	ldr	r2, [r3, #0]
 80150a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150aa:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80150ac:	4a3c      	ldr	r2, [pc, #240]	; (80151a0 <udp_input+0x21c>)
 80150ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150b0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80150b2:	e008      	b.n	80150c6 <udp_input+0x142>
      }
    }

    prev = pcb;
 80150b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150b6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80150b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150ba:	68db      	ldr	r3, [r3, #12]
 80150bc:	627b      	str	r3, [r7, #36]	; 0x24
 80150be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d1a7      	bne.n	8015014 <udp_input+0x90>
 80150c4:	e000      	b.n	80150c8 <udp_input+0x144>
        break;
 80150c6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80150c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d101      	bne.n	80150d2 <udp_input+0x14e>
    pcb = uncon_pcb;
 80150ce:	69fb      	ldr	r3, [r7, #28]
 80150d0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80150d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d002      	beq.n	80150de <udp_input+0x15a>
    for_us = 1;
 80150d8:	2301      	movs	r3, #1
 80150da:	76fb      	strb	r3, [r7, #27]
 80150dc:	e00a      	b.n	80150f4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80150de:	683b      	ldr	r3, [r7, #0]
 80150e0:	3304      	adds	r3, #4
 80150e2:	681a      	ldr	r2, [r3, #0]
 80150e4:	4b2d      	ldr	r3, [pc, #180]	; (801519c <udp_input+0x218>)
 80150e6:	695b      	ldr	r3, [r3, #20]
 80150e8:	429a      	cmp	r2, r3
 80150ea:	bf0c      	ite	eq
 80150ec:	2301      	moveq	r3, #1
 80150ee:	2300      	movne	r3, #0
 80150f0:	b2db      	uxtb	r3, r3
 80150f2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80150f4:	7efb      	ldrb	r3, [r7, #27]
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d041      	beq.n	801517e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80150fa:	2108      	movs	r1, #8
 80150fc:	6878      	ldr	r0, [r7, #4]
 80150fe:	f7f9 f863 	bl	800e1c8 <pbuf_remove_header>
 8015102:	4603      	mov	r3, r0
 8015104:	2b00      	cmp	r3, #0
 8015106:	d00a      	beq.n	801511e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8015108:	4b20      	ldr	r3, [pc, #128]	; (801518c <udp_input+0x208>)
 801510a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801510e:	4925      	ldr	r1, [pc, #148]	; (80151a4 <udp_input+0x220>)
 8015110:	4820      	ldr	r0, [pc, #128]	; (8015194 <udp_input+0x210>)
 8015112:	f002 ff4b 	bl	8017fac <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8015116:	6878      	ldr	r0, [r7, #4]
 8015118:	f7f9 f8dc 	bl	800e2d4 <pbuf_free>
      goto end;
 801511c:	e032      	b.n	8015184 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801511e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015120:	2b00      	cmp	r3, #0
 8015122:	d012      	beq.n	801514a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8015124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015126:	699b      	ldr	r3, [r3, #24]
 8015128:	2b00      	cmp	r3, #0
 801512a:	d00a      	beq.n	8015142 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801512c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801512e:	699c      	ldr	r4, [r3, #24]
 8015130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015132:	69d8      	ldr	r0, [r3, #28]
 8015134:	8a3b      	ldrh	r3, [r7, #16]
 8015136:	9300      	str	r3, [sp, #0]
 8015138:	4b1b      	ldr	r3, [pc, #108]	; (80151a8 <udp_input+0x224>)
 801513a:	687a      	ldr	r2, [r7, #4]
 801513c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801513e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8015140:	e021      	b.n	8015186 <udp_input+0x202>
        pbuf_free(p);
 8015142:	6878      	ldr	r0, [r7, #4]
 8015144:	f7f9 f8c6 	bl	800e2d4 <pbuf_free>
        goto end;
 8015148:	e01c      	b.n	8015184 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801514a:	7cfb      	ldrb	r3, [r7, #19]
 801514c:	2b00      	cmp	r3, #0
 801514e:	d112      	bne.n	8015176 <udp_input+0x1f2>
 8015150:	4b12      	ldr	r3, [pc, #72]	; (801519c <udp_input+0x218>)
 8015152:	695b      	ldr	r3, [r3, #20]
 8015154:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015158:	2be0      	cmp	r3, #224	; 0xe0
 801515a:	d00c      	beq.n	8015176 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801515c:	4b0f      	ldr	r3, [pc, #60]	; (801519c <udp_input+0x218>)
 801515e:	899b      	ldrh	r3, [r3, #12]
 8015160:	3308      	adds	r3, #8
 8015162:	b29b      	uxth	r3, r3
 8015164:	b21b      	sxth	r3, r3
 8015166:	4619      	mov	r1, r3
 8015168:	6878      	ldr	r0, [r7, #4]
 801516a:	f7f9 f8a0 	bl	800e2ae <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801516e:	2103      	movs	r1, #3
 8015170:	6878      	ldr	r0, [r7, #4]
 8015172:	f001 f89b 	bl	80162ac <icmp_dest_unreach>
      pbuf_free(p);
 8015176:	6878      	ldr	r0, [r7, #4]
 8015178:	f7f9 f8ac 	bl	800e2d4 <pbuf_free>
  return;
 801517c:	e003      	b.n	8015186 <udp_input+0x202>
    pbuf_free(p);
 801517e:	6878      	ldr	r0, [r7, #4]
 8015180:	f7f9 f8a8 	bl	800e2d4 <pbuf_free>
  return;
 8015184:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8015186:	372c      	adds	r7, #44	; 0x2c
 8015188:	46bd      	mov	sp, r7
 801518a:	bd90      	pop	{r4, r7, pc}
 801518c:	0801d140 	.word	0x0801d140
 8015190:	0801d1e4 	.word	0x0801d1e4
 8015194:	0801d194 	.word	0x0801d194
 8015198:	0801d1fc 	.word	0x0801d1fc
 801519c:	20003e00 	.word	0x20003e00
 80151a0:	2000951c 	.word	0x2000951c
 80151a4:	0801d218 	.word	0x0801d218
 80151a8:	20003e10 	.word	0x20003e10

080151ac <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80151ac:	b480      	push	{r7}
 80151ae:	b085      	sub	sp, #20
 80151b0:	af00      	add	r7, sp, #0
 80151b2:	6078      	str	r0, [r7, #4]
 80151b4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d01e      	beq.n	80151fa <udp_netif_ip_addr_changed+0x4e>
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	681b      	ldr	r3, [r3, #0]
 80151c0:	2b00      	cmp	r3, #0
 80151c2:	d01a      	beq.n	80151fa <udp_netif_ip_addr_changed+0x4e>
 80151c4:	683b      	ldr	r3, [r7, #0]
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d017      	beq.n	80151fa <udp_netif_ip_addr_changed+0x4e>
 80151ca:	683b      	ldr	r3, [r7, #0]
 80151cc:	681b      	ldr	r3, [r3, #0]
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d013      	beq.n	80151fa <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80151d2:	4b0d      	ldr	r3, [pc, #52]	; (8015208 <udp_netif_ip_addr_changed+0x5c>)
 80151d4:	681b      	ldr	r3, [r3, #0]
 80151d6:	60fb      	str	r3, [r7, #12]
 80151d8:	e00c      	b.n	80151f4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	681a      	ldr	r2, [r3, #0]
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	429a      	cmp	r2, r3
 80151e4:	d103      	bne.n	80151ee <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80151e6:	683b      	ldr	r3, [r7, #0]
 80151e8:	681a      	ldr	r2, [r3, #0]
 80151ea:	68fb      	ldr	r3, [r7, #12]
 80151ec:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	68db      	ldr	r3, [r3, #12]
 80151f2:	60fb      	str	r3, [r7, #12]
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d1ef      	bne.n	80151da <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80151fa:	bf00      	nop
 80151fc:	3714      	adds	r7, #20
 80151fe:	46bd      	mov	sp, r7
 8015200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015204:	4770      	bx	lr
 8015206:	bf00      	nop
 8015208:	2000951c 	.word	0x2000951c

0801520c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801520c:	b580      	push	{r7, lr}
 801520e:	b082      	sub	sp, #8
 8015210:	af00      	add	r7, sp, #0
 8015212:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8015214:	4915      	ldr	r1, [pc, #84]	; (801526c <etharp_free_entry+0x60>)
 8015216:	687a      	ldr	r2, [r7, #4]
 8015218:	4613      	mov	r3, r2
 801521a:	005b      	lsls	r3, r3, #1
 801521c:	4413      	add	r3, r2
 801521e:	00db      	lsls	r3, r3, #3
 8015220:	440b      	add	r3, r1
 8015222:	681b      	ldr	r3, [r3, #0]
 8015224:	2b00      	cmp	r3, #0
 8015226:	d013      	beq.n	8015250 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8015228:	4910      	ldr	r1, [pc, #64]	; (801526c <etharp_free_entry+0x60>)
 801522a:	687a      	ldr	r2, [r7, #4]
 801522c:	4613      	mov	r3, r2
 801522e:	005b      	lsls	r3, r3, #1
 8015230:	4413      	add	r3, r2
 8015232:	00db      	lsls	r3, r3, #3
 8015234:	440b      	add	r3, r1
 8015236:	681b      	ldr	r3, [r3, #0]
 8015238:	4618      	mov	r0, r3
 801523a:	f7f9 f84b 	bl	800e2d4 <pbuf_free>
    arp_table[i].q = NULL;
 801523e:	490b      	ldr	r1, [pc, #44]	; (801526c <etharp_free_entry+0x60>)
 8015240:	687a      	ldr	r2, [r7, #4]
 8015242:	4613      	mov	r3, r2
 8015244:	005b      	lsls	r3, r3, #1
 8015246:	4413      	add	r3, r2
 8015248:	00db      	lsls	r3, r3, #3
 801524a:	440b      	add	r3, r1
 801524c:	2200      	movs	r2, #0
 801524e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8015250:	4906      	ldr	r1, [pc, #24]	; (801526c <etharp_free_entry+0x60>)
 8015252:	687a      	ldr	r2, [r7, #4]
 8015254:	4613      	mov	r3, r2
 8015256:	005b      	lsls	r3, r3, #1
 8015258:	4413      	add	r3, r2
 801525a:	00db      	lsls	r3, r3, #3
 801525c:	440b      	add	r3, r1
 801525e:	3314      	adds	r3, #20
 8015260:	2200      	movs	r2, #0
 8015262:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8015264:	bf00      	nop
 8015266:	3708      	adds	r7, #8
 8015268:	46bd      	mov	sp, r7
 801526a:	bd80      	pop	{r7, pc}
 801526c:	20000a98 	.word	0x20000a98

08015270 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8015270:	b580      	push	{r7, lr}
 8015272:	b082      	sub	sp, #8
 8015274:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015276:	2300      	movs	r3, #0
 8015278:	607b      	str	r3, [r7, #4]
 801527a:	e096      	b.n	80153aa <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801527c:	494f      	ldr	r1, [pc, #316]	; (80153bc <etharp_tmr+0x14c>)
 801527e:	687a      	ldr	r2, [r7, #4]
 8015280:	4613      	mov	r3, r2
 8015282:	005b      	lsls	r3, r3, #1
 8015284:	4413      	add	r3, r2
 8015286:	00db      	lsls	r3, r3, #3
 8015288:	440b      	add	r3, r1
 801528a:	3314      	adds	r3, #20
 801528c:	781b      	ldrb	r3, [r3, #0]
 801528e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8015290:	78fb      	ldrb	r3, [r7, #3]
 8015292:	2b00      	cmp	r3, #0
 8015294:	f000 8086 	beq.w	80153a4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8015298:	4948      	ldr	r1, [pc, #288]	; (80153bc <etharp_tmr+0x14c>)
 801529a:	687a      	ldr	r2, [r7, #4]
 801529c:	4613      	mov	r3, r2
 801529e:	005b      	lsls	r3, r3, #1
 80152a0:	4413      	add	r3, r2
 80152a2:	00db      	lsls	r3, r3, #3
 80152a4:	440b      	add	r3, r1
 80152a6:	3312      	adds	r3, #18
 80152a8:	881b      	ldrh	r3, [r3, #0]
 80152aa:	3301      	adds	r3, #1
 80152ac:	b298      	uxth	r0, r3
 80152ae:	4943      	ldr	r1, [pc, #268]	; (80153bc <etharp_tmr+0x14c>)
 80152b0:	687a      	ldr	r2, [r7, #4]
 80152b2:	4613      	mov	r3, r2
 80152b4:	005b      	lsls	r3, r3, #1
 80152b6:	4413      	add	r3, r2
 80152b8:	00db      	lsls	r3, r3, #3
 80152ba:	440b      	add	r3, r1
 80152bc:	3312      	adds	r3, #18
 80152be:	4602      	mov	r2, r0
 80152c0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80152c2:	493e      	ldr	r1, [pc, #248]	; (80153bc <etharp_tmr+0x14c>)
 80152c4:	687a      	ldr	r2, [r7, #4]
 80152c6:	4613      	mov	r3, r2
 80152c8:	005b      	lsls	r3, r3, #1
 80152ca:	4413      	add	r3, r2
 80152cc:	00db      	lsls	r3, r3, #3
 80152ce:	440b      	add	r3, r1
 80152d0:	3312      	adds	r3, #18
 80152d2:	881b      	ldrh	r3, [r3, #0]
 80152d4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80152d8:	d215      	bcs.n	8015306 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80152da:	4938      	ldr	r1, [pc, #224]	; (80153bc <etharp_tmr+0x14c>)
 80152dc:	687a      	ldr	r2, [r7, #4]
 80152de:	4613      	mov	r3, r2
 80152e0:	005b      	lsls	r3, r3, #1
 80152e2:	4413      	add	r3, r2
 80152e4:	00db      	lsls	r3, r3, #3
 80152e6:	440b      	add	r3, r1
 80152e8:	3314      	adds	r3, #20
 80152ea:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80152ec:	2b01      	cmp	r3, #1
 80152ee:	d10e      	bne.n	801530e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80152f0:	4932      	ldr	r1, [pc, #200]	; (80153bc <etharp_tmr+0x14c>)
 80152f2:	687a      	ldr	r2, [r7, #4]
 80152f4:	4613      	mov	r3, r2
 80152f6:	005b      	lsls	r3, r3, #1
 80152f8:	4413      	add	r3, r2
 80152fa:	00db      	lsls	r3, r3, #3
 80152fc:	440b      	add	r3, r1
 80152fe:	3312      	adds	r3, #18
 8015300:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015302:	2b04      	cmp	r3, #4
 8015304:	d903      	bls.n	801530e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8015306:	6878      	ldr	r0, [r7, #4]
 8015308:	f7ff ff80 	bl	801520c <etharp_free_entry>
 801530c:	e04a      	b.n	80153a4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801530e:	492b      	ldr	r1, [pc, #172]	; (80153bc <etharp_tmr+0x14c>)
 8015310:	687a      	ldr	r2, [r7, #4]
 8015312:	4613      	mov	r3, r2
 8015314:	005b      	lsls	r3, r3, #1
 8015316:	4413      	add	r3, r2
 8015318:	00db      	lsls	r3, r3, #3
 801531a:	440b      	add	r3, r1
 801531c:	3314      	adds	r3, #20
 801531e:	781b      	ldrb	r3, [r3, #0]
 8015320:	2b03      	cmp	r3, #3
 8015322:	d10a      	bne.n	801533a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8015324:	4925      	ldr	r1, [pc, #148]	; (80153bc <etharp_tmr+0x14c>)
 8015326:	687a      	ldr	r2, [r7, #4]
 8015328:	4613      	mov	r3, r2
 801532a:	005b      	lsls	r3, r3, #1
 801532c:	4413      	add	r3, r2
 801532e:	00db      	lsls	r3, r3, #3
 8015330:	440b      	add	r3, r1
 8015332:	3314      	adds	r3, #20
 8015334:	2204      	movs	r2, #4
 8015336:	701a      	strb	r2, [r3, #0]
 8015338:	e034      	b.n	80153a4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801533a:	4920      	ldr	r1, [pc, #128]	; (80153bc <etharp_tmr+0x14c>)
 801533c:	687a      	ldr	r2, [r7, #4]
 801533e:	4613      	mov	r3, r2
 8015340:	005b      	lsls	r3, r3, #1
 8015342:	4413      	add	r3, r2
 8015344:	00db      	lsls	r3, r3, #3
 8015346:	440b      	add	r3, r1
 8015348:	3314      	adds	r3, #20
 801534a:	781b      	ldrb	r3, [r3, #0]
 801534c:	2b04      	cmp	r3, #4
 801534e:	d10a      	bne.n	8015366 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8015350:	491a      	ldr	r1, [pc, #104]	; (80153bc <etharp_tmr+0x14c>)
 8015352:	687a      	ldr	r2, [r7, #4]
 8015354:	4613      	mov	r3, r2
 8015356:	005b      	lsls	r3, r3, #1
 8015358:	4413      	add	r3, r2
 801535a:	00db      	lsls	r3, r3, #3
 801535c:	440b      	add	r3, r1
 801535e:	3314      	adds	r3, #20
 8015360:	2202      	movs	r2, #2
 8015362:	701a      	strb	r2, [r3, #0]
 8015364:	e01e      	b.n	80153a4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015366:	4915      	ldr	r1, [pc, #84]	; (80153bc <etharp_tmr+0x14c>)
 8015368:	687a      	ldr	r2, [r7, #4]
 801536a:	4613      	mov	r3, r2
 801536c:	005b      	lsls	r3, r3, #1
 801536e:	4413      	add	r3, r2
 8015370:	00db      	lsls	r3, r3, #3
 8015372:	440b      	add	r3, r1
 8015374:	3314      	adds	r3, #20
 8015376:	781b      	ldrb	r3, [r3, #0]
 8015378:	2b01      	cmp	r3, #1
 801537a:	d113      	bne.n	80153a4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801537c:	490f      	ldr	r1, [pc, #60]	; (80153bc <etharp_tmr+0x14c>)
 801537e:	687a      	ldr	r2, [r7, #4]
 8015380:	4613      	mov	r3, r2
 8015382:	005b      	lsls	r3, r3, #1
 8015384:	4413      	add	r3, r2
 8015386:	00db      	lsls	r3, r3, #3
 8015388:	440b      	add	r3, r1
 801538a:	3308      	adds	r3, #8
 801538c:	6818      	ldr	r0, [r3, #0]
 801538e:	687a      	ldr	r2, [r7, #4]
 8015390:	4613      	mov	r3, r2
 8015392:	005b      	lsls	r3, r3, #1
 8015394:	4413      	add	r3, r2
 8015396:	00db      	lsls	r3, r3, #3
 8015398:	4a08      	ldr	r2, [pc, #32]	; (80153bc <etharp_tmr+0x14c>)
 801539a:	4413      	add	r3, r2
 801539c:	3304      	adds	r3, #4
 801539e:	4619      	mov	r1, r3
 80153a0:	f000 fe6e 	bl	8016080 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	3301      	adds	r3, #1
 80153a8:	607b      	str	r3, [r7, #4]
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	2b09      	cmp	r3, #9
 80153ae:	f77f af65 	ble.w	801527c <etharp_tmr+0xc>
      }
    }
  }
}
 80153b2:	bf00      	nop
 80153b4:	bf00      	nop
 80153b6:	3708      	adds	r7, #8
 80153b8:	46bd      	mov	sp, r7
 80153ba:	bd80      	pop	{r7, pc}
 80153bc:	20000a98 	.word	0x20000a98

080153c0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80153c0:	b580      	push	{r7, lr}
 80153c2:	b08a      	sub	sp, #40	; 0x28
 80153c4:	af00      	add	r7, sp, #0
 80153c6:	60f8      	str	r0, [r7, #12]
 80153c8:	460b      	mov	r3, r1
 80153ca:	607a      	str	r2, [r7, #4]
 80153cc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80153ce:	230a      	movs	r3, #10
 80153d0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80153d2:	230a      	movs	r3, #10
 80153d4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80153d6:	230a      	movs	r3, #10
 80153d8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80153da:	2300      	movs	r3, #0
 80153dc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80153de:	230a      	movs	r3, #10
 80153e0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80153e2:	2300      	movs	r3, #0
 80153e4:	83bb      	strh	r3, [r7, #28]
 80153e6:	2300      	movs	r3, #0
 80153e8:	837b      	strh	r3, [r7, #26]
 80153ea:	2300      	movs	r3, #0
 80153ec:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80153ee:	2300      	movs	r3, #0
 80153f0:	843b      	strh	r3, [r7, #32]
 80153f2:	e0ae      	b.n	8015552 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80153f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80153f8:	49a6      	ldr	r1, [pc, #664]	; (8015694 <etharp_find_entry+0x2d4>)
 80153fa:	4613      	mov	r3, r2
 80153fc:	005b      	lsls	r3, r3, #1
 80153fe:	4413      	add	r3, r2
 8015400:	00db      	lsls	r3, r3, #3
 8015402:	440b      	add	r3, r1
 8015404:	3314      	adds	r3, #20
 8015406:	781b      	ldrb	r3, [r3, #0]
 8015408:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801540a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801540e:	2b0a      	cmp	r3, #10
 8015410:	d105      	bne.n	801541e <etharp_find_entry+0x5e>
 8015412:	7dfb      	ldrb	r3, [r7, #23]
 8015414:	2b00      	cmp	r3, #0
 8015416:	d102      	bne.n	801541e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8015418:	8c3b      	ldrh	r3, [r7, #32]
 801541a:	847b      	strh	r3, [r7, #34]	; 0x22
 801541c:	e095      	b.n	801554a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801541e:	7dfb      	ldrb	r3, [r7, #23]
 8015420:	2b00      	cmp	r3, #0
 8015422:	f000 8092 	beq.w	801554a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8015426:	7dfb      	ldrb	r3, [r7, #23]
 8015428:	2b01      	cmp	r3, #1
 801542a:	d009      	beq.n	8015440 <etharp_find_entry+0x80>
 801542c:	7dfb      	ldrb	r3, [r7, #23]
 801542e:	2b01      	cmp	r3, #1
 8015430:	d806      	bhi.n	8015440 <etharp_find_entry+0x80>
 8015432:	4b99      	ldr	r3, [pc, #612]	; (8015698 <etharp_find_entry+0x2d8>)
 8015434:	f240 1223 	movw	r2, #291	; 0x123
 8015438:	4998      	ldr	r1, [pc, #608]	; (801569c <etharp_find_entry+0x2dc>)
 801543a:	4899      	ldr	r0, [pc, #612]	; (80156a0 <etharp_find_entry+0x2e0>)
 801543c:	f002 fdb6 	bl	8017fac <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8015440:	68fb      	ldr	r3, [r7, #12]
 8015442:	2b00      	cmp	r3, #0
 8015444:	d020      	beq.n	8015488 <etharp_find_entry+0xc8>
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	6819      	ldr	r1, [r3, #0]
 801544a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801544e:	4891      	ldr	r0, [pc, #580]	; (8015694 <etharp_find_entry+0x2d4>)
 8015450:	4613      	mov	r3, r2
 8015452:	005b      	lsls	r3, r3, #1
 8015454:	4413      	add	r3, r2
 8015456:	00db      	lsls	r3, r3, #3
 8015458:	4403      	add	r3, r0
 801545a:	3304      	adds	r3, #4
 801545c:	681b      	ldr	r3, [r3, #0]
 801545e:	4299      	cmp	r1, r3
 8015460:	d112      	bne.n	8015488 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	2b00      	cmp	r3, #0
 8015466:	d00c      	beq.n	8015482 <etharp_find_entry+0xc2>
 8015468:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801546c:	4989      	ldr	r1, [pc, #548]	; (8015694 <etharp_find_entry+0x2d4>)
 801546e:	4613      	mov	r3, r2
 8015470:	005b      	lsls	r3, r3, #1
 8015472:	4413      	add	r3, r2
 8015474:	00db      	lsls	r3, r3, #3
 8015476:	440b      	add	r3, r1
 8015478:	3308      	adds	r3, #8
 801547a:	681b      	ldr	r3, [r3, #0]
 801547c:	687a      	ldr	r2, [r7, #4]
 801547e:	429a      	cmp	r2, r3
 8015480:	d102      	bne.n	8015488 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8015482:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015486:	e100      	b.n	801568a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8015488:	7dfb      	ldrb	r3, [r7, #23]
 801548a:	2b01      	cmp	r3, #1
 801548c:	d140      	bne.n	8015510 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801548e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015492:	4980      	ldr	r1, [pc, #512]	; (8015694 <etharp_find_entry+0x2d4>)
 8015494:	4613      	mov	r3, r2
 8015496:	005b      	lsls	r3, r3, #1
 8015498:	4413      	add	r3, r2
 801549a:	00db      	lsls	r3, r3, #3
 801549c:	440b      	add	r3, r1
 801549e:	681b      	ldr	r3, [r3, #0]
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d01a      	beq.n	80154da <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80154a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80154a8:	497a      	ldr	r1, [pc, #488]	; (8015694 <etharp_find_entry+0x2d4>)
 80154aa:	4613      	mov	r3, r2
 80154ac:	005b      	lsls	r3, r3, #1
 80154ae:	4413      	add	r3, r2
 80154b0:	00db      	lsls	r3, r3, #3
 80154b2:	440b      	add	r3, r1
 80154b4:	3312      	adds	r3, #18
 80154b6:	881b      	ldrh	r3, [r3, #0]
 80154b8:	8bba      	ldrh	r2, [r7, #28]
 80154ba:	429a      	cmp	r2, r3
 80154bc:	d845      	bhi.n	801554a <etharp_find_entry+0x18a>
            old_queue = i;
 80154be:	8c3b      	ldrh	r3, [r7, #32]
 80154c0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80154c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80154c6:	4973      	ldr	r1, [pc, #460]	; (8015694 <etharp_find_entry+0x2d4>)
 80154c8:	4613      	mov	r3, r2
 80154ca:	005b      	lsls	r3, r3, #1
 80154cc:	4413      	add	r3, r2
 80154ce:	00db      	lsls	r3, r3, #3
 80154d0:	440b      	add	r3, r1
 80154d2:	3312      	adds	r3, #18
 80154d4:	881b      	ldrh	r3, [r3, #0]
 80154d6:	83bb      	strh	r3, [r7, #28]
 80154d8:	e037      	b.n	801554a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80154da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80154de:	496d      	ldr	r1, [pc, #436]	; (8015694 <etharp_find_entry+0x2d4>)
 80154e0:	4613      	mov	r3, r2
 80154e2:	005b      	lsls	r3, r3, #1
 80154e4:	4413      	add	r3, r2
 80154e6:	00db      	lsls	r3, r3, #3
 80154e8:	440b      	add	r3, r1
 80154ea:	3312      	adds	r3, #18
 80154ec:	881b      	ldrh	r3, [r3, #0]
 80154ee:	8b7a      	ldrh	r2, [r7, #26]
 80154f0:	429a      	cmp	r2, r3
 80154f2:	d82a      	bhi.n	801554a <etharp_find_entry+0x18a>
            old_pending = i;
 80154f4:	8c3b      	ldrh	r3, [r7, #32]
 80154f6:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80154f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80154fc:	4965      	ldr	r1, [pc, #404]	; (8015694 <etharp_find_entry+0x2d4>)
 80154fe:	4613      	mov	r3, r2
 8015500:	005b      	lsls	r3, r3, #1
 8015502:	4413      	add	r3, r2
 8015504:	00db      	lsls	r3, r3, #3
 8015506:	440b      	add	r3, r1
 8015508:	3312      	adds	r3, #18
 801550a:	881b      	ldrh	r3, [r3, #0]
 801550c:	837b      	strh	r3, [r7, #26]
 801550e:	e01c      	b.n	801554a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8015510:	7dfb      	ldrb	r3, [r7, #23]
 8015512:	2b01      	cmp	r3, #1
 8015514:	d919      	bls.n	801554a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8015516:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801551a:	495e      	ldr	r1, [pc, #376]	; (8015694 <etharp_find_entry+0x2d4>)
 801551c:	4613      	mov	r3, r2
 801551e:	005b      	lsls	r3, r3, #1
 8015520:	4413      	add	r3, r2
 8015522:	00db      	lsls	r3, r3, #3
 8015524:	440b      	add	r3, r1
 8015526:	3312      	adds	r3, #18
 8015528:	881b      	ldrh	r3, [r3, #0]
 801552a:	8b3a      	ldrh	r2, [r7, #24]
 801552c:	429a      	cmp	r2, r3
 801552e:	d80c      	bhi.n	801554a <etharp_find_entry+0x18a>
            old_stable = i;
 8015530:	8c3b      	ldrh	r3, [r7, #32]
 8015532:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8015534:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015538:	4956      	ldr	r1, [pc, #344]	; (8015694 <etharp_find_entry+0x2d4>)
 801553a:	4613      	mov	r3, r2
 801553c:	005b      	lsls	r3, r3, #1
 801553e:	4413      	add	r3, r2
 8015540:	00db      	lsls	r3, r3, #3
 8015542:	440b      	add	r3, r1
 8015544:	3312      	adds	r3, #18
 8015546:	881b      	ldrh	r3, [r3, #0]
 8015548:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801554a:	8c3b      	ldrh	r3, [r7, #32]
 801554c:	3301      	adds	r3, #1
 801554e:	b29b      	uxth	r3, r3
 8015550:	843b      	strh	r3, [r7, #32]
 8015552:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015556:	2b09      	cmp	r3, #9
 8015558:	f77f af4c 	ble.w	80153f4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801555c:	7afb      	ldrb	r3, [r7, #11]
 801555e:	f003 0302 	and.w	r3, r3, #2
 8015562:	2b00      	cmp	r3, #0
 8015564:	d108      	bne.n	8015578 <etharp_find_entry+0x1b8>
 8015566:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801556a:	2b0a      	cmp	r3, #10
 801556c:	d107      	bne.n	801557e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801556e:	7afb      	ldrb	r3, [r7, #11]
 8015570:	f003 0301 	and.w	r3, r3, #1
 8015574:	2b00      	cmp	r3, #0
 8015576:	d102      	bne.n	801557e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8015578:	f04f 33ff 	mov.w	r3, #4294967295
 801557c:	e085      	b.n	801568a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801557e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015582:	2b09      	cmp	r3, #9
 8015584:	dc02      	bgt.n	801558c <etharp_find_entry+0x1cc>
    i = empty;
 8015586:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015588:	843b      	strh	r3, [r7, #32]
 801558a:	e039      	b.n	8015600 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801558c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8015590:	2b09      	cmp	r3, #9
 8015592:	dc14      	bgt.n	80155be <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8015594:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015596:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8015598:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801559c:	493d      	ldr	r1, [pc, #244]	; (8015694 <etharp_find_entry+0x2d4>)
 801559e:	4613      	mov	r3, r2
 80155a0:	005b      	lsls	r3, r3, #1
 80155a2:	4413      	add	r3, r2
 80155a4:	00db      	lsls	r3, r3, #3
 80155a6:	440b      	add	r3, r1
 80155a8:	681b      	ldr	r3, [r3, #0]
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d018      	beq.n	80155e0 <etharp_find_entry+0x220>
 80155ae:	4b3a      	ldr	r3, [pc, #232]	; (8015698 <etharp_find_entry+0x2d8>)
 80155b0:	f240 126d 	movw	r2, #365	; 0x16d
 80155b4:	493b      	ldr	r1, [pc, #236]	; (80156a4 <etharp_find_entry+0x2e4>)
 80155b6:	483a      	ldr	r0, [pc, #232]	; (80156a0 <etharp_find_entry+0x2e0>)
 80155b8:	f002 fcf8 	bl	8017fac <iprintf>
 80155bc:	e010      	b.n	80155e0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80155be:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80155c2:	2b09      	cmp	r3, #9
 80155c4:	dc02      	bgt.n	80155cc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80155c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80155c8:	843b      	strh	r3, [r7, #32]
 80155ca:	e009      	b.n	80155e0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80155cc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80155d0:	2b09      	cmp	r3, #9
 80155d2:	dc02      	bgt.n	80155da <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80155d4:	8bfb      	ldrh	r3, [r7, #30]
 80155d6:	843b      	strh	r3, [r7, #32]
 80155d8:	e002      	b.n	80155e0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80155da:	f04f 33ff 	mov.w	r3, #4294967295
 80155de:	e054      	b.n	801568a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80155e0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80155e4:	2b09      	cmp	r3, #9
 80155e6:	dd06      	ble.n	80155f6 <etharp_find_entry+0x236>
 80155e8:	4b2b      	ldr	r3, [pc, #172]	; (8015698 <etharp_find_entry+0x2d8>)
 80155ea:	f240 127f 	movw	r2, #383	; 0x17f
 80155ee:	492e      	ldr	r1, [pc, #184]	; (80156a8 <etharp_find_entry+0x2e8>)
 80155f0:	482b      	ldr	r0, [pc, #172]	; (80156a0 <etharp_find_entry+0x2e0>)
 80155f2:	f002 fcdb 	bl	8017fac <iprintf>
    etharp_free_entry(i);
 80155f6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80155fa:	4618      	mov	r0, r3
 80155fc:	f7ff fe06 	bl	801520c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015600:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015604:	2b09      	cmp	r3, #9
 8015606:	dd06      	ble.n	8015616 <etharp_find_entry+0x256>
 8015608:	4b23      	ldr	r3, [pc, #140]	; (8015698 <etharp_find_entry+0x2d8>)
 801560a:	f240 1283 	movw	r2, #387	; 0x183
 801560e:	4926      	ldr	r1, [pc, #152]	; (80156a8 <etharp_find_entry+0x2e8>)
 8015610:	4823      	ldr	r0, [pc, #140]	; (80156a0 <etharp_find_entry+0x2e0>)
 8015612:	f002 fccb 	bl	8017fac <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8015616:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801561a:	491e      	ldr	r1, [pc, #120]	; (8015694 <etharp_find_entry+0x2d4>)
 801561c:	4613      	mov	r3, r2
 801561e:	005b      	lsls	r3, r3, #1
 8015620:	4413      	add	r3, r2
 8015622:	00db      	lsls	r3, r3, #3
 8015624:	440b      	add	r3, r1
 8015626:	3314      	adds	r3, #20
 8015628:	781b      	ldrb	r3, [r3, #0]
 801562a:	2b00      	cmp	r3, #0
 801562c:	d006      	beq.n	801563c <etharp_find_entry+0x27c>
 801562e:	4b1a      	ldr	r3, [pc, #104]	; (8015698 <etharp_find_entry+0x2d8>)
 8015630:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8015634:	491d      	ldr	r1, [pc, #116]	; (80156ac <etharp_find_entry+0x2ec>)
 8015636:	481a      	ldr	r0, [pc, #104]	; (80156a0 <etharp_find_entry+0x2e0>)
 8015638:	f002 fcb8 	bl	8017fac <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801563c:	68fb      	ldr	r3, [r7, #12]
 801563e:	2b00      	cmp	r3, #0
 8015640:	d00b      	beq.n	801565a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8015642:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015646:	68fb      	ldr	r3, [r7, #12]
 8015648:	6819      	ldr	r1, [r3, #0]
 801564a:	4812      	ldr	r0, [pc, #72]	; (8015694 <etharp_find_entry+0x2d4>)
 801564c:	4613      	mov	r3, r2
 801564e:	005b      	lsls	r3, r3, #1
 8015650:	4413      	add	r3, r2
 8015652:	00db      	lsls	r3, r3, #3
 8015654:	4403      	add	r3, r0
 8015656:	3304      	adds	r3, #4
 8015658:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801565a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801565e:	490d      	ldr	r1, [pc, #52]	; (8015694 <etharp_find_entry+0x2d4>)
 8015660:	4613      	mov	r3, r2
 8015662:	005b      	lsls	r3, r3, #1
 8015664:	4413      	add	r3, r2
 8015666:	00db      	lsls	r3, r3, #3
 8015668:	440b      	add	r3, r1
 801566a:	3312      	adds	r3, #18
 801566c:	2200      	movs	r2, #0
 801566e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8015670:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015674:	4907      	ldr	r1, [pc, #28]	; (8015694 <etharp_find_entry+0x2d4>)
 8015676:	4613      	mov	r3, r2
 8015678:	005b      	lsls	r3, r3, #1
 801567a:	4413      	add	r3, r2
 801567c:	00db      	lsls	r3, r3, #3
 801567e:	440b      	add	r3, r1
 8015680:	3308      	adds	r3, #8
 8015682:	687a      	ldr	r2, [r7, #4]
 8015684:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8015686:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801568a:	4618      	mov	r0, r3
 801568c:	3728      	adds	r7, #40	; 0x28
 801568e:	46bd      	mov	sp, r7
 8015690:	bd80      	pop	{r7, pc}
 8015692:	bf00      	nop
 8015694:	20000a98 	.word	0x20000a98
 8015698:	0801d4a4 	.word	0x0801d4a4
 801569c:	0801d4dc 	.word	0x0801d4dc
 80156a0:	0801d51c 	.word	0x0801d51c
 80156a4:	0801d544 	.word	0x0801d544
 80156a8:	0801d55c 	.word	0x0801d55c
 80156ac:	0801d570 	.word	0x0801d570

080156b0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80156b0:	b580      	push	{r7, lr}
 80156b2:	b088      	sub	sp, #32
 80156b4:	af02      	add	r7, sp, #8
 80156b6:	60f8      	str	r0, [r7, #12]
 80156b8:	60b9      	str	r1, [r7, #8]
 80156ba:	607a      	str	r2, [r7, #4]
 80156bc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80156be:	68fb      	ldr	r3, [r7, #12]
 80156c0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80156c4:	2b06      	cmp	r3, #6
 80156c6:	d006      	beq.n	80156d6 <etharp_update_arp_entry+0x26>
 80156c8:	4b48      	ldr	r3, [pc, #288]	; (80157ec <etharp_update_arp_entry+0x13c>)
 80156ca:	f240 12a9 	movw	r2, #425	; 0x1a9
 80156ce:	4948      	ldr	r1, [pc, #288]	; (80157f0 <etharp_update_arp_entry+0x140>)
 80156d0:	4848      	ldr	r0, [pc, #288]	; (80157f4 <etharp_update_arp_entry+0x144>)
 80156d2:	f002 fc6b 	bl	8017fac <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80156d6:	68bb      	ldr	r3, [r7, #8]
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d012      	beq.n	8015702 <etharp_update_arp_entry+0x52>
 80156dc:	68bb      	ldr	r3, [r7, #8]
 80156de:	681b      	ldr	r3, [r3, #0]
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d00e      	beq.n	8015702 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80156e4:	68bb      	ldr	r3, [r7, #8]
 80156e6:	681b      	ldr	r3, [r3, #0]
 80156e8:	68f9      	ldr	r1, [r7, #12]
 80156ea:	4618      	mov	r0, r3
 80156ec:	f001 f8fe 	bl	80168ec <ip4_addr_isbroadcast_u32>
 80156f0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d105      	bne.n	8015702 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80156f6:	68bb      	ldr	r3, [r7, #8]
 80156f8:	681b      	ldr	r3, [r3, #0]
 80156fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80156fe:	2be0      	cmp	r3, #224	; 0xe0
 8015700:	d102      	bne.n	8015708 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015702:	f06f 030f 	mvn.w	r3, #15
 8015706:	e06c      	b.n	80157e2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8015708:	78fb      	ldrb	r3, [r7, #3]
 801570a:	68fa      	ldr	r2, [r7, #12]
 801570c:	4619      	mov	r1, r3
 801570e:	68b8      	ldr	r0, [r7, #8]
 8015710:	f7ff fe56 	bl	80153c0 <etharp_find_entry>
 8015714:	4603      	mov	r3, r0
 8015716:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8015718:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801571c:	2b00      	cmp	r3, #0
 801571e:	da02      	bge.n	8015726 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015720:	8afb      	ldrh	r3, [r7, #22]
 8015722:	b25b      	sxtb	r3, r3
 8015724:	e05d      	b.n	80157e2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8015726:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801572a:	4933      	ldr	r1, [pc, #204]	; (80157f8 <etharp_update_arp_entry+0x148>)
 801572c:	4613      	mov	r3, r2
 801572e:	005b      	lsls	r3, r3, #1
 8015730:	4413      	add	r3, r2
 8015732:	00db      	lsls	r3, r3, #3
 8015734:	440b      	add	r3, r1
 8015736:	3314      	adds	r3, #20
 8015738:	2202      	movs	r2, #2
 801573a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801573c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015740:	492d      	ldr	r1, [pc, #180]	; (80157f8 <etharp_update_arp_entry+0x148>)
 8015742:	4613      	mov	r3, r2
 8015744:	005b      	lsls	r3, r3, #1
 8015746:	4413      	add	r3, r2
 8015748:	00db      	lsls	r3, r3, #3
 801574a:	440b      	add	r3, r1
 801574c:	3308      	adds	r3, #8
 801574e:	68fa      	ldr	r2, [r7, #12]
 8015750:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8015752:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015756:	4613      	mov	r3, r2
 8015758:	005b      	lsls	r3, r3, #1
 801575a:	4413      	add	r3, r2
 801575c:	00db      	lsls	r3, r3, #3
 801575e:	3308      	adds	r3, #8
 8015760:	4a25      	ldr	r2, [pc, #148]	; (80157f8 <etharp_update_arp_entry+0x148>)
 8015762:	4413      	add	r3, r2
 8015764:	3304      	adds	r3, #4
 8015766:	2206      	movs	r2, #6
 8015768:	6879      	ldr	r1, [r7, #4]
 801576a:	4618      	mov	r0, r3
 801576c:	f002 fb44 	bl	8017df8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015770:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015774:	4920      	ldr	r1, [pc, #128]	; (80157f8 <etharp_update_arp_entry+0x148>)
 8015776:	4613      	mov	r3, r2
 8015778:	005b      	lsls	r3, r3, #1
 801577a:	4413      	add	r3, r2
 801577c:	00db      	lsls	r3, r3, #3
 801577e:	440b      	add	r3, r1
 8015780:	3312      	adds	r3, #18
 8015782:	2200      	movs	r2, #0
 8015784:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8015786:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801578a:	491b      	ldr	r1, [pc, #108]	; (80157f8 <etharp_update_arp_entry+0x148>)
 801578c:	4613      	mov	r3, r2
 801578e:	005b      	lsls	r3, r3, #1
 8015790:	4413      	add	r3, r2
 8015792:	00db      	lsls	r3, r3, #3
 8015794:	440b      	add	r3, r1
 8015796:	681b      	ldr	r3, [r3, #0]
 8015798:	2b00      	cmp	r3, #0
 801579a:	d021      	beq.n	80157e0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801579c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80157a0:	4915      	ldr	r1, [pc, #84]	; (80157f8 <etharp_update_arp_entry+0x148>)
 80157a2:	4613      	mov	r3, r2
 80157a4:	005b      	lsls	r3, r3, #1
 80157a6:	4413      	add	r3, r2
 80157a8:	00db      	lsls	r3, r3, #3
 80157aa:	440b      	add	r3, r1
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80157b0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80157b4:	4910      	ldr	r1, [pc, #64]	; (80157f8 <etharp_update_arp_entry+0x148>)
 80157b6:	4613      	mov	r3, r2
 80157b8:	005b      	lsls	r3, r3, #1
 80157ba:	4413      	add	r3, r2
 80157bc:	00db      	lsls	r3, r3, #3
 80157be:	440b      	add	r3, r1
 80157c0:	2200      	movs	r2, #0
 80157c2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80157ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80157ce:	9300      	str	r3, [sp, #0]
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	6939      	ldr	r1, [r7, #16]
 80157d4:	68f8      	ldr	r0, [r7, #12]
 80157d6:	f002 f823 	bl	8017820 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80157da:	6938      	ldr	r0, [r7, #16]
 80157dc:	f7f8 fd7a 	bl	800e2d4 <pbuf_free>
  }
  return ERR_OK;
 80157e0:	2300      	movs	r3, #0
}
 80157e2:	4618      	mov	r0, r3
 80157e4:	3718      	adds	r7, #24
 80157e6:	46bd      	mov	sp, r7
 80157e8:	bd80      	pop	{r7, pc}
 80157ea:	bf00      	nop
 80157ec:	0801d4a4 	.word	0x0801d4a4
 80157f0:	0801d59c 	.word	0x0801d59c
 80157f4:	0801d51c 	.word	0x0801d51c
 80157f8:	20000a98 	.word	0x20000a98

080157fc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80157fc:	b580      	push	{r7, lr}
 80157fe:	b084      	sub	sp, #16
 8015800:	af00      	add	r7, sp, #0
 8015802:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015804:	2300      	movs	r3, #0
 8015806:	60fb      	str	r3, [r7, #12]
 8015808:	e01e      	b.n	8015848 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801580a:	4913      	ldr	r1, [pc, #76]	; (8015858 <etharp_cleanup_netif+0x5c>)
 801580c:	68fa      	ldr	r2, [r7, #12]
 801580e:	4613      	mov	r3, r2
 8015810:	005b      	lsls	r3, r3, #1
 8015812:	4413      	add	r3, r2
 8015814:	00db      	lsls	r3, r3, #3
 8015816:	440b      	add	r3, r1
 8015818:	3314      	adds	r3, #20
 801581a:	781b      	ldrb	r3, [r3, #0]
 801581c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801581e:	7afb      	ldrb	r3, [r7, #11]
 8015820:	2b00      	cmp	r3, #0
 8015822:	d00e      	beq.n	8015842 <etharp_cleanup_netif+0x46>
 8015824:	490c      	ldr	r1, [pc, #48]	; (8015858 <etharp_cleanup_netif+0x5c>)
 8015826:	68fa      	ldr	r2, [r7, #12]
 8015828:	4613      	mov	r3, r2
 801582a:	005b      	lsls	r3, r3, #1
 801582c:	4413      	add	r3, r2
 801582e:	00db      	lsls	r3, r3, #3
 8015830:	440b      	add	r3, r1
 8015832:	3308      	adds	r3, #8
 8015834:	681b      	ldr	r3, [r3, #0]
 8015836:	687a      	ldr	r2, [r7, #4]
 8015838:	429a      	cmp	r2, r3
 801583a:	d102      	bne.n	8015842 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801583c:	68f8      	ldr	r0, [r7, #12]
 801583e:	f7ff fce5 	bl	801520c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	3301      	adds	r3, #1
 8015846:	60fb      	str	r3, [r7, #12]
 8015848:	68fb      	ldr	r3, [r7, #12]
 801584a:	2b09      	cmp	r3, #9
 801584c:	dddd      	ble.n	801580a <etharp_cleanup_netif+0xe>
    }
  }
}
 801584e:	bf00      	nop
 8015850:	bf00      	nop
 8015852:	3710      	adds	r7, #16
 8015854:	46bd      	mov	sp, r7
 8015856:	bd80      	pop	{r7, pc}
 8015858:	20000a98 	.word	0x20000a98

0801585c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801585c:	b5b0      	push	{r4, r5, r7, lr}
 801585e:	b08a      	sub	sp, #40	; 0x28
 8015860:	af04      	add	r7, sp, #16
 8015862:	6078      	str	r0, [r7, #4]
 8015864:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015866:	683b      	ldr	r3, [r7, #0]
 8015868:	2b00      	cmp	r3, #0
 801586a:	d107      	bne.n	801587c <etharp_input+0x20>
 801586c:	4b3d      	ldr	r3, [pc, #244]	; (8015964 <etharp_input+0x108>)
 801586e:	f240 228a 	movw	r2, #650	; 0x28a
 8015872:	493d      	ldr	r1, [pc, #244]	; (8015968 <etharp_input+0x10c>)
 8015874:	483d      	ldr	r0, [pc, #244]	; (801596c <etharp_input+0x110>)
 8015876:	f002 fb99 	bl	8017fac <iprintf>
 801587a:	e06f      	b.n	801595c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	685b      	ldr	r3, [r3, #4]
 8015880:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015882:	693b      	ldr	r3, [r7, #16]
 8015884:	881b      	ldrh	r3, [r3, #0]
 8015886:	b29b      	uxth	r3, r3
 8015888:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801588c:	d10c      	bne.n	80158a8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801588e:	693b      	ldr	r3, [r7, #16]
 8015890:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015892:	2b06      	cmp	r3, #6
 8015894:	d108      	bne.n	80158a8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015896:	693b      	ldr	r3, [r7, #16]
 8015898:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801589a:	2b04      	cmp	r3, #4
 801589c:	d104      	bne.n	80158a8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801589e:	693b      	ldr	r3, [r7, #16]
 80158a0:	885b      	ldrh	r3, [r3, #2]
 80158a2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80158a4:	2b08      	cmp	r3, #8
 80158a6:	d003      	beq.n	80158b0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80158a8:	6878      	ldr	r0, [r7, #4]
 80158aa:	f7f8 fd13 	bl	800e2d4 <pbuf_free>
    return;
 80158ae:	e055      	b.n	801595c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80158b0:	693b      	ldr	r3, [r7, #16]
 80158b2:	330e      	adds	r3, #14
 80158b4:	681b      	ldr	r3, [r3, #0]
 80158b6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80158b8:	693b      	ldr	r3, [r7, #16]
 80158ba:	3318      	adds	r3, #24
 80158bc:	681b      	ldr	r3, [r3, #0]
 80158be:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80158c0:	683b      	ldr	r3, [r7, #0]
 80158c2:	3304      	adds	r3, #4
 80158c4:	681b      	ldr	r3, [r3, #0]
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d102      	bne.n	80158d0 <etharp_input+0x74>
    for_us = 0;
 80158ca:	2300      	movs	r3, #0
 80158cc:	75fb      	strb	r3, [r7, #23]
 80158ce:	e009      	b.n	80158e4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80158d0:	68ba      	ldr	r2, [r7, #8]
 80158d2:	683b      	ldr	r3, [r7, #0]
 80158d4:	3304      	adds	r3, #4
 80158d6:	681b      	ldr	r3, [r3, #0]
 80158d8:	429a      	cmp	r2, r3
 80158da:	bf0c      	ite	eq
 80158dc:	2301      	moveq	r3, #1
 80158de:	2300      	movne	r3, #0
 80158e0:	b2db      	uxtb	r3, r3
 80158e2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80158e4:	693b      	ldr	r3, [r7, #16]
 80158e6:	f103 0208 	add.w	r2, r3, #8
 80158ea:	7dfb      	ldrb	r3, [r7, #23]
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d001      	beq.n	80158f4 <etharp_input+0x98>
 80158f0:	2301      	movs	r3, #1
 80158f2:	e000      	b.n	80158f6 <etharp_input+0x9a>
 80158f4:	2302      	movs	r3, #2
 80158f6:	f107 010c 	add.w	r1, r7, #12
 80158fa:	6838      	ldr	r0, [r7, #0]
 80158fc:	f7ff fed8 	bl	80156b0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015900:	693b      	ldr	r3, [r7, #16]
 8015902:	88db      	ldrh	r3, [r3, #6]
 8015904:	b29b      	uxth	r3, r3
 8015906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801590a:	d003      	beq.n	8015914 <etharp_input+0xb8>
 801590c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015910:	d01e      	beq.n	8015950 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8015912:	e020      	b.n	8015956 <etharp_input+0xfa>
      if (for_us) {
 8015914:	7dfb      	ldrb	r3, [r7, #23]
 8015916:	2b00      	cmp	r3, #0
 8015918:	d01c      	beq.n	8015954 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801591a:	683b      	ldr	r3, [r7, #0]
 801591c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8015920:	693b      	ldr	r3, [r7, #16]
 8015922:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8015926:	683b      	ldr	r3, [r7, #0]
 8015928:	f103 0526 	add.w	r5, r3, #38	; 0x26
 801592c:	683b      	ldr	r3, [r7, #0]
 801592e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8015930:	693a      	ldr	r2, [r7, #16]
 8015932:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015934:	2102      	movs	r1, #2
 8015936:	9103      	str	r1, [sp, #12]
 8015938:	f107 010c 	add.w	r1, r7, #12
 801593c:	9102      	str	r1, [sp, #8]
 801593e:	9201      	str	r2, [sp, #4]
 8015940:	9300      	str	r3, [sp, #0]
 8015942:	462b      	mov	r3, r5
 8015944:	4622      	mov	r2, r4
 8015946:	4601      	mov	r1, r0
 8015948:	6838      	ldr	r0, [r7, #0]
 801594a:	f000 faeb 	bl	8015f24 <etharp_raw>
      break;
 801594e:	e001      	b.n	8015954 <etharp_input+0xf8>
      break;
 8015950:	bf00      	nop
 8015952:	e000      	b.n	8015956 <etharp_input+0xfa>
      break;
 8015954:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8015956:	6878      	ldr	r0, [r7, #4]
 8015958:	f7f8 fcbc 	bl	800e2d4 <pbuf_free>
}
 801595c:	3718      	adds	r7, #24
 801595e:	46bd      	mov	sp, r7
 8015960:	bdb0      	pop	{r4, r5, r7, pc}
 8015962:	bf00      	nop
 8015964:	0801d4a4 	.word	0x0801d4a4
 8015968:	0801d5f4 	.word	0x0801d5f4
 801596c:	0801d51c 	.word	0x0801d51c

08015970 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8015970:	b580      	push	{r7, lr}
 8015972:	b086      	sub	sp, #24
 8015974:	af02      	add	r7, sp, #8
 8015976:	60f8      	str	r0, [r7, #12]
 8015978:	60b9      	str	r1, [r7, #8]
 801597a:	4613      	mov	r3, r2
 801597c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801597e:	79fa      	ldrb	r2, [r7, #7]
 8015980:	4944      	ldr	r1, [pc, #272]	; (8015a94 <etharp_output_to_arp_index+0x124>)
 8015982:	4613      	mov	r3, r2
 8015984:	005b      	lsls	r3, r3, #1
 8015986:	4413      	add	r3, r2
 8015988:	00db      	lsls	r3, r3, #3
 801598a:	440b      	add	r3, r1
 801598c:	3314      	adds	r3, #20
 801598e:	781b      	ldrb	r3, [r3, #0]
 8015990:	2b01      	cmp	r3, #1
 8015992:	d806      	bhi.n	80159a2 <etharp_output_to_arp_index+0x32>
 8015994:	4b40      	ldr	r3, [pc, #256]	; (8015a98 <etharp_output_to_arp_index+0x128>)
 8015996:	f240 22ee 	movw	r2, #750	; 0x2ee
 801599a:	4940      	ldr	r1, [pc, #256]	; (8015a9c <etharp_output_to_arp_index+0x12c>)
 801599c:	4840      	ldr	r0, [pc, #256]	; (8015aa0 <etharp_output_to_arp_index+0x130>)
 801599e:	f002 fb05 	bl	8017fac <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80159a2:	79fa      	ldrb	r2, [r7, #7]
 80159a4:	493b      	ldr	r1, [pc, #236]	; (8015a94 <etharp_output_to_arp_index+0x124>)
 80159a6:	4613      	mov	r3, r2
 80159a8:	005b      	lsls	r3, r3, #1
 80159aa:	4413      	add	r3, r2
 80159ac:	00db      	lsls	r3, r3, #3
 80159ae:	440b      	add	r3, r1
 80159b0:	3314      	adds	r3, #20
 80159b2:	781b      	ldrb	r3, [r3, #0]
 80159b4:	2b02      	cmp	r3, #2
 80159b6:	d153      	bne.n	8015a60 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80159b8:	79fa      	ldrb	r2, [r7, #7]
 80159ba:	4936      	ldr	r1, [pc, #216]	; (8015a94 <etharp_output_to_arp_index+0x124>)
 80159bc:	4613      	mov	r3, r2
 80159be:	005b      	lsls	r3, r3, #1
 80159c0:	4413      	add	r3, r2
 80159c2:	00db      	lsls	r3, r3, #3
 80159c4:	440b      	add	r3, r1
 80159c6:	3312      	adds	r3, #18
 80159c8:	881b      	ldrh	r3, [r3, #0]
 80159ca:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80159ce:	d919      	bls.n	8015a04 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80159d0:	79fa      	ldrb	r2, [r7, #7]
 80159d2:	4613      	mov	r3, r2
 80159d4:	005b      	lsls	r3, r3, #1
 80159d6:	4413      	add	r3, r2
 80159d8:	00db      	lsls	r3, r3, #3
 80159da:	4a2e      	ldr	r2, [pc, #184]	; (8015a94 <etharp_output_to_arp_index+0x124>)
 80159dc:	4413      	add	r3, r2
 80159de:	3304      	adds	r3, #4
 80159e0:	4619      	mov	r1, r3
 80159e2:	68f8      	ldr	r0, [r7, #12]
 80159e4:	f000 fb4c 	bl	8016080 <etharp_request>
 80159e8:	4603      	mov	r3, r0
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	d138      	bne.n	8015a60 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80159ee:	79fa      	ldrb	r2, [r7, #7]
 80159f0:	4928      	ldr	r1, [pc, #160]	; (8015a94 <etharp_output_to_arp_index+0x124>)
 80159f2:	4613      	mov	r3, r2
 80159f4:	005b      	lsls	r3, r3, #1
 80159f6:	4413      	add	r3, r2
 80159f8:	00db      	lsls	r3, r3, #3
 80159fa:	440b      	add	r3, r1
 80159fc:	3314      	adds	r3, #20
 80159fe:	2203      	movs	r2, #3
 8015a00:	701a      	strb	r2, [r3, #0]
 8015a02:	e02d      	b.n	8015a60 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015a04:	79fa      	ldrb	r2, [r7, #7]
 8015a06:	4923      	ldr	r1, [pc, #140]	; (8015a94 <etharp_output_to_arp_index+0x124>)
 8015a08:	4613      	mov	r3, r2
 8015a0a:	005b      	lsls	r3, r3, #1
 8015a0c:	4413      	add	r3, r2
 8015a0e:	00db      	lsls	r3, r3, #3
 8015a10:	440b      	add	r3, r1
 8015a12:	3312      	adds	r3, #18
 8015a14:	881b      	ldrh	r3, [r3, #0]
 8015a16:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8015a1a:	d321      	bcc.n	8015a60 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015a1c:	79fa      	ldrb	r2, [r7, #7]
 8015a1e:	4613      	mov	r3, r2
 8015a20:	005b      	lsls	r3, r3, #1
 8015a22:	4413      	add	r3, r2
 8015a24:	00db      	lsls	r3, r3, #3
 8015a26:	4a1b      	ldr	r2, [pc, #108]	; (8015a94 <etharp_output_to_arp_index+0x124>)
 8015a28:	4413      	add	r3, r2
 8015a2a:	1d19      	adds	r1, r3, #4
 8015a2c:	79fa      	ldrb	r2, [r7, #7]
 8015a2e:	4613      	mov	r3, r2
 8015a30:	005b      	lsls	r3, r3, #1
 8015a32:	4413      	add	r3, r2
 8015a34:	00db      	lsls	r3, r3, #3
 8015a36:	3308      	adds	r3, #8
 8015a38:	4a16      	ldr	r2, [pc, #88]	; (8015a94 <etharp_output_to_arp_index+0x124>)
 8015a3a:	4413      	add	r3, r2
 8015a3c:	3304      	adds	r3, #4
 8015a3e:	461a      	mov	r2, r3
 8015a40:	68f8      	ldr	r0, [r7, #12]
 8015a42:	f000 fafb 	bl	801603c <etharp_request_dst>
 8015a46:	4603      	mov	r3, r0
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	d109      	bne.n	8015a60 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015a4c:	79fa      	ldrb	r2, [r7, #7]
 8015a4e:	4911      	ldr	r1, [pc, #68]	; (8015a94 <etharp_output_to_arp_index+0x124>)
 8015a50:	4613      	mov	r3, r2
 8015a52:	005b      	lsls	r3, r3, #1
 8015a54:	4413      	add	r3, r2
 8015a56:	00db      	lsls	r3, r3, #3
 8015a58:	440b      	add	r3, r1
 8015a5a:	3314      	adds	r3, #20
 8015a5c:	2203      	movs	r2, #3
 8015a5e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8015a60:	68fb      	ldr	r3, [r7, #12]
 8015a62:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8015a66:	79fa      	ldrb	r2, [r7, #7]
 8015a68:	4613      	mov	r3, r2
 8015a6a:	005b      	lsls	r3, r3, #1
 8015a6c:	4413      	add	r3, r2
 8015a6e:	00db      	lsls	r3, r3, #3
 8015a70:	3308      	adds	r3, #8
 8015a72:	4a08      	ldr	r2, [pc, #32]	; (8015a94 <etharp_output_to_arp_index+0x124>)
 8015a74:	4413      	add	r3, r2
 8015a76:	3304      	adds	r3, #4
 8015a78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015a7c:	9200      	str	r2, [sp, #0]
 8015a7e:	460a      	mov	r2, r1
 8015a80:	68b9      	ldr	r1, [r7, #8]
 8015a82:	68f8      	ldr	r0, [r7, #12]
 8015a84:	f001 fecc 	bl	8017820 <ethernet_output>
 8015a88:	4603      	mov	r3, r0
}
 8015a8a:	4618      	mov	r0, r3
 8015a8c:	3710      	adds	r7, #16
 8015a8e:	46bd      	mov	sp, r7
 8015a90:	bd80      	pop	{r7, pc}
 8015a92:	bf00      	nop
 8015a94:	20000a98 	.word	0x20000a98
 8015a98:	0801d4a4 	.word	0x0801d4a4
 8015a9c:	0801d614 	.word	0x0801d614
 8015aa0:	0801d51c 	.word	0x0801d51c

08015aa4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015aa4:	b580      	push	{r7, lr}
 8015aa6:	b08a      	sub	sp, #40	; 0x28
 8015aa8:	af02      	add	r7, sp, #8
 8015aaa:	60f8      	str	r0, [r7, #12]
 8015aac:	60b9      	str	r1, [r7, #8]
 8015aae:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015ab4:	68fb      	ldr	r3, [r7, #12]
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	d106      	bne.n	8015ac8 <etharp_output+0x24>
 8015aba:	4b73      	ldr	r3, [pc, #460]	; (8015c88 <etharp_output+0x1e4>)
 8015abc:	f240 321e 	movw	r2, #798	; 0x31e
 8015ac0:	4972      	ldr	r1, [pc, #456]	; (8015c8c <etharp_output+0x1e8>)
 8015ac2:	4873      	ldr	r0, [pc, #460]	; (8015c90 <etharp_output+0x1ec>)
 8015ac4:	f002 fa72 	bl	8017fac <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015ac8:	68bb      	ldr	r3, [r7, #8]
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d106      	bne.n	8015adc <etharp_output+0x38>
 8015ace:	4b6e      	ldr	r3, [pc, #440]	; (8015c88 <etharp_output+0x1e4>)
 8015ad0:	f240 321f 	movw	r2, #799	; 0x31f
 8015ad4:	496f      	ldr	r1, [pc, #444]	; (8015c94 <etharp_output+0x1f0>)
 8015ad6:	486e      	ldr	r0, [pc, #440]	; (8015c90 <etharp_output+0x1ec>)
 8015ad8:	f002 fa68 	bl	8017fac <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	d106      	bne.n	8015af0 <etharp_output+0x4c>
 8015ae2:	4b69      	ldr	r3, [pc, #420]	; (8015c88 <etharp_output+0x1e4>)
 8015ae4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8015ae8:	496b      	ldr	r1, [pc, #428]	; (8015c98 <etharp_output+0x1f4>)
 8015aea:	4869      	ldr	r0, [pc, #420]	; (8015c90 <etharp_output+0x1ec>)
 8015aec:	f002 fa5e 	bl	8017fac <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	681b      	ldr	r3, [r3, #0]
 8015af4:	68f9      	ldr	r1, [r7, #12]
 8015af6:	4618      	mov	r0, r3
 8015af8:	f000 fef8 	bl	80168ec <ip4_addr_isbroadcast_u32>
 8015afc:	4603      	mov	r3, r0
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	d002      	beq.n	8015b08 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8015b02:	4b66      	ldr	r3, [pc, #408]	; (8015c9c <etharp_output+0x1f8>)
 8015b04:	61fb      	str	r3, [r7, #28]
 8015b06:	e0af      	b.n	8015c68 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	681b      	ldr	r3, [r3, #0]
 8015b0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015b10:	2be0      	cmp	r3, #224	; 0xe0
 8015b12:	d118      	bne.n	8015b46 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015b14:	2301      	movs	r3, #1
 8015b16:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8015b18:	2300      	movs	r3, #0
 8015b1a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015b1c:	235e      	movs	r3, #94	; 0x5e
 8015b1e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	3301      	adds	r3, #1
 8015b24:	781b      	ldrb	r3, [r3, #0]
 8015b26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015b2a:	b2db      	uxtb	r3, r3
 8015b2c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	3302      	adds	r3, #2
 8015b32:	781b      	ldrb	r3, [r3, #0]
 8015b34:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	3303      	adds	r3, #3
 8015b3a:	781b      	ldrb	r3, [r3, #0]
 8015b3c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8015b3e:	f107 0310 	add.w	r3, r7, #16
 8015b42:	61fb      	str	r3, [r7, #28]
 8015b44:	e090      	b.n	8015c68 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	681a      	ldr	r2, [r3, #0]
 8015b4a:	68fb      	ldr	r3, [r7, #12]
 8015b4c:	3304      	adds	r3, #4
 8015b4e:	681b      	ldr	r3, [r3, #0]
 8015b50:	405a      	eors	r2, r3
 8015b52:	68fb      	ldr	r3, [r7, #12]
 8015b54:	3308      	adds	r3, #8
 8015b56:	681b      	ldr	r3, [r3, #0]
 8015b58:	4013      	ands	r3, r2
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d012      	beq.n	8015b84 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015b64:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8015b68:	4293      	cmp	r3, r2
 8015b6a:	d00b      	beq.n	8015b84 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8015b6c:	68fb      	ldr	r3, [r7, #12]
 8015b6e:	330c      	adds	r3, #12
 8015b70:	681b      	ldr	r3, [r3, #0]
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d003      	beq.n	8015b7e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8015b76:	68fb      	ldr	r3, [r7, #12]
 8015b78:	330c      	adds	r3, #12
 8015b7a:	61bb      	str	r3, [r7, #24]
 8015b7c:	e002      	b.n	8015b84 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8015b7e:	f06f 0303 	mvn.w	r3, #3
 8015b82:	e07d      	b.n	8015c80 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015b84:	4b46      	ldr	r3, [pc, #280]	; (8015ca0 <etharp_output+0x1fc>)
 8015b86:	781b      	ldrb	r3, [r3, #0]
 8015b88:	4619      	mov	r1, r3
 8015b8a:	4a46      	ldr	r2, [pc, #280]	; (8015ca4 <etharp_output+0x200>)
 8015b8c:	460b      	mov	r3, r1
 8015b8e:	005b      	lsls	r3, r3, #1
 8015b90:	440b      	add	r3, r1
 8015b92:	00db      	lsls	r3, r3, #3
 8015b94:	4413      	add	r3, r2
 8015b96:	3314      	adds	r3, #20
 8015b98:	781b      	ldrb	r3, [r3, #0]
 8015b9a:	2b01      	cmp	r3, #1
 8015b9c:	d925      	bls.n	8015bea <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015b9e:	4b40      	ldr	r3, [pc, #256]	; (8015ca0 <etharp_output+0x1fc>)
 8015ba0:	781b      	ldrb	r3, [r3, #0]
 8015ba2:	4619      	mov	r1, r3
 8015ba4:	4a3f      	ldr	r2, [pc, #252]	; (8015ca4 <etharp_output+0x200>)
 8015ba6:	460b      	mov	r3, r1
 8015ba8:	005b      	lsls	r3, r3, #1
 8015baa:	440b      	add	r3, r1
 8015bac:	00db      	lsls	r3, r3, #3
 8015bae:	4413      	add	r3, r2
 8015bb0:	3308      	adds	r3, #8
 8015bb2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015bb4:	68fa      	ldr	r2, [r7, #12]
 8015bb6:	429a      	cmp	r2, r3
 8015bb8:	d117      	bne.n	8015bea <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8015bba:	69bb      	ldr	r3, [r7, #24]
 8015bbc:	681a      	ldr	r2, [r3, #0]
 8015bbe:	4b38      	ldr	r3, [pc, #224]	; (8015ca0 <etharp_output+0x1fc>)
 8015bc0:	781b      	ldrb	r3, [r3, #0]
 8015bc2:	4618      	mov	r0, r3
 8015bc4:	4937      	ldr	r1, [pc, #220]	; (8015ca4 <etharp_output+0x200>)
 8015bc6:	4603      	mov	r3, r0
 8015bc8:	005b      	lsls	r3, r3, #1
 8015bca:	4403      	add	r3, r0
 8015bcc:	00db      	lsls	r3, r3, #3
 8015bce:	440b      	add	r3, r1
 8015bd0:	3304      	adds	r3, #4
 8015bd2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015bd4:	429a      	cmp	r2, r3
 8015bd6:	d108      	bne.n	8015bea <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015bd8:	4b31      	ldr	r3, [pc, #196]	; (8015ca0 <etharp_output+0x1fc>)
 8015bda:	781b      	ldrb	r3, [r3, #0]
 8015bdc:	461a      	mov	r2, r3
 8015bde:	68b9      	ldr	r1, [r7, #8]
 8015be0:	68f8      	ldr	r0, [r7, #12]
 8015be2:	f7ff fec5 	bl	8015970 <etharp_output_to_arp_index>
 8015be6:	4603      	mov	r3, r0
 8015be8:	e04a      	b.n	8015c80 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015bea:	2300      	movs	r3, #0
 8015bec:	75fb      	strb	r3, [r7, #23]
 8015bee:	e031      	b.n	8015c54 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015bf0:	7dfa      	ldrb	r2, [r7, #23]
 8015bf2:	492c      	ldr	r1, [pc, #176]	; (8015ca4 <etharp_output+0x200>)
 8015bf4:	4613      	mov	r3, r2
 8015bf6:	005b      	lsls	r3, r3, #1
 8015bf8:	4413      	add	r3, r2
 8015bfa:	00db      	lsls	r3, r3, #3
 8015bfc:	440b      	add	r3, r1
 8015bfe:	3314      	adds	r3, #20
 8015c00:	781b      	ldrb	r3, [r3, #0]
 8015c02:	2b01      	cmp	r3, #1
 8015c04:	d923      	bls.n	8015c4e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8015c06:	7dfa      	ldrb	r2, [r7, #23]
 8015c08:	4926      	ldr	r1, [pc, #152]	; (8015ca4 <etharp_output+0x200>)
 8015c0a:	4613      	mov	r3, r2
 8015c0c:	005b      	lsls	r3, r3, #1
 8015c0e:	4413      	add	r3, r2
 8015c10:	00db      	lsls	r3, r3, #3
 8015c12:	440b      	add	r3, r1
 8015c14:	3308      	adds	r3, #8
 8015c16:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015c18:	68fa      	ldr	r2, [r7, #12]
 8015c1a:	429a      	cmp	r2, r3
 8015c1c:	d117      	bne.n	8015c4e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8015c1e:	69bb      	ldr	r3, [r7, #24]
 8015c20:	6819      	ldr	r1, [r3, #0]
 8015c22:	7dfa      	ldrb	r2, [r7, #23]
 8015c24:	481f      	ldr	r0, [pc, #124]	; (8015ca4 <etharp_output+0x200>)
 8015c26:	4613      	mov	r3, r2
 8015c28:	005b      	lsls	r3, r3, #1
 8015c2a:	4413      	add	r3, r2
 8015c2c:	00db      	lsls	r3, r3, #3
 8015c2e:	4403      	add	r3, r0
 8015c30:	3304      	adds	r3, #4
 8015c32:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8015c34:	4299      	cmp	r1, r3
 8015c36:	d10a      	bne.n	8015c4e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8015c38:	4a19      	ldr	r2, [pc, #100]	; (8015ca0 <etharp_output+0x1fc>)
 8015c3a:	7dfb      	ldrb	r3, [r7, #23]
 8015c3c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8015c3e:	7dfb      	ldrb	r3, [r7, #23]
 8015c40:	461a      	mov	r2, r3
 8015c42:	68b9      	ldr	r1, [r7, #8]
 8015c44:	68f8      	ldr	r0, [r7, #12]
 8015c46:	f7ff fe93 	bl	8015970 <etharp_output_to_arp_index>
 8015c4a:	4603      	mov	r3, r0
 8015c4c:	e018      	b.n	8015c80 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015c4e:	7dfb      	ldrb	r3, [r7, #23]
 8015c50:	3301      	adds	r3, #1
 8015c52:	75fb      	strb	r3, [r7, #23]
 8015c54:	7dfb      	ldrb	r3, [r7, #23]
 8015c56:	2b09      	cmp	r3, #9
 8015c58:	d9ca      	bls.n	8015bf0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8015c5a:	68ba      	ldr	r2, [r7, #8]
 8015c5c:	69b9      	ldr	r1, [r7, #24]
 8015c5e:	68f8      	ldr	r0, [r7, #12]
 8015c60:	f000 f822 	bl	8015ca8 <etharp_query>
 8015c64:	4603      	mov	r3, r0
 8015c66:	e00b      	b.n	8015c80 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8015c68:	68fb      	ldr	r3, [r7, #12]
 8015c6a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8015c6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015c72:	9300      	str	r3, [sp, #0]
 8015c74:	69fb      	ldr	r3, [r7, #28]
 8015c76:	68b9      	ldr	r1, [r7, #8]
 8015c78:	68f8      	ldr	r0, [r7, #12]
 8015c7a:	f001 fdd1 	bl	8017820 <ethernet_output>
 8015c7e:	4603      	mov	r3, r0
}
 8015c80:	4618      	mov	r0, r3
 8015c82:	3720      	adds	r7, #32
 8015c84:	46bd      	mov	sp, r7
 8015c86:	bd80      	pop	{r7, pc}
 8015c88:	0801d4a4 	.word	0x0801d4a4
 8015c8c:	0801d5f4 	.word	0x0801d5f4
 8015c90:	0801d51c 	.word	0x0801d51c
 8015c94:	0801d644 	.word	0x0801d644
 8015c98:	0801d5e4 	.word	0x0801d5e4
 8015c9c:	0801de74 	.word	0x0801de74
 8015ca0:	20000b88 	.word	0x20000b88
 8015ca4:	20000a98 	.word	0x20000a98

08015ca8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015ca8:	b580      	push	{r7, lr}
 8015caa:	b08c      	sub	sp, #48	; 0x30
 8015cac:	af02      	add	r7, sp, #8
 8015cae:	60f8      	str	r0, [r7, #12]
 8015cb0:	60b9      	str	r1, [r7, #8]
 8015cb2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8015cb4:	68fb      	ldr	r3, [r7, #12]
 8015cb6:	3326      	adds	r3, #38	; 0x26
 8015cb8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8015cba:	23ff      	movs	r3, #255	; 0xff
 8015cbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8015cc0:	2300      	movs	r3, #0
 8015cc2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015cc4:	68bb      	ldr	r3, [r7, #8]
 8015cc6:	681b      	ldr	r3, [r3, #0]
 8015cc8:	68f9      	ldr	r1, [r7, #12]
 8015cca:	4618      	mov	r0, r3
 8015ccc:	f000 fe0e 	bl	80168ec <ip4_addr_isbroadcast_u32>
 8015cd0:	4603      	mov	r3, r0
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d10c      	bne.n	8015cf0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015cd6:	68bb      	ldr	r3, [r7, #8]
 8015cd8:	681b      	ldr	r3, [r3, #0]
 8015cda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015cde:	2be0      	cmp	r3, #224	; 0xe0
 8015ce0:	d006      	beq.n	8015cf0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015ce2:	68bb      	ldr	r3, [r7, #8]
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d003      	beq.n	8015cf0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015ce8:	68bb      	ldr	r3, [r7, #8]
 8015cea:	681b      	ldr	r3, [r3, #0]
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d102      	bne.n	8015cf6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015cf0:	f06f 030f 	mvn.w	r3, #15
 8015cf4:	e101      	b.n	8015efa <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015cf6:	68fa      	ldr	r2, [r7, #12]
 8015cf8:	2101      	movs	r1, #1
 8015cfa:	68b8      	ldr	r0, [r7, #8]
 8015cfc:	f7ff fb60 	bl	80153c0 <etharp_find_entry>
 8015d00:	4603      	mov	r3, r0
 8015d02:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015d04:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	da02      	bge.n	8015d12 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8015d0c:	8a7b      	ldrh	r3, [r7, #18]
 8015d0e:	b25b      	sxtb	r3, r3
 8015d10:	e0f3      	b.n	8015efa <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8015d12:	8a7b      	ldrh	r3, [r7, #18]
 8015d14:	2b7e      	cmp	r3, #126	; 0x7e
 8015d16:	d906      	bls.n	8015d26 <etharp_query+0x7e>
 8015d18:	4b7a      	ldr	r3, [pc, #488]	; (8015f04 <etharp_query+0x25c>)
 8015d1a:	f240 32c1 	movw	r2, #961	; 0x3c1
 8015d1e:	497a      	ldr	r1, [pc, #488]	; (8015f08 <etharp_query+0x260>)
 8015d20:	487a      	ldr	r0, [pc, #488]	; (8015f0c <etharp_query+0x264>)
 8015d22:	f002 f943 	bl	8017fac <iprintf>
  i = (netif_addr_idx_t)i_err;
 8015d26:	8a7b      	ldrh	r3, [r7, #18]
 8015d28:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8015d2a:	7c7a      	ldrb	r2, [r7, #17]
 8015d2c:	4978      	ldr	r1, [pc, #480]	; (8015f10 <etharp_query+0x268>)
 8015d2e:	4613      	mov	r3, r2
 8015d30:	005b      	lsls	r3, r3, #1
 8015d32:	4413      	add	r3, r2
 8015d34:	00db      	lsls	r3, r3, #3
 8015d36:	440b      	add	r3, r1
 8015d38:	3314      	adds	r3, #20
 8015d3a:	781b      	ldrb	r3, [r3, #0]
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d115      	bne.n	8015d6c <etharp_query+0xc4>
    is_new_entry = 1;
 8015d40:	2301      	movs	r3, #1
 8015d42:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015d44:	7c7a      	ldrb	r2, [r7, #17]
 8015d46:	4972      	ldr	r1, [pc, #456]	; (8015f10 <etharp_query+0x268>)
 8015d48:	4613      	mov	r3, r2
 8015d4a:	005b      	lsls	r3, r3, #1
 8015d4c:	4413      	add	r3, r2
 8015d4e:	00db      	lsls	r3, r3, #3
 8015d50:	440b      	add	r3, r1
 8015d52:	3314      	adds	r3, #20
 8015d54:	2201      	movs	r2, #1
 8015d56:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015d58:	7c7a      	ldrb	r2, [r7, #17]
 8015d5a:	496d      	ldr	r1, [pc, #436]	; (8015f10 <etharp_query+0x268>)
 8015d5c:	4613      	mov	r3, r2
 8015d5e:	005b      	lsls	r3, r3, #1
 8015d60:	4413      	add	r3, r2
 8015d62:	00db      	lsls	r3, r3, #3
 8015d64:	440b      	add	r3, r1
 8015d66:	3308      	adds	r3, #8
 8015d68:	68fa      	ldr	r2, [r7, #12]
 8015d6a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015d6c:	7c7a      	ldrb	r2, [r7, #17]
 8015d6e:	4968      	ldr	r1, [pc, #416]	; (8015f10 <etharp_query+0x268>)
 8015d70:	4613      	mov	r3, r2
 8015d72:	005b      	lsls	r3, r3, #1
 8015d74:	4413      	add	r3, r2
 8015d76:	00db      	lsls	r3, r3, #3
 8015d78:	440b      	add	r3, r1
 8015d7a:	3314      	adds	r3, #20
 8015d7c:	781b      	ldrb	r3, [r3, #0]
 8015d7e:	2b01      	cmp	r3, #1
 8015d80:	d011      	beq.n	8015da6 <etharp_query+0xfe>
 8015d82:	7c7a      	ldrb	r2, [r7, #17]
 8015d84:	4962      	ldr	r1, [pc, #392]	; (8015f10 <etharp_query+0x268>)
 8015d86:	4613      	mov	r3, r2
 8015d88:	005b      	lsls	r3, r3, #1
 8015d8a:	4413      	add	r3, r2
 8015d8c:	00db      	lsls	r3, r3, #3
 8015d8e:	440b      	add	r3, r1
 8015d90:	3314      	adds	r3, #20
 8015d92:	781b      	ldrb	r3, [r3, #0]
 8015d94:	2b01      	cmp	r3, #1
 8015d96:	d806      	bhi.n	8015da6 <etharp_query+0xfe>
 8015d98:	4b5a      	ldr	r3, [pc, #360]	; (8015f04 <etharp_query+0x25c>)
 8015d9a:	f240 32cd 	movw	r2, #973	; 0x3cd
 8015d9e:	495d      	ldr	r1, [pc, #372]	; (8015f14 <etharp_query+0x26c>)
 8015da0:	485a      	ldr	r0, [pc, #360]	; (8015f0c <etharp_query+0x264>)
 8015da2:	f002 f903 	bl	8017fac <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015da6:	6a3b      	ldr	r3, [r7, #32]
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	d102      	bne.n	8015db2 <etharp_query+0x10a>
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d10c      	bne.n	8015dcc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8015db2:	68b9      	ldr	r1, [r7, #8]
 8015db4:	68f8      	ldr	r0, [r7, #12]
 8015db6:	f000 f963 	bl	8016080 <etharp_request>
 8015dba:	4603      	mov	r3, r0
 8015dbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	d102      	bne.n	8015dcc <etharp_query+0x124>
      return result;
 8015dc6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015dca:	e096      	b.n	8015efa <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	d106      	bne.n	8015de0 <etharp_query+0x138>
 8015dd2:	4b4c      	ldr	r3, [pc, #304]	; (8015f04 <etharp_query+0x25c>)
 8015dd4:	f240 32e1 	movw	r2, #993	; 0x3e1
 8015dd8:	494f      	ldr	r1, [pc, #316]	; (8015f18 <etharp_query+0x270>)
 8015dda:	484c      	ldr	r0, [pc, #304]	; (8015f0c <etharp_query+0x264>)
 8015ddc:	f002 f8e6 	bl	8017fac <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8015de0:	7c7a      	ldrb	r2, [r7, #17]
 8015de2:	494b      	ldr	r1, [pc, #300]	; (8015f10 <etharp_query+0x268>)
 8015de4:	4613      	mov	r3, r2
 8015de6:	005b      	lsls	r3, r3, #1
 8015de8:	4413      	add	r3, r2
 8015dea:	00db      	lsls	r3, r3, #3
 8015dec:	440b      	add	r3, r1
 8015dee:	3314      	adds	r3, #20
 8015df0:	781b      	ldrb	r3, [r3, #0]
 8015df2:	2b01      	cmp	r3, #1
 8015df4:	d917      	bls.n	8015e26 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8015df6:	4a49      	ldr	r2, [pc, #292]	; (8015f1c <etharp_query+0x274>)
 8015df8:	7c7b      	ldrb	r3, [r7, #17]
 8015dfa:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015dfc:	7c7a      	ldrb	r2, [r7, #17]
 8015dfe:	4613      	mov	r3, r2
 8015e00:	005b      	lsls	r3, r3, #1
 8015e02:	4413      	add	r3, r2
 8015e04:	00db      	lsls	r3, r3, #3
 8015e06:	3308      	adds	r3, #8
 8015e08:	4a41      	ldr	r2, [pc, #260]	; (8015f10 <etharp_query+0x268>)
 8015e0a:	4413      	add	r3, r2
 8015e0c:	3304      	adds	r3, #4
 8015e0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015e12:	9200      	str	r2, [sp, #0]
 8015e14:	697a      	ldr	r2, [r7, #20]
 8015e16:	6879      	ldr	r1, [r7, #4]
 8015e18:	68f8      	ldr	r0, [r7, #12]
 8015e1a:	f001 fd01 	bl	8017820 <ethernet_output>
 8015e1e:	4603      	mov	r3, r0
 8015e20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015e24:	e067      	b.n	8015ef6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015e26:	7c7a      	ldrb	r2, [r7, #17]
 8015e28:	4939      	ldr	r1, [pc, #228]	; (8015f10 <etharp_query+0x268>)
 8015e2a:	4613      	mov	r3, r2
 8015e2c:	005b      	lsls	r3, r3, #1
 8015e2e:	4413      	add	r3, r2
 8015e30:	00db      	lsls	r3, r3, #3
 8015e32:	440b      	add	r3, r1
 8015e34:	3314      	adds	r3, #20
 8015e36:	781b      	ldrb	r3, [r3, #0]
 8015e38:	2b01      	cmp	r3, #1
 8015e3a:	d15c      	bne.n	8015ef6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015e3c:	2300      	movs	r3, #0
 8015e3e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015e44:	e01c      	b.n	8015e80 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015e46:	69fb      	ldr	r3, [r7, #28]
 8015e48:	895a      	ldrh	r2, [r3, #10]
 8015e4a:	69fb      	ldr	r3, [r7, #28]
 8015e4c:	891b      	ldrh	r3, [r3, #8]
 8015e4e:	429a      	cmp	r2, r3
 8015e50:	d10a      	bne.n	8015e68 <etharp_query+0x1c0>
 8015e52:	69fb      	ldr	r3, [r7, #28]
 8015e54:	681b      	ldr	r3, [r3, #0]
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d006      	beq.n	8015e68 <etharp_query+0x1c0>
 8015e5a:	4b2a      	ldr	r3, [pc, #168]	; (8015f04 <etharp_query+0x25c>)
 8015e5c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8015e60:	492f      	ldr	r1, [pc, #188]	; (8015f20 <etharp_query+0x278>)
 8015e62:	482a      	ldr	r0, [pc, #168]	; (8015f0c <etharp_query+0x264>)
 8015e64:	f002 f8a2 	bl	8017fac <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8015e68:	69fb      	ldr	r3, [r7, #28]
 8015e6a:	7b1b      	ldrb	r3, [r3, #12]
 8015e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d002      	beq.n	8015e7a <etharp_query+0x1d2>
        copy_needed = 1;
 8015e74:	2301      	movs	r3, #1
 8015e76:	61bb      	str	r3, [r7, #24]
        break;
 8015e78:	e005      	b.n	8015e86 <etharp_query+0x1de>
      }
      p = p->next;
 8015e7a:	69fb      	ldr	r3, [r7, #28]
 8015e7c:	681b      	ldr	r3, [r3, #0]
 8015e7e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015e80:	69fb      	ldr	r3, [r7, #28]
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	d1df      	bne.n	8015e46 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8015e86:	69bb      	ldr	r3, [r7, #24]
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d007      	beq.n	8015e9c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8015e8c:	687a      	ldr	r2, [r7, #4]
 8015e8e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8015e92:	200e      	movs	r0, #14
 8015e94:	f7f8 fd1c 	bl	800e8d0 <pbuf_clone>
 8015e98:	61f8      	str	r0, [r7, #28]
 8015e9a:	e004      	b.n	8015ea6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8015ea0:	69f8      	ldr	r0, [r7, #28]
 8015ea2:	f7f8 fab7 	bl	800e414 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015ea6:	69fb      	ldr	r3, [r7, #28]
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d021      	beq.n	8015ef0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8015eac:	7c7a      	ldrb	r2, [r7, #17]
 8015eae:	4918      	ldr	r1, [pc, #96]	; (8015f10 <etharp_query+0x268>)
 8015eb0:	4613      	mov	r3, r2
 8015eb2:	005b      	lsls	r3, r3, #1
 8015eb4:	4413      	add	r3, r2
 8015eb6:	00db      	lsls	r3, r3, #3
 8015eb8:	440b      	add	r3, r1
 8015eba:	681b      	ldr	r3, [r3, #0]
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d00a      	beq.n	8015ed6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8015ec0:	7c7a      	ldrb	r2, [r7, #17]
 8015ec2:	4913      	ldr	r1, [pc, #76]	; (8015f10 <etharp_query+0x268>)
 8015ec4:	4613      	mov	r3, r2
 8015ec6:	005b      	lsls	r3, r3, #1
 8015ec8:	4413      	add	r3, r2
 8015eca:	00db      	lsls	r3, r3, #3
 8015ecc:	440b      	add	r3, r1
 8015ece:	681b      	ldr	r3, [r3, #0]
 8015ed0:	4618      	mov	r0, r3
 8015ed2:	f7f8 f9ff 	bl	800e2d4 <pbuf_free>
      }
      arp_table[i].q = p;
 8015ed6:	7c7a      	ldrb	r2, [r7, #17]
 8015ed8:	490d      	ldr	r1, [pc, #52]	; (8015f10 <etharp_query+0x268>)
 8015eda:	4613      	mov	r3, r2
 8015edc:	005b      	lsls	r3, r3, #1
 8015ede:	4413      	add	r3, r2
 8015ee0:	00db      	lsls	r3, r3, #3
 8015ee2:	440b      	add	r3, r1
 8015ee4:	69fa      	ldr	r2, [r7, #28]
 8015ee6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015ee8:	2300      	movs	r3, #0
 8015eea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015eee:	e002      	b.n	8015ef6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8015ef0:	23ff      	movs	r3, #255	; 0xff
 8015ef2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8015ef6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8015efa:	4618      	mov	r0, r3
 8015efc:	3728      	adds	r7, #40	; 0x28
 8015efe:	46bd      	mov	sp, r7
 8015f00:	bd80      	pop	{r7, pc}
 8015f02:	bf00      	nop
 8015f04:	0801d4a4 	.word	0x0801d4a4
 8015f08:	0801d650 	.word	0x0801d650
 8015f0c:	0801d51c 	.word	0x0801d51c
 8015f10:	20000a98 	.word	0x20000a98
 8015f14:	0801d660 	.word	0x0801d660
 8015f18:	0801d644 	.word	0x0801d644
 8015f1c:	20000b88 	.word	0x20000b88
 8015f20:	0801d688 	.word	0x0801d688

08015f24 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015f24:	b580      	push	{r7, lr}
 8015f26:	b08a      	sub	sp, #40	; 0x28
 8015f28:	af02      	add	r7, sp, #8
 8015f2a:	60f8      	str	r0, [r7, #12]
 8015f2c:	60b9      	str	r1, [r7, #8]
 8015f2e:	607a      	str	r2, [r7, #4]
 8015f30:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8015f32:	2300      	movs	r3, #0
 8015f34:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015f36:	68fb      	ldr	r3, [r7, #12]
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d106      	bne.n	8015f4a <etharp_raw+0x26>
 8015f3c:	4b3a      	ldr	r3, [pc, #232]	; (8016028 <etharp_raw+0x104>)
 8015f3e:	f240 4257 	movw	r2, #1111	; 0x457
 8015f42:	493a      	ldr	r1, [pc, #232]	; (801602c <etharp_raw+0x108>)
 8015f44:	483a      	ldr	r0, [pc, #232]	; (8016030 <etharp_raw+0x10c>)
 8015f46:	f002 f831 	bl	8017fac <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8015f4a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015f4e:	211c      	movs	r1, #28
 8015f50:	200e      	movs	r0, #14
 8015f52:	f7f7 fedb 	bl	800dd0c <pbuf_alloc>
 8015f56:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015f58:	69bb      	ldr	r3, [r7, #24]
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d102      	bne.n	8015f64 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8015f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8015f62:	e05d      	b.n	8016020 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015f64:	69bb      	ldr	r3, [r7, #24]
 8015f66:	895b      	ldrh	r3, [r3, #10]
 8015f68:	2b1b      	cmp	r3, #27
 8015f6a:	d806      	bhi.n	8015f7a <etharp_raw+0x56>
 8015f6c:	4b2e      	ldr	r3, [pc, #184]	; (8016028 <etharp_raw+0x104>)
 8015f6e:	f240 4262 	movw	r2, #1122	; 0x462
 8015f72:	4930      	ldr	r1, [pc, #192]	; (8016034 <etharp_raw+0x110>)
 8015f74:	482e      	ldr	r0, [pc, #184]	; (8016030 <etharp_raw+0x10c>)
 8015f76:	f002 f819 	bl	8017fac <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8015f7a:	69bb      	ldr	r3, [r7, #24]
 8015f7c:	685b      	ldr	r3, [r3, #4]
 8015f7e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015f80:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015f82:	4618      	mov	r0, r3
 8015f84:	f7f6 fef2 	bl	800cd6c <lwip_htons>
 8015f88:	4603      	mov	r3, r0
 8015f8a:	461a      	mov	r2, r3
 8015f8c:	697b      	ldr	r3, [r7, #20]
 8015f8e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015f90:	68fb      	ldr	r3, [r7, #12]
 8015f92:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015f96:	2b06      	cmp	r3, #6
 8015f98:	d006      	beq.n	8015fa8 <etharp_raw+0x84>
 8015f9a:	4b23      	ldr	r3, [pc, #140]	; (8016028 <etharp_raw+0x104>)
 8015f9c:	f240 4269 	movw	r2, #1129	; 0x469
 8015fa0:	4925      	ldr	r1, [pc, #148]	; (8016038 <etharp_raw+0x114>)
 8015fa2:	4823      	ldr	r0, [pc, #140]	; (8016030 <etharp_raw+0x10c>)
 8015fa4:	f002 f802 	bl	8017fac <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015fa8:	697b      	ldr	r3, [r7, #20]
 8015faa:	3308      	adds	r3, #8
 8015fac:	2206      	movs	r2, #6
 8015fae:	6839      	ldr	r1, [r7, #0]
 8015fb0:	4618      	mov	r0, r3
 8015fb2:	f001 ff21 	bl	8017df8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015fb6:	697b      	ldr	r3, [r7, #20]
 8015fb8:	3312      	adds	r3, #18
 8015fba:	2206      	movs	r2, #6
 8015fbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015fbe:	4618      	mov	r0, r3
 8015fc0:	f001 ff1a 	bl	8017df8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015fc4:	697b      	ldr	r3, [r7, #20]
 8015fc6:	330e      	adds	r3, #14
 8015fc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015fca:	6812      	ldr	r2, [r2, #0]
 8015fcc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8015fce:	697b      	ldr	r3, [r7, #20]
 8015fd0:	3318      	adds	r3, #24
 8015fd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015fd4:	6812      	ldr	r2, [r2, #0]
 8015fd6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8015fd8:	697b      	ldr	r3, [r7, #20]
 8015fda:	2200      	movs	r2, #0
 8015fdc:	701a      	strb	r2, [r3, #0]
 8015fde:	2200      	movs	r2, #0
 8015fe0:	f042 0201 	orr.w	r2, r2, #1
 8015fe4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015fe6:	697b      	ldr	r3, [r7, #20]
 8015fe8:	2200      	movs	r2, #0
 8015fea:	f042 0208 	orr.w	r2, r2, #8
 8015fee:	709a      	strb	r2, [r3, #2]
 8015ff0:	2200      	movs	r2, #0
 8015ff2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015ff4:	697b      	ldr	r3, [r7, #20]
 8015ff6:	2206      	movs	r2, #6
 8015ff8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8015ffa:	697b      	ldr	r3, [r7, #20]
 8015ffc:	2204      	movs	r2, #4
 8015ffe:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8016000:	f640 0306 	movw	r3, #2054	; 0x806
 8016004:	9300      	str	r3, [sp, #0]
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	68ba      	ldr	r2, [r7, #8]
 801600a:	69b9      	ldr	r1, [r7, #24]
 801600c:	68f8      	ldr	r0, [r7, #12]
 801600e:	f001 fc07 	bl	8017820 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8016012:	69b8      	ldr	r0, [r7, #24]
 8016014:	f7f8 f95e 	bl	800e2d4 <pbuf_free>
  p = NULL;
 8016018:	2300      	movs	r3, #0
 801601a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801601c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016020:	4618      	mov	r0, r3
 8016022:	3720      	adds	r7, #32
 8016024:	46bd      	mov	sp, r7
 8016026:	bd80      	pop	{r7, pc}
 8016028:	0801d4a4 	.word	0x0801d4a4
 801602c:	0801d5f4 	.word	0x0801d5f4
 8016030:	0801d51c 	.word	0x0801d51c
 8016034:	0801d6a4 	.word	0x0801d6a4
 8016038:	0801d6d8 	.word	0x0801d6d8

0801603c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801603c:	b580      	push	{r7, lr}
 801603e:	b088      	sub	sp, #32
 8016040:	af04      	add	r7, sp, #16
 8016042:	60f8      	str	r0, [r7, #12]
 8016044:	60b9      	str	r1, [r7, #8]
 8016046:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016048:	68fb      	ldr	r3, [r7, #12]
 801604a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801604e:	68fb      	ldr	r3, [r7, #12]
 8016050:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8016054:	68fb      	ldr	r3, [r7, #12]
 8016056:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016058:	2201      	movs	r2, #1
 801605a:	9203      	str	r2, [sp, #12]
 801605c:	68ba      	ldr	r2, [r7, #8]
 801605e:	9202      	str	r2, [sp, #8]
 8016060:	4a06      	ldr	r2, [pc, #24]	; (801607c <etharp_request_dst+0x40>)
 8016062:	9201      	str	r2, [sp, #4]
 8016064:	9300      	str	r3, [sp, #0]
 8016066:	4603      	mov	r3, r0
 8016068:	687a      	ldr	r2, [r7, #4]
 801606a:	68f8      	ldr	r0, [r7, #12]
 801606c:	f7ff ff5a 	bl	8015f24 <etharp_raw>
 8016070:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8016072:	4618      	mov	r0, r3
 8016074:	3710      	adds	r7, #16
 8016076:	46bd      	mov	sp, r7
 8016078:	bd80      	pop	{r7, pc}
 801607a:	bf00      	nop
 801607c:	0801de7c 	.word	0x0801de7c

08016080 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8016080:	b580      	push	{r7, lr}
 8016082:	b082      	sub	sp, #8
 8016084:	af00      	add	r7, sp, #0
 8016086:	6078      	str	r0, [r7, #4]
 8016088:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801608a:	4a05      	ldr	r2, [pc, #20]	; (80160a0 <etharp_request+0x20>)
 801608c:	6839      	ldr	r1, [r7, #0]
 801608e:	6878      	ldr	r0, [r7, #4]
 8016090:	f7ff ffd4 	bl	801603c <etharp_request_dst>
 8016094:	4603      	mov	r3, r0
}
 8016096:	4618      	mov	r0, r3
 8016098:	3708      	adds	r7, #8
 801609a:	46bd      	mov	sp, r7
 801609c:	bd80      	pop	{r7, pc}
 801609e:	bf00      	nop
 80160a0:	0801de74 	.word	0x0801de74

080160a4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80160a4:	b580      	push	{r7, lr}
 80160a6:	b08e      	sub	sp, #56	; 0x38
 80160a8:	af04      	add	r7, sp, #16
 80160aa:	6078      	str	r0, [r7, #4]
 80160ac:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80160ae:	4b79      	ldr	r3, [pc, #484]	; (8016294 <icmp_input+0x1f0>)
 80160b0:	689b      	ldr	r3, [r3, #8]
 80160b2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80160b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160b6:	781b      	ldrb	r3, [r3, #0]
 80160b8:	f003 030f 	and.w	r3, r3, #15
 80160bc:	b2db      	uxtb	r3, r3
 80160be:	009b      	lsls	r3, r3, #2
 80160c0:	b2db      	uxtb	r3, r3
 80160c2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80160c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80160c6:	2b13      	cmp	r3, #19
 80160c8:	f240 80cd 	bls.w	8016266 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	895b      	ldrh	r3, [r3, #10]
 80160d0:	2b03      	cmp	r3, #3
 80160d2:	f240 80ca 	bls.w	801626a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	685b      	ldr	r3, [r3, #4]
 80160da:	781b      	ldrb	r3, [r3, #0]
 80160dc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80160e0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	f000 80b7 	beq.w	8016258 <icmp_input+0x1b4>
 80160ea:	2b08      	cmp	r3, #8
 80160ec:	f040 80b7 	bne.w	801625e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80160f0:	4b69      	ldr	r3, [pc, #420]	; (8016298 <icmp_input+0x1f4>)
 80160f2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80160f4:	4b67      	ldr	r3, [pc, #412]	; (8016294 <icmp_input+0x1f0>)
 80160f6:	695b      	ldr	r3, [r3, #20]
 80160f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80160fc:	2be0      	cmp	r3, #224	; 0xe0
 80160fe:	f000 80bb 	beq.w	8016278 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8016102:	4b64      	ldr	r3, [pc, #400]	; (8016294 <icmp_input+0x1f0>)
 8016104:	695b      	ldr	r3, [r3, #20]
 8016106:	4a63      	ldr	r2, [pc, #396]	; (8016294 <icmp_input+0x1f0>)
 8016108:	6812      	ldr	r2, [r2, #0]
 801610a:	4611      	mov	r1, r2
 801610c:	4618      	mov	r0, r3
 801610e:	f000 fbed 	bl	80168ec <ip4_addr_isbroadcast_u32>
 8016112:	4603      	mov	r3, r0
 8016114:	2b00      	cmp	r3, #0
 8016116:	f040 80b1 	bne.w	801627c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	891b      	ldrh	r3, [r3, #8]
 801611e:	2b07      	cmp	r3, #7
 8016120:	f240 80a5 	bls.w	801626e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016124:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016126:	330e      	adds	r3, #14
 8016128:	4619      	mov	r1, r3
 801612a:	6878      	ldr	r0, [r7, #4]
 801612c:	f7f8 f83c 	bl	800e1a8 <pbuf_add_header>
 8016130:	4603      	mov	r3, r0
 8016132:	2b00      	cmp	r3, #0
 8016134:	d04b      	beq.n	80161ce <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	891a      	ldrh	r2, [r3, #8]
 801613a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801613c:	4413      	add	r3, r2
 801613e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	891b      	ldrh	r3, [r3, #8]
 8016144:	8b7a      	ldrh	r2, [r7, #26]
 8016146:	429a      	cmp	r2, r3
 8016148:	f0c0 809a 	bcc.w	8016280 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801614c:	8b7b      	ldrh	r3, [r7, #26]
 801614e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016152:	4619      	mov	r1, r3
 8016154:	200e      	movs	r0, #14
 8016156:	f7f7 fdd9 	bl	800dd0c <pbuf_alloc>
 801615a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801615c:	697b      	ldr	r3, [r7, #20]
 801615e:	2b00      	cmp	r3, #0
 8016160:	f000 8090 	beq.w	8016284 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8016164:	697b      	ldr	r3, [r7, #20]
 8016166:	895b      	ldrh	r3, [r3, #10]
 8016168:	461a      	mov	r2, r3
 801616a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801616c:	3308      	adds	r3, #8
 801616e:	429a      	cmp	r2, r3
 8016170:	d203      	bcs.n	801617a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8016172:	6978      	ldr	r0, [r7, #20]
 8016174:	f7f8 f8ae 	bl	800e2d4 <pbuf_free>
          goto icmperr;
 8016178:	e085      	b.n	8016286 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801617a:	697b      	ldr	r3, [r7, #20]
 801617c:	685b      	ldr	r3, [r3, #4]
 801617e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016180:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016182:	4618      	mov	r0, r3
 8016184:	f001 fe38 	bl	8017df8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8016188:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801618a:	4619      	mov	r1, r3
 801618c:	6978      	ldr	r0, [r7, #20]
 801618e:	f7f8 f81b 	bl	800e1c8 <pbuf_remove_header>
 8016192:	4603      	mov	r3, r0
 8016194:	2b00      	cmp	r3, #0
 8016196:	d009      	beq.n	80161ac <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8016198:	4b40      	ldr	r3, [pc, #256]	; (801629c <icmp_input+0x1f8>)
 801619a:	22b6      	movs	r2, #182	; 0xb6
 801619c:	4940      	ldr	r1, [pc, #256]	; (80162a0 <icmp_input+0x1fc>)
 801619e:	4841      	ldr	r0, [pc, #260]	; (80162a4 <icmp_input+0x200>)
 80161a0:	f001 ff04 	bl	8017fac <iprintf>
          pbuf_free(r);
 80161a4:	6978      	ldr	r0, [r7, #20]
 80161a6:	f7f8 f895 	bl	800e2d4 <pbuf_free>
          goto icmperr;
 80161aa:	e06c      	b.n	8016286 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80161ac:	6879      	ldr	r1, [r7, #4]
 80161ae:	6978      	ldr	r0, [r7, #20]
 80161b0:	f7f8 f9b8 	bl	800e524 <pbuf_copy>
 80161b4:	4603      	mov	r3, r0
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d003      	beq.n	80161c2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80161ba:	6978      	ldr	r0, [r7, #20]
 80161bc:	f7f8 f88a 	bl	800e2d4 <pbuf_free>
          goto icmperr;
 80161c0:	e061      	b.n	8016286 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80161c2:	6878      	ldr	r0, [r7, #4]
 80161c4:	f7f8 f886 	bl	800e2d4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80161c8:	697b      	ldr	r3, [r7, #20]
 80161ca:	607b      	str	r3, [r7, #4]
 80161cc:	e00f      	b.n	80161ee <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80161ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80161d0:	330e      	adds	r3, #14
 80161d2:	4619      	mov	r1, r3
 80161d4:	6878      	ldr	r0, [r7, #4]
 80161d6:	f7f7 fff7 	bl	800e1c8 <pbuf_remove_header>
 80161da:	4603      	mov	r3, r0
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d006      	beq.n	80161ee <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80161e0:	4b2e      	ldr	r3, [pc, #184]	; (801629c <icmp_input+0x1f8>)
 80161e2:	22c7      	movs	r2, #199	; 0xc7
 80161e4:	4930      	ldr	r1, [pc, #192]	; (80162a8 <icmp_input+0x204>)
 80161e6:	482f      	ldr	r0, [pc, #188]	; (80162a4 <icmp_input+0x200>)
 80161e8:	f001 fee0 	bl	8017fac <iprintf>
          goto icmperr;
 80161ec:	e04b      	b.n	8016286 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	685b      	ldr	r3, [r3, #4]
 80161f2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80161f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80161f6:	4619      	mov	r1, r3
 80161f8:	6878      	ldr	r0, [r7, #4]
 80161fa:	f7f7 ffd5 	bl	800e1a8 <pbuf_add_header>
 80161fe:	4603      	mov	r3, r0
 8016200:	2b00      	cmp	r3, #0
 8016202:	d12b      	bne.n	801625c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	685b      	ldr	r3, [r3, #4]
 8016208:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801620a:	69fb      	ldr	r3, [r7, #28]
 801620c:	681a      	ldr	r2, [r3, #0]
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8016212:	4b20      	ldr	r3, [pc, #128]	; (8016294 <icmp_input+0x1f0>)
 8016214:	691a      	ldr	r2, [r3, #16]
 8016216:	68fb      	ldr	r3, [r7, #12]
 8016218:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801621a:	693b      	ldr	r3, [r7, #16]
 801621c:	2200      	movs	r2, #0
 801621e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8016220:	693b      	ldr	r3, [r7, #16]
 8016222:	2200      	movs	r2, #0
 8016224:	709a      	strb	r2, [r3, #2]
 8016226:	2200      	movs	r2, #0
 8016228:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801622a:	68fb      	ldr	r3, [r7, #12]
 801622c:	22ff      	movs	r2, #255	; 0xff
 801622e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8016230:	68fb      	ldr	r3, [r7, #12]
 8016232:	2200      	movs	r2, #0
 8016234:	729a      	strb	r2, [r3, #10]
 8016236:	2200      	movs	r2, #0
 8016238:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801623a:	683b      	ldr	r3, [r7, #0]
 801623c:	9302      	str	r3, [sp, #8]
 801623e:	2301      	movs	r3, #1
 8016240:	9301      	str	r3, [sp, #4]
 8016242:	2300      	movs	r3, #0
 8016244:	9300      	str	r3, [sp, #0]
 8016246:	23ff      	movs	r3, #255	; 0xff
 8016248:	2200      	movs	r2, #0
 801624a:	69f9      	ldr	r1, [r7, #28]
 801624c:	6878      	ldr	r0, [r7, #4]
 801624e:	f000 fa75 	bl	801673c <ip4_output_if>
 8016252:	4603      	mov	r3, r0
 8016254:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8016256:	e001      	b.n	801625c <icmp_input+0x1b8>
      break;
 8016258:	bf00      	nop
 801625a:	e000      	b.n	801625e <icmp_input+0x1ba>
      break;
 801625c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801625e:	6878      	ldr	r0, [r7, #4]
 8016260:	f7f8 f838 	bl	800e2d4 <pbuf_free>
  return;
 8016264:	e013      	b.n	801628e <icmp_input+0x1ea>
    goto lenerr;
 8016266:	bf00      	nop
 8016268:	e002      	b.n	8016270 <icmp_input+0x1cc>
    goto lenerr;
 801626a:	bf00      	nop
 801626c:	e000      	b.n	8016270 <icmp_input+0x1cc>
        goto lenerr;
 801626e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8016270:	6878      	ldr	r0, [r7, #4]
 8016272:	f7f8 f82f 	bl	800e2d4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016276:	e00a      	b.n	801628e <icmp_input+0x1ea>
        goto icmperr;
 8016278:	bf00      	nop
 801627a:	e004      	b.n	8016286 <icmp_input+0x1e2>
        goto icmperr;
 801627c:	bf00      	nop
 801627e:	e002      	b.n	8016286 <icmp_input+0x1e2>
          goto icmperr;
 8016280:	bf00      	nop
 8016282:	e000      	b.n	8016286 <icmp_input+0x1e2>
          goto icmperr;
 8016284:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8016286:	6878      	ldr	r0, [r7, #4]
 8016288:	f7f8 f824 	bl	800e2d4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801628c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801628e:	3728      	adds	r7, #40	; 0x28
 8016290:	46bd      	mov	sp, r7
 8016292:	bd80      	pop	{r7, pc}
 8016294:	20003e00 	.word	0x20003e00
 8016298:	20003e14 	.word	0x20003e14
 801629c:	0801d71c 	.word	0x0801d71c
 80162a0:	0801d754 	.word	0x0801d754
 80162a4:	0801d78c 	.word	0x0801d78c
 80162a8:	0801d7b4 	.word	0x0801d7b4

080162ac <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80162ac:	b580      	push	{r7, lr}
 80162ae:	b082      	sub	sp, #8
 80162b0:	af00      	add	r7, sp, #0
 80162b2:	6078      	str	r0, [r7, #4]
 80162b4:	460b      	mov	r3, r1
 80162b6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80162b8:	78fb      	ldrb	r3, [r7, #3]
 80162ba:	461a      	mov	r2, r3
 80162bc:	2103      	movs	r1, #3
 80162be:	6878      	ldr	r0, [r7, #4]
 80162c0:	f000 f814 	bl	80162ec <icmp_send_response>
}
 80162c4:	bf00      	nop
 80162c6:	3708      	adds	r7, #8
 80162c8:	46bd      	mov	sp, r7
 80162ca:	bd80      	pop	{r7, pc}

080162cc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80162cc:	b580      	push	{r7, lr}
 80162ce:	b082      	sub	sp, #8
 80162d0:	af00      	add	r7, sp, #0
 80162d2:	6078      	str	r0, [r7, #4]
 80162d4:	460b      	mov	r3, r1
 80162d6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80162d8:	78fb      	ldrb	r3, [r7, #3]
 80162da:	461a      	mov	r2, r3
 80162dc:	210b      	movs	r1, #11
 80162de:	6878      	ldr	r0, [r7, #4]
 80162e0:	f000 f804 	bl	80162ec <icmp_send_response>
}
 80162e4:	bf00      	nop
 80162e6:	3708      	adds	r7, #8
 80162e8:	46bd      	mov	sp, r7
 80162ea:	bd80      	pop	{r7, pc}

080162ec <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80162ec:	b580      	push	{r7, lr}
 80162ee:	b08c      	sub	sp, #48	; 0x30
 80162f0:	af04      	add	r7, sp, #16
 80162f2:	6078      	str	r0, [r7, #4]
 80162f4:	460b      	mov	r3, r1
 80162f6:	70fb      	strb	r3, [r7, #3]
 80162f8:	4613      	mov	r3, r2
 80162fa:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80162fc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016300:	2124      	movs	r1, #36	; 0x24
 8016302:	2022      	movs	r0, #34	; 0x22
 8016304:	f7f7 fd02 	bl	800dd0c <pbuf_alloc>
 8016308:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801630a:	69fb      	ldr	r3, [r7, #28]
 801630c:	2b00      	cmp	r3, #0
 801630e:	d04c      	beq.n	80163aa <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016310:	69fb      	ldr	r3, [r7, #28]
 8016312:	895b      	ldrh	r3, [r3, #10]
 8016314:	2b23      	cmp	r3, #35	; 0x23
 8016316:	d806      	bhi.n	8016326 <icmp_send_response+0x3a>
 8016318:	4b26      	ldr	r3, [pc, #152]	; (80163b4 <icmp_send_response+0xc8>)
 801631a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801631e:	4926      	ldr	r1, [pc, #152]	; (80163b8 <icmp_send_response+0xcc>)
 8016320:	4826      	ldr	r0, [pc, #152]	; (80163bc <icmp_send_response+0xd0>)
 8016322:	f001 fe43 	bl	8017fac <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	685b      	ldr	r3, [r3, #4]
 801632a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801632c:	69fb      	ldr	r3, [r7, #28]
 801632e:	685b      	ldr	r3, [r3, #4]
 8016330:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8016332:	697b      	ldr	r3, [r7, #20]
 8016334:	78fa      	ldrb	r2, [r7, #3]
 8016336:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8016338:	697b      	ldr	r3, [r7, #20]
 801633a:	78ba      	ldrb	r2, [r7, #2]
 801633c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801633e:	697b      	ldr	r3, [r7, #20]
 8016340:	2200      	movs	r2, #0
 8016342:	711a      	strb	r2, [r3, #4]
 8016344:	2200      	movs	r2, #0
 8016346:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8016348:	697b      	ldr	r3, [r7, #20]
 801634a:	2200      	movs	r2, #0
 801634c:	719a      	strb	r2, [r3, #6]
 801634e:	2200      	movs	r2, #0
 8016350:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8016352:	69fb      	ldr	r3, [r7, #28]
 8016354:	685b      	ldr	r3, [r3, #4]
 8016356:	f103 0008 	add.w	r0, r3, #8
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	685b      	ldr	r3, [r3, #4]
 801635e:	221c      	movs	r2, #28
 8016360:	4619      	mov	r1, r3
 8016362:	f001 fd49 	bl	8017df8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8016366:	69bb      	ldr	r3, [r7, #24]
 8016368:	68db      	ldr	r3, [r3, #12]
 801636a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801636c:	f107 030c 	add.w	r3, r7, #12
 8016370:	4618      	mov	r0, r3
 8016372:	f000 f825 	bl	80163c0 <ip4_route>
 8016376:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8016378:	693b      	ldr	r3, [r7, #16]
 801637a:	2b00      	cmp	r3, #0
 801637c:	d011      	beq.n	80163a2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801637e:	697b      	ldr	r3, [r7, #20]
 8016380:	2200      	movs	r2, #0
 8016382:	709a      	strb	r2, [r3, #2]
 8016384:	2200      	movs	r2, #0
 8016386:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016388:	f107 020c 	add.w	r2, r7, #12
 801638c:	693b      	ldr	r3, [r7, #16]
 801638e:	9302      	str	r3, [sp, #8]
 8016390:	2301      	movs	r3, #1
 8016392:	9301      	str	r3, [sp, #4]
 8016394:	2300      	movs	r3, #0
 8016396:	9300      	str	r3, [sp, #0]
 8016398:	23ff      	movs	r3, #255	; 0xff
 801639a:	2100      	movs	r1, #0
 801639c:	69f8      	ldr	r0, [r7, #28]
 801639e:	f000 f9cd 	bl	801673c <ip4_output_if>
  }
  pbuf_free(q);
 80163a2:	69f8      	ldr	r0, [r7, #28]
 80163a4:	f7f7 ff96 	bl	800e2d4 <pbuf_free>
 80163a8:	e000      	b.n	80163ac <icmp_send_response+0xc0>
    return;
 80163aa:	bf00      	nop
}
 80163ac:	3720      	adds	r7, #32
 80163ae:	46bd      	mov	sp, r7
 80163b0:	bd80      	pop	{r7, pc}
 80163b2:	bf00      	nop
 80163b4:	0801d71c 	.word	0x0801d71c
 80163b8:	0801d7e8 	.word	0x0801d7e8
 80163bc:	0801d78c 	.word	0x0801d78c

080163c0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80163c0:	b480      	push	{r7}
 80163c2:	b085      	sub	sp, #20
 80163c4:	af00      	add	r7, sp, #0
 80163c6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80163c8:	4b33      	ldr	r3, [pc, #204]	; (8016498 <ip4_route+0xd8>)
 80163ca:	681b      	ldr	r3, [r3, #0]
 80163cc:	60fb      	str	r3, [r7, #12]
 80163ce:	e036      	b.n	801643e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80163d0:	68fb      	ldr	r3, [r7, #12]
 80163d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80163d6:	f003 0301 	and.w	r3, r3, #1
 80163da:	b2db      	uxtb	r3, r3
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d02b      	beq.n	8016438 <ip4_route+0x78>
 80163e0:	68fb      	ldr	r3, [r7, #12]
 80163e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80163e6:	089b      	lsrs	r3, r3, #2
 80163e8:	f003 0301 	and.w	r3, r3, #1
 80163ec:	b2db      	uxtb	r3, r3
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	d022      	beq.n	8016438 <ip4_route+0x78>
 80163f2:	68fb      	ldr	r3, [r7, #12]
 80163f4:	3304      	adds	r3, #4
 80163f6:	681b      	ldr	r3, [r3, #0]
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d01d      	beq.n	8016438 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	681a      	ldr	r2, [r3, #0]
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	3304      	adds	r3, #4
 8016404:	681b      	ldr	r3, [r3, #0]
 8016406:	405a      	eors	r2, r3
 8016408:	68fb      	ldr	r3, [r7, #12]
 801640a:	3308      	adds	r3, #8
 801640c:	681b      	ldr	r3, [r3, #0]
 801640e:	4013      	ands	r3, r2
 8016410:	2b00      	cmp	r3, #0
 8016412:	d101      	bne.n	8016418 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8016414:	68fb      	ldr	r3, [r7, #12]
 8016416:	e038      	b.n	801648a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801641e:	f003 0302 	and.w	r3, r3, #2
 8016422:	2b00      	cmp	r3, #0
 8016424:	d108      	bne.n	8016438 <ip4_route+0x78>
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	681a      	ldr	r2, [r3, #0]
 801642a:	68fb      	ldr	r3, [r7, #12]
 801642c:	330c      	adds	r3, #12
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	429a      	cmp	r2, r3
 8016432:	d101      	bne.n	8016438 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8016434:	68fb      	ldr	r3, [r7, #12]
 8016436:	e028      	b.n	801648a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8016438:	68fb      	ldr	r3, [r7, #12]
 801643a:	681b      	ldr	r3, [r3, #0]
 801643c:	60fb      	str	r3, [r7, #12]
 801643e:	68fb      	ldr	r3, [r7, #12]
 8016440:	2b00      	cmp	r3, #0
 8016442:	d1c5      	bne.n	80163d0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016444:	4b15      	ldr	r3, [pc, #84]	; (801649c <ip4_route+0xdc>)
 8016446:	681b      	ldr	r3, [r3, #0]
 8016448:	2b00      	cmp	r3, #0
 801644a:	d01a      	beq.n	8016482 <ip4_route+0xc2>
 801644c:	4b13      	ldr	r3, [pc, #76]	; (801649c <ip4_route+0xdc>)
 801644e:	681b      	ldr	r3, [r3, #0]
 8016450:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016454:	f003 0301 	and.w	r3, r3, #1
 8016458:	2b00      	cmp	r3, #0
 801645a:	d012      	beq.n	8016482 <ip4_route+0xc2>
 801645c:	4b0f      	ldr	r3, [pc, #60]	; (801649c <ip4_route+0xdc>)
 801645e:	681b      	ldr	r3, [r3, #0]
 8016460:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016464:	f003 0304 	and.w	r3, r3, #4
 8016468:	2b00      	cmp	r3, #0
 801646a:	d00a      	beq.n	8016482 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801646c:	4b0b      	ldr	r3, [pc, #44]	; (801649c <ip4_route+0xdc>)
 801646e:	681b      	ldr	r3, [r3, #0]
 8016470:	3304      	adds	r3, #4
 8016472:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016474:	2b00      	cmp	r3, #0
 8016476:	d004      	beq.n	8016482 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	681b      	ldr	r3, [r3, #0]
 801647c:	b2db      	uxtb	r3, r3
 801647e:	2b7f      	cmp	r3, #127	; 0x7f
 8016480:	d101      	bne.n	8016486 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8016482:	2300      	movs	r3, #0
 8016484:	e001      	b.n	801648a <ip4_route+0xca>
  }

  return netif_default;
 8016486:	4b05      	ldr	r3, [pc, #20]	; (801649c <ip4_route+0xdc>)
 8016488:	681b      	ldr	r3, [r3, #0]
}
 801648a:	4618      	mov	r0, r3
 801648c:	3714      	adds	r7, #20
 801648e:	46bd      	mov	sp, r7
 8016490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016494:	4770      	bx	lr
 8016496:	bf00      	nop
 8016498:	200094f4 	.word	0x200094f4
 801649c:	200094f8 	.word	0x200094f8

080164a0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80164a0:	b580      	push	{r7, lr}
 80164a2:	b082      	sub	sp, #8
 80164a4:	af00      	add	r7, sp, #0
 80164a6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80164ae:	f003 0301 	and.w	r3, r3, #1
 80164b2:	b2db      	uxtb	r3, r3
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	d016      	beq.n	80164e6 <ip4_input_accept+0x46>
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	3304      	adds	r3, #4
 80164bc:	681b      	ldr	r3, [r3, #0]
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d011      	beq.n	80164e6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80164c2:	4b0b      	ldr	r3, [pc, #44]	; (80164f0 <ip4_input_accept+0x50>)
 80164c4:	695a      	ldr	r2, [r3, #20]
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	3304      	adds	r3, #4
 80164ca:	681b      	ldr	r3, [r3, #0]
 80164cc:	429a      	cmp	r2, r3
 80164ce:	d008      	beq.n	80164e2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80164d0:	4b07      	ldr	r3, [pc, #28]	; (80164f0 <ip4_input_accept+0x50>)
 80164d2:	695b      	ldr	r3, [r3, #20]
 80164d4:	6879      	ldr	r1, [r7, #4]
 80164d6:	4618      	mov	r0, r3
 80164d8:	f000 fa08 	bl	80168ec <ip4_addr_isbroadcast_u32>
 80164dc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80164de:	2b00      	cmp	r3, #0
 80164e0:	d001      	beq.n	80164e6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80164e2:	2301      	movs	r3, #1
 80164e4:	e000      	b.n	80164e8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80164e6:	2300      	movs	r3, #0
}
 80164e8:	4618      	mov	r0, r3
 80164ea:	3708      	adds	r7, #8
 80164ec:	46bd      	mov	sp, r7
 80164ee:	bd80      	pop	{r7, pc}
 80164f0:	20003e00 	.word	0x20003e00

080164f4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80164f4:	b580      	push	{r7, lr}
 80164f6:	b086      	sub	sp, #24
 80164f8:	af00      	add	r7, sp, #0
 80164fa:	6078      	str	r0, [r7, #4]
 80164fc:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	685b      	ldr	r3, [r3, #4]
 8016502:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8016504:	697b      	ldr	r3, [r7, #20]
 8016506:	781b      	ldrb	r3, [r3, #0]
 8016508:	091b      	lsrs	r3, r3, #4
 801650a:	b2db      	uxtb	r3, r3
 801650c:	2b04      	cmp	r3, #4
 801650e:	d004      	beq.n	801651a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016510:	6878      	ldr	r0, [r7, #4]
 8016512:	f7f7 fedf 	bl	800e2d4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8016516:	2300      	movs	r3, #0
 8016518:	e107      	b.n	801672a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801651a:	697b      	ldr	r3, [r7, #20]
 801651c:	781b      	ldrb	r3, [r3, #0]
 801651e:	f003 030f 	and.w	r3, r3, #15
 8016522:	b2db      	uxtb	r3, r3
 8016524:	009b      	lsls	r3, r3, #2
 8016526:	b2db      	uxtb	r3, r3
 8016528:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801652a:	697b      	ldr	r3, [r7, #20]
 801652c:	885b      	ldrh	r3, [r3, #2]
 801652e:	b29b      	uxth	r3, r3
 8016530:	4618      	mov	r0, r3
 8016532:	f7f6 fc1b 	bl	800cd6c <lwip_htons>
 8016536:	4603      	mov	r3, r0
 8016538:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	891b      	ldrh	r3, [r3, #8]
 801653e:	89ba      	ldrh	r2, [r7, #12]
 8016540:	429a      	cmp	r2, r3
 8016542:	d204      	bcs.n	801654e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8016544:	89bb      	ldrh	r3, [r7, #12]
 8016546:	4619      	mov	r1, r3
 8016548:	6878      	ldr	r0, [r7, #4]
 801654a:	f7f7 fd3d 	bl	800dfc8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	895b      	ldrh	r3, [r3, #10]
 8016552:	89fa      	ldrh	r2, [r7, #14]
 8016554:	429a      	cmp	r2, r3
 8016556:	d807      	bhi.n	8016568 <ip4_input+0x74>
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	891b      	ldrh	r3, [r3, #8]
 801655c:	89ba      	ldrh	r2, [r7, #12]
 801655e:	429a      	cmp	r2, r3
 8016560:	d802      	bhi.n	8016568 <ip4_input+0x74>
 8016562:	89fb      	ldrh	r3, [r7, #14]
 8016564:	2b13      	cmp	r3, #19
 8016566:	d804      	bhi.n	8016572 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8016568:	6878      	ldr	r0, [r7, #4]
 801656a:	f7f7 feb3 	bl	800e2d4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801656e:	2300      	movs	r3, #0
 8016570:	e0db      	b.n	801672a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8016572:	697b      	ldr	r3, [r7, #20]
 8016574:	691b      	ldr	r3, [r3, #16]
 8016576:	4a6f      	ldr	r2, [pc, #444]	; (8016734 <ip4_input+0x240>)
 8016578:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801657a:	697b      	ldr	r3, [r7, #20]
 801657c:	68db      	ldr	r3, [r3, #12]
 801657e:	4a6d      	ldr	r2, [pc, #436]	; (8016734 <ip4_input+0x240>)
 8016580:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016582:	4b6c      	ldr	r3, [pc, #432]	; (8016734 <ip4_input+0x240>)
 8016584:	695b      	ldr	r3, [r3, #20]
 8016586:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801658a:	2be0      	cmp	r3, #224	; 0xe0
 801658c:	d112      	bne.n	80165b4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801658e:	683b      	ldr	r3, [r7, #0]
 8016590:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016594:	f003 0301 	and.w	r3, r3, #1
 8016598:	b2db      	uxtb	r3, r3
 801659a:	2b00      	cmp	r3, #0
 801659c:	d007      	beq.n	80165ae <ip4_input+0xba>
 801659e:	683b      	ldr	r3, [r7, #0]
 80165a0:	3304      	adds	r3, #4
 80165a2:	681b      	ldr	r3, [r3, #0]
 80165a4:	2b00      	cmp	r3, #0
 80165a6:	d002      	beq.n	80165ae <ip4_input+0xba>
      netif = inp;
 80165a8:	683b      	ldr	r3, [r7, #0]
 80165aa:	613b      	str	r3, [r7, #16]
 80165ac:	e02a      	b.n	8016604 <ip4_input+0x110>
    } else {
      netif = NULL;
 80165ae:	2300      	movs	r3, #0
 80165b0:	613b      	str	r3, [r7, #16]
 80165b2:	e027      	b.n	8016604 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80165b4:	6838      	ldr	r0, [r7, #0]
 80165b6:	f7ff ff73 	bl	80164a0 <ip4_input_accept>
 80165ba:	4603      	mov	r3, r0
 80165bc:	2b00      	cmp	r3, #0
 80165be:	d002      	beq.n	80165c6 <ip4_input+0xd2>
      netif = inp;
 80165c0:	683b      	ldr	r3, [r7, #0]
 80165c2:	613b      	str	r3, [r7, #16]
 80165c4:	e01e      	b.n	8016604 <ip4_input+0x110>
    } else {
      netif = NULL;
 80165c6:	2300      	movs	r3, #0
 80165c8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80165ca:	4b5a      	ldr	r3, [pc, #360]	; (8016734 <ip4_input+0x240>)
 80165cc:	695b      	ldr	r3, [r3, #20]
 80165ce:	b2db      	uxtb	r3, r3
 80165d0:	2b7f      	cmp	r3, #127	; 0x7f
 80165d2:	d017      	beq.n	8016604 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80165d4:	4b58      	ldr	r3, [pc, #352]	; (8016738 <ip4_input+0x244>)
 80165d6:	681b      	ldr	r3, [r3, #0]
 80165d8:	613b      	str	r3, [r7, #16]
 80165da:	e00e      	b.n	80165fa <ip4_input+0x106>
          if (netif == inp) {
 80165dc:	693a      	ldr	r2, [r7, #16]
 80165de:	683b      	ldr	r3, [r7, #0]
 80165e0:	429a      	cmp	r2, r3
 80165e2:	d006      	beq.n	80165f2 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80165e4:	6938      	ldr	r0, [r7, #16]
 80165e6:	f7ff ff5b 	bl	80164a0 <ip4_input_accept>
 80165ea:	4603      	mov	r3, r0
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d108      	bne.n	8016602 <ip4_input+0x10e>
 80165f0:	e000      	b.n	80165f4 <ip4_input+0x100>
            continue;
 80165f2:	bf00      	nop
        NETIF_FOREACH(netif) {
 80165f4:	693b      	ldr	r3, [r7, #16]
 80165f6:	681b      	ldr	r3, [r3, #0]
 80165f8:	613b      	str	r3, [r7, #16]
 80165fa:	693b      	ldr	r3, [r7, #16]
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	d1ed      	bne.n	80165dc <ip4_input+0xe8>
 8016600:	e000      	b.n	8016604 <ip4_input+0x110>
            break;
 8016602:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016604:	4b4b      	ldr	r3, [pc, #300]	; (8016734 <ip4_input+0x240>)
 8016606:	691b      	ldr	r3, [r3, #16]
 8016608:	6839      	ldr	r1, [r7, #0]
 801660a:	4618      	mov	r0, r3
 801660c:	f000 f96e 	bl	80168ec <ip4_addr_isbroadcast_u32>
 8016610:	4603      	mov	r3, r0
 8016612:	2b00      	cmp	r3, #0
 8016614:	d105      	bne.n	8016622 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8016616:	4b47      	ldr	r3, [pc, #284]	; (8016734 <ip4_input+0x240>)
 8016618:	691b      	ldr	r3, [r3, #16]
 801661a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801661e:	2be0      	cmp	r3, #224	; 0xe0
 8016620:	d104      	bne.n	801662c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8016622:	6878      	ldr	r0, [r7, #4]
 8016624:	f7f7 fe56 	bl	800e2d4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8016628:	2300      	movs	r3, #0
 801662a:	e07e      	b.n	801672a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801662c:	693b      	ldr	r3, [r7, #16]
 801662e:	2b00      	cmp	r3, #0
 8016630:	d104      	bne.n	801663c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8016632:	6878      	ldr	r0, [r7, #4]
 8016634:	f7f7 fe4e 	bl	800e2d4 <pbuf_free>
    return ERR_OK;
 8016638:	2300      	movs	r3, #0
 801663a:	e076      	b.n	801672a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801663c:	697b      	ldr	r3, [r7, #20]
 801663e:	88db      	ldrh	r3, [r3, #6]
 8016640:	b29b      	uxth	r3, r3
 8016642:	461a      	mov	r2, r3
 8016644:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8016648:	4013      	ands	r3, r2
 801664a:	2b00      	cmp	r3, #0
 801664c:	d00b      	beq.n	8016666 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801664e:	6878      	ldr	r0, [r7, #4]
 8016650:	f000 fd24 	bl	801709c <ip4_reass>
 8016654:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	2b00      	cmp	r3, #0
 801665a:	d101      	bne.n	8016660 <ip4_input+0x16c>
      return ERR_OK;
 801665c:	2300      	movs	r3, #0
 801665e:	e064      	b.n	801672a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	685b      	ldr	r3, [r3, #4]
 8016664:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8016666:	4a33      	ldr	r2, [pc, #204]	; (8016734 <ip4_input+0x240>)
 8016668:	693b      	ldr	r3, [r7, #16]
 801666a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801666c:	4a31      	ldr	r2, [pc, #196]	; (8016734 <ip4_input+0x240>)
 801666e:	683b      	ldr	r3, [r7, #0]
 8016670:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8016672:	4a30      	ldr	r2, [pc, #192]	; (8016734 <ip4_input+0x240>)
 8016674:	697b      	ldr	r3, [r7, #20]
 8016676:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8016678:	697b      	ldr	r3, [r7, #20]
 801667a:	781b      	ldrb	r3, [r3, #0]
 801667c:	f003 030f 	and.w	r3, r3, #15
 8016680:	b2db      	uxtb	r3, r3
 8016682:	009b      	lsls	r3, r3, #2
 8016684:	b2db      	uxtb	r3, r3
 8016686:	b29a      	uxth	r2, r3
 8016688:	4b2a      	ldr	r3, [pc, #168]	; (8016734 <ip4_input+0x240>)
 801668a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801668c:	89fb      	ldrh	r3, [r7, #14]
 801668e:	4619      	mov	r1, r3
 8016690:	6878      	ldr	r0, [r7, #4]
 8016692:	f7f7 fd99 	bl	800e1c8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8016696:	697b      	ldr	r3, [r7, #20]
 8016698:	7a5b      	ldrb	r3, [r3, #9]
 801669a:	2b11      	cmp	r3, #17
 801669c:	d006      	beq.n	80166ac <ip4_input+0x1b8>
 801669e:	2b11      	cmp	r3, #17
 80166a0:	dc13      	bgt.n	80166ca <ip4_input+0x1d6>
 80166a2:	2b01      	cmp	r3, #1
 80166a4:	d00c      	beq.n	80166c0 <ip4_input+0x1cc>
 80166a6:	2b06      	cmp	r3, #6
 80166a8:	d005      	beq.n	80166b6 <ip4_input+0x1c2>
 80166aa:	e00e      	b.n	80166ca <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80166ac:	6839      	ldr	r1, [r7, #0]
 80166ae:	6878      	ldr	r0, [r7, #4]
 80166b0:	f7fe fc68 	bl	8014f84 <udp_input>
        break;
 80166b4:	e026      	b.n	8016704 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80166b6:	6839      	ldr	r1, [r7, #0]
 80166b8:	6878      	ldr	r0, [r7, #4]
 80166ba:	f7fa f88d 	bl	80107d8 <tcp_input>
        break;
 80166be:	e021      	b.n	8016704 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80166c0:	6839      	ldr	r1, [r7, #0]
 80166c2:	6878      	ldr	r0, [r7, #4]
 80166c4:	f7ff fcee 	bl	80160a4 <icmp_input>
        break;
 80166c8:	e01c      	b.n	8016704 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80166ca:	4b1a      	ldr	r3, [pc, #104]	; (8016734 <ip4_input+0x240>)
 80166cc:	695b      	ldr	r3, [r3, #20]
 80166ce:	6939      	ldr	r1, [r7, #16]
 80166d0:	4618      	mov	r0, r3
 80166d2:	f000 f90b 	bl	80168ec <ip4_addr_isbroadcast_u32>
 80166d6:	4603      	mov	r3, r0
 80166d8:	2b00      	cmp	r3, #0
 80166da:	d10f      	bne.n	80166fc <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80166dc:	4b15      	ldr	r3, [pc, #84]	; (8016734 <ip4_input+0x240>)
 80166de:	695b      	ldr	r3, [r3, #20]
 80166e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80166e4:	2be0      	cmp	r3, #224	; 0xe0
 80166e6:	d009      	beq.n	80166fc <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80166e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80166ec:	4619      	mov	r1, r3
 80166ee:	6878      	ldr	r0, [r7, #4]
 80166f0:	f7f7 fddd 	bl	800e2ae <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80166f4:	2102      	movs	r1, #2
 80166f6:	6878      	ldr	r0, [r7, #4]
 80166f8:	f7ff fdd8 	bl	80162ac <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80166fc:	6878      	ldr	r0, [r7, #4]
 80166fe:	f7f7 fde9 	bl	800e2d4 <pbuf_free>
        break;
 8016702:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016704:	4b0b      	ldr	r3, [pc, #44]	; (8016734 <ip4_input+0x240>)
 8016706:	2200      	movs	r2, #0
 8016708:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801670a:	4b0a      	ldr	r3, [pc, #40]	; (8016734 <ip4_input+0x240>)
 801670c:	2200      	movs	r2, #0
 801670e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016710:	4b08      	ldr	r3, [pc, #32]	; (8016734 <ip4_input+0x240>)
 8016712:	2200      	movs	r2, #0
 8016714:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016716:	4b07      	ldr	r3, [pc, #28]	; (8016734 <ip4_input+0x240>)
 8016718:	2200      	movs	r2, #0
 801671a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801671c:	4b05      	ldr	r3, [pc, #20]	; (8016734 <ip4_input+0x240>)
 801671e:	2200      	movs	r2, #0
 8016720:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016722:	4b04      	ldr	r3, [pc, #16]	; (8016734 <ip4_input+0x240>)
 8016724:	2200      	movs	r2, #0
 8016726:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016728:	2300      	movs	r3, #0
}
 801672a:	4618      	mov	r0, r3
 801672c:	3718      	adds	r7, #24
 801672e:	46bd      	mov	sp, r7
 8016730:	bd80      	pop	{r7, pc}
 8016732:	bf00      	nop
 8016734:	20003e00 	.word	0x20003e00
 8016738:	200094f4 	.word	0x200094f4

0801673c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801673c:	b580      	push	{r7, lr}
 801673e:	b08a      	sub	sp, #40	; 0x28
 8016740:	af04      	add	r7, sp, #16
 8016742:	60f8      	str	r0, [r7, #12]
 8016744:	60b9      	str	r1, [r7, #8]
 8016746:	607a      	str	r2, [r7, #4]
 8016748:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801674a:	68bb      	ldr	r3, [r7, #8]
 801674c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	2b00      	cmp	r3, #0
 8016752:	d009      	beq.n	8016768 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016754:	68bb      	ldr	r3, [r7, #8]
 8016756:	2b00      	cmp	r3, #0
 8016758:	d003      	beq.n	8016762 <ip4_output_if+0x26>
 801675a:	68bb      	ldr	r3, [r7, #8]
 801675c:	681b      	ldr	r3, [r3, #0]
 801675e:	2b00      	cmp	r3, #0
 8016760:	d102      	bne.n	8016768 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8016762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016764:	3304      	adds	r3, #4
 8016766:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016768:	78fa      	ldrb	r2, [r7, #3]
 801676a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801676c:	9302      	str	r3, [sp, #8]
 801676e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016772:	9301      	str	r3, [sp, #4]
 8016774:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016778:	9300      	str	r3, [sp, #0]
 801677a:	4613      	mov	r3, r2
 801677c:	687a      	ldr	r2, [r7, #4]
 801677e:	6979      	ldr	r1, [r7, #20]
 8016780:	68f8      	ldr	r0, [r7, #12]
 8016782:	f000 f805 	bl	8016790 <ip4_output_if_src>
 8016786:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016788:	4618      	mov	r0, r3
 801678a:	3718      	adds	r7, #24
 801678c:	46bd      	mov	sp, r7
 801678e:	bd80      	pop	{r7, pc}

08016790 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8016790:	b580      	push	{r7, lr}
 8016792:	b088      	sub	sp, #32
 8016794:	af00      	add	r7, sp, #0
 8016796:	60f8      	str	r0, [r7, #12]
 8016798:	60b9      	str	r1, [r7, #8]
 801679a:	607a      	str	r2, [r7, #4]
 801679c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801679e:	68fb      	ldr	r3, [r7, #12]
 80167a0:	7b9b      	ldrb	r3, [r3, #14]
 80167a2:	2b01      	cmp	r3, #1
 80167a4:	d006      	beq.n	80167b4 <ip4_output_if_src+0x24>
 80167a6:	4b4b      	ldr	r3, [pc, #300]	; (80168d4 <ip4_output_if_src+0x144>)
 80167a8:	f44f 7255 	mov.w	r2, #852	; 0x354
 80167ac:	494a      	ldr	r1, [pc, #296]	; (80168d8 <ip4_output_if_src+0x148>)
 80167ae:	484b      	ldr	r0, [pc, #300]	; (80168dc <ip4_output_if_src+0x14c>)
 80167b0:	f001 fbfc 	bl	8017fac <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d060      	beq.n	801687c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80167ba:	2314      	movs	r3, #20
 80167bc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80167be:	2114      	movs	r1, #20
 80167c0:	68f8      	ldr	r0, [r7, #12]
 80167c2:	f7f7 fcf1 	bl	800e1a8 <pbuf_add_header>
 80167c6:	4603      	mov	r3, r0
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	d002      	beq.n	80167d2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80167cc:	f06f 0301 	mvn.w	r3, #1
 80167d0:	e07c      	b.n	80168cc <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80167d2:	68fb      	ldr	r3, [r7, #12]
 80167d4:	685b      	ldr	r3, [r3, #4]
 80167d6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80167d8:	68fb      	ldr	r3, [r7, #12]
 80167da:	895b      	ldrh	r3, [r3, #10]
 80167dc:	2b13      	cmp	r3, #19
 80167de:	d806      	bhi.n	80167ee <ip4_output_if_src+0x5e>
 80167e0:	4b3c      	ldr	r3, [pc, #240]	; (80168d4 <ip4_output_if_src+0x144>)
 80167e2:	f44f 7262 	mov.w	r2, #904	; 0x388
 80167e6:	493e      	ldr	r1, [pc, #248]	; (80168e0 <ip4_output_if_src+0x150>)
 80167e8:	483c      	ldr	r0, [pc, #240]	; (80168dc <ip4_output_if_src+0x14c>)
 80167ea:	f001 fbdf 	bl	8017fac <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80167ee:	69fb      	ldr	r3, [r7, #28]
 80167f0:	78fa      	ldrb	r2, [r7, #3]
 80167f2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80167f4:	69fb      	ldr	r3, [r7, #28]
 80167f6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80167fa:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	681a      	ldr	r2, [r3, #0]
 8016800:	69fb      	ldr	r3, [r7, #28]
 8016802:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016804:	8b7b      	ldrh	r3, [r7, #26]
 8016806:	089b      	lsrs	r3, r3, #2
 8016808:	b29b      	uxth	r3, r3
 801680a:	b2db      	uxtb	r3, r3
 801680c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016810:	b2da      	uxtb	r2, r3
 8016812:	69fb      	ldr	r3, [r7, #28]
 8016814:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8016816:	69fb      	ldr	r3, [r7, #28]
 8016818:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801681c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801681e:	68fb      	ldr	r3, [r7, #12]
 8016820:	891b      	ldrh	r3, [r3, #8]
 8016822:	4618      	mov	r0, r3
 8016824:	f7f6 faa2 	bl	800cd6c <lwip_htons>
 8016828:	4603      	mov	r3, r0
 801682a:	461a      	mov	r2, r3
 801682c:	69fb      	ldr	r3, [r7, #28]
 801682e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8016830:	69fb      	ldr	r3, [r7, #28]
 8016832:	2200      	movs	r2, #0
 8016834:	719a      	strb	r2, [r3, #6]
 8016836:	2200      	movs	r2, #0
 8016838:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801683a:	4b2a      	ldr	r3, [pc, #168]	; (80168e4 <ip4_output_if_src+0x154>)
 801683c:	881b      	ldrh	r3, [r3, #0]
 801683e:	4618      	mov	r0, r3
 8016840:	f7f6 fa94 	bl	800cd6c <lwip_htons>
 8016844:	4603      	mov	r3, r0
 8016846:	461a      	mov	r2, r3
 8016848:	69fb      	ldr	r3, [r7, #28]
 801684a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801684c:	4b25      	ldr	r3, [pc, #148]	; (80168e4 <ip4_output_if_src+0x154>)
 801684e:	881b      	ldrh	r3, [r3, #0]
 8016850:	3301      	adds	r3, #1
 8016852:	b29a      	uxth	r2, r3
 8016854:	4b23      	ldr	r3, [pc, #140]	; (80168e4 <ip4_output_if_src+0x154>)
 8016856:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8016858:	68bb      	ldr	r3, [r7, #8]
 801685a:	2b00      	cmp	r3, #0
 801685c:	d104      	bne.n	8016868 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801685e:	4b22      	ldr	r3, [pc, #136]	; (80168e8 <ip4_output_if_src+0x158>)
 8016860:	681a      	ldr	r2, [r3, #0]
 8016862:	69fb      	ldr	r3, [r7, #28]
 8016864:	60da      	str	r2, [r3, #12]
 8016866:	e003      	b.n	8016870 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8016868:	68bb      	ldr	r3, [r7, #8]
 801686a:	681a      	ldr	r2, [r3, #0]
 801686c:	69fb      	ldr	r3, [r7, #28]
 801686e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8016870:	69fb      	ldr	r3, [r7, #28]
 8016872:	2200      	movs	r2, #0
 8016874:	729a      	strb	r2, [r3, #10]
 8016876:	2200      	movs	r2, #0
 8016878:	72da      	strb	r2, [r3, #11]
 801687a:	e00f      	b.n	801689c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801687c:	68fb      	ldr	r3, [r7, #12]
 801687e:	895b      	ldrh	r3, [r3, #10]
 8016880:	2b13      	cmp	r3, #19
 8016882:	d802      	bhi.n	801688a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016884:	f06f 0301 	mvn.w	r3, #1
 8016888:	e020      	b.n	80168cc <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801688a:	68fb      	ldr	r3, [r7, #12]
 801688c:	685b      	ldr	r3, [r3, #4]
 801688e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8016890:	69fb      	ldr	r3, [r7, #28]
 8016892:	691b      	ldr	r3, [r3, #16]
 8016894:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8016896:	f107 0314 	add.w	r3, r7, #20
 801689a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801689c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801689e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	d00c      	beq.n	80168be <ip4_output_if_src+0x12e>
 80168a4:	68fb      	ldr	r3, [r7, #12]
 80168a6:	891a      	ldrh	r2, [r3, #8]
 80168a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80168ac:	429a      	cmp	r2, r3
 80168ae:	d906      	bls.n	80168be <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80168b0:	687a      	ldr	r2, [r7, #4]
 80168b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80168b4:	68f8      	ldr	r0, [r7, #12]
 80168b6:	f000 fddf 	bl	8017478 <ip4_frag>
 80168ba:	4603      	mov	r3, r0
 80168bc:	e006      	b.n	80168cc <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80168be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168c0:	695b      	ldr	r3, [r3, #20]
 80168c2:	687a      	ldr	r2, [r7, #4]
 80168c4:	68f9      	ldr	r1, [r7, #12]
 80168c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80168c8:	4798      	blx	r3
 80168ca:	4603      	mov	r3, r0
}
 80168cc:	4618      	mov	r0, r3
 80168ce:	3720      	adds	r7, #32
 80168d0:	46bd      	mov	sp, r7
 80168d2:	bd80      	pop	{r7, pc}
 80168d4:	0801d814 	.word	0x0801d814
 80168d8:	0801d848 	.word	0x0801d848
 80168dc:	0801d854 	.word	0x0801d854
 80168e0:	0801d87c 	.word	0x0801d87c
 80168e4:	20000b8a 	.word	0x20000b8a
 80168e8:	0801de70 	.word	0x0801de70

080168ec <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80168ec:	b480      	push	{r7}
 80168ee:	b085      	sub	sp, #20
 80168f0:	af00      	add	r7, sp, #0
 80168f2:	6078      	str	r0, [r7, #4]
 80168f4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016900:	d002      	beq.n	8016908 <ip4_addr_isbroadcast_u32+0x1c>
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	2b00      	cmp	r3, #0
 8016906:	d101      	bne.n	801690c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8016908:	2301      	movs	r3, #1
 801690a:	e02a      	b.n	8016962 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801690c:	683b      	ldr	r3, [r7, #0]
 801690e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016912:	f003 0302 	and.w	r3, r3, #2
 8016916:	2b00      	cmp	r3, #0
 8016918:	d101      	bne.n	801691e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801691a:	2300      	movs	r3, #0
 801691c:	e021      	b.n	8016962 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801691e:	683b      	ldr	r3, [r7, #0]
 8016920:	3304      	adds	r3, #4
 8016922:	681b      	ldr	r3, [r3, #0]
 8016924:	687a      	ldr	r2, [r7, #4]
 8016926:	429a      	cmp	r2, r3
 8016928:	d101      	bne.n	801692e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801692a:	2300      	movs	r3, #0
 801692c:	e019      	b.n	8016962 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801692e:	68fa      	ldr	r2, [r7, #12]
 8016930:	683b      	ldr	r3, [r7, #0]
 8016932:	3304      	adds	r3, #4
 8016934:	681b      	ldr	r3, [r3, #0]
 8016936:	405a      	eors	r2, r3
 8016938:	683b      	ldr	r3, [r7, #0]
 801693a:	3308      	adds	r3, #8
 801693c:	681b      	ldr	r3, [r3, #0]
 801693e:	4013      	ands	r3, r2
 8016940:	2b00      	cmp	r3, #0
 8016942:	d10d      	bne.n	8016960 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016944:	683b      	ldr	r3, [r7, #0]
 8016946:	3308      	adds	r3, #8
 8016948:	681b      	ldr	r3, [r3, #0]
 801694a:	43da      	mvns	r2, r3
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8016950:	683b      	ldr	r3, [r7, #0]
 8016952:	3308      	adds	r3, #8
 8016954:	681b      	ldr	r3, [r3, #0]
 8016956:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016958:	429a      	cmp	r2, r3
 801695a:	d101      	bne.n	8016960 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801695c:	2301      	movs	r3, #1
 801695e:	e000      	b.n	8016962 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8016960:	2300      	movs	r3, #0
  }
}
 8016962:	4618      	mov	r0, r3
 8016964:	3714      	adds	r7, #20
 8016966:	46bd      	mov	sp, r7
 8016968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801696c:	4770      	bx	lr
	...

08016970 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8016970:	b580      	push	{r7, lr}
 8016972:	b082      	sub	sp, #8
 8016974:	af00      	add	r7, sp, #0
 8016976:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8016978:	2210      	movs	r2, #16
 801697a:	4904      	ldr	r1, [pc, #16]	; (801698c <ip4addr_ntoa+0x1c>)
 801697c:	6878      	ldr	r0, [r7, #4]
 801697e:	f000 f807 	bl	8016990 <ip4addr_ntoa_r>
 8016982:	4603      	mov	r3, r0
}
 8016984:	4618      	mov	r0, r3
 8016986:	3708      	adds	r7, #8
 8016988:	46bd      	mov	sp, r7
 801698a:	bd80      	pop	{r7, pc}
 801698c:	20000b8c 	.word	0x20000b8c

08016990 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8016990:	b480      	push	{r7}
 8016992:	b08d      	sub	sp, #52	; 0x34
 8016994:	af00      	add	r7, sp, #0
 8016996:	60f8      	str	r0, [r7, #12]
 8016998:	60b9      	str	r1, [r7, #8]
 801699a:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 801699c:	2300      	movs	r3, #0
 801699e:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 80169a0:	68fb      	ldr	r3, [r7, #12]
 80169a2:	681b      	ldr	r3, [r3, #0]
 80169a4:	61bb      	str	r3, [r7, #24]

  rp = buf;
 80169a6:	68bb      	ldr	r3, [r7, #8]
 80169a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 80169aa:	f107 0318 	add.w	r3, r7, #24
 80169ae:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 80169b0:	2300      	movs	r3, #0
 80169b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80169b6:	e059      	b.n	8016a6c <ip4addr_ntoa_r+0xdc>
    i = 0;
 80169b8:	2300      	movs	r3, #0
 80169ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 80169be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169c0:	781a      	ldrb	r2, [r3, #0]
 80169c2:	4b33      	ldr	r3, [pc, #204]	; (8016a90 <ip4addr_ntoa_r+0x100>)
 80169c4:	fba3 1302 	umull	r1, r3, r3, r2
 80169c8:	08d9      	lsrs	r1, r3, #3
 80169ca:	460b      	mov	r3, r1
 80169cc:	009b      	lsls	r3, r3, #2
 80169ce:	440b      	add	r3, r1
 80169d0:	005b      	lsls	r3, r3, #1
 80169d2:	1ad3      	subs	r3, r2, r3
 80169d4:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 80169d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169d8:	781b      	ldrb	r3, [r3, #0]
 80169da:	4a2d      	ldr	r2, [pc, #180]	; (8016a90 <ip4addr_ntoa_r+0x100>)
 80169dc:	fba2 2303 	umull	r2, r3, r2, r3
 80169e0:	08db      	lsrs	r3, r3, #3
 80169e2:	b2da      	uxtb	r2, r3
 80169e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169e6:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 80169e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80169ec:	1c5a      	adds	r2, r3, #1
 80169ee:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 80169f2:	4619      	mov	r1, r3
 80169f4:	7ffb      	ldrb	r3, [r7, #31]
 80169f6:	3330      	adds	r3, #48	; 0x30
 80169f8:	b2da      	uxtb	r2, r3
 80169fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80169fe:	440b      	add	r3, r1
 8016a00:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8016a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a06:	781b      	ldrb	r3, [r3, #0]
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d1d8      	bne.n	80169be <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8016a0c:	e012      	b.n	8016a34 <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 8016a0e:	6a3b      	ldr	r3, [r7, #32]
 8016a10:	1c5a      	adds	r2, r3, #1
 8016a12:	623a      	str	r2, [r7, #32]
 8016a14:	687a      	ldr	r2, [r7, #4]
 8016a16:	429a      	cmp	r2, r3
 8016a18:	dc01      	bgt.n	8016a1e <ip4addr_ntoa_r+0x8e>
        return NULL;
 8016a1a:	2300      	movs	r3, #0
 8016a1c:	e031      	b.n	8016a82 <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 8016a1e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8016a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a24:	1c59      	adds	r1, r3, #1
 8016a26:	62f9      	str	r1, [r7, #44]	; 0x2c
 8016a28:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8016a2c:	440a      	add	r2, r1
 8016a2e:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8016a32:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8016a34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016a38:	1e5a      	subs	r2, r3, #1
 8016a3a:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	d1e5      	bne.n	8016a0e <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8016a42:	6a3b      	ldr	r3, [r7, #32]
 8016a44:	1c5a      	adds	r2, r3, #1
 8016a46:	623a      	str	r2, [r7, #32]
 8016a48:	687a      	ldr	r2, [r7, #4]
 8016a4a:	429a      	cmp	r2, r3
 8016a4c:	dc01      	bgt.n	8016a52 <ip4addr_ntoa_r+0xc2>
      return NULL;
 8016a4e:	2300      	movs	r3, #0
 8016a50:	e017      	b.n	8016a82 <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 8016a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a54:	1c5a      	adds	r2, r3, #1
 8016a56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016a58:	222e      	movs	r2, #46	; 0x2e
 8016a5a:	701a      	strb	r2, [r3, #0]
    ap++;
 8016a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a5e:	3301      	adds	r3, #1
 8016a60:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8016a62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016a66:	3301      	adds	r3, #1
 8016a68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016a6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016a70:	2b03      	cmp	r3, #3
 8016a72:	d9a1      	bls.n	80169b8 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8016a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a76:	3b01      	subs	r3, #1
 8016a78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a7c:	2200      	movs	r2, #0
 8016a7e:	701a      	strb	r2, [r3, #0]
  return buf;
 8016a80:	68bb      	ldr	r3, [r7, #8]
}
 8016a82:	4618      	mov	r0, r3
 8016a84:	3734      	adds	r7, #52	; 0x34
 8016a86:	46bd      	mov	sp, r7
 8016a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a8c:	4770      	bx	lr
 8016a8e:	bf00      	nop
 8016a90:	cccccccd 	.word	0xcccccccd

08016a94 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8016a94:	b580      	push	{r7, lr}
 8016a96:	b084      	sub	sp, #16
 8016a98:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8016a9a:	2300      	movs	r3, #0
 8016a9c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8016a9e:	4b12      	ldr	r3, [pc, #72]	; (8016ae8 <ip_reass_tmr+0x54>)
 8016aa0:	681b      	ldr	r3, [r3, #0]
 8016aa2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8016aa4:	e018      	b.n	8016ad8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8016aa6:	68fb      	ldr	r3, [r7, #12]
 8016aa8:	7fdb      	ldrb	r3, [r3, #31]
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d00b      	beq.n	8016ac6 <ip_reass_tmr+0x32>
      r->timer--;
 8016aae:	68fb      	ldr	r3, [r7, #12]
 8016ab0:	7fdb      	ldrb	r3, [r3, #31]
 8016ab2:	3b01      	subs	r3, #1
 8016ab4:	b2da      	uxtb	r2, r3
 8016ab6:	68fb      	ldr	r3, [r7, #12]
 8016ab8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8016aba:	68fb      	ldr	r3, [r7, #12]
 8016abc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8016abe:	68fb      	ldr	r3, [r7, #12]
 8016ac0:	681b      	ldr	r3, [r3, #0]
 8016ac2:	60fb      	str	r3, [r7, #12]
 8016ac4:	e008      	b.n	8016ad8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8016ac6:	68fb      	ldr	r3, [r7, #12]
 8016ac8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8016aca:	68fb      	ldr	r3, [r7, #12]
 8016acc:	681b      	ldr	r3, [r3, #0]
 8016ace:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8016ad0:	68b9      	ldr	r1, [r7, #8]
 8016ad2:	6878      	ldr	r0, [r7, #4]
 8016ad4:	f000 f80a 	bl	8016aec <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8016ad8:	68fb      	ldr	r3, [r7, #12]
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	d1e3      	bne.n	8016aa6 <ip_reass_tmr+0x12>
    }
  }
}
 8016ade:	bf00      	nop
 8016ae0:	bf00      	nop
 8016ae2:	3710      	adds	r7, #16
 8016ae4:	46bd      	mov	sp, r7
 8016ae6:	bd80      	pop	{r7, pc}
 8016ae8:	20000b9c 	.word	0x20000b9c

08016aec <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016aec:	b580      	push	{r7, lr}
 8016aee:	b088      	sub	sp, #32
 8016af0:	af00      	add	r7, sp, #0
 8016af2:	6078      	str	r0, [r7, #4]
 8016af4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8016af6:	2300      	movs	r3, #0
 8016af8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8016afa:	683a      	ldr	r2, [r7, #0]
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	429a      	cmp	r2, r3
 8016b00:	d105      	bne.n	8016b0e <ip_reass_free_complete_datagram+0x22>
 8016b02:	4b45      	ldr	r3, [pc, #276]	; (8016c18 <ip_reass_free_complete_datagram+0x12c>)
 8016b04:	22ab      	movs	r2, #171	; 0xab
 8016b06:	4945      	ldr	r1, [pc, #276]	; (8016c1c <ip_reass_free_complete_datagram+0x130>)
 8016b08:	4845      	ldr	r0, [pc, #276]	; (8016c20 <ip_reass_free_complete_datagram+0x134>)
 8016b0a:	f001 fa4f 	bl	8017fac <iprintf>
  if (prev != NULL) {
 8016b0e:	683b      	ldr	r3, [r7, #0]
 8016b10:	2b00      	cmp	r3, #0
 8016b12:	d00a      	beq.n	8016b2a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8016b14:	683b      	ldr	r3, [r7, #0]
 8016b16:	681b      	ldr	r3, [r3, #0]
 8016b18:	687a      	ldr	r2, [r7, #4]
 8016b1a:	429a      	cmp	r2, r3
 8016b1c:	d005      	beq.n	8016b2a <ip_reass_free_complete_datagram+0x3e>
 8016b1e:	4b3e      	ldr	r3, [pc, #248]	; (8016c18 <ip_reass_free_complete_datagram+0x12c>)
 8016b20:	22ad      	movs	r2, #173	; 0xad
 8016b22:	4940      	ldr	r1, [pc, #256]	; (8016c24 <ip_reass_free_complete_datagram+0x138>)
 8016b24:	483e      	ldr	r0, [pc, #248]	; (8016c20 <ip_reass_free_complete_datagram+0x134>)
 8016b26:	f001 fa41 	bl	8017fac <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	685b      	ldr	r3, [r3, #4]
 8016b2e:	685b      	ldr	r3, [r3, #4]
 8016b30:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8016b32:	697b      	ldr	r3, [r7, #20]
 8016b34:	889b      	ldrh	r3, [r3, #4]
 8016b36:	b29b      	uxth	r3, r3
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d12a      	bne.n	8016b92 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	685b      	ldr	r3, [r3, #4]
 8016b40:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8016b42:	697b      	ldr	r3, [r7, #20]
 8016b44:	681a      	ldr	r2, [r3, #0]
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8016b4a:	69bb      	ldr	r3, [r7, #24]
 8016b4c:	6858      	ldr	r0, [r3, #4]
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	3308      	adds	r3, #8
 8016b52:	2214      	movs	r2, #20
 8016b54:	4619      	mov	r1, r3
 8016b56:	f001 f94f 	bl	8017df8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8016b5a:	2101      	movs	r1, #1
 8016b5c:	69b8      	ldr	r0, [r7, #24]
 8016b5e:	f7ff fbb5 	bl	80162cc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8016b62:	69b8      	ldr	r0, [r7, #24]
 8016b64:	f7f7 fc3e 	bl	800e3e4 <pbuf_clen>
 8016b68:	4603      	mov	r3, r0
 8016b6a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016b6c:	8bfa      	ldrh	r2, [r7, #30]
 8016b6e:	8a7b      	ldrh	r3, [r7, #18]
 8016b70:	4413      	add	r3, r2
 8016b72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016b76:	db05      	blt.n	8016b84 <ip_reass_free_complete_datagram+0x98>
 8016b78:	4b27      	ldr	r3, [pc, #156]	; (8016c18 <ip_reass_free_complete_datagram+0x12c>)
 8016b7a:	22bc      	movs	r2, #188	; 0xbc
 8016b7c:	492a      	ldr	r1, [pc, #168]	; (8016c28 <ip_reass_free_complete_datagram+0x13c>)
 8016b7e:	4828      	ldr	r0, [pc, #160]	; (8016c20 <ip_reass_free_complete_datagram+0x134>)
 8016b80:	f001 fa14 	bl	8017fac <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016b84:	8bfa      	ldrh	r2, [r7, #30]
 8016b86:	8a7b      	ldrh	r3, [r7, #18]
 8016b88:	4413      	add	r3, r2
 8016b8a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8016b8c:	69b8      	ldr	r0, [r7, #24]
 8016b8e:	f7f7 fba1 	bl	800e2d4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8016b92:	687b      	ldr	r3, [r7, #4]
 8016b94:	685b      	ldr	r3, [r3, #4]
 8016b96:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8016b98:	e01f      	b.n	8016bda <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8016b9a:	69bb      	ldr	r3, [r7, #24]
 8016b9c:	685b      	ldr	r3, [r3, #4]
 8016b9e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016ba0:	69bb      	ldr	r3, [r7, #24]
 8016ba2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8016ba4:	697b      	ldr	r3, [r7, #20]
 8016ba6:	681b      	ldr	r3, [r3, #0]
 8016ba8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8016baa:	68f8      	ldr	r0, [r7, #12]
 8016bac:	f7f7 fc1a 	bl	800e3e4 <pbuf_clen>
 8016bb0:	4603      	mov	r3, r0
 8016bb2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016bb4:	8bfa      	ldrh	r2, [r7, #30]
 8016bb6:	8a7b      	ldrh	r3, [r7, #18]
 8016bb8:	4413      	add	r3, r2
 8016bba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016bbe:	db05      	blt.n	8016bcc <ip_reass_free_complete_datagram+0xe0>
 8016bc0:	4b15      	ldr	r3, [pc, #84]	; (8016c18 <ip_reass_free_complete_datagram+0x12c>)
 8016bc2:	22cc      	movs	r2, #204	; 0xcc
 8016bc4:	4918      	ldr	r1, [pc, #96]	; (8016c28 <ip_reass_free_complete_datagram+0x13c>)
 8016bc6:	4816      	ldr	r0, [pc, #88]	; (8016c20 <ip_reass_free_complete_datagram+0x134>)
 8016bc8:	f001 f9f0 	bl	8017fac <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016bcc:	8bfa      	ldrh	r2, [r7, #30]
 8016bce:	8a7b      	ldrh	r3, [r7, #18]
 8016bd0:	4413      	add	r3, r2
 8016bd2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016bd4:	68f8      	ldr	r0, [r7, #12]
 8016bd6:	f7f7 fb7d 	bl	800e2d4 <pbuf_free>
  while (p != NULL) {
 8016bda:	69bb      	ldr	r3, [r7, #24]
 8016bdc:	2b00      	cmp	r3, #0
 8016bde:	d1dc      	bne.n	8016b9a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8016be0:	6839      	ldr	r1, [r7, #0]
 8016be2:	6878      	ldr	r0, [r7, #4]
 8016be4:	f000 f8c2 	bl	8016d6c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8016be8:	4b10      	ldr	r3, [pc, #64]	; (8016c2c <ip_reass_free_complete_datagram+0x140>)
 8016bea:	881b      	ldrh	r3, [r3, #0]
 8016bec:	8bfa      	ldrh	r2, [r7, #30]
 8016bee:	429a      	cmp	r2, r3
 8016bf0:	d905      	bls.n	8016bfe <ip_reass_free_complete_datagram+0x112>
 8016bf2:	4b09      	ldr	r3, [pc, #36]	; (8016c18 <ip_reass_free_complete_datagram+0x12c>)
 8016bf4:	22d2      	movs	r2, #210	; 0xd2
 8016bf6:	490e      	ldr	r1, [pc, #56]	; (8016c30 <ip_reass_free_complete_datagram+0x144>)
 8016bf8:	4809      	ldr	r0, [pc, #36]	; (8016c20 <ip_reass_free_complete_datagram+0x134>)
 8016bfa:	f001 f9d7 	bl	8017fac <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8016bfe:	4b0b      	ldr	r3, [pc, #44]	; (8016c2c <ip_reass_free_complete_datagram+0x140>)
 8016c00:	881a      	ldrh	r2, [r3, #0]
 8016c02:	8bfb      	ldrh	r3, [r7, #30]
 8016c04:	1ad3      	subs	r3, r2, r3
 8016c06:	b29a      	uxth	r2, r3
 8016c08:	4b08      	ldr	r3, [pc, #32]	; (8016c2c <ip_reass_free_complete_datagram+0x140>)
 8016c0a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8016c0c:	8bfb      	ldrh	r3, [r7, #30]
}
 8016c0e:	4618      	mov	r0, r3
 8016c10:	3720      	adds	r7, #32
 8016c12:	46bd      	mov	sp, r7
 8016c14:	bd80      	pop	{r7, pc}
 8016c16:	bf00      	nop
 8016c18:	0801d8ac 	.word	0x0801d8ac
 8016c1c:	0801d8e8 	.word	0x0801d8e8
 8016c20:	0801d8f4 	.word	0x0801d8f4
 8016c24:	0801d91c 	.word	0x0801d91c
 8016c28:	0801d930 	.word	0x0801d930
 8016c2c:	20000ba0 	.word	0x20000ba0
 8016c30:	0801d950 	.word	0x0801d950

08016c34 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8016c34:	b580      	push	{r7, lr}
 8016c36:	b08a      	sub	sp, #40	; 0x28
 8016c38:	af00      	add	r7, sp, #0
 8016c3a:	6078      	str	r0, [r7, #4]
 8016c3c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8016c3e:	2300      	movs	r3, #0
 8016c40:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8016c42:	2300      	movs	r3, #0
 8016c44:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8016c46:	2300      	movs	r3, #0
 8016c48:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8016c4a:	2300      	movs	r3, #0
 8016c4c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8016c4e:	2300      	movs	r3, #0
 8016c50:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8016c52:	4b28      	ldr	r3, [pc, #160]	; (8016cf4 <ip_reass_remove_oldest_datagram+0xc0>)
 8016c54:	681b      	ldr	r3, [r3, #0]
 8016c56:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016c58:	e030      	b.n	8016cbc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8016c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c5c:	695a      	ldr	r2, [r3, #20]
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	68db      	ldr	r3, [r3, #12]
 8016c62:	429a      	cmp	r2, r3
 8016c64:	d10c      	bne.n	8016c80 <ip_reass_remove_oldest_datagram+0x4c>
 8016c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c68:	699a      	ldr	r2, [r3, #24]
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	691b      	ldr	r3, [r3, #16]
 8016c6e:	429a      	cmp	r2, r3
 8016c70:	d106      	bne.n	8016c80 <ip_reass_remove_oldest_datagram+0x4c>
 8016c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c74:	899a      	ldrh	r2, [r3, #12]
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	889b      	ldrh	r3, [r3, #4]
 8016c7a:	b29b      	uxth	r3, r3
 8016c7c:	429a      	cmp	r2, r3
 8016c7e:	d014      	beq.n	8016caa <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8016c80:	693b      	ldr	r3, [r7, #16]
 8016c82:	3301      	adds	r3, #1
 8016c84:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8016c86:	6a3b      	ldr	r3, [r7, #32]
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	d104      	bne.n	8016c96 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8016c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c8e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016c90:	69fb      	ldr	r3, [r7, #28]
 8016c92:	61bb      	str	r3, [r7, #24]
 8016c94:	e009      	b.n	8016caa <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8016c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c98:	7fda      	ldrb	r2, [r3, #31]
 8016c9a:	6a3b      	ldr	r3, [r7, #32]
 8016c9c:	7fdb      	ldrb	r3, [r3, #31]
 8016c9e:	429a      	cmp	r2, r3
 8016ca0:	d803      	bhi.n	8016caa <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8016ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ca4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016ca6:	69fb      	ldr	r3, [r7, #28]
 8016ca8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8016caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cac:	681b      	ldr	r3, [r3, #0]
 8016cae:	2b00      	cmp	r3, #0
 8016cb0:	d001      	beq.n	8016cb6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8016cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cb4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8016cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cb8:	681b      	ldr	r3, [r3, #0]
 8016cba:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cbe:	2b00      	cmp	r3, #0
 8016cc0:	d1cb      	bne.n	8016c5a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8016cc2:	6a3b      	ldr	r3, [r7, #32]
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d008      	beq.n	8016cda <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016cc8:	69b9      	ldr	r1, [r7, #24]
 8016cca:	6a38      	ldr	r0, [r7, #32]
 8016ccc:	f7ff ff0e 	bl	8016aec <ip_reass_free_complete_datagram>
 8016cd0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8016cd2:	697a      	ldr	r2, [r7, #20]
 8016cd4:	68fb      	ldr	r3, [r7, #12]
 8016cd6:	4413      	add	r3, r2
 8016cd8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8016cda:	697a      	ldr	r2, [r7, #20]
 8016cdc:	683b      	ldr	r3, [r7, #0]
 8016cde:	429a      	cmp	r2, r3
 8016ce0:	da02      	bge.n	8016ce8 <ip_reass_remove_oldest_datagram+0xb4>
 8016ce2:	693b      	ldr	r3, [r7, #16]
 8016ce4:	2b01      	cmp	r3, #1
 8016ce6:	dcac      	bgt.n	8016c42 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016ce8:	697b      	ldr	r3, [r7, #20]
}
 8016cea:	4618      	mov	r0, r3
 8016cec:	3728      	adds	r7, #40	; 0x28
 8016cee:	46bd      	mov	sp, r7
 8016cf0:	bd80      	pop	{r7, pc}
 8016cf2:	bf00      	nop
 8016cf4:	20000b9c 	.word	0x20000b9c

08016cf8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016cf8:	b580      	push	{r7, lr}
 8016cfa:	b084      	sub	sp, #16
 8016cfc:	af00      	add	r7, sp, #0
 8016cfe:	6078      	str	r0, [r7, #4]
 8016d00:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016d02:	2004      	movs	r0, #4
 8016d04:	f7f6 fc88 	bl	800d618 <memp_malloc>
 8016d08:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8016d0a:	68fb      	ldr	r3, [r7, #12]
 8016d0c:	2b00      	cmp	r3, #0
 8016d0e:	d110      	bne.n	8016d32 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8016d10:	6839      	ldr	r1, [r7, #0]
 8016d12:	6878      	ldr	r0, [r7, #4]
 8016d14:	f7ff ff8e 	bl	8016c34 <ip_reass_remove_oldest_datagram>
 8016d18:	4602      	mov	r2, r0
 8016d1a:	683b      	ldr	r3, [r7, #0]
 8016d1c:	4293      	cmp	r3, r2
 8016d1e:	dc03      	bgt.n	8016d28 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016d20:	2004      	movs	r0, #4
 8016d22:	f7f6 fc79 	bl	800d618 <memp_malloc>
 8016d26:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016d28:	68fb      	ldr	r3, [r7, #12]
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	d101      	bne.n	8016d32 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8016d2e:	2300      	movs	r3, #0
 8016d30:	e016      	b.n	8016d60 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8016d32:	2220      	movs	r2, #32
 8016d34:	2100      	movs	r1, #0
 8016d36:	68f8      	ldr	r0, [r7, #12]
 8016d38:	f001 f886 	bl	8017e48 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8016d3c:	68fb      	ldr	r3, [r7, #12]
 8016d3e:	220f      	movs	r2, #15
 8016d40:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8016d42:	4b09      	ldr	r3, [pc, #36]	; (8016d68 <ip_reass_enqueue_new_datagram+0x70>)
 8016d44:	681a      	ldr	r2, [r3, #0]
 8016d46:	68fb      	ldr	r3, [r7, #12]
 8016d48:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8016d4a:	4a07      	ldr	r2, [pc, #28]	; (8016d68 <ip_reass_enqueue_new_datagram+0x70>)
 8016d4c:	68fb      	ldr	r3, [r7, #12]
 8016d4e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8016d50:	68fb      	ldr	r3, [r7, #12]
 8016d52:	3308      	adds	r3, #8
 8016d54:	2214      	movs	r2, #20
 8016d56:	6879      	ldr	r1, [r7, #4]
 8016d58:	4618      	mov	r0, r3
 8016d5a:	f001 f84d 	bl	8017df8 <memcpy>
  return ipr;
 8016d5e:	68fb      	ldr	r3, [r7, #12]
}
 8016d60:	4618      	mov	r0, r3
 8016d62:	3710      	adds	r7, #16
 8016d64:	46bd      	mov	sp, r7
 8016d66:	bd80      	pop	{r7, pc}
 8016d68:	20000b9c 	.word	0x20000b9c

08016d6c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016d6c:	b580      	push	{r7, lr}
 8016d6e:	b082      	sub	sp, #8
 8016d70:	af00      	add	r7, sp, #0
 8016d72:	6078      	str	r0, [r7, #4]
 8016d74:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8016d76:	4b10      	ldr	r3, [pc, #64]	; (8016db8 <ip_reass_dequeue_datagram+0x4c>)
 8016d78:	681b      	ldr	r3, [r3, #0]
 8016d7a:	687a      	ldr	r2, [r7, #4]
 8016d7c:	429a      	cmp	r2, r3
 8016d7e:	d104      	bne.n	8016d8a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	681b      	ldr	r3, [r3, #0]
 8016d84:	4a0c      	ldr	r2, [pc, #48]	; (8016db8 <ip_reass_dequeue_datagram+0x4c>)
 8016d86:	6013      	str	r3, [r2, #0]
 8016d88:	e00d      	b.n	8016da6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8016d8a:	683b      	ldr	r3, [r7, #0]
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d106      	bne.n	8016d9e <ip_reass_dequeue_datagram+0x32>
 8016d90:	4b0a      	ldr	r3, [pc, #40]	; (8016dbc <ip_reass_dequeue_datagram+0x50>)
 8016d92:	f240 1245 	movw	r2, #325	; 0x145
 8016d96:	490a      	ldr	r1, [pc, #40]	; (8016dc0 <ip_reass_dequeue_datagram+0x54>)
 8016d98:	480a      	ldr	r0, [pc, #40]	; (8016dc4 <ip_reass_dequeue_datagram+0x58>)
 8016d9a:	f001 f907 	bl	8017fac <iprintf>
    prev->next = ipr->next;
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	681a      	ldr	r2, [r3, #0]
 8016da2:	683b      	ldr	r3, [r7, #0]
 8016da4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8016da6:	6879      	ldr	r1, [r7, #4]
 8016da8:	2004      	movs	r0, #4
 8016daa:	f7f6 fc81 	bl	800d6b0 <memp_free>
}
 8016dae:	bf00      	nop
 8016db0:	3708      	adds	r7, #8
 8016db2:	46bd      	mov	sp, r7
 8016db4:	bd80      	pop	{r7, pc}
 8016db6:	bf00      	nop
 8016db8:	20000b9c 	.word	0x20000b9c
 8016dbc:	0801d8ac 	.word	0x0801d8ac
 8016dc0:	0801d974 	.word	0x0801d974
 8016dc4:	0801d8f4 	.word	0x0801d8f4

08016dc8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016dc8:	b580      	push	{r7, lr}
 8016dca:	b08c      	sub	sp, #48	; 0x30
 8016dcc:	af00      	add	r7, sp, #0
 8016dce:	60f8      	str	r0, [r7, #12]
 8016dd0:	60b9      	str	r1, [r7, #8]
 8016dd2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8016dd4:	2300      	movs	r3, #0
 8016dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016dd8:	2301      	movs	r3, #1
 8016dda:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016ddc:	68bb      	ldr	r3, [r7, #8]
 8016dde:	685b      	ldr	r3, [r3, #4]
 8016de0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016de2:	69fb      	ldr	r3, [r7, #28]
 8016de4:	885b      	ldrh	r3, [r3, #2]
 8016de6:	b29b      	uxth	r3, r3
 8016de8:	4618      	mov	r0, r3
 8016dea:	f7f5 ffbf 	bl	800cd6c <lwip_htons>
 8016dee:	4603      	mov	r3, r0
 8016df0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8016df2:	69fb      	ldr	r3, [r7, #28]
 8016df4:	781b      	ldrb	r3, [r3, #0]
 8016df6:	f003 030f 	and.w	r3, r3, #15
 8016dfa:	b2db      	uxtb	r3, r3
 8016dfc:	009b      	lsls	r3, r3, #2
 8016dfe:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8016e00:	7e7b      	ldrb	r3, [r7, #25]
 8016e02:	b29b      	uxth	r3, r3
 8016e04:	8b7a      	ldrh	r2, [r7, #26]
 8016e06:	429a      	cmp	r2, r3
 8016e08:	d202      	bcs.n	8016e10 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8016e0e:	e135      	b.n	801707c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8016e10:	7e7b      	ldrb	r3, [r7, #25]
 8016e12:	b29b      	uxth	r3, r3
 8016e14:	8b7a      	ldrh	r2, [r7, #26]
 8016e16:	1ad3      	subs	r3, r2, r3
 8016e18:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8016e1a:	69fb      	ldr	r3, [r7, #28]
 8016e1c:	88db      	ldrh	r3, [r3, #6]
 8016e1e:	b29b      	uxth	r3, r3
 8016e20:	4618      	mov	r0, r3
 8016e22:	f7f5 ffa3 	bl	800cd6c <lwip_htons>
 8016e26:	4603      	mov	r3, r0
 8016e28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016e2c:	b29b      	uxth	r3, r3
 8016e2e:	00db      	lsls	r3, r3, #3
 8016e30:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8016e32:	68bb      	ldr	r3, [r7, #8]
 8016e34:	685b      	ldr	r3, [r3, #4]
 8016e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8016e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e3a:	2200      	movs	r2, #0
 8016e3c:	701a      	strb	r2, [r3, #0]
 8016e3e:	2200      	movs	r2, #0
 8016e40:	705a      	strb	r2, [r3, #1]
 8016e42:	2200      	movs	r2, #0
 8016e44:	709a      	strb	r2, [r3, #2]
 8016e46:	2200      	movs	r2, #0
 8016e48:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8016e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e4c:	8afa      	ldrh	r2, [r7, #22]
 8016e4e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8016e50:	8afa      	ldrh	r2, [r7, #22]
 8016e52:	8b7b      	ldrh	r3, [r7, #26]
 8016e54:	4413      	add	r3, r2
 8016e56:	b29a      	uxth	r2, r3
 8016e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e5a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8016e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e5e:	88db      	ldrh	r3, [r3, #6]
 8016e60:	b29b      	uxth	r3, r3
 8016e62:	8afa      	ldrh	r2, [r7, #22]
 8016e64:	429a      	cmp	r2, r3
 8016e66:	d902      	bls.n	8016e6e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016e68:	f04f 33ff 	mov.w	r3, #4294967295
 8016e6c:	e106      	b.n	801707c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8016e6e:	68fb      	ldr	r3, [r7, #12]
 8016e70:	685b      	ldr	r3, [r3, #4]
 8016e72:	627b      	str	r3, [r7, #36]	; 0x24
 8016e74:	e068      	b.n	8016f48 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8016e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e78:	685b      	ldr	r3, [r3, #4]
 8016e7a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8016e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e7e:	889b      	ldrh	r3, [r3, #4]
 8016e80:	b29a      	uxth	r2, r3
 8016e82:	693b      	ldr	r3, [r7, #16]
 8016e84:	889b      	ldrh	r3, [r3, #4]
 8016e86:	b29b      	uxth	r3, r3
 8016e88:	429a      	cmp	r2, r3
 8016e8a:	d235      	bcs.n	8016ef8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016e90:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8016e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	d020      	beq.n	8016eda <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e9a:	889b      	ldrh	r3, [r3, #4]
 8016e9c:	b29a      	uxth	r2, r3
 8016e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ea0:	88db      	ldrh	r3, [r3, #6]
 8016ea2:	b29b      	uxth	r3, r3
 8016ea4:	429a      	cmp	r2, r3
 8016ea6:	d307      	bcc.n	8016eb8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016eaa:	88db      	ldrh	r3, [r3, #6]
 8016eac:	b29a      	uxth	r2, r3
 8016eae:	693b      	ldr	r3, [r7, #16]
 8016eb0:	889b      	ldrh	r3, [r3, #4]
 8016eb2:	b29b      	uxth	r3, r3
 8016eb4:	429a      	cmp	r2, r3
 8016eb6:	d902      	bls.n	8016ebe <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8016ebc:	e0de      	b.n	801707c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8016ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ec0:	68ba      	ldr	r2, [r7, #8]
 8016ec2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ec6:	88db      	ldrh	r3, [r3, #6]
 8016ec8:	b29a      	uxth	r2, r3
 8016eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ecc:	889b      	ldrh	r3, [r3, #4]
 8016ece:	b29b      	uxth	r3, r3
 8016ed0:	429a      	cmp	r2, r3
 8016ed2:	d03d      	beq.n	8016f50 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016ed4:	2300      	movs	r3, #0
 8016ed6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016ed8:	e03a      	b.n	8016f50 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8016eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016edc:	88db      	ldrh	r3, [r3, #6]
 8016ede:	b29a      	uxth	r2, r3
 8016ee0:	693b      	ldr	r3, [r7, #16]
 8016ee2:	889b      	ldrh	r3, [r3, #4]
 8016ee4:	b29b      	uxth	r3, r3
 8016ee6:	429a      	cmp	r2, r3
 8016ee8:	d902      	bls.n	8016ef0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016eea:	f04f 33ff 	mov.w	r3, #4294967295
 8016eee:	e0c5      	b.n	801707c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8016ef0:	68fb      	ldr	r3, [r7, #12]
 8016ef2:	68ba      	ldr	r2, [r7, #8]
 8016ef4:	605a      	str	r2, [r3, #4]
      break;
 8016ef6:	e02b      	b.n	8016f50 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016efa:	889b      	ldrh	r3, [r3, #4]
 8016efc:	b29a      	uxth	r2, r3
 8016efe:	693b      	ldr	r3, [r7, #16]
 8016f00:	889b      	ldrh	r3, [r3, #4]
 8016f02:	b29b      	uxth	r3, r3
 8016f04:	429a      	cmp	r2, r3
 8016f06:	d102      	bne.n	8016f0e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016f08:	f04f 33ff 	mov.w	r3, #4294967295
 8016f0c:	e0b6      	b.n	801707c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8016f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f10:	889b      	ldrh	r3, [r3, #4]
 8016f12:	b29a      	uxth	r2, r3
 8016f14:	693b      	ldr	r3, [r7, #16]
 8016f16:	88db      	ldrh	r3, [r3, #6]
 8016f18:	b29b      	uxth	r3, r3
 8016f1a:	429a      	cmp	r2, r3
 8016f1c:	d202      	bcs.n	8016f24 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8016f22:	e0ab      	b.n	801707c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	d009      	beq.n	8016f3e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8016f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f2c:	88db      	ldrh	r3, [r3, #6]
 8016f2e:	b29a      	uxth	r2, r3
 8016f30:	693b      	ldr	r3, [r7, #16]
 8016f32:	889b      	ldrh	r3, [r3, #4]
 8016f34:	b29b      	uxth	r3, r3
 8016f36:	429a      	cmp	r2, r3
 8016f38:	d001      	beq.n	8016f3e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016f3a:	2300      	movs	r3, #0
 8016f3c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8016f3e:	693b      	ldr	r3, [r7, #16]
 8016f40:	681b      	ldr	r3, [r3, #0]
 8016f42:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8016f44:	693b      	ldr	r3, [r7, #16]
 8016f46:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8016f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	d193      	bne.n	8016e76 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8016f4e:	e000      	b.n	8016f52 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8016f50:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8016f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	d12d      	bne.n	8016fb4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8016f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	d01c      	beq.n	8016f98 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8016f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f60:	88db      	ldrh	r3, [r3, #6]
 8016f62:	b29a      	uxth	r2, r3
 8016f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f66:	889b      	ldrh	r3, [r3, #4]
 8016f68:	b29b      	uxth	r3, r3
 8016f6a:	429a      	cmp	r2, r3
 8016f6c:	d906      	bls.n	8016f7c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8016f6e:	4b45      	ldr	r3, [pc, #276]	; (8017084 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016f70:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8016f74:	4944      	ldr	r1, [pc, #272]	; (8017088 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016f76:	4845      	ldr	r0, [pc, #276]	; (801708c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016f78:	f001 f818 	bl	8017fac <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f7e:	68ba      	ldr	r2, [r7, #8]
 8016f80:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8016f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f84:	88db      	ldrh	r3, [r3, #6]
 8016f86:	b29a      	uxth	r2, r3
 8016f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f8a:	889b      	ldrh	r3, [r3, #4]
 8016f8c:	b29b      	uxth	r3, r3
 8016f8e:	429a      	cmp	r2, r3
 8016f90:	d010      	beq.n	8016fb4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8016f92:	2300      	movs	r3, #0
 8016f94:	623b      	str	r3, [r7, #32]
 8016f96:	e00d      	b.n	8016fb4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016f98:	68fb      	ldr	r3, [r7, #12]
 8016f9a:	685b      	ldr	r3, [r3, #4]
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	d006      	beq.n	8016fae <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016fa0:	4b38      	ldr	r3, [pc, #224]	; (8017084 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016fa2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8016fa6:	493a      	ldr	r1, [pc, #232]	; (8017090 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016fa8:	4838      	ldr	r0, [pc, #224]	; (801708c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016faa:	f000 ffff 	bl	8017fac <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8016fae:	68fb      	ldr	r3, [r7, #12]
 8016fb0:	68ba      	ldr	r2, [r7, #8]
 8016fb2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	d105      	bne.n	8016fc6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8016fba:	68fb      	ldr	r3, [r7, #12]
 8016fbc:	7f9b      	ldrb	r3, [r3, #30]
 8016fbe:	f003 0301 	and.w	r3, r3, #1
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	d059      	beq.n	801707a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8016fc6:	6a3b      	ldr	r3, [r7, #32]
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	d04f      	beq.n	801706c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016fcc:	68fb      	ldr	r3, [r7, #12]
 8016fce:	685b      	ldr	r3, [r3, #4]
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	d006      	beq.n	8016fe2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8016fd4:	68fb      	ldr	r3, [r7, #12]
 8016fd6:	685b      	ldr	r3, [r3, #4]
 8016fd8:	685b      	ldr	r3, [r3, #4]
 8016fda:	889b      	ldrh	r3, [r3, #4]
 8016fdc:	b29b      	uxth	r3, r3
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	d002      	beq.n	8016fe8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8016fe2:	2300      	movs	r3, #0
 8016fe4:	623b      	str	r3, [r7, #32]
 8016fe6:	e041      	b.n	801706c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fea:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8016fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fee:	681b      	ldr	r3, [r3, #0]
 8016ff0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016ff2:	e012      	b.n	801701a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ff6:	685b      	ldr	r3, [r3, #4]
 8016ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8016ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ffc:	88db      	ldrh	r3, [r3, #6]
 8016ffe:	b29a      	uxth	r2, r3
 8017000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017002:	889b      	ldrh	r3, [r3, #4]
 8017004:	b29b      	uxth	r3, r3
 8017006:	429a      	cmp	r2, r3
 8017008:	d002      	beq.n	8017010 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801700a:	2300      	movs	r3, #0
 801700c:	623b      	str	r3, [r7, #32]
            break;
 801700e:	e007      	b.n	8017020 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8017010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017012:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8017014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017016:	681b      	ldr	r3, [r3, #0]
 8017018:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801701a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801701c:	2b00      	cmp	r3, #0
 801701e:	d1e9      	bne.n	8016ff4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8017020:	6a3b      	ldr	r3, [r7, #32]
 8017022:	2b00      	cmp	r3, #0
 8017024:	d022      	beq.n	801706c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8017026:	68fb      	ldr	r3, [r7, #12]
 8017028:	685b      	ldr	r3, [r3, #4]
 801702a:	2b00      	cmp	r3, #0
 801702c:	d106      	bne.n	801703c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801702e:	4b15      	ldr	r3, [pc, #84]	; (8017084 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017030:	f240 12df 	movw	r2, #479	; 0x1df
 8017034:	4917      	ldr	r1, [pc, #92]	; (8017094 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017036:	4815      	ldr	r0, [pc, #84]	; (801708c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017038:	f000 ffb8 	bl	8017fac <iprintf>
          LWIP_ASSERT("sanity check",
 801703c:	68fb      	ldr	r3, [r7, #12]
 801703e:	685b      	ldr	r3, [r3, #4]
 8017040:	685b      	ldr	r3, [r3, #4]
 8017042:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017044:	429a      	cmp	r2, r3
 8017046:	d106      	bne.n	8017056 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8017048:	4b0e      	ldr	r3, [pc, #56]	; (8017084 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801704a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801704e:	4911      	ldr	r1, [pc, #68]	; (8017094 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017050:	480e      	ldr	r0, [pc, #56]	; (801708c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017052:	f000 ffab 	bl	8017fac <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8017056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017058:	681b      	ldr	r3, [r3, #0]
 801705a:	2b00      	cmp	r3, #0
 801705c:	d006      	beq.n	801706c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801705e:	4b09      	ldr	r3, [pc, #36]	; (8017084 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017060:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8017064:	490c      	ldr	r1, [pc, #48]	; (8017098 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8017066:	4809      	ldr	r0, [pc, #36]	; (801708c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017068:	f000 ffa0 	bl	8017fac <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801706c:	6a3b      	ldr	r3, [r7, #32]
 801706e:	2b00      	cmp	r3, #0
 8017070:	bf14      	ite	ne
 8017072:	2301      	movne	r3, #1
 8017074:	2300      	moveq	r3, #0
 8017076:	b2db      	uxtb	r3, r3
 8017078:	e000      	b.n	801707c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801707a:	2300      	movs	r3, #0
}
 801707c:	4618      	mov	r0, r3
 801707e:	3730      	adds	r7, #48	; 0x30
 8017080:	46bd      	mov	sp, r7
 8017082:	bd80      	pop	{r7, pc}
 8017084:	0801d8ac 	.word	0x0801d8ac
 8017088:	0801d990 	.word	0x0801d990
 801708c:	0801d8f4 	.word	0x0801d8f4
 8017090:	0801d9b0 	.word	0x0801d9b0
 8017094:	0801d9e8 	.word	0x0801d9e8
 8017098:	0801d9f8 	.word	0x0801d9f8

0801709c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801709c:	b580      	push	{r7, lr}
 801709e:	b08e      	sub	sp, #56	; 0x38
 80170a0:	af00      	add	r7, sp, #0
 80170a2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	685b      	ldr	r3, [r3, #4]
 80170a8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80170aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170ac:	781b      	ldrb	r3, [r3, #0]
 80170ae:	f003 030f 	and.w	r3, r3, #15
 80170b2:	b2db      	uxtb	r3, r3
 80170b4:	009b      	lsls	r3, r3, #2
 80170b6:	b2db      	uxtb	r3, r3
 80170b8:	2b14      	cmp	r3, #20
 80170ba:	f040 8167 	bne.w	801738c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80170be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170c0:	88db      	ldrh	r3, [r3, #6]
 80170c2:	b29b      	uxth	r3, r3
 80170c4:	4618      	mov	r0, r3
 80170c6:	f7f5 fe51 	bl	800cd6c <lwip_htons>
 80170ca:	4603      	mov	r3, r0
 80170cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80170d0:	b29b      	uxth	r3, r3
 80170d2:	00db      	lsls	r3, r3, #3
 80170d4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80170d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170d8:	885b      	ldrh	r3, [r3, #2]
 80170da:	b29b      	uxth	r3, r3
 80170dc:	4618      	mov	r0, r3
 80170de:	f7f5 fe45 	bl	800cd6c <lwip_htons>
 80170e2:	4603      	mov	r3, r0
 80170e4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80170e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170e8:	781b      	ldrb	r3, [r3, #0]
 80170ea:	f003 030f 	and.w	r3, r3, #15
 80170ee:	b2db      	uxtb	r3, r3
 80170f0:	009b      	lsls	r3, r3, #2
 80170f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80170f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80170fa:	b29b      	uxth	r3, r3
 80170fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80170fe:	429a      	cmp	r2, r3
 8017100:	f0c0 8146 	bcc.w	8017390 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8017104:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017108:	b29b      	uxth	r3, r3
 801710a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801710c:	1ad3      	subs	r3, r2, r3
 801710e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8017110:	6878      	ldr	r0, [r7, #4]
 8017112:	f7f7 f967 	bl	800e3e4 <pbuf_clen>
 8017116:	4603      	mov	r3, r0
 8017118:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801711a:	4b9f      	ldr	r3, [pc, #636]	; (8017398 <ip4_reass+0x2fc>)
 801711c:	881b      	ldrh	r3, [r3, #0]
 801711e:	461a      	mov	r2, r3
 8017120:	8c3b      	ldrh	r3, [r7, #32]
 8017122:	4413      	add	r3, r2
 8017124:	2b0a      	cmp	r3, #10
 8017126:	dd10      	ble.n	801714a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017128:	8c3b      	ldrh	r3, [r7, #32]
 801712a:	4619      	mov	r1, r3
 801712c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801712e:	f7ff fd81 	bl	8016c34 <ip_reass_remove_oldest_datagram>
 8017132:	4603      	mov	r3, r0
 8017134:	2b00      	cmp	r3, #0
 8017136:	f000 812d 	beq.w	8017394 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801713a:	4b97      	ldr	r3, [pc, #604]	; (8017398 <ip4_reass+0x2fc>)
 801713c:	881b      	ldrh	r3, [r3, #0]
 801713e:	461a      	mov	r2, r3
 8017140:	8c3b      	ldrh	r3, [r7, #32]
 8017142:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017144:	2b0a      	cmp	r3, #10
 8017146:	f300 8125 	bgt.w	8017394 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801714a:	4b94      	ldr	r3, [pc, #592]	; (801739c <ip4_reass+0x300>)
 801714c:	681b      	ldr	r3, [r3, #0]
 801714e:	633b      	str	r3, [r7, #48]	; 0x30
 8017150:	e015      	b.n	801717e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8017152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017154:	695a      	ldr	r2, [r3, #20]
 8017156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017158:	68db      	ldr	r3, [r3, #12]
 801715a:	429a      	cmp	r2, r3
 801715c:	d10c      	bne.n	8017178 <ip4_reass+0xdc>
 801715e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017160:	699a      	ldr	r2, [r3, #24]
 8017162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017164:	691b      	ldr	r3, [r3, #16]
 8017166:	429a      	cmp	r2, r3
 8017168:	d106      	bne.n	8017178 <ip4_reass+0xdc>
 801716a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801716c:	899a      	ldrh	r2, [r3, #12]
 801716e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017170:	889b      	ldrh	r3, [r3, #4]
 8017172:	b29b      	uxth	r3, r3
 8017174:	429a      	cmp	r2, r3
 8017176:	d006      	beq.n	8017186 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801717a:	681b      	ldr	r3, [r3, #0]
 801717c:	633b      	str	r3, [r7, #48]	; 0x30
 801717e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017180:	2b00      	cmp	r3, #0
 8017182:	d1e6      	bne.n	8017152 <ip4_reass+0xb6>
 8017184:	e000      	b.n	8017188 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8017186:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8017188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801718a:	2b00      	cmp	r3, #0
 801718c:	d109      	bne.n	80171a2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801718e:	8c3b      	ldrh	r3, [r7, #32]
 8017190:	4619      	mov	r1, r3
 8017192:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017194:	f7ff fdb0 	bl	8016cf8 <ip_reass_enqueue_new_datagram>
 8017198:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801719a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801719c:	2b00      	cmp	r3, #0
 801719e:	d11c      	bne.n	80171da <ip4_reass+0x13e>
      goto nullreturn;
 80171a0:	e109      	b.n	80173b6 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80171a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171a4:	88db      	ldrh	r3, [r3, #6]
 80171a6:	b29b      	uxth	r3, r3
 80171a8:	4618      	mov	r0, r3
 80171aa:	f7f5 fddf 	bl	800cd6c <lwip_htons>
 80171ae:	4603      	mov	r3, r0
 80171b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80171b4:	2b00      	cmp	r3, #0
 80171b6:	d110      	bne.n	80171da <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80171b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171ba:	89db      	ldrh	r3, [r3, #14]
 80171bc:	4618      	mov	r0, r3
 80171be:	f7f5 fdd5 	bl	800cd6c <lwip_htons>
 80171c2:	4603      	mov	r3, r0
 80171c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80171c8:	2b00      	cmp	r3, #0
 80171ca:	d006      	beq.n	80171da <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80171cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171ce:	3308      	adds	r3, #8
 80171d0:	2214      	movs	r2, #20
 80171d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80171d4:	4618      	mov	r0, r3
 80171d6:	f000 fe0f 	bl	8017df8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80171da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171dc:	88db      	ldrh	r3, [r3, #6]
 80171de:	b29b      	uxth	r3, r3
 80171e0:	f003 0320 	and.w	r3, r3, #32
 80171e4:	2b00      	cmp	r3, #0
 80171e6:	bf0c      	ite	eq
 80171e8:	2301      	moveq	r3, #1
 80171ea:	2300      	movne	r3, #0
 80171ec:	b2db      	uxtb	r3, r3
 80171ee:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80171f0:	69fb      	ldr	r3, [r7, #28]
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d00e      	beq.n	8017214 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80171f6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80171f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80171fa:	4413      	add	r3, r2
 80171fc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80171fe:	8b7a      	ldrh	r2, [r7, #26]
 8017200:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017202:	429a      	cmp	r2, r3
 8017204:	f0c0 80a0 	bcc.w	8017348 <ip4_reass+0x2ac>
 8017208:	8b7b      	ldrh	r3, [r7, #26]
 801720a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801720e:	4293      	cmp	r3, r2
 8017210:	f200 809a 	bhi.w	8017348 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017214:	69fa      	ldr	r2, [r7, #28]
 8017216:	6879      	ldr	r1, [r7, #4]
 8017218:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801721a:	f7ff fdd5 	bl	8016dc8 <ip_reass_chain_frag_into_datagram_and_validate>
 801721e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017220:	697b      	ldr	r3, [r7, #20]
 8017222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017226:	f000 8091 	beq.w	801734c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801722a:	4b5b      	ldr	r3, [pc, #364]	; (8017398 <ip4_reass+0x2fc>)
 801722c:	881a      	ldrh	r2, [r3, #0]
 801722e:	8c3b      	ldrh	r3, [r7, #32]
 8017230:	4413      	add	r3, r2
 8017232:	b29a      	uxth	r2, r3
 8017234:	4b58      	ldr	r3, [pc, #352]	; (8017398 <ip4_reass+0x2fc>)
 8017236:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8017238:	69fb      	ldr	r3, [r7, #28]
 801723a:	2b00      	cmp	r3, #0
 801723c:	d00d      	beq.n	801725a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801723e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017240:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017242:	4413      	add	r3, r2
 8017244:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8017246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017248:	8a7a      	ldrh	r2, [r7, #18]
 801724a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801724c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801724e:	7f9b      	ldrb	r3, [r3, #30]
 8017250:	f043 0301 	orr.w	r3, r3, #1
 8017254:	b2da      	uxtb	r2, r3
 8017256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017258:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801725a:	697b      	ldr	r3, [r7, #20]
 801725c:	2b01      	cmp	r3, #1
 801725e:	d171      	bne.n	8017344 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8017260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017262:	8b9b      	ldrh	r3, [r3, #28]
 8017264:	3314      	adds	r3, #20
 8017266:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8017268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801726a:	685b      	ldr	r3, [r3, #4]
 801726c:	685b      	ldr	r3, [r3, #4]
 801726e:	681b      	ldr	r3, [r3, #0]
 8017270:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8017272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017274:	685b      	ldr	r3, [r3, #4]
 8017276:	685b      	ldr	r3, [r3, #4]
 8017278:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801727a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801727c:	3308      	adds	r3, #8
 801727e:	2214      	movs	r2, #20
 8017280:	4619      	mov	r1, r3
 8017282:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017284:	f000 fdb8 	bl	8017df8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8017288:	8a3b      	ldrh	r3, [r7, #16]
 801728a:	4618      	mov	r0, r3
 801728c:	f7f5 fd6e 	bl	800cd6c <lwip_htons>
 8017290:	4603      	mov	r3, r0
 8017292:	461a      	mov	r2, r3
 8017294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017296:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8017298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801729a:	2200      	movs	r2, #0
 801729c:	719a      	strb	r2, [r3, #6]
 801729e:	2200      	movs	r2, #0
 80172a0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80172a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172a4:	2200      	movs	r2, #0
 80172a6:	729a      	strb	r2, [r3, #10]
 80172a8:	2200      	movs	r2, #0
 80172aa:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80172ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172ae:	685b      	ldr	r3, [r3, #4]
 80172b0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80172b2:	e00d      	b.n	80172d0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80172b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80172b6:	685b      	ldr	r3, [r3, #4]
 80172b8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80172ba:	2114      	movs	r1, #20
 80172bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80172be:	f7f6 ff83 	bl	800e1c8 <pbuf_remove_header>
      pbuf_cat(p, r);
 80172c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80172c4:	6878      	ldr	r0, [r7, #4]
 80172c6:	f7f7 f8c7 	bl	800e458 <pbuf_cat>
      r = iprh->next_pbuf;
 80172ca:	68fb      	ldr	r3, [r7, #12]
 80172cc:	681b      	ldr	r3, [r3, #0]
 80172ce:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80172d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80172d2:	2b00      	cmp	r3, #0
 80172d4:	d1ee      	bne.n	80172b4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80172d6:	4b31      	ldr	r3, [pc, #196]	; (801739c <ip4_reass+0x300>)
 80172d8:	681b      	ldr	r3, [r3, #0]
 80172da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80172dc:	429a      	cmp	r2, r3
 80172de:	d102      	bne.n	80172e6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80172e0:	2300      	movs	r3, #0
 80172e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80172e4:	e010      	b.n	8017308 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80172e6:	4b2d      	ldr	r3, [pc, #180]	; (801739c <ip4_reass+0x300>)
 80172e8:	681b      	ldr	r3, [r3, #0]
 80172ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80172ec:	e007      	b.n	80172fe <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80172ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172f0:	681b      	ldr	r3, [r3, #0]
 80172f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80172f4:	429a      	cmp	r2, r3
 80172f6:	d006      	beq.n	8017306 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80172f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172fa:	681b      	ldr	r3, [r3, #0]
 80172fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80172fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017300:	2b00      	cmp	r3, #0
 8017302:	d1f4      	bne.n	80172ee <ip4_reass+0x252>
 8017304:	e000      	b.n	8017308 <ip4_reass+0x26c>
          break;
 8017306:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017308:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801730a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801730c:	f7ff fd2e 	bl	8016d6c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8017310:	6878      	ldr	r0, [r7, #4]
 8017312:	f7f7 f867 	bl	800e3e4 <pbuf_clen>
 8017316:	4603      	mov	r3, r0
 8017318:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801731a:	4b1f      	ldr	r3, [pc, #124]	; (8017398 <ip4_reass+0x2fc>)
 801731c:	881b      	ldrh	r3, [r3, #0]
 801731e:	8c3a      	ldrh	r2, [r7, #32]
 8017320:	429a      	cmp	r2, r3
 8017322:	d906      	bls.n	8017332 <ip4_reass+0x296>
 8017324:	4b1e      	ldr	r3, [pc, #120]	; (80173a0 <ip4_reass+0x304>)
 8017326:	f240 229b 	movw	r2, #667	; 0x29b
 801732a:	491e      	ldr	r1, [pc, #120]	; (80173a4 <ip4_reass+0x308>)
 801732c:	481e      	ldr	r0, [pc, #120]	; (80173a8 <ip4_reass+0x30c>)
 801732e:	f000 fe3d 	bl	8017fac <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8017332:	4b19      	ldr	r3, [pc, #100]	; (8017398 <ip4_reass+0x2fc>)
 8017334:	881a      	ldrh	r2, [r3, #0]
 8017336:	8c3b      	ldrh	r3, [r7, #32]
 8017338:	1ad3      	subs	r3, r2, r3
 801733a:	b29a      	uxth	r2, r3
 801733c:	4b16      	ldr	r3, [pc, #88]	; (8017398 <ip4_reass+0x2fc>)
 801733e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	e03c      	b.n	80173be <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8017344:	2300      	movs	r3, #0
 8017346:	e03a      	b.n	80173be <ip4_reass+0x322>
      goto nullreturn_ipr;
 8017348:	bf00      	nop
 801734a:	e000      	b.n	801734e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801734c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801734e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017350:	2b00      	cmp	r3, #0
 8017352:	d106      	bne.n	8017362 <ip4_reass+0x2c6>
 8017354:	4b12      	ldr	r3, [pc, #72]	; (80173a0 <ip4_reass+0x304>)
 8017356:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801735a:	4914      	ldr	r1, [pc, #80]	; (80173ac <ip4_reass+0x310>)
 801735c:	4812      	ldr	r0, [pc, #72]	; (80173a8 <ip4_reass+0x30c>)
 801735e:	f000 fe25 	bl	8017fac <iprintf>
  if (ipr->p == NULL) {
 8017362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017364:	685b      	ldr	r3, [r3, #4]
 8017366:	2b00      	cmp	r3, #0
 8017368:	d124      	bne.n	80173b4 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801736a:	4b0c      	ldr	r3, [pc, #48]	; (801739c <ip4_reass+0x300>)
 801736c:	681b      	ldr	r3, [r3, #0]
 801736e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017370:	429a      	cmp	r2, r3
 8017372:	d006      	beq.n	8017382 <ip4_reass+0x2e6>
 8017374:	4b0a      	ldr	r3, [pc, #40]	; (80173a0 <ip4_reass+0x304>)
 8017376:	f240 22ab 	movw	r2, #683	; 0x2ab
 801737a:	490d      	ldr	r1, [pc, #52]	; (80173b0 <ip4_reass+0x314>)
 801737c:	480a      	ldr	r0, [pc, #40]	; (80173a8 <ip4_reass+0x30c>)
 801737e:	f000 fe15 	bl	8017fac <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8017382:	2100      	movs	r1, #0
 8017384:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017386:	f7ff fcf1 	bl	8016d6c <ip_reass_dequeue_datagram>
 801738a:	e014      	b.n	80173b6 <ip4_reass+0x31a>
    goto nullreturn;
 801738c:	bf00      	nop
 801738e:	e012      	b.n	80173b6 <ip4_reass+0x31a>
    goto nullreturn;
 8017390:	bf00      	nop
 8017392:	e010      	b.n	80173b6 <ip4_reass+0x31a>
      goto nullreturn;
 8017394:	bf00      	nop
 8017396:	e00e      	b.n	80173b6 <ip4_reass+0x31a>
 8017398:	20000ba0 	.word	0x20000ba0
 801739c:	20000b9c 	.word	0x20000b9c
 80173a0:	0801d8ac 	.word	0x0801d8ac
 80173a4:	0801da1c 	.word	0x0801da1c
 80173a8:	0801d8f4 	.word	0x0801d8f4
 80173ac:	0801da38 	.word	0x0801da38
 80173b0:	0801da44 	.word	0x0801da44
  }

nullreturn:
 80173b4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80173b6:	6878      	ldr	r0, [r7, #4]
 80173b8:	f7f6 ff8c 	bl	800e2d4 <pbuf_free>
  return NULL;
 80173bc:	2300      	movs	r3, #0
}
 80173be:	4618      	mov	r0, r3
 80173c0:	3738      	adds	r7, #56	; 0x38
 80173c2:	46bd      	mov	sp, r7
 80173c4:	bd80      	pop	{r7, pc}
 80173c6:	bf00      	nop

080173c8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80173c8:	b580      	push	{r7, lr}
 80173ca:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80173cc:	2005      	movs	r0, #5
 80173ce:	f7f6 f923 	bl	800d618 <memp_malloc>
 80173d2:	4603      	mov	r3, r0
}
 80173d4:	4618      	mov	r0, r3
 80173d6:	bd80      	pop	{r7, pc}

080173d8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80173d8:	b580      	push	{r7, lr}
 80173da:	b082      	sub	sp, #8
 80173dc:	af00      	add	r7, sp, #0
 80173de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	2b00      	cmp	r3, #0
 80173e4:	d106      	bne.n	80173f4 <ip_frag_free_pbuf_custom_ref+0x1c>
 80173e6:	4b07      	ldr	r3, [pc, #28]	; (8017404 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80173e8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80173ec:	4906      	ldr	r1, [pc, #24]	; (8017408 <ip_frag_free_pbuf_custom_ref+0x30>)
 80173ee:	4807      	ldr	r0, [pc, #28]	; (801740c <ip_frag_free_pbuf_custom_ref+0x34>)
 80173f0:	f000 fddc 	bl	8017fac <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80173f4:	6879      	ldr	r1, [r7, #4]
 80173f6:	2005      	movs	r0, #5
 80173f8:	f7f6 f95a 	bl	800d6b0 <memp_free>
}
 80173fc:	bf00      	nop
 80173fe:	3708      	adds	r7, #8
 8017400:	46bd      	mov	sp, r7
 8017402:	bd80      	pop	{r7, pc}
 8017404:	0801d8ac 	.word	0x0801d8ac
 8017408:	0801da64 	.word	0x0801da64
 801740c:	0801d8f4 	.word	0x0801d8f4

08017410 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8017410:	b580      	push	{r7, lr}
 8017412:	b084      	sub	sp, #16
 8017414:	af00      	add	r7, sp, #0
 8017416:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801741c:	68fb      	ldr	r3, [r7, #12]
 801741e:	2b00      	cmp	r3, #0
 8017420:	d106      	bne.n	8017430 <ipfrag_free_pbuf_custom+0x20>
 8017422:	4b11      	ldr	r3, [pc, #68]	; (8017468 <ipfrag_free_pbuf_custom+0x58>)
 8017424:	f240 22ce 	movw	r2, #718	; 0x2ce
 8017428:	4910      	ldr	r1, [pc, #64]	; (801746c <ipfrag_free_pbuf_custom+0x5c>)
 801742a:	4811      	ldr	r0, [pc, #68]	; (8017470 <ipfrag_free_pbuf_custom+0x60>)
 801742c:	f000 fdbe 	bl	8017fac <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8017430:	68fa      	ldr	r2, [r7, #12]
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	429a      	cmp	r2, r3
 8017436:	d006      	beq.n	8017446 <ipfrag_free_pbuf_custom+0x36>
 8017438:	4b0b      	ldr	r3, [pc, #44]	; (8017468 <ipfrag_free_pbuf_custom+0x58>)
 801743a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801743e:	490d      	ldr	r1, [pc, #52]	; (8017474 <ipfrag_free_pbuf_custom+0x64>)
 8017440:	480b      	ldr	r0, [pc, #44]	; (8017470 <ipfrag_free_pbuf_custom+0x60>)
 8017442:	f000 fdb3 	bl	8017fac <iprintf>
  if (pcr->original != NULL) {
 8017446:	68fb      	ldr	r3, [r7, #12]
 8017448:	695b      	ldr	r3, [r3, #20]
 801744a:	2b00      	cmp	r3, #0
 801744c:	d004      	beq.n	8017458 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801744e:	68fb      	ldr	r3, [r7, #12]
 8017450:	695b      	ldr	r3, [r3, #20]
 8017452:	4618      	mov	r0, r3
 8017454:	f7f6 ff3e 	bl	800e2d4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8017458:	68f8      	ldr	r0, [r7, #12]
 801745a:	f7ff ffbd 	bl	80173d8 <ip_frag_free_pbuf_custom_ref>
}
 801745e:	bf00      	nop
 8017460:	3710      	adds	r7, #16
 8017462:	46bd      	mov	sp, r7
 8017464:	bd80      	pop	{r7, pc}
 8017466:	bf00      	nop
 8017468:	0801d8ac 	.word	0x0801d8ac
 801746c:	0801da70 	.word	0x0801da70
 8017470:	0801d8f4 	.word	0x0801d8f4
 8017474:	0801da7c 	.word	0x0801da7c

08017478 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8017478:	b580      	push	{r7, lr}
 801747a:	b094      	sub	sp, #80	; 0x50
 801747c:	af02      	add	r7, sp, #8
 801747e:	60f8      	str	r0, [r7, #12]
 8017480:	60b9      	str	r1, [r7, #8]
 8017482:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8017484:	2300      	movs	r3, #0
 8017486:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801748a:	68bb      	ldr	r3, [r7, #8]
 801748c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801748e:	3b14      	subs	r3, #20
 8017490:	2b00      	cmp	r3, #0
 8017492:	da00      	bge.n	8017496 <ip4_frag+0x1e>
 8017494:	3307      	adds	r3, #7
 8017496:	10db      	asrs	r3, r3, #3
 8017498:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801749a:	2314      	movs	r3, #20
 801749c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801749e:	68fb      	ldr	r3, [r7, #12]
 80174a0:	685b      	ldr	r3, [r3, #4]
 80174a2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80174a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80174a6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80174a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174aa:	781b      	ldrb	r3, [r3, #0]
 80174ac:	f003 030f 	and.w	r3, r3, #15
 80174b0:	b2db      	uxtb	r3, r3
 80174b2:	009b      	lsls	r3, r3, #2
 80174b4:	b2db      	uxtb	r3, r3
 80174b6:	2b14      	cmp	r3, #20
 80174b8:	d002      	beq.n	80174c0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80174ba:	f06f 0305 	mvn.w	r3, #5
 80174be:	e110      	b.n	80176e2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80174c0:	68fb      	ldr	r3, [r7, #12]
 80174c2:	895b      	ldrh	r3, [r3, #10]
 80174c4:	2b13      	cmp	r3, #19
 80174c6:	d809      	bhi.n	80174dc <ip4_frag+0x64>
 80174c8:	4b88      	ldr	r3, [pc, #544]	; (80176ec <ip4_frag+0x274>)
 80174ca:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80174ce:	4988      	ldr	r1, [pc, #544]	; (80176f0 <ip4_frag+0x278>)
 80174d0:	4888      	ldr	r0, [pc, #544]	; (80176f4 <ip4_frag+0x27c>)
 80174d2:	f000 fd6b 	bl	8017fac <iprintf>
 80174d6:	f06f 0305 	mvn.w	r3, #5
 80174da:	e102      	b.n	80176e2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80174dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174de:	88db      	ldrh	r3, [r3, #6]
 80174e0:	b29b      	uxth	r3, r3
 80174e2:	4618      	mov	r0, r3
 80174e4:	f7f5 fc42 	bl	800cd6c <lwip_htons>
 80174e8:	4603      	mov	r3, r0
 80174ea:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80174ec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80174ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80174f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80174f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80174f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80174fc:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80174fe:	68fb      	ldr	r3, [r7, #12]
 8017500:	891b      	ldrh	r3, [r3, #8]
 8017502:	3b14      	subs	r3, #20
 8017504:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8017508:	e0e1      	b.n	80176ce <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801750a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801750c:	00db      	lsls	r3, r3, #3
 801750e:	b29b      	uxth	r3, r3
 8017510:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017514:	4293      	cmp	r3, r2
 8017516:	bf28      	it	cs
 8017518:	4613      	movcs	r3, r2
 801751a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801751c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017520:	2114      	movs	r1, #20
 8017522:	200e      	movs	r0, #14
 8017524:	f7f6 fbf2 	bl	800dd0c <pbuf_alloc>
 8017528:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801752a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801752c:	2b00      	cmp	r3, #0
 801752e:	f000 80d5 	beq.w	80176dc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8017532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017534:	895b      	ldrh	r3, [r3, #10]
 8017536:	2b13      	cmp	r3, #19
 8017538:	d806      	bhi.n	8017548 <ip4_frag+0xd0>
 801753a:	4b6c      	ldr	r3, [pc, #432]	; (80176ec <ip4_frag+0x274>)
 801753c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8017540:	496d      	ldr	r1, [pc, #436]	; (80176f8 <ip4_frag+0x280>)
 8017542:	486c      	ldr	r0, [pc, #432]	; (80176f4 <ip4_frag+0x27c>)
 8017544:	f000 fd32 	bl	8017fac <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8017548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801754a:	685b      	ldr	r3, [r3, #4]
 801754c:	2214      	movs	r2, #20
 801754e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017550:	4618      	mov	r0, r3
 8017552:	f000 fc51 	bl	8017df8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8017556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017558:	685b      	ldr	r3, [r3, #4]
 801755a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801755c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801755e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8017562:	e064      	b.n	801762e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8017564:	68fb      	ldr	r3, [r7, #12]
 8017566:	895a      	ldrh	r2, [r3, #10]
 8017568:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801756a:	1ad3      	subs	r3, r2, r3
 801756c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801756e:	68fb      	ldr	r3, [r7, #12]
 8017570:	895b      	ldrh	r3, [r3, #10]
 8017572:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017574:	429a      	cmp	r2, r3
 8017576:	d906      	bls.n	8017586 <ip4_frag+0x10e>
 8017578:	4b5c      	ldr	r3, [pc, #368]	; (80176ec <ip4_frag+0x274>)
 801757a:	f240 322d 	movw	r2, #813	; 0x32d
 801757e:	495f      	ldr	r1, [pc, #380]	; (80176fc <ip4_frag+0x284>)
 8017580:	485c      	ldr	r0, [pc, #368]	; (80176f4 <ip4_frag+0x27c>)
 8017582:	f000 fd13 	bl	8017fac <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8017586:	8bfa      	ldrh	r2, [r7, #30]
 8017588:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801758c:	4293      	cmp	r3, r2
 801758e:	bf28      	it	cs
 8017590:	4613      	movcs	r3, r2
 8017592:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8017596:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801759a:	2b00      	cmp	r3, #0
 801759c:	d105      	bne.n	80175aa <ip4_frag+0x132>
        poff = 0;
 801759e:	2300      	movs	r3, #0
 80175a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80175a2:	68fb      	ldr	r3, [r7, #12]
 80175a4:	681b      	ldr	r3, [r3, #0]
 80175a6:	60fb      	str	r3, [r7, #12]
        continue;
 80175a8:	e041      	b.n	801762e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80175aa:	f7ff ff0d 	bl	80173c8 <ip_frag_alloc_pbuf_custom_ref>
 80175ae:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80175b0:	69bb      	ldr	r3, [r7, #24]
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	d103      	bne.n	80175be <ip4_frag+0x146>
        pbuf_free(rambuf);
 80175b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80175b8:	f7f6 fe8c 	bl	800e2d4 <pbuf_free>
        goto memerr;
 80175bc:	e08f      	b.n	80176de <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80175be:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80175c0:	68fb      	ldr	r3, [r7, #12]
 80175c2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80175c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80175c6:	4413      	add	r3, r2
 80175c8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80175cc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80175d0:	9201      	str	r2, [sp, #4]
 80175d2:	9300      	str	r3, [sp, #0]
 80175d4:	4603      	mov	r3, r0
 80175d6:	2241      	movs	r2, #65	; 0x41
 80175d8:	2000      	movs	r0, #0
 80175da:	f7f6 fcc1 	bl	800df60 <pbuf_alloced_custom>
 80175de:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80175e0:	697b      	ldr	r3, [r7, #20]
 80175e2:	2b00      	cmp	r3, #0
 80175e4:	d106      	bne.n	80175f4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80175e6:	69b8      	ldr	r0, [r7, #24]
 80175e8:	f7ff fef6 	bl	80173d8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80175ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80175ee:	f7f6 fe71 	bl	800e2d4 <pbuf_free>
        goto memerr;
 80175f2:	e074      	b.n	80176de <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80175f4:	68f8      	ldr	r0, [r7, #12]
 80175f6:	f7f6 ff0d 	bl	800e414 <pbuf_ref>
      pcr->original = p;
 80175fa:	69bb      	ldr	r3, [r7, #24]
 80175fc:	68fa      	ldr	r2, [r7, #12]
 80175fe:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8017600:	69bb      	ldr	r3, [r7, #24]
 8017602:	4a3f      	ldr	r2, [pc, #252]	; (8017700 <ip4_frag+0x288>)
 8017604:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8017606:	6979      	ldr	r1, [r7, #20]
 8017608:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801760a:	f7f6 ff25 	bl	800e458 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801760e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8017612:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017616:	1ad3      	subs	r3, r2, r3
 8017618:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801761c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017620:	2b00      	cmp	r3, #0
 8017622:	d004      	beq.n	801762e <ip4_frag+0x1b6>
        poff = 0;
 8017624:	2300      	movs	r3, #0
 8017626:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017628:	68fb      	ldr	r3, [r7, #12]
 801762a:	681b      	ldr	r3, [r3, #0]
 801762c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801762e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017632:	2b00      	cmp	r3, #0
 8017634:	d196      	bne.n	8017564 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8017636:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017638:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801763c:	4413      	add	r3, r2
 801763e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8017640:	68bb      	ldr	r3, [r7, #8]
 8017642:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017644:	f1a3 0213 	sub.w	r2, r3, #19
 8017648:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801764c:	429a      	cmp	r2, r3
 801764e:	bfcc      	ite	gt
 8017650:	2301      	movgt	r3, #1
 8017652:	2300      	movle	r3, #0
 8017654:	b2db      	uxtb	r3, r3
 8017656:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8017658:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801765c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017660:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8017662:	6a3b      	ldr	r3, [r7, #32]
 8017664:	2b00      	cmp	r3, #0
 8017666:	d002      	beq.n	801766e <ip4_frag+0x1f6>
 8017668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801766a:	2b00      	cmp	r3, #0
 801766c:	d003      	beq.n	8017676 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801766e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017670:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017674:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8017676:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017678:	4618      	mov	r0, r3
 801767a:	f7f5 fb77 	bl	800cd6c <lwip_htons>
 801767e:	4603      	mov	r3, r0
 8017680:	461a      	mov	r2, r3
 8017682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017684:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8017686:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017688:	3314      	adds	r3, #20
 801768a:	b29b      	uxth	r3, r3
 801768c:	4618      	mov	r0, r3
 801768e:	f7f5 fb6d 	bl	800cd6c <lwip_htons>
 8017692:	4603      	mov	r3, r0
 8017694:	461a      	mov	r2, r3
 8017696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017698:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801769a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801769c:	2200      	movs	r2, #0
 801769e:	729a      	strb	r2, [r3, #10]
 80176a0:	2200      	movs	r2, #0
 80176a2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80176a4:	68bb      	ldr	r3, [r7, #8]
 80176a6:	695b      	ldr	r3, [r3, #20]
 80176a8:	687a      	ldr	r2, [r7, #4]
 80176aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80176ac:	68b8      	ldr	r0, [r7, #8]
 80176ae:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80176b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80176b2:	f7f6 fe0f 	bl	800e2d4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80176b6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80176ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80176bc:	1ad3      	subs	r3, r2, r3
 80176be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80176c2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80176c6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80176c8:	4413      	add	r3, r2
 80176ca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80176ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80176d2:	2b00      	cmp	r3, #0
 80176d4:	f47f af19 	bne.w	801750a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80176d8:	2300      	movs	r3, #0
 80176da:	e002      	b.n	80176e2 <ip4_frag+0x26a>
      goto memerr;
 80176dc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80176de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80176e2:	4618      	mov	r0, r3
 80176e4:	3748      	adds	r7, #72	; 0x48
 80176e6:	46bd      	mov	sp, r7
 80176e8:	bd80      	pop	{r7, pc}
 80176ea:	bf00      	nop
 80176ec:	0801d8ac 	.word	0x0801d8ac
 80176f0:	0801da88 	.word	0x0801da88
 80176f4:	0801d8f4 	.word	0x0801d8f4
 80176f8:	0801daa4 	.word	0x0801daa4
 80176fc:	0801dac4 	.word	0x0801dac4
 8017700:	08017411 	.word	0x08017411

08017704 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8017704:	b580      	push	{r7, lr}
 8017706:	b086      	sub	sp, #24
 8017708:	af00      	add	r7, sp, #0
 801770a:	6078      	str	r0, [r7, #4]
 801770c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801770e:	230e      	movs	r3, #14
 8017710:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	895b      	ldrh	r3, [r3, #10]
 8017716:	2b0e      	cmp	r3, #14
 8017718:	d96e      	bls.n	80177f8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	7bdb      	ldrb	r3, [r3, #15]
 801771e:	2b00      	cmp	r3, #0
 8017720:	d106      	bne.n	8017730 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8017722:	683b      	ldr	r3, [r7, #0]
 8017724:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017728:	3301      	adds	r3, #1
 801772a:	b2da      	uxtb	r2, r3
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	685b      	ldr	r3, [r3, #4]
 8017734:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8017736:	693b      	ldr	r3, [r7, #16]
 8017738:	7b1a      	ldrb	r2, [r3, #12]
 801773a:	7b5b      	ldrb	r3, [r3, #13]
 801773c:	021b      	lsls	r3, r3, #8
 801773e:	4313      	orrs	r3, r2
 8017740:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8017742:	693b      	ldr	r3, [r7, #16]
 8017744:	781b      	ldrb	r3, [r3, #0]
 8017746:	f003 0301 	and.w	r3, r3, #1
 801774a:	2b00      	cmp	r3, #0
 801774c:	d023      	beq.n	8017796 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801774e:	693b      	ldr	r3, [r7, #16]
 8017750:	781b      	ldrb	r3, [r3, #0]
 8017752:	2b01      	cmp	r3, #1
 8017754:	d10f      	bne.n	8017776 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017756:	693b      	ldr	r3, [r7, #16]
 8017758:	785b      	ldrb	r3, [r3, #1]
 801775a:	2b00      	cmp	r3, #0
 801775c:	d11b      	bne.n	8017796 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801775e:	693b      	ldr	r3, [r7, #16]
 8017760:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017762:	2b5e      	cmp	r3, #94	; 0x5e
 8017764:	d117      	bne.n	8017796 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8017766:	687b      	ldr	r3, [r7, #4]
 8017768:	7b5b      	ldrb	r3, [r3, #13]
 801776a:	f043 0310 	orr.w	r3, r3, #16
 801776e:	b2da      	uxtb	r2, r3
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	735a      	strb	r2, [r3, #13]
 8017774:	e00f      	b.n	8017796 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8017776:	693b      	ldr	r3, [r7, #16]
 8017778:	2206      	movs	r2, #6
 801777a:	4928      	ldr	r1, [pc, #160]	; (801781c <ethernet_input+0x118>)
 801777c:	4618      	mov	r0, r3
 801777e:	f000 fb2d 	bl	8017ddc <memcmp>
 8017782:	4603      	mov	r3, r0
 8017784:	2b00      	cmp	r3, #0
 8017786:	d106      	bne.n	8017796 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	7b5b      	ldrb	r3, [r3, #13]
 801778c:	f043 0308 	orr.w	r3, r3, #8
 8017790:	b2da      	uxtb	r2, r3
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8017796:	89fb      	ldrh	r3, [r7, #14]
 8017798:	2b08      	cmp	r3, #8
 801779a:	d003      	beq.n	80177a4 <ethernet_input+0xa0>
 801779c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80177a0:	d014      	beq.n	80177cc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80177a2:	e032      	b.n	801780a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80177a4:	683b      	ldr	r3, [r7, #0]
 80177a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80177aa:	f003 0308 	and.w	r3, r3, #8
 80177ae:	2b00      	cmp	r3, #0
 80177b0:	d024      	beq.n	80177fc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80177b2:	8afb      	ldrh	r3, [r7, #22]
 80177b4:	4619      	mov	r1, r3
 80177b6:	6878      	ldr	r0, [r7, #4]
 80177b8:	f7f6 fd06 	bl	800e1c8 <pbuf_remove_header>
 80177bc:	4603      	mov	r3, r0
 80177be:	2b00      	cmp	r3, #0
 80177c0:	d11e      	bne.n	8017800 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80177c2:	6839      	ldr	r1, [r7, #0]
 80177c4:	6878      	ldr	r0, [r7, #4]
 80177c6:	f7fe fe95 	bl	80164f4 <ip4_input>
      break;
 80177ca:	e013      	b.n	80177f4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80177cc:	683b      	ldr	r3, [r7, #0]
 80177ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80177d2:	f003 0308 	and.w	r3, r3, #8
 80177d6:	2b00      	cmp	r3, #0
 80177d8:	d014      	beq.n	8017804 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80177da:	8afb      	ldrh	r3, [r7, #22]
 80177dc:	4619      	mov	r1, r3
 80177de:	6878      	ldr	r0, [r7, #4]
 80177e0:	f7f6 fcf2 	bl	800e1c8 <pbuf_remove_header>
 80177e4:	4603      	mov	r3, r0
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	d10e      	bne.n	8017808 <ethernet_input+0x104>
        etharp_input(p, netif);
 80177ea:	6839      	ldr	r1, [r7, #0]
 80177ec:	6878      	ldr	r0, [r7, #4]
 80177ee:	f7fe f835 	bl	801585c <etharp_input>
      break;
 80177f2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80177f4:	2300      	movs	r3, #0
 80177f6:	e00c      	b.n	8017812 <ethernet_input+0x10e>
    goto free_and_return;
 80177f8:	bf00      	nop
 80177fa:	e006      	b.n	801780a <ethernet_input+0x106>
        goto free_and_return;
 80177fc:	bf00      	nop
 80177fe:	e004      	b.n	801780a <ethernet_input+0x106>
        goto free_and_return;
 8017800:	bf00      	nop
 8017802:	e002      	b.n	801780a <ethernet_input+0x106>
        goto free_and_return;
 8017804:	bf00      	nop
 8017806:	e000      	b.n	801780a <ethernet_input+0x106>
        goto free_and_return;
 8017808:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801780a:	6878      	ldr	r0, [r7, #4]
 801780c:	f7f6 fd62 	bl	800e2d4 <pbuf_free>
  return ERR_OK;
 8017810:	2300      	movs	r3, #0
}
 8017812:	4618      	mov	r0, r3
 8017814:	3718      	adds	r7, #24
 8017816:	46bd      	mov	sp, r7
 8017818:	bd80      	pop	{r7, pc}
 801781a:	bf00      	nop
 801781c:	0801de74 	.word	0x0801de74

08017820 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8017820:	b580      	push	{r7, lr}
 8017822:	b086      	sub	sp, #24
 8017824:	af00      	add	r7, sp, #0
 8017826:	60f8      	str	r0, [r7, #12]
 8017828:	60b9      	str	r1, [r7, #8]
 801782a:	607a      	str	r2, [r7, #4]
 801782c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801782e:	8c3b      	ldrh	r3, [r7, #32]
 8017830:	4618      	mov	r0, r3
 8017832:	f7f5 fa9b 	bl	800cd6c <lwip_htons>
 8017836:	4603      	mov	r3, r0
 8017838:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801783a:	210e      	movs	r1, #14
 801783c:	68b8      	ldr	r0, [r7, #8]
 801783e:	f7f6 fcb3 	bl	800e1a8 <pbuf_add_header>
 8017842:	4603      	mov	r3, r0
 8017844:	2b00      	cmp	r3, #0
 8017846:	d125      	bne.n	8017894 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8017848:	68bb      	ldr	r3, [r7, #8]
 801784a:	685b      	ldr	r3, [r3, #4]
 801784c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801784e:	693b      	ldr	r3, [r7, #16]
 8017850:	8afa      	ldrh	r2, [r7, #22]
 8017852:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8017854:	693b      	ldr	r3, [r7, #16]
 8017856:	2206      	movs	r2, #6
 8017858:	6839      	ldr	r1, [r7, #0]
 801785a:	4618      	mov	r0, r3
 801785c:	f000 facc 	bl	8017df8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8017860:	693b      	ldr	r3, [r7, #16]
 8017862:	3306      	adds	r3, #6
 8017864:	2206      	movs	r2, #6
 8017866:	6879      	ldr	r1, [r7, #4]
 8017868:	4618      	mov	r0, r3
 801786a:	f000 fac5 	bl	8017df8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801786e:	68fb      	ldr	r3, [r7, #12]
 8017870:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017874:	2b06      	cmp	r3, #6
 8017876:	d006      	beq.n	8017886 <ethernet_output+0x66>
 8017878:	4b0a      	ldr	r3, [pc, #40]	; (80178a4 <ethernet_output+0x84>)
 801787a:	f44f 7299 	mov.w	r2, #306	; 0x132
 801787e:	490a      	ldr	r1, [pc, #40]	; (80178a8 <ethernet_output+0x88>)
 8017880:	480a      	ldr	r0, [pc, #40]	; (80178ac <ethernet_output+0x8c>)
 8017882:	f000 fb93 	bl	8017fac <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8017886:	68fb      	ldr	r3, [r7, #12]
 8017888:	699b      	ldr	r3, [r3, #24]
 801788a:	68b9      	ldr	r1, [r7, #8]
 801788c:	68f8      	ldr	r0, [r7, #12]
 801788e:	4798      	blx	r3
 8017890:	4603      	mov	r3, r0
 8017892:	e002      	b.n	801789a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8017894:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8017896:	f06f 0301 	mvn.w	r3, #1
}
 801789a:	4618      	mov	r0, r3
 801789c:	3718      	adds	r7, #24
 801789e:	46bd      	mov	sp, r7
 80178a0:	bd80      	pop	{r7, pc}
 80178a2:	bf00      	nop
 80178a4:	0801dad4 	.word	0x0801dad4
 80178a8:	0801db0c 	.word	0x0801db0c
 80178ac:	0801db40 	.word	0x0801db40

080178b0 <_Znaj>:
 80178b0:	f000 b800 	b.w	80178b4 <_Znwj>

080178b4 <_Znwj>:
 80178b4:	2801      	cmp	r0, #1
 80178b6:	bf38      	it	cc
 80178b8:	2001      	movcc	r0, #1
 80178ba:	b510      	push	{r4, lr}
 80178bc:	4604      	mov	r4, r0
 80178be:	4620      	mov	r0, r4
 80178c0:	f000 fa7c 	bl	8017dbc <malloc>
 80178c4:	b930      	cbnz	r0, 80178d4 <_Znwj+0x20>
 80178c6:	f000 f807 	bl	80178d8 <_ZSt15get_new_handlerv>
 80178ca:	b908      	cbnz	r0, 80178d0 <_Znwj+0x1c>
 80178cc:	f000 f80c 	bl	80178e8 <abort>
 80178d0:	4780      	blx	r0
 80178d2:	e7f4      	b.n	80178be <_Znwj+0xa>
 80178d4:	bd10      	pop	{r4, pc}
	...

080178d8 <_ZSt15get_new_handlerv>:
 80178d8:	4b02      	ldr	r3, [pc, #8]	; (80178e4 <_ZSt15get_new_handlerv+0xc>)
 80178da:	6818      	ldr	r0, [r3, #0]
 80178dc:	f3bf 8f5b 	dmb	ish
 80178e0:	4770      	bx	lr
 80178e2:	bf00      	nop
 80178e4:	20000ba4 	.word	0x20000ba4

080178e8 <abort>:
 80178e8:	b508      	push	{r3, lr}
 80178ea:	2006      	movs	r0, #6
 80178ec:	f000 fbee 	bl	80180cc <raise>
 80178f0:	2001      	movs	r0, #1
 80178f2:	f7ec fc19 	bl	8004128 <_exit>

080178f6 <atoi>:
 80178f6:	220a      	movs	r2, #10
 80178f8:	2100      	movs	r1, #0
 80178fa:	f001 bb5b 	b.w	8018fb4 <strtol>
	...

08017900 <__sflush_r>:
 8017900:	898a      	ldrh	r2, [r1, #12]
 8017902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017906:	4605      	mov	r5, r0
 8017908:	0710      	lsls	r0, r2, #28
 801790a:	460c      	mov	r4, r1
 801790c:	d458      	bmi.n	80179c0 <__sflush_r+0xc0>
 801790e:	684b      	ldr	r3, [r1, #4]
 8017910:	2b00      	cmp	r3, #0
 8017912:	dc05      	bgt.n	8017920 <__sflush_r+0x20>
 8017914:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017916:	2b00      	cmp	r3, #0
 8017918:	dc02      	bgt.n	8017920 <__sflush_r+0x20>
 801791a:	2000      	movs	r0, #0
 801791c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017920:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017922:	2e00      	cmp	r6, #0
 8017924:	d0f9      	beq.n	801791a <__sflush_r+0x1a>
 8017926:	2300      	movs	r3, #0
 8017928:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801792c:	682f      	ldr	r7, [r5, #0]
 801792e:	602b      	str	r3, [r5, #0]
 8017930:	d032      	beq.n	8017998 <__sflush_r+0x98>
 8017932:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017934:	89a3      	ldrh	r3, [r4, #12]
 8017936:	075a      	lsls	r2, r3, #29
 8017938:	d505      	bpl.n	8017946 <__sflush_r+0x46>
 801793a:	6863      	ldr	r3, [r4, #4]
 801793c:	1ac0      	subs	r0, r0, r3
 801793e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017940:	b10b      	cbz	r3, 8017946 <__sflush_r+0x46>
 8017942:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017944:	1ac0      	subs	r0, r0, r3
 8017946:	2300      	movs	r3, #0
 8017948:	4602      	mov	r2, r0
 801794a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801794c:	6a21      	ldr	r1, [r4, #32]
 801794e:	4628      	mov	r0, r5
 8017950:	47b0      	blx	r6
 8017952:	1c43      	adds	r3, r0, #1
 8017954:	89a3      	ldrh	r3, [r4, #12]
 8017956:	d106      	bne.n	8017966 <__sflush_r+0x66>
 8017958:	6829      	ldr	r1, [r5, #0]
 801795a:	291d      	cmp	r1, #29
 801795c:	d82c      	bhi.n	80179b8 <__sflush_r+0xb8>
 801795e:	4a2a      	ldr	r2, [pc, #168]	; (8017a08 <__sflush_r+0x108>)
 8017960:	40ca      	lsrs	r2, r1
 8017962:	07d6      	lsls	r6, r2, #31
 8017964:	d528      	bpl.n	80179b8 <__sflush_r+0xb8>
 8017966:	2200      	movs	r2, #0
 8017968:	6062      	str	r2, [r4, #4]
 801796a:	04d9      	lsls	r1, r3, #19
 801796c:	6922      	ldr	r2, [r4, #16]
 801796e:	6022      	str	r2, [r4, #0]
 8017970:	d504      	bpl.n	801797c <__sflush_r+0x7c>
 8017972:	1c42      	adds	r2, r0, #1
 8017974:	d101      	bne.n	801797a <__sflush_r+0x7a>
 8017976:	682b      	ldr	r3, [r5, #0]
 8017978:	b903      	cbnz	r3, 801797c <__sflush_r+0x7c>
 801797a:	6560      	str	r0, [r4, #84]	; 0x54
 801797c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801797e:	602f      	str	r7, [r5, #0]
 8017980:	2900      	cmp	r1, #0
 8017982:	d0ca      	beq.n	801791a <__sflush_r+0x1a>
 8017984:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017988:	4299      	cmp	r1, r3
 801798a:	d002      	beq.n	8017992 <__sflush_r+0x92>
 801798c:	4628      	mov	r0, r5
 801798e:	f000 fa63 	bl	8017e58 <_free_r>
 8017992:	2000      	movs	r0, #0
 8017994:	6360      	str	r0, [r4, #52]	; 0x34
 8017996:	e7c1      	b.n	801791c <__sflush_r+0x1c>
 8017998:	6a21      	ldr	r1, [r4, #32]
 801799a:	2301      	movs	r3, #1
 801799c:	4628      	mov	r0, r5
 801799e:	47b0      	blx	r6
 80179a0:	1c41      	adds	r1, r0, #1
 80179a2:	d1c7      	bne.n	8017934 <__sflush_r+0x34>
 80179a4:	682b      	ldr	r3, [r5, #0]
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	d0c4      	beq.n	8017934 <__sflush_r+0x34>
 80179aa:	2b1d      	cmp	r3, #29
 80179ac:	d001      	beq.n	80179b2 <__sflush_r+0xb2>
 80179ae:	2b16      	cmp	r3, #22
 80179b0:	d101      	bne.n	80179b6 <__sflush_r+0xb6>
 80179b2:	602f      	str	r7, [r5, #0]
 80179b4:	e7b1      	b.n	801791a <__sflush_r+0x1a>
 80179b6:	89a3      	ldrh	r3, [r4, #12]
 80179b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80179bc:	81a3      	strh	r3, [r4, #12]
 80179be:	e7ad      	b.n	801791c <__sflush_r+0x1c>
 80179c0:	690f      	ldr	r7, [r1, #16]
 80179c2:	2f00      	cmp	r7, #0
 80179c4:	d0a9      	beq.n	801791a <__sflush_r+0x1a>
 80179c6:	0793      	lsls	r3, r2, #30
 80179c8:	680e      	ldr	r6, [r1, #0]
 80179ca:	bf08      	it	eq
 80179cc:	694b      	ldreq	r3, [r1, #20]
 80179ce:	600f      	str	r7, [r1, #0]
 80179d0:	bf18      	it	ne
 80179d2:	2300      	movne	r3, #0
 80179d4:	eba6 0807 	sub.w	r8, r6, r7
 80179d8:	608b      	str	r3, [r1, #8]
 80179da:	f1b8 0f00 	cmp.w	r8, #0
 80179de:	dd9c      	ble.n	801791a <__sflush_r+0x1a>
 80179e0:	6a21      	ldr	r1, [r4, #32]
 80179e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80179e4:	4643      	mov	r3, r8
 80179e6:	463a      	mov	r2, r7
 80179e8:	4628      	mov	r0, r5
 80179ea:	47b0      	blx	r6
 80179ec:	2800      	cmp	r0, #0
 80179ee:	dc06      	bgt.n	80179fe <__sflush_r+0xfe>
 80179f0:	89a3      	ldrh	r3, [r4, #12]
 80179f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80179f6:	81a3      	strh	r3, [r4, #12]
 80179f8:	f04f 30ff 	mov.w	r0, #4294967295
 80179fc:	e78e      	b.n	801791c <__sflush_r+0x1c>
 80179fe:	4407      	add	r7, r0
 8017a00:	eba8 0800 	sub.w	r8, r8, r0
 8017a04:	e7e9      	b.n	80179da <__sflush_r+0xda>
 8017a06:	bf00      	nop
 8017a08:	20400001 	.word	0x20400001

08017a0c <_fflush_r>:
 8017a0c:	b538      	push	{r3, r4, r5, lr}
 8017a0e:	690b      	ldr	r3, [r1, #16]
 8017a10:	4605      	mov	r5, r0
 8017a12:	460c      	mov	r4, r1
 8017a14:	b913      	cbnz	r3, 8017a1c <_fflush_r+0x10>
 8017a16:	2500      	movs	r5, #0
 8017a18:	4628      	mov	r0, r5
 8017a1a:	bd38      	pop	{r3, r4, r5, pc}
 8017a1c:	b118      	cbz	r0, 8017a26 <_fflush_r+0x1a>
 8017a1e:	6983      	ldr	r3, [r0, #24]
 8017a20:	b90b      	cbnz	r3, 8017a26 <_fflush_r+0x1a>
 8017a22:	f000 f887 	bl	8017b34 <__sinit>
 8017a26:	4b14      	ldr	r3, [pc, #80]	; (8017a78 <_fflush_r+0x6c>)
 8017a28:	429c      	cmp	r4, r3
 8017a2a:	d11b      	bne.n	8017a64 <_fflush_r+0x58>
 8017a2c:	686c      	ldr	r4, [r5, #4]
 8017a2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017a32:	2b00      	cmp	r3, #0
 8017a34:	d0ef      	beq.n	8017a16 <_fflush_r+0xa>
 8017a36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017a38:	07d0      	lsls	r0, r2, #31
 8017a3a:	d404      	bmi.n	8017a46 <_fflush_r+0x3a>
 8017a3c:	0599      	lsls	r1, r3, #22
 8017a3e:	d402      	bmi.n	8017a46 <_fflush_r+0x3a>
 8017a40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017a42:	f000 f954 	bl	8017cee <__retarget_lock_acquire_recursive>
 8017a46:	4628      	mov	r0, r5
 8017a48:	4621      	mov	r1, r4
 8017a4a:	f7ff ff59 	bl	8017900 <__sflush_r>
 8017a4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017a50:	07da      	lsls	r2, r3, #31
 8017a52:	4605      	mov	r5, r0
 8017a54:	d4e0      	bmi.n	8017a18 <_fflush_r+0xc>
 8017a56:	89a3      	ldrh	r3, [r4, #12]
 8017a58:	059b      	lsls	r3, r3, #22
 8017a5a:	d4dd      	bmi.n	8017a18 <_fflush_r+0xc>
 8017a5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017a5e:	f000 f947 	bl	8017cf0 <__retarget_lock_release_recursive>
 8017a62:	e7d9      	b.n	8017a18 <_fflush_r+0xc>
 8017a64:	4b05      	ldr	r3, [pc, #20]	; (8017a7c <_fflush_r+0x70>)
 8017a66:	429c      	cmp	r4, r3
 8017a68:	d101      	bne.n	8017a6e <_fflush_r+0x62>
 8017a6a:	68ac      	ldr	r4, [r5, #8]
 8017a6c:	e7df      	b.n	8017a2e <_fflush_r+0x22>
 8017a6e:	4b04      	ldr	r3, [pc, #16]	; (8017a80 <_fflush_r+0x74>)
 8017a70:	429c      	cmp	r4, r3
 8017a72:	bf08      	it	eq
 8017a74:	68ec      	ldreq	r4, [r5, #12]
 8017a76:	e7da      	b.n	8017a2e <_fflush_r+0x22>
 8017a78:	0801dfa4 	.word	0x0801dfa4
 8017a7c:	0801dfc4 	.word	0x0801dfc4
 8017a80:	0801df84 	.word	0x0801df84

08017a84 <std>:
 8017a84:	2300      	movs	r3, #0
 8017a86:	b510      	push	{r4, lr}
 8017a88:	4604      	mov	r4, r0
 8017a8a:	e9c0 3300 	strd	r3, r3, [r0]
 8017a8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017a92:	6083      	str	r3, [r0, #8]
 8017a94:	8181      	strh	r1, [r0, #12]
 8017a96:	6643      	str	r3, [r0, #100]	; 0x64
 8017a98:	81c2      	strh	r2, [r0, #14]
 8017a9a:	6183      	str	r3, [r0, #24]
 8017a9c:	4619      	mov	r1, r3
 8017a9e:	2208      	movs	r2, #8
 8017aa0:	305c      	adds	r0, #92	; 0x5c
 8017aa2:	f000 f9d1 	bl	8017e48 <memset>
 8017aa6:	4b05      	ldr	r3, [pc, #20]	; (8017abc <std+0x38>)
 8017aa8:	6263      	str	r3, [r4, #36]	; 0x24
 8017aaa:	4b05      	ldr	r3, [pc, #20]	; (8017ac0 <std+0x3c>)
 8017aac:	62a3      	str	r3, [r4, #40]	; 0x28
 8017aae:	4b05      	ldr	r3, [pc, #20]	; (8017ac4 <std+0x40>)
 8017ab0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017ab2:	4b05      	ldr	r3, [pc, #20]	; (8017ac8 <std+0x44>)
 8017ab4:	6224      	str	r4, [r4, #32]
 8017ab6:	6323      	str	r3, [r4, #48]	; 0x30
 8017ab8:	bd10      	pop	{r4, pc}
 8017aba:	bf00      	nop
 8017abc:	08018145 	.word	0x08018145
 8017ac0:	08018167 	.word	0x08018167
 8017ac4:	0801819f 	.word	0x0801819f
 8017ac8:	080181c3 	.word	0x080181c3

08017acc <_cleanup_r>:
 8017acc:	4901      	ldr	r1, [pc, #4]	; (8017ad4 <_cleanup_r+0x8>)
 8017ace:	f000 b8af 	b.w	8017c30 <_fwalk_reent>
 8017ad2:	bf00      	nop
 8017ad4:	08017a0d 	.word	0x08017a0d

08017ad8 <__sfmoreglue>:
 8017ad8:	b570      	push	{r4, r5, r6, lr}
 8017ada:	1e4a      	subs	r2, r1, #1
 8017adc:	2568      	movs	r5, #104	; 0x68
 8017ade:	4355      	muls	r5, r2
 8017ae0:	460e      	mov	r6, r1
 8017ae2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017ae6:	f000 fa07 	bl	8017ef8 <_malloc_r>
 8017aea:	4604      	mov	r4, r0
 8017aec:	b140      	cbz	r0, 8017b00 <__sfmoreglue+0x28>
 8017aee:	2100      	movs	r1, #0
 8017af0:	e9c0 1600 	strd	r1, r6, [r0]
 8017af4:	300c      	adds	r0, #12
 8017af6:	60a0      	str	r0, [r4, #8]
 8017af8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017afc:	f000 f9a4 	bl	8017e48 <memset>
 8017b00:	4620      	mov	r0, r4
 8017b02:	bd70      	pop	{r4, r5, r6, pc}

08017b04 <__sfp_lock_acquire>:
 8017b04:	4801      	ldr	r0, [pc, #4]	; (8017b0c <__sfp_lock_acquire+0x8>)
 8017b06:	f000 b8f2 	b.w	8017cee <__retarget_lock_acquire_recursive>
 8017b0a:	bf00      	nop
 8017b0c:	20009528 	.word	0x20009528

08017b10 <__sfp_lock_release>:
 8017b10:	4801      	ldr	r0, [pc, #4]	; (8017b18 <__sfp_lock_release+0x8>)
 8017b12:	f000 b8ed 	b.w	8017cf0 <__retarget_lock_release_recursive>
 8017b16:	bf00      	nop
 8017b18:	20009528 	.word	0x20009528

08017b1c <__sinit_lock_acquire>:
 8017b1c:	4801      	ldr	r0, [pc, #4]	; (8017b24 <__sinit_lock_acquire+0x8>)
 8017b1e:	f000 b8e6 	b.w	8017cee <__retarget_lock_acquire_recursive>
 8017b22:	bf00      	nop
 8017b24:	20009523 	.word	0x20009523

08017b28 <__sinit_lock_release>:
 8017b28:	4801      	ldr	r0, [pc, #4]	; (8017b30 <__sinit_lock_release+0x8>)
 8017b2a:	f000 b8e1 	b.w	8017cf0 <__retarget_lock_release_recursive>
 8017b2e:	bf00      	nop
 8017b30:	20009523 	.word	0x20009523

08017b34 <__sinit>:
 8017b34:	b510      	push	{r4, lr}
 8017b36:	4604      	mov	r4, r0
 8017b38:	f7ff fff0 	bl	8017b1c <__sinit_lock_acquire>
 8017b3c:	69a3      	ldr	r3, [r4, #24]
 8017b3e:	b11b      	cbz	r3, 8017b48 <__sinit+0x14>
 8017b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017b44:	f7ff bff0 	b.w	8017b28 <__sinit_lock_release>
 8017b48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017b4c:	6523      	str	r3, [r4, #80]	; 0x50
 8017b4e:	4b13      	ldr	r3, [pc, #76]	; (8017b9c <__sinit+0x68>)
 8017b50:	4a13      	ldr	r2, [pc, #76]	; (8017ba0 <__sinit+0x6c>)
 8017b52:	681b      	ldr	r3, [r3, #0]
 8017b54:	62a2      	str	r2, [r4, #40]	; 0x28
 8017b56:	42a3      	cmp	r3, r4
 8017b58:	bf04      	itt	eq
 8017b5a:	2301      	moveq	r3, #1
 8017b5c:	61a3      	streq	r3, [r4, #24]
 8017b5e:	4620      	mov	r0, r4
 8017b60:	f000 f820 	bl	8017ba4 <__sfp>
 8017b64:	6060      	str	r0, [r4, #4]
 8017b66:	4620      	mov	r0, r4
 8017b68:	f000 f81c 	bl	8017ba4 <__sfp>
 8017b6c:	60a0      	str	r0, [r4, #8]
 8017b6e:	4620      	mov	r0, r4
 8017b70:	f000 f818 	bl	8017ba4 <__sfp>
 8017b74:	2200      	movs	r2, #0
 8017b76:	60e0      	str	r0, [r4, #12]
 8017b78:	2104      	movs	r1, #4
 8017b7a:	6860      	ldr	r0, [r4, #4]
 8017b7c:	f7ff ff82 	bl	8017a84 <std>
 8017b80:	68a0      	ldr	r0, [r4, #8]
 8017b82:	2201      	movs	r2, #1
 8017b84:	2109      	movs	r1, #9
 8017b86:	f7ff ff7d 	bl	8017a84 <std>
 8017b8a:	68e0      	ldr	r0, [r4, #12]
 8017b8c:	2202      	movs	r2, #2
 8017b8e:	2112      	movs	r1, #18
 8017b90:	f7ff ff78 	bl	8017a84 <std>
 8017b94:	2301      	movs	r3, #1
 8017b96:	61a3      	str	r3, [r4, #24]
 8017b98:	e7d2      	b.n	8017b40 <__sinit+0xc>
 8017b9a:	bf00      	nop
 8017b9c:	0801dfe4 	.word	0x0801dfe4
 8017ba0:	08017acd 	.word	0x08017acd

08017ba4 <__sfp>:
 8017ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ba6:	4607      	mov	r7, r0
 8017ba8:	f7ff ffac 	bl	8017b04 <__sfp_lock_acquire>
 8017bac:	4b1e      	ldr	r3, [pc, #120]	; (8017c28 <__sfp+0x84>)
 8017bae:	681e      	ldr	r6, [r3, #0]
 8017bb0:	69b3      	ldr	r3, [r6, #24]
 8017bb2:	b913      	cbnz	r3, 8017bba <__sfp+0x16>
 8017bb4:	4630      	mov	r0, r6
 8017bb6:	f7ff ffbd 	bl	8017b34 <__sinit>
 8017bba:	3648      	adds	r6, #72	; 0x48
 8017bbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017bc0:	3b01      	subs	r3, #1
 8017bc2:	d503      	bpl.n	8017bcc <__sfp+0x28>
 8017bc4:	6833      	ldr	r3, [r6, #0]
 8017bc6:	b30b      	cbz	r3, 8017c0c <__sfp+0x68>
 8017bc8:	6836      	ldr	r6, [r6, #0]
 8017bca:	e7f7      	b.n	8017bbc <__sfp+0x18>
 8017bcc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017bd0:	b9d5      	cbnz	r5, 8017c08 <__sfp+0x64>
 8017bd2:	4b16      	ldr	r3, [pc, #88]	; (8017c2c <__sfp+0x88>)
 8017bd4:	60e3      	str	r3, [r4, #12]
 8017bd6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017bda:	6665      	str	r5, [r4, #100]	; 0x64
 8017bdc:	f000 f886 	bl	8017cec <__retarget_lock_init_recursive>
 8017be0:	f7ff ff96 	bl	8017b10 <__sfp_lock_release>
 8017be4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017be8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017bec:	6025      	str	r5, [r4, #0]
 8017bee:	61a5      	str	r5, [r4, #24]
 8017bf0:	2208      	movs	r2, #8
 8017bf2:	4629      	mov	r1, r5
 8017bf4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017bf8:	f000 f926 	bl	8017e48 <memset>
 8017bfc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017c00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017c04:	4620      	mov	r0, r4
 8017c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017c08:	3468      	adds	r4, #104	; 0x68
 8017c0a:	e7d9      	b.n	8017bc0 <__sfp+0x1c>
 8017c0c:	2104      	movs	r1, #4
 8017c0e:	4638      	mov	r0, r7
 8017c10:	f7ff ff62 	bl	8017ad8 <__sfmoreglue>
 8017c14:	4604      	mov	r4, r0
 8017c16:	6030      	str	r0, [r6, #0]
 8017c18:	2800      	cmp	r0, #0
 8017c1a:	d1d5      	bne.n	8017bc8 <__sfp+0x24>
 8017c1c:	f7ff ff78 	bl	8017b10 <__sfp_lock_release>
 8017c20:	230c      	movs	r3, #12
 8017c22:	603b      	str	r3, [r7, #0]
 8017c24:	e7ee      	b.n	8017c04 <__sfp+0x60>
 8017c26:	bf00      	nop
 8017c28:	0801dfe4 	.word	0x0801dfe4
 8017c2c:	ffff0001 	.word	0xffff0001

08017c30 <_fwalk_reent>:
 8017c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017c34:	4606      	mov	r6, r0
 8017c36:	4688      	mov	r8, r1
 8017c38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017c3c:	2700      	movs	r7, #0
 8017c3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017c42:	f1b9 0901 	subs.w	r9, r9, #1
 8017c46:	d505      	bpl.n	8017c54 <_fwalk_reent+0x24>
 8017c48:	6824      	ldr	r4, [r4, #0]
 8017c4a:	2c00      	cmp	r4, #0
 8017c4c:	d1f7      	bne.n	8017c3e <_fwalk_reent+0xe>
 8017c4e:	4638      	mov	r0, r7
 8017c50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017c54:	89ab      	ldrh	r3, [r5, #12]
 8017c56:	2b01      	cmp	r3, #1
 8017c58:	d907      	bls.n	8017c6a <_fwalk_reent+0x3a>
 8017c5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017c5e:	3301      	adds	r3, #1
 8017c60:	d003      	beq.n	8017c6a <_fwalk_reent+0x3a>
 8017c62:	4629      	mov	r1, r5
 8017c64:	4630      	mov	r0, r6
 8017c66:	47c0      	blx	r8
 8017c68:	4307      	orrs	r7, r0
 8017c6a:	3568      	adds	r5, #104	; 0x68
 8017c6c:	e7e9      	b.n	8017c42 <_fwalk_reent+0x12>
	...

08017c70 <__libc_init_array>:
 8017c70:	b570      	push	{r4, r5, r6, lr}
 8017c72:	4d0d      	ldr	r5, [pc, #52]	; (8017ca8 <__libc_init_array+0x38>)
 8017c74:	4c0d      	ldr	r4, [pc, #52]	; (8017cac <__libc_init_array+0x3c>)
 8017c76:	1b64      	subs	r4, r4, r5
 8017c78:	10a4      	asrs	r4, r4, #2
 8017c7a:	2600      	movs	r6, #0
 8017c7c:	42a6      	cmp	r6, r4
 8017c7e:	d109      	bne.n	8017c94 <__libc_init_array+0x24>
 8017c80:	4d0b      	ldr	r5, [pc, #44]	; (8017cb0 <__libc_init_array+0x40>)
 8017c82:	4c0c      	ldr	r4, [pc, #48]	; (8017cb4 <__libc_init_array+0x44>)
 8017c84:	f003 f828 	bl	801acd8 <_init>
 8017c88:	1b64      	subs	r4, r4, r5
 8017c8a:	10a4      	asrs	r4, r4, #2
 8017c8c:	2600      	movs	r6, #0
 8017c8e:	42a6      	cmp	r6, r4
 8017c90:	d105      	bne.n	8017c9e <__libc_init_array+0x2e>
 8017c92:	bd70      	pop	{r4, r5, r6, pc}
 8017c94:	f855 3b04 	ldr.w	r3, [r5], #4
 8017c98:	4798      	blx	r3
 8017c9a:	3601      	adds	r6, #1
 8017c9c:	e7ee      	b.n	8017c7c <__libc_init_array+0xc>
 8017c9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8017ca2:	4798      	blx	r3
 8017ca4:	3601      	adds	r6, #1
 8017ca6:	e7f2      	b.n	8017c8e <__libc_init_array+0x1e>
 8017ca8:	0801e348 	.word	0x0801e348
 8017cac:	0801e348 	.word	0x0801e348
 8017cb0:	0801e348 	.word	0x0801e348
 8017cb4:	0801e34c 	.word	0x0801e34c

08017cb8 <__itoa>:
 8017cb8:	1e93      	subs	r3, r2, #2
 8017cba:	2b22      	cmp	r3, #34	; 0x22
 8017cbc:	b510      	push	{r4, lr}
 8017cbe:	460c      	mov	r4, r1
 8017cc0:	d904      	bls.n	8017ccc <__itoa+0x14>
 8017cc2:	2300      	movs	r3, #0
 8017cc4:	700b      	strb	r3, [r1, #0]
 8017cc6:	461c      	mov	r4, r3
 8017cc8:	4620      	mov	r0, r4
 8017cca:	bd10      	pop	{r4, pc}
 8017ccc:	2a0a      	cmp	r2, #10
 8017cce:	d109      	bne.n	8017ce4 <__itoa+0x2c>
 8017cd0:	2800      	cmp	r0, #0
 8017cd2:	da07      	bge.n	8017ce4 <__itoa+0x2c>
 8017cd4:	232d      	movs	r3, #45	; 0x2d
 8017cd6:	700b      	strb	r3, [r1, #0]
 8017cd8:	4240      	negs	r0, r0
 8017cda:	2101      	movs	r1, #1
 8017cdc:	4421      	add	r1, r4
 8017cde:	f001 f973 	bl	8018fc8 <__utoa>
 8017ce2:	e7f1      	b.n	8017cc8 <__itoa+0x10>
 8017ce4:	2100      	movs	r1, #0
 8017ce6:	e7f9      	b.n	8017cdc <__itoa+0x24>

08017ce8 <itoa>:
 8017ce8:	f7ff bfe6 	b.w	8017cb8 <__itoa>

08017cec <__retarget_lock_init_recursive>:
 8017cec:	4770      	bx	lr

08017cee <__retarget_lock_acquire_recursive>:
 8017cee:	4770      	bx	lr

08017cf0 <__retarget_lock_release_recursive>:
 8017cf0:	4770      	bx	lr

08017cf2 <__swhatbuf_r>:
 8017cf2:	b570      	push	{r4, r5, r6, lr}
 8017cf4:	460e      	mov	r6, r1
 8017cf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017cfa:	2900      	cmp	r1, #0
 8017cfc:	b096      	sub	sp, #88	; 0x58
 8017cfe:	4614      	mov	r4, r2
 8017d00:	461d      	mov	r5, r3
 8017d02:	da07      	bge.n	8017d14 <__swhatbuf_r+0x22>
 8017d04:	2300      	movs	r3, #0
 8017d06:	602b      	str	r3, [r5, #0]
 8017d08:	89b3      	ldrh	r3, [r6, #12]
 8017d0a:	061a      	lsls	r2, r3, #24
 8017d0c:	d410      	bmi.n	8017d30 <__swhatbuf_r+0x3e>
 8017d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017d12:	e00e      	b.n	8017d32 <__swhatbuf_r+0x40>
 8017d14:	466a      	mov	r2, sp
 8017d16:	f001 fab1 	bl	801927c <_fstat_r>
 8017d1a:	2800      	cmp	r0, #0
 8017d1c:	dbf2      	blt.n	8017d04 <__swhatbuf_r+0x12>
 8017d1e:	9a01      	ldr	r2, [sp, #4]
 8017d20:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017d24:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017d28:	425a      	negs	r2, r3
 8017d2a:	415a      	adcs	r2, r3
 8017d2c:	602a      	str	r2, [r5, #0]
 8017d2e:	e7ee      	b.n	8017d0e <__swhatbuf_r+0x1c>
 8017d30:	2340      	movs	r3, #64	; 0x40
 8017d32:	2000      	movs	r0, #0
 8017d34:	6023      	str	r3, [r4, #0]
 8017d36:	b016      	add	sp, #88	; 0x58
 8017d38:	bd70      	pop	{r4, r5, r6, pc}
	...

08017d3c <__smakebuf_r>:
 8017d3c:	898b      	ldrh	r3, [r1, #12]
 8017d3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017d40:	079d      	lsls	r5, r3, #30
 8017d42:	4606      	mov	r6, r0
 8017d44:	460c      	mov	r4, r1
 8017d46:	d507      	bpl.n	8017d58 <__smakebuf_r+0x1c>
 8017d48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017d4c:	6023      	str	r3, [r4, #0]
 8017d4e:	6123      	str	r3, [r4, #16]
 8017d50:	2301      	movs	r3, #1
 8017d52:	6163      	str	r3, [r4, #20]
 8017d54:	b002      	add	sp, #8
 8017d56:	bd70      	pop	{r4, r5, r6, pc}
 8017d58:	ab01      	add	r3, sp, #4
 8017d5a:	466a      	mov	r2, sp
 8017d5c:	f7ff ffc9 	bl	8017cf2 <__swhatbuf_r>
 8017d60:	9900      	ldr	r1, [sp, #0]
 8017d62:	4605      	mov	r5, r0
 8017d64:	4630      	mov	r0, r6
 8017d66:	f000 f8c7 	bl	8017ef8 <_malloc_r>
 8017d6a:	b948      	cbnz	r0, 8017d80 <__smakebuf_r+0x44>
 8017d6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017d70:	059a      	lsls	r2, r3, #22
 8017d72:	d4ef      	bmi.n	8017d54 <__smakebuf_r+0x18>
 8017d74:	f023 0303 	bic.w	r3, r3, #3
 8017d78:	f043 0302 	orr.w	r3, r3, #2
 8017d7c:	81a3      	strh	r3, [r4, #12]
 8017d7e:	e7e3      	b.n	8017d48 <__smakebuf_r+0xc>
 8017d80:	4b0d      	ldr	r3, [pc, #52]	; (8017db8 <__smakebuf_r+0x7c>)
 8017d82:	62b3      	str	r3, [r6, #40]	; 0x28
 8017d84:	89a3      	ldrh	r3, [r4, #12]
 8017d86:	6020      	str	r0, [r4, #0]
 8017d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017d8c:	81a3      	strh	r3, [r4, #12]
 8017d8e:	9b00      	ldr	r3, [sp, #0]
 8017d90:	6163      	str	r3, [r4, #20]
 8017d92:	9b01      	ldr	r3, [sp, #4]
 8017d94:	6120      	str	r0, [r4, #16]
 8017d96:	b15b      	cbz	r3, 8017db0 <__smakebuf_r+0x74>
 8017d98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017d9c:	4630      	mov	r0, r6
 8017d9e:	f001 fdef 	bl	8019980 <_isatty_r>
 8017da2:	b128      	cbz	r0, 8017db0 <__smakebuf_r+0x74>
 8017da4:	89a3      	ldrh	r3, [r4, #12]
 8017da6:	f023 0303 	bic.w	r3, r3, #3
 8017daa:	f043 0301 	orr.w	r3, r3, #1
 8017dae:	81a3      	strh	r3, [r4, #12]
 8017db0:	89a0      	ldrh	r0, [r4, #12]
 8017db2:	4305      	orrs	r5, r0
 8017db4:	81a5      	strh	r5, [r4, #12]
 8017db6:	e7cd      	b.n	8017d54 <__smakebuf_r+0x18>
 8017db8:	08017acd 	.word	0x08017acd

08017dbc <malloc>:
 8017dbc:	4b02      	ldr	r3, [pc, #8]	; (8017dc8 <malloc+0xc>)
 8017dbe:	4601      	mov	r1, r0
 8017dc0:	6818      	ldr	r0, [r3, #0]
 8017dc2:	f000 b899 	b.w	8017ef8 <_malloc_r>
 8017dc6:	bf00      	nop
 8017dc8:	2000001c 	.word	0x2000001c

08017dcc <free>:
 8017dcc:	4b02      	ldr	r3, [pc, #8]	; (8017dd8 <free+0xc>)
 8017dce:	4601      	mov	r1, r0
 8017dd0:	6818      	ldr	r0, [r3, #0]
 8017dd2:	f000 b841 	b.w	8017e58 <_free_r>
 8017dd6:	bf00      	nop
 8017dd8:	2000001c 	.word	0x2000001c

08017ddc <memcmp>:
 8017ddc:	b530      	push	{r4, r5, lr}
 8017dde:	3901      	subs	r1, #1
 8017de0:	2400      	movs	r4, #0
 8017de2:	42a2      	cmp	r2, r4
 8017de4:	d101      	bne.n	8017dea <memcmp+0xe>
 8017de6:	2000      	movs	r0, #0
 8017de8:	e005      	b.n	8017df6 <memcmp+0x1a>
 8017dea:	5d03      	ldrb	r3, [r0, r4]
 8017dec:	3401      	adds	r4, #1
 8017dee:	5d0d      	ldrb	r5, [r1, r4]
 8017df0:	42ab      	cmp	r3, r5
 8017df2:	d0f6      	beq.n	8017de2 <memcmp+0x6>
 8017df4:	1b58      	subs	r0, r3, r5
 8017df6:	bd30      	pop	{r4, r5, pc}

08017df8 <memcpy>:
 8017df8:	440a      	add	r2, r1
 8017dfa:	4291      	cmp	r1, r2
 8017dfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8017e00:	d100      	bne.n	8017e04 <memcpy+0xc>
 8017e02:	4770      	bx	lr
 8017e04:	b510      	push	{r4, lr}
 8017e06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017e0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017e0e:	4291      	cmp	r1, r2
 8017e10:	d1f9      	bne.n	8017e06 <memcpy+0xe>
 8017e12:	bd10      	pop	{r4, pc}

08017e14 <memmove>:
 8017e14:	4288      	cmp	r0, r1
 8017e16:	b510      	push	{r4, lr}
 8017e18:	eb01 0402 	add.w	r4, r1, r2
 8017e1c:	d902      	bls.n	8017e24 <memmove+0x10>
 8017e1e:	4284      	cmp	r4, r0
 8017e20:	4623      	mov	r3, r4
 8017e22:	d807      	bhi.n	8017e34 <memmove+0x20>
 8017e24:	1e43      	subs	r3, r0, #1
 8017e26:	42a1      	cmp	r1, r4
 8017e28:	d008      	beq.n	8017e3c <memmove+0x28>
 8017e2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017e2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017e32:	e7f8      	b.n	8017e26 <memmove+0x12>
 8017e34:	4402      	add	r2, r0
 8017e36:	4601      	mov	r1, r0
 8017e38:	428a      	cmp	r2, r1
 8017e3a:	d100      	bne.n	8017e3e <memmove+0x2a>
 8017e3c:	bd10      	pop	{r4, pc}
 8017e3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017e42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017e46:	e7f7      	b.n	8017e38 <memmove+0x24>

08017e48 <memset>:
 8017e48:	4402      	add	r2, r0
 8017e4a:	4603      	mov	r3, r0
 8017e4c:	4293      	cmp	r3, r2
 8017e4e:	d100      	bne.n	8017e52 <memset+0xa>
 8017e50:	4770      	bx	lr
 8017e52:	f803 1b01 	strb.w	r1, [r3], #1
 8017e56:	e7f9      	b.n	8017e4c <memset+0x4>

08017e58 <_free_r>:
 8017e58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017e5a:	2900      	cmp	r1, #0
 8017e5c:	d048      	beq.n	8017ef0 <_free_r+0x98>
 8017e5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017e62:	9001      	str	r0, [sp, #4]
 8017e64:	2b00      	cmp	r3, #0
 8017e66:	f1a1 0404 	sub.w	r4, r1, #4
 8017e6a:	bfb8      	it	lt
 8017e6c:	18e4      	addlt	r4, r4, r3
 8017e6e:	f001 fdbb 	bl	80199e8 <__malloc_lock>
 8017e72:	4a20      	ldr	r2, [pc, #128]	; (8017ef4 <_free_r+0x9c>)
 8017e74:	9801      	ldr	r0, [sp, #4]
 8017e76:	6813      	ldr	r3, [r2, #0]
 8017e78:	4615      	mov	r5, r2
 8017e7a:	b933      	cbnz	r3, 8017e8a <_free_r+0x32>
 8017e7c:	6063      	str	r3, [r4, #4]
 8017e7e:	6014      	str	r4, [r2, #0]
 8017e80:	b003      	add	sp, #12
 8017e82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017e86:	f001 bdb5 	b.w	80199f4 <__malloc_unlock>
 8017e8a:	42a3      	cmp	r3, r4
 8017e8c:	d90b      	bls.n	8017ea6 <_free_r+0x4e>
 8017e8e:	6821      	ldr	r1, [r4, #0]
 8017e90:	1862      	adds	r2, r4, r1
 8017e92:	4293      	cmp	r3, r2
 8017e94:	bf04      	itt	eq
 8017e96:	681a      	ldreq	r2, [r3, #0]
 8017e98:	685b      	ldreq	r3, [r3, #4]
 8017e9a:	6063      	str	r3, [r4, #4]
 8017e9c:	bf04      	itt	eq
 8017e9e:	1852      	addeq	r2, r2, r1
 8017ea0:	6022      	streq	r2, [r4, #0]
 8017ea2:	602c      	str	r4, [r5, #0]
 8017ea4:	e7ec      	b.n	8017e80 <_free_r+0x28>
 8017ea6:	461a      	mov	r2, r3
 8017ea8:	685b      	ldr	r3, [r3, #4]
 8017eaa:	b10b      	cbz	r3, 8017eb0 <_free_r+0x58>
 8017eac:	42a3      	cmp	r3, r4
 8017eae:	d9fa      	bls.n	8017ea6 <_free_r+0x4e>
 8017eb0:	6811      	ldr	r1, [r2, #0]
 8017eb2:	1855      	adds	r5, r2, r1
 8017eb4:	42a5      	cmp	r5, r4
 8017eb6:	d10b      	bne.n	8017ed0 <_free_r+0x78>
 8017eb8:	6824      	ldr	r4, [r4, #0]
 8017eba:	4421      	add	r1, r4
 8017ebc:	1854      	adds	r4, r2, r1
 8017ebe:	42a3      	cmp	r3, r4
 8017ec0:	6011      	str	r1, [r2, #0]
 8017ec2:	d1dd      	bne.n	8017e80 <_free_r+0x28>
 8017ec4:	681c      	ldr	r4, [r3, #0]
 8017ec6:	685b      	ldr	r3, [r3, #4]
 8017ec8:	6053      	str	r3, [r2, #4]
 8017eca:	4421      	add	r1, r4
 8017ecc:	6011      	str	r1, [r2, #0]
 8017ece:	e7d7      	b.n	8017e80 <_free_r+0x28>
 8017ed0:	d902      	bls.n	8017ed8 <_free_r+0x80>
 8017ed2:	230c      	movs	r3, #12
 8017ed4:	6003      	str	r3, [r0, #0]
 8017ed6:	e7d3      	b.n	8017e80 <_free_r+0x28>
 8017ed8:	6825      	ldr	r5, [r4, #0]
 8017eda:	1961      	adds	r1, r4, r5
 8017edc:	428b      	cmp	r3, r1
 8017ede:	bf04      	itt	eq
 8017ee0:	6819      	ldreq	r1, [r3, #0]
 8017ee2:	685b      	ldreq	r3, [r3, #4]
 8017ee4:	6063      	str	r3, [r4, #4]
 8017ee6:	bf04      	itt	eq
 8017ee8:	1949      	addeq	r1, r1, r5
 8017eea:	6021      	streq	r1, [r4, #0]
 8017eec:	6054      	str	r4, [r2, #4]
 8017eee:	e7c7      	b.n	8017e80 <_free_r+0x28>
 8017ef0:	b003      	add	sp, #12
 8017ef2:	bd30      	pop	{r4, r5, pc}
 8017ef4:	20000ba8 	.word	0x20000ba8

08017ef8 <_malloc_r>:
 8017ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017efa:	1ccd      	adds	r5, r1, #3
 8017efc:	f025 0503 	bic.w	r5, r5, #3
 8017f00:	3508      	adds	r5, #8
 8017f02:	2d0c      	cmp	r5, #12
 8017f04:	bf38      	it	cc
 8017f06:	250c      	movcc	r5, #12
 8017f08:	2d00      	cmp	r5, #0
 8017f0a:	4606      	mov	r6, r0
 8017f0c:	db01      	blt.n	8017f12 <_malloc_r+0x1a>
 8017f0e:	42a9      	cmp	r1, r5
 8017f10:	d903      	bls.n	8017f1a <_malloc_r+0x22>
 8017f12:	230c      	movs	r3, #12
 8017f14:	6033      	str	r3, [r6, #0]
 8017f16:	2000      	movs	r0, #0
 8017f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f1a:	f001 fd65 	bl	80199e8 <__malloc_lock>
 8017f1e:	4921      	ldr	r1, [pc, #132]	; (8017fa4 <_malloc_r+0xac>)
 8017f20:	680a      	ldr	r2, [r1, #0]
 8017f22:	4614      	mov	r4, r2
 8017f24:	b99c      	cbnz	r4, 8017f4e <_malloc_r+0x56>
 8017f26:	4f20      	ldr	r7, [pc, #128]	; (8017fa8 <_malloc_r+0xb0>)
 8017f28:	683b      	ldr	r3, [r7, #0]
 8017f2a:	b923      	cbnz	r3, 8017f36 <_malloc_r+0x3e>
 8017f2c:	4621      	mov	r1, r4
 8017f2e:	4630      	mov	r0, r6
 8017f30:	f000 f894 	bl	801805c <_sbrk_r>
 8017f34:	6038      	str	r0, [r7, #0]
 8017f36:	4629      	mov	r1, r5
 8017f38:	4630      	mov	r0, r6
 8017f3a:	f000 f88f 	bl	801805c <_sbrk_r>
 8017f3e:	1c43      	adds	r3, r0, #1
 8017f40:	d123      	bne.n	8017f8a <_malloc_r+0x92>
 8017f42:	230c      	movs	r3, #12
 8017f44:	6033      	str	r3, [r6, #0]
 8017f46:	4630      	mov	r0, r6
 8017f48:	f001 fd54 	bl	80199f4 <__malloc_unlock>
 8017f4c:	e7e3      	b.n	8017f16 <_malloc_r+0x1e>
 8017f4e:	6823      	ldr	r3, [r4, #0]
 8017f50:	1b5b      	subs	r3, r3, r5
 8017f52:	d417      	bmi.n	8017f84 <_malloc_r+0x8c>
 8017f54:	2b0b      	cmp	r3, #11
 8017f56:	d903      	bls.n	8017f60 <_malloc_r+0x68>
 8017f58:	6023      	str	r3, [r4, #0]
 8017f5a:	441c      	add	r4, r3
 8017f5c:	6025      	str	r5, [r4, #0]
 8017f5e:	e004      	b.n	8017f6a <_malloc_r+0x72>
 8017f60:	6863      	ldr	r3, [r4, #4]
 8017f62:	42a2      	cmp	r2, r4
 8017f64:	bf0c      	ite	eq
 8017f66:	600b      	streq	r3, [r1, #0]
 8017f68:	6053      	strne	r3, [r2, #4]
 8017f6a:	4630      	mov	r0, r6
 8017f6c:	f001 fd42 	bl	80199f4 <__malloc_unlock>
 8017f70:	f104 000b 	add.w	r0, r4, #11
 8017f74:	1d23      	adds	r3, r4, #4
 8017f76:	f020 0007 	bic.w	r0, r0, #7
 8017f7a:	1ac2      	subs	r2, r0, r3
 8017f7c:	d0cc      	beq.n	8017f18 <_malloc_r+0x20>
 8017f7e:	1a1b      	subs	r3, r3, r0
 8017f80:	50a3      	str	r3, [r4, r2]
 8017f82:	e7c9      	b.n	8017f18 <_malloc_r+0x20>
 8017f84:	4622      	mov	r2, r4
 8017f86:	6864      	ldr	r4, [r4, #4]
 8017f88:	e7cc      	b.n	8017f24 <_malloc_r+0x2c>
 8017f8a:	1cc4      	adds	r4, r0, #3
 8017f8c:	f024 0403 	bic.w	r4, r4, #3
 8017f90:	42a0      	cmp	r0, r4
 8017f92:	d0e3      	beq.n	8017f5c <_malloc_r+0x64>
 8017f94:	1a21      	subs	r1, r4, r0
 8017f96:	4630      	mov	r0, r6
 8017f98:	f000 f860 	bl	801805c <_sbrk_r>
 8017f9c:	3001      	adds	r0, #1
 8017f9e:	d1dd      	bne.n	8017f5c <_malloc_r+0x64>
 8017fa0:	e7cf      	b.n	8017f42 <_malloc_r+0x4a>
 8017fa2:	bf00      	nop
 8017fa4:	20000ba8 	.word	0x20000ba8
 8017fa8:	20000bac 	.word	0x20000bac

08017fac <iprintf>:
 8017fac:	b40f      	push	{r0, r1, r2, r3}
 8017fae:	4b0a      	ldr	r3, [pc, #40]	; (8017fd8 <iprintf+0x2c>)
 8017fb0:	b513      	push	{r0, r1, r4, lr}
 8017fb2:	681c      	ldr	r4, [r3, #0]
 8017fb4:	b124      	cbz	r4, 8017fc0 <iprintf+0x14>
 8017fb6:	69a3      	ldr	r3, [r4, #24]
 8017fb8:	b913      	cbnz	r3, 8017fc0 <iprintf+0x14>
 8017fba:	4620      	mov	r0, r4
 8017fbc:	f7ff fdba 	bl	8017b34 <__sinit>
 8017fc0:	ab05      	add	r3, sp, #20
 8017fc2:	9a04      	ldr	r2, [sp, #16]
 8017fc4:	68a1      	ldr	r1, [r4, #8]
 8017fc6:	9301      	str	r3, [sp, #4]
 8017fc8:	4620      	mov	r0, r4
 8017fca:	f002 fb69 	bl	801a6a0 <_vfiprintf_r>
 8017fce:	b002      	add	sp, #8
 8017fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017fd4:	b004      	add	sp, #16
 8017fd6:	4770      	bx	lr
 8017fd8:	2000001c 	.word	0x2000001c

08017fdc <rand>:
 8017fdc:	4b17      	ldr	r3, [pc, #92]	; (801803c <rand+0x60>)
 8017fde:	b510      	push	{r4, lr}
 8017fe0:	681c      	ldr	r4, [r3, #0]
 8017fe2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017fe4:	b9b3      	cbnz	r3, 8018014 <rand+0x38>
 8017fe6:	2018      	movs	r0, #24
 8017fe8:	f7ff fee8 	bl	8017dbc <malloc>
 8017fec:	63a0      	str	r0, [r4, #56]	; 0x38
 8017fee:	b928      	cbnz	r0, 8017ffc <rand+0x20>
 8017ff0:	4602      	mov	r2, r0
 8017ff2:	4b13      	ldr	r3, [pc, #76]	; (8018040 <rand+0x64>)
 8017ff4:	4813      	ldr	r0, [pc, #76]	; (8018044 <rand+0x68>)
 8017ff6:	214e      	movs	r1, #78	; 0x4e
 8017ff8:	f001 f8fa 	bl	80191f0 <__assert_func>
 8017ffc:	4a12      	ldr	r2, [pc, #72]	; (8018048 <rand+0x6c>)
 8017ffe:	4b13      	ldr	r3, [pc, #76]	; (801804c <rand+0x70>)
 8018000:	e9c0 2300 	strd	r2, r3, [r0]
 8018004:	4b12      	ldr	r3, [pc, #72]	; (8018050 <rand+0x74>)
 8018006:	6083      	str	r3, [r0, #8]
 8018008:	230b      	movs	r3, #11
 801800a:	8183      	strh	r3, [r0, #12]
 801800c:	2201      	movs	r2, #1
 801800e:	2300      	movs	r3, #0
 8018010:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8018014:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018016:	480f      	ldr	r0, [pc, #60]	; (8018054 <rand+0x78>)
 8018018:	690a      	ldr	r2, [r1, #16]
 801801a:	694b      	ldr	r3, [r1, #20]
 801801c:	4c0e      	ldr	r4, [pc, #56]	; (8018058 <rand+0x7c>)
 801801e:	4350      	muls	r0, r2
 8018020:	fb04 0003 	mla	r0, r4, r3, r0
 8018024:	fba2 3404 	umull	r3, r4, r2, r4
 8018028:	1c5a      	adds	r2, r3, #1
 801802a:	4404      	add	r4, r0
 801802c:	f144 0000 	adc.w	r0, r4, #0
 8018030:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8018034:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8018038:	bd10      	pop	{r4, pc}
 801803a:	bf00      	nop
 801803c:	2000001c 	.word	0x2000001c
 8018040:	0801dfe8 	.word	0x0801dfe8
 8018044:	0801dfff 	.word	0x0801dfff
 8018048:	abcd330e 	.word	0xabcd330e
 801804c:	e66d1234 	.word	0xe66d1234
 8018050:	0005deec 	.word	0x0005deec
 8018054:	5851f42d 	.word	0x5851f42d
 8018058:	4c957f2d 	.word	0x4c957f2d

0801805c <_sbrk_r>:
 801805c:	b538      	push	{r3, r4, r5, lr}
 801805e:	4d06      	ldr	r5, [pc, #24]	; (8018078 <_sbrk_r+0x1c>)
 8018060:	2300      	movs	r3, #0
 8018062:	4604      	mov	r4, r0
 8018064:	4608      	mov	r0, r1
 8018066:	602b      	str	r3, [r5, #0]
 8018068:	f7ec f8d6 	bl	8004218 <_sbrk>
 801806c:	1c43      	adds	r3, r0, #1
 801806e:	d102      	bne.n	8018076 <_sbrk_r+0x1a>
 8018070:	682b      	ldr	r3, [r5, #0]
 8018072:	b103      	cbz	r3, 8018076 <_sbrk_r+0x1a>
 8018074:	6023      	str	r3, [r4, #0]
 8018076:	bd38      	pop	{r3, r4, r5, pc}
 8018078:	2000952c 	.word	0x2000952c

0801807c <_raise_r>:
 801807c:	291f      	cmp	r1, #31
 801807e:	b538      	push	{r3, r4, r5, lr}
 8018080:	4604      	mov	r4, r0
 8018082:	460d      	mov	r5, r1
 8018084:	d904      	bls.n	8018090 <_raise_r+0x14>
 8018086:	2316      	movs	r3, #22
 8018088:	6003      	str	r3, [r0, #0]
 801808a:	f04f 30ff 	mov.w	r0, #4294967295
 801808e:	bd38      	pop	{r3, r4, r5, pc}
 8018090:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018092:	b112      	cbz	r2, 801809a <_raise_r+0x1e>
 8018094:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018098:	b94b      	cbnz	r3, 80180ae <_raise_r+0x32>
 801809a:	4620      	mov	r0, r4
 801809c:	f000 f830 	bl	8018100 <_getpid_r>
 80180a0:	462a      	mov	r2, r5
 80180a2:	4601      	mov	r1, r0
 80180a4:	4620      	mov	r0, r4
 80180a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80180aa:	f000 b817 	b.w	80180dc <_kill_r>
 80180ae:	2b01      	cmp	r3, #1
 80180b0:	d00a      	beq.n	80180c8 <_raise_r+0x4c>
 80180b2:	1c59      	adds	r1, r3, #1
 80180b4:	d103      	bne.n	80180be <_raise_r+0x42>
 80180b6:	2316      	movs	r3, #22
 80180b8:	6003      	str	r3, [r0, #0]
 80180ba:	2001      	movs	r0, #1
 80180bc:	e7e7      	b.n	801808e <_raise_r+0x12>
 80180be:	2400      	movs	r4, #0
 80180c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80180c4:	4628      	mov	r0, r5
 80180c6:	4798      	blx	r3
 80180c8:	2000      	movs	r0, #0
 80180ca:	e7e0      	b.n	801808e <_raise_r+0x12>

080180cc <raise>:
 80180cc:	4b02      	ldr	r3, [pc, #8]	; (80180d8 <raise+0xc>)
 80180ce:	4601      	mov	r1, r0
 80180d0:	6818      	ldr	r0, [r3, #0]
 80180d2:	f7ff bfd3 	b.w	801807c <_raise_r>
 80180d6:	bf00      	nop
 80180d8:	2000001c 	.word	0x2000001c

080180dc <_kill_r>:
 80180dc:	b538      	push	{r3, r4, r5, lr}
 80180de:	4d07      	ldr	r5, [pc, #28]	; (80180fc <_kill_r+0x20>)
 80180e0:	2300      	movs	r3, #0
 80180e2:	4604      	mov	r4, r0
 80180e4:	4608      	mov	r0, r1
 80180e6:	4611      	mov	r1, r2
 80180e8:	602b      	str	r3, [r5, #0]
 80180ea:	f7ec f80b 	bl	8004104 <_kill>
 80180ee:	1c43      	adds	r3, r0, #1
 80180f0:	d102      	bne.n	80180f8 <_kill_r+0x1c>
 80180f2:	682b      	ldr	r3, [r5, #0]
 80180f4:	b103      	cbz	r3, 80180f8 <_kill_r+0x1c>
 80180f6:	6023      	str	r3, [r4, #0]
 80180f8:	bd38      	pop	{r3, r4, r5, pc}
 80180fa:	bf00      	nop
 80180fc:	2000952c 	.word	0x2000952c

08018100 <_getpid_r>:
 8018100:	f7eb bff8 	b.w	80040f4 <_getpid>

08018104 <siprintf>:
 8018104:	b40e      	push	{r1, r2, r3}
 8018106:	b500      	push	{lr}
 8018108:	b09c      	sub	sp, #112	; 0x70
 801810a:	ab1d      	add	r3, sp, #116	; 0x74
 801810c:	9002      	str	r0, [sp, #8]
 801810e:	9006      	str	r0, [sp, #24]
 8018110:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018114:	4809      	ldr	r0, [pc, #36]	; (801813c <siprintf+0x38>)
 8018116:	9107      	str	r1, [sp, #28]
 8018118:	9104      	str	r1, [sp, #16]
 801811a:	4909      	ldr	r1, [pc, #36]	; (8018140 <siprintf+0x3c>)
 801811c:	f853 2b04 	ldr.w	r2, [r3], #4
 8018120:	9105      	str	r1, [sp, #20]
 8018122:	6800      	ldr	r0, [r0, #0]
 8018124:	9301      	str	r3, [sp, #4]
 8018126:	a902      	add	r1, sp, #8
 8018128:	f002 f990 	bl	801a44c <_svfiprintf_r>
 801812c:	9b02      	ldr	r3, [sp, #8]
 801812e:	2200      	movs	r2, #0
 8018130:	701a      	strb	r2, [r3, #0]
 8018132:	b01c      	add	sp, #112	; 0x70
 8018134:	f85d eb04 	ldr.w	lr, [sp], #4
 8018138:	b003      	add	sp, #12
 801813a:	4770      	bx	lr
 801813c:	2000001c 	.word	0x2000001c
 8018140:	ffff0208 	.word	0xffff0208

08018144 <__sread>:
 8018144:	b510      	push	{r4, lr}
 8018146:	460c      	mov	r4, r1
 8018148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801814c:	f002 fd6c 	bl	801ac28 <_read_r>
 8018150:	2800      	cmp	r0, #0
 8018152:	bfab      	itete	ge
 8018154:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018156:	89a3      	ldrhlt	r3, [r4, #12]
 8018158:	181b      	addge	r3, r3, r0
 801815a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801815e:	bfac      	ite	ge
 8018160:	6563      	strge	r3, [r4, #84]	; 0x54
 8018162:	81a3      	strhlt	r3, [r4, #12]
 8018164:	bd10      	pop	{r4, pc}

08018166 <__swrite>:
 8018166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801816a:	461f      	mov	r7, r3
 801816c:	898b      	ldrh	r3, [r1, #12]
 801816e:	05db      	lsls	r3, r3, #23
 8018170:	4605      	mov	r5, r0
 8018172:	460c      	mov	r4, r1
 8018174:	4616      	mov	r6, r2
 8018176:	d505      	bpl.n	8018184 <__swrite+0x1e>
 8018178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801817c:	2302      	movs	r3, #2
 801817e:	2200      	movs	r2, #0
 8018180:	f001 fc0e 	bl	80199a0 <_lseek_r>
 8018184:	89a3      	ldrh	r3, [r4, #12]
 8018186:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801818a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801818e:	81a3      	strh	r3, [r4, #12]
 8018190:	4632      	mov	r2, r6
 8018192:	463b      	mov	r3, r7
 8018194:	4628      	mov	r0, r5
 8018196:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801819a:	f000 bfa9 	b.w	80190f0 <_write_r>

0801819e <__sseek>:
 801819e:	b510      	push	{r4, lr}
 80181a0:	460c      	mov	r4, r1
 80181a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80181a6:	f001 fbfb 	bl	80199a0 <_lseek_r>
 80181aa:	1c43      	adds	r3, r0, #1
 80181ac:	89a3      	ldrh	r3, [r4, #12]
 80181ae:	bf15      	itete	ne
 80181b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80181b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80181b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80181ba:	81a3      	strheq	r3, [r4, #12]
 80181bc:	bf18      	it	ne
 80181be:	81a3      	strhne	r3, [r4, #12]
 80181c0:	bd10      	pop	{r4, pc}

080181c2 <__sclose>:
 80181c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80181c6:	f001 b831 	b.w	801922c <_close_r>

080181ca <strchr>:
 80181ca:	b2c9      	uxtb	r1, r1
 80181cc:	4603      	mov	r3, r0
 80181ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80181d2:	b11a      	cbz	r2, 80181dc <strchr+0x12>
 80181d4:	428a      	cmp	r2, r1
 80181d6:	d1f9      	bne.n	80181cc <strchr+0x2>
 80181d8:	4618      	mov	r0, r3
 80181da:	4770      	bx	lr
 80181dc:	2900      	cmp	r1, #0
 80181de:	bf18      	it	ne
 80181e0:	2300      	movne	r3, #0
 80181e2:	e7f9      	b.n	80181d8 <strchr+0xe>

080181e4 <strcpy>:
 80181e4:	4603      	mov	r3, r0
 80181e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80181ea:	f803 2b01 	strb.w	r2, [r3], #1
 80181ee:	2a00      	cmp	r2, #0
 80181f0:	d1f9      	bne.n	80181e6 <strcpy+0x2>
 80181f2:	4770      	bx	lr

080181f4 <strncmp>:
 80181f4:	b510      	push	{r4, lr}
 80181f6:	b16a      	cbz	r2, 8018214 <strncmp+0x20>
 80181f8:	3901      	subs	r1, #1
 80181fa:	1884      	adds	r4, r0, r2
 80181fc:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018200:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8018204:	4293      	cmp	r3, r2
 8018206:	d103      	bne.n	8018210 <strncmp+0x1c>
 8018208:	42a0      	cmp	r0, r4
 801820a:	d001      	beq.n	8018210 <strncmp+0x1c>
 801820c:	2b00      	cmp	r3, #0
 801820e:	d1f5      	bne.n	80181fc <strncmp+0x8>
 8018210:	1a98      	subs	r0, r3, r2
 8018212:	bd10      	pop	{r4, pc}
 8018214:	4610      	mov	r0, r2
 8018216:	e7fc      	b.n	8018212 <strncmp+0x1e>

08018218 <strstr>:
 8018218:	b5f0      	push	{r4, r5, r6, r7, lr}
 801821a:	780c      	ldrb	r4, [r1, #0]
 801821c:	b164      	cbz	r4, 8018238 <strstr+0x20>
 801821e:	4603      	mov	r3, r0
 8018220:	781a      	ldrb	r2, [r3, #0]
 8018222:	4618      	mov	r0, r3
 8018224:	1c5e      	adds	r6, r3, #1
 8018226:	b90a      	cbnz	r2, 801822c <strstr+0x14>
 8018228:	4610      	mov	r0, r2
 801822a:	e005      	b.n	8018238 <strstr+0x20>
 801822c:	4294      	cmp	r4, r2
 801822e:	d108      	bne.n	8018242 <strstr+0x2a>
 8018230:	460d      	mov	r5, r1
 8018232:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8018236:	b902      	cbnz	r2, 801823a <strstr+0x22>
 8018238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801823a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 801823e:	4297      	cmp	r7, r2
 8018240:	d0f7      	beq.n	8018232 <strstr+0x1a>
 8018242:	4633      	mov	r3, r6
 8018244:	e7ec      	b.n	8018220 <strstr+0x8>

08018246 <sulp>:
 8018246:	b570      	push	{r4, r5, r6, lr}
 8018248:	4604      	mov	r4, r0
 801824a:	460d      	mov	r5, r1
 801824c:	ec45 4b10 	vmov	d0, r4, r5
 8018250:	4616      	mov	r6, r2
 8018252:	f001 ff41 	bl	801a0d8 <__ulp>
 8018256:	ec51 0b10 	vmov	r0, r1, d0
 801825a:	b17e      	cbz	r6, 801827c <sulp+0x36>
 801825c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8018260:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8018264:	2b00      	cmp	r3, #0
 8018266:	dd09      	ble.n	801827c <sulp+0x36>
 8018268:	051b      	lsls	r3, r3, #20
 801826a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801826e:	2400      	movs	r4, #0
 8018270:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8018274:	4622      	mov	r2, r4
 8018276:	462b      	mov	r3, r5
 8018278:	f7e8 f9ce 	bl	8000618 <__aeabi_dmul>
 801827c:	bd70      	pop	{r4, r5, r6, pc}
	...

08018280 <_strtod_l>:
 8018280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018284:	b0a3      	sub	sp, #140	; 0x8c
 8018286:	461f      	mov	r7, r3
 8018288:	2300      	movs	r3, #0
 801828a:	931e      	str	r3, [sp, #120]	; 0x78
 801828c:	4ba4      	ldr	r3, [pc, #656]	; (8018520 <_strtod_l+0x2a0>)
 801828e:	9219      	str	r2, [sp, #100]	; 0x64
 8018290:	681b      	ldr	r3, [r3, #0]
 8018292:	9307      	str	r3, [sp, #28]
 8018294:	4604      	mov	r4, r0
 8018296:	4618      	mov	r0, r3
 8018298:	4688      	mov	r8, r1
 801829a:	f7e7 ffa9 	bl	80001f0 <strlen>
 801829e:	f04f 0a00 	mov.w	sl, #0
 80182a2:	4605      	mov	r5, r0
 80182a4:	f04f 0b00 	mov.w	fp, #0
 80182a8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80182ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80182ae:	781a      	ldrb	r2, [r3, #0]
 80182b0:	2a2b      	cmp	r2, #43	; 0x2b
 80182b2:	d04c      	beq.n	801834e <_strtod_l+0xce>
 80182b4:	d839      	bhi.n	801832a <_strtod_l+0xaa>
 80182b6:	2a0d      	cmp	r2, #13
 80182b8:	d832      	bhi.n	8018320 <_strtod_l+0xa0>
 80182ba:	2a08      	cmp	r2, #8
 80182bc:	d832      	bhi.n	8018324 <_strtod_l+0xa4>
 80182be:	2a00      	cmp	r2, #0
 80182c0:	d03c      	beq.n	801833c <_strtod_l+0xbc>
 80182c2:	2300      	movs	r3, #0
 80182c4:	930e      	str	r3, [sp, #56]	; 0x38
 80182c6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80182c8:	7833      	ldrb	r3, [r6, #0]
 80182ca:	2b30      	cmp	r3, #48	; 0x30
 80182cc:	f040 80b4 	bne.w	8018438 <_strtod_l+0x1b8>
 80182d0:	7873      	ldrb	r3, [r6, #1]
 80182d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80182d6:	2b58      	cmp	r3, #88	; 0x58
 80182d8:	d16c      	bne.n	80183b4 <_strtod_l+0x134>
 80182da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80182dc:	9301      	str	r3, [sp, #4]
 80182de:	ab1e      	add	r3, sp, #120	; 0x78
 80182e0:	9702      	str	r7, [sp, #8]
 80182e2:	9300      	str	r3, [sp, #0]
 80182e4:	4a8f      	ldr	r2, [pc, #572]	; (8018524 <_strtod_l+0x2a4>)
 80182e6:	ab1f      	add	r3, sp, #124	; 0x7c
 80182e8:	a91d      	add	r1, sp, #116	; 0x74
 80182ea:	4620      	mov	r0, r4
 80182ec:	f001 f840 	bl	8019370 <__gethex>
 80182f0:	f010 0707 	ands.w	r7, r0, #7
 80182f4:	4605      	mov	r5, r0
 80182f6:	d005      	beq.n	8018304 <_strtod_l+0x84>
 80182f8:	2f06      	cmp	r7, #6
 80182fa:	d12a      	bne.n	8018352 <_strtod_l+0xd2>
 80182fc:	3601      	adds	r6, #1
 80182fe:	2300      	movs	r3, #0
 8018300:	961d      	str	r6, [sp, #116]	; 0x74
 8018302:	930e      	str	r3, [sp, #56]	; 0x38
 8018304:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018306:	2b00      	cmp	r3, #0
 8018308:	f040 8596 	bne.w	8018e38 <_strtod_l+0xbb8>
 801830c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801830e:	b1db      	cbz	r3, 8018348 <_strtod_l+0xc8>
 8018310:	4652      	mov	r2, sl
 8018312:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8018316:	ec43 2b10 	vmov	d0, r2, r3
 801831a:	b023      	add	sp, #140	; 0x8c
 801831c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018320:	2a20      	cmp	r2, #32
 8018322:	d1ce      	bne.n	80182c2 <_strtod_l+0x42>
 8018324:	3301      	adds	r3, #1
 8018326:	931d      	str	r3, [sp, #116]	; 0x74
 8018328:	e7c0      	b.n	80182ac <_strtod_l+0x2c>
 801832a:	2a2d      	cmp	r2, #45	; 0x2d
 801832c:	d1c9      	bne.n	80182c2 <_strtod_l+0x42>
 801832e:	2201      	movs	r2, #1
 8018330:	920e      	str	r2, [sp, #56]	; 0x38
 8018332:	1c5a      	adds	r2, r3, #1
 8018334:	921d      	str	r2, [sp, #116]	; 0x74
 8018336:	785b      	ldrb	r3, [r3, #1]
 8018338:	2b00      	cmp	r3, #0
 801833a:	d1c4      	bne.n	80182c6 <_strtod_l+0x46>
 801833c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801833e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8018342:	2b00      	cmp	r3, #0
 8018344:	f040 8576 	bne.w	8018e34 <_strtod_l+0xbb4>
 8018348:	4652      	mov	r2, sl
 801834a:	465b      	mov	r3, fp
 801834c:	e7e3      	b.n	8018316 <_strtod_l+0x96>
 801834e:	2200      	movs	r2, #0
 8018350:	e7ee      	b.n	8018330 <_strtod_l+0xb0>
 8018352:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8018354:	b13a      	cbz	r2, 8018366 <_strtod_l+0xe6>
 8018356:	2135      	movs	r1, #53	; 0x35
 8018358:	a820      	add	r0, sp, #128	; 0x80
 801835a:	f001 ffc8 	bl	801a2ee <__copybits>
 801835e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8018360:	4620      	mov	r0, r4
 8018362:	f001 fb8d 	bl	8019a80 <_Bfree>
 8018366:	3f01      	subs	r7, #1
 8018368:	2f05      	cmp	r7, #5
 801836a:	d807      	bhi.n	801837c <_strtod_l+0xfc>
 801836c:	e8df f007 	tbb	[pc, r7]
 8018370:	1d180b0e 	.word	0x1d180b0e
 8018374:	030e      	.short	0x030e
 8018376:	f04f 0b00 	mov.w	fp, #0
 801837a:	46da      	mov	sl, fp
 801837c:	0728      	lsls	r0, r5, #28
 801837e:	d5c1      	bpl.n	8018304 <_strtod_l+0x84>
 8018380:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8018384:	e7be      	b.n	8018304 <_strtod_l+0x84>
 8018386:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801838a:	e7f7      	b.n	801837c <_strtod_l+0xfc>
 801838c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8018390:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8018392:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8018396:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801839a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801839e:	e7ed      	b.n	801837c <_strtod_l+0xfc>
 80183a0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8018528 <_strtod_l+0x2a8>
 80183a4:	f04f 0a00 	mov.w	sl, #0
 80183a8:	e7e8      	b.n	801837c <_strtod_l+0xfc>
 80183aa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80183ae:	f04f 3aff 	mov.w	sl, #4294967295
 80183b2:	e7e3      	b.n	801837c <_strtod_l+0xfc>
 80183b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80183b6:	1c5a      	adds	r2, r3, #1
 80183b8:	921d      	str	r2, [sp, #116]	; 0x74
 80183ba:	785b      	ldrb	r3, [r3, #1]
 80183bc:	2b30      	cmp	r3, #48	; 0x30
 80183be:	d0f9      	beq.n	80183b4 <_strtod_l+0x134>
 80183c0:	2b00      	cmp	r3, #0
 80183c2:	d09f      	beq.n	8018304 <_strtod_l+0x84>
 80183c4:	2301      	movs	r3, #1
 80183c6:	f04f 0900 	mov.w	r9, #0
 80183ca:	9304      	str	r3, [sp, #16]
 80183cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80183ce:	930a      	str	r3, [sp, #40]	; 0x28
 80183d0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80183d4:	464f      	mov	r7, r9
 80183d6:	220a      	movs	r2, #10
 80183d8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80183da:	7806      	ldrb	r6, [r0, #0]
 80183dc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80183e0:	b2d9      	uxtb	r1, r3
 80183e2:	2909      	cmp	r1, #9
 80183e4:	d92a      	bls.n	801843c <_strtod_l+0x1bc>
 80183e6:	9907      	ldr	r1, [sp, #28]
 80183e8:	462a      	mov	r2, r5
 80183ea:	f7ff ff03 	bl	80181f4 <strncmp>
 80183ee:	b398      	cbz	r0, 8018458 <_strtod_l+0x1d8>
 80183f0:	2000      	movs	r0, #0
 80183f2:	4633      	mov	r3, r6
 80183f4:	463d      	mov	r5, r7
 80183f6:	9007      	str	r0, [sp, #28]
 80183f8:	4602      	mov	r2, r0
 80183fa:	2b65      	cmp	r3, #101	; 0x65
 80183fc:	d001      	beq.n	8018402 <_strtod_l+0x182>
 80183fe:	2b45      	cmp	r3, #69	; 0x45
 8018400:	d118      	bne.n	8018434 <_strtod_l+0x1b4>
 8018402:	b91d      	cbnz	r5, 801840c <_strtod_l+0x18c>
 8018404:	9b04      	ldr	r3, [sp, #16]
 8018406:	4303      	orrs	r3, r0
 8018408:	d098      	beq.n	801833c <_strtod_l+0xbc>
 801840a:	2500      	movs	r5, #0
 801840c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8018410:	f108 0301 	add.w	r3, r8, #1
 8018414:	931d      	str	r3, [sp, #116]	; 0x74
 8018416:	f898 3001 	ldrb.w	r3, [r8, #1]
 801841a:	2b2b      	cmp	r3, #43	; 0x2b
 801841c:	d075      	beq.n	801850a <_strtod_l+0x28a>
 801841e:	2b2d      	cmp	r3, #45	; 0x2d
 8018420:	d07b      	beq.n	801851a <_strtod_l+0x29a>
 8018422:	f04f 0c00 	mov.w	ip, #0
 8018426:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801842a:	2909      	cmp	r1, #9
 801842c:	f240 8082 	bls.w	8018534 <_strtod_l+0x2b4>
 8018430:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8018434:	2600      	movs	r6, #0
 8018436:	e09d      	b.n	8018574 <_strtod_l+0x2f4>
 8018438:	2300      	movs	r3, #0
 801843a:	e7c4      	b.n	80183c6 <_strtod_l+0x146>
 801843c:	2f08      	cmp	r7, #8
 801843e:	bfd8      	it	le
 8018440:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8018442:	f100 0001 	add.w	r0, r0, #1
 8018446:	bfda      	itte	le
 8018448:	fb02 3301 	mlale	r3, r2, r1, r3
 801844c:	9309      	strle	r3, [sp, #36]	; 0x24
 801844e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8018452:	3701      	adds	r7, #1
 8018454:	901d      	str	r0, [sp, #116]	; 0x74
 8018456:	e7bf      	b.n	80183d8 <_strtod_l+0x158>
 8018458:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801845a:	195a      	adds	r2, r3, r5
 801845c:	921d      	str	r2, [sp, #116]	; 0x74
 801845e:	5d5b      	ldrb	r3, [r3, r5]
 8018460:	2f00      	cmp	r7, #0
 8018462:	d037      	beq.n	80184d4 <_strtod_l+0x254>
 8018464:	9007      	str	r0, [sp, #28]
 8018466:	463d      	mov	r5, r7
 8018468:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801846c:	2a09      	cmp	r2, #9
 801846e:	d912      	bls.n	8018496 <_strtod_l+0x216>
 8018470:	2201      	movs	r2, #1
 8018472:	e7c2      	b.n	80183fa <_strtod_l+0x17a>
 8018474:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018476:	1c5a      	adds	r2, r3, #1
 8018478:	921d      	str	r2, [sp, #116]	; 0x74
 801847a:	785b      	ldrb	r3, [r3, #1]
 801847c:	3001      	adds	r0, #1
 801847e:	2b30      	cmp	r3, #48	; 0x30
 8018480:	d0f8      	beq.n	8018474 <_strtod_l+0x1f4>
 8018482:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8018486:	2a08      	cmp	r2, #8
 8018488:	f200 84db 	bhi.w	8018e42 <_strtod_l+0xbc2>
 801848c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801848e:	9007      	str	r0, [sp, #28]
 8018490:	2000      	movs	r0, #0
 8018492:	920a      	str	r2, [sp, #40]	; 0x28
 8018494:	4605      	mov	r5, r0
 8018496:	3b30      	subs	r3, #48	; 0x30
 8018498:	f100 0201 	add.w	r2, r0, #1
 801849c:	d014      	beq.n	80184c8 <_strtod_l+0x248>
 801849e:	9907      	ldr	r1, [sp, #28]
 80184a0:	4411      	add	r1, r2
 80184a2:	9107      	str	r1, [sp, #28]
 80184a4:	462a      	mov	r2, r5
 80184a6:	eb00 0e05 	add.w	lr, r0, r5
 80184aa:	210a      	movs	r1, #10
 80184ac:	4572      	cmp	r2, lr
 80184ae:	d113      	bne.n	80184d8 <_strtod_l+0x258>
 80184b0:	182a      	adds	r2, r5, r0
 80184b2:	2a08      	cmp	r2, #8
 80184b4:	f105 0501 	add.w	r5, r5, #1
 80184b8:	4405      	add	r5, r0
 80184ba:	dc1c      	bgt.n	80184f6 <_strtod_l+0x276>
 80184bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80184be:	220a      	movs	r2, #10
 80184c0:	fb02 3301 	mla	r3, r2, r1, r3
 80184c4:	9309      	str	r3, [sp, #36]	; 0x24
 80184c6:	2200      	movs	r2, #0
 80184c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80184ca:	1c59      	adds	r1, r3, #1
 80184cc:	911d      	str	r1, [sp, #116]	; 0x74
 80184ce:	785b      	ldrb	r3, [r3, #1]
 80184d0:	4610      	mov	r0, r2
 80184d2:	e7c9      	b.n	8018468 <_strtod_l+0x1e8>
 80184d4:	4638      	mov	r0, r7
 80184d6:	e7d2      	b.n	801847e <_strtod_l+0x1fe>
 80184d8:	2a08      	cmp	r2, #8
 80184da:	dc04      	bgt.n	80184e6 <_strtod_l+0x266>
 80184dc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80184de:	434e      	muls	r6, r1
 80184e0:	9609      	str	r6, [sp, #36]	; 0x24
 80184e2:	3201      	adds	r2, #1
 80184e4:	e7e2      	b.n	80184ac <_strtod_l+0x22c>
 80184e6:	f102 0c01 	add.w	ip, r2, #1
 80184ea:	f1bc 0f10 	cmp.w	ip, #16
 80184ee:	bfd8      	it	le
 80184f0:	fb01 f909 	mulle.w	r9, r1, r9
 80184f4:	e7f5      	b.n	80184e2 <_strtod_l+0x262>
 80184f6:	2d10      	cmp	r5, #16
 80184f8:	bfdc      	itt	le
 80184fa:	220a      	movle	r2, #10
 80184fc:	fb02 3909 	mlale	r9, r2, r9, r3
 8018500:	e7e1      	b.n	80184c6 <_strtod_l+0x246>
 8018502:	2300      	movs	r3, #0
 8018504:	9307      	str	r3, [sp, #28]
 8018506:	2201      	movs	r2, #1
 8018508:	e77c      	b.n	8018404 <_strtod_l+0x184>
 801850a:	f04f 0c00 	mov.w	ip, #0
 801850e:	f108 0302 	add.w	r3, r8, #2
 8018512:	931d      	str	r3, [sp, #116]	; 0x74
 8018514:	f898 3002 	ldrb.w	r3, [r8, #2]
 8018518:	e785      	b.n	8018426 <_strtod_l+0x1a6>
 801851a:	f04f 0c01 	mov.w	ip, #1
 801851e:	e7f6      	b.n	801850e <_strtod_l+0x28e>
 8018520:	0801e19c 	.word	0x0801e19c
 8018524:	0801e06c 	.word	0x0801e06c
 8018528:	7ff00000 	.word	0x7ff00000
 801852c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801852e:	1c59      	adds	r1, r3, #1
 8018530:	911d      	str	r1, [sp, #116]	; 0x74
 8018532:	785b      	ldrb	r3, [r3, #1]
 8018534:	2b30      	cmp	r3, #48	; 0x30
 8018536:	d0f9      	beq.n	801852c <_strtod_l+0x2ac>
 8018538:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801853c:	2908      	cmp	r1, #8
 801853e:	f63f af79 	bhi.w	8018434 <_strtod_l+0x1b4>
 8018542:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8018546:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018548:	9308      	str	r3, [sp, #32]
 801854a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801854c:	1c59      	adds	r1, r3, #1
 801854e:	911d      	str	r1, [sp, #116]	; 0x74
 8018550:	785b      	ldrb	r3, [r3, #1]
 8018552:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8018556:	2e09      	cmp	r6, #9
 8018558:	d937      	bls.n	80185ca <_strtod_l+0x34a>
 801855a:	9e08      	ldr	r6, [sp, #32]
 801855c:	1b89      	subs	r1, r1, r6
 801855e:	2908      	cmp	r1, #8
 8018560:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8018564:	dc02      	bgt.n	801856c <_strtod_l+0x2ec>
 8018566:	4576      	cmp	r6, lr
 8018568:	bfa8      	it	ge
 801856a:	4676      	movge	r6, lr
 801856c:	f1bc 0f00 	cmp.w	ip, #0
 8018570:	d000      	beq.n	8018574 <_strtod_l+0x2f4>
 8018572:	4276      	negs	r6, r6
 8018574:	2d00      	cmp	r5, #0
 8018576:	d14f      	bne.n	8018618 <_strtod_l+0x398>
 8018578:	9904      	ldr	r1, [sp, #16]
 801857a:	4301      	orrs	r1, r0
 801857c:	f47f aec2 	bne.w	8018304 <_strtod_l+0x84>
 8018580:	2a00      	cmp	r2, #0
 8018582:	f47f aedb 	bne.w	801833c <_strtod_l+0xbc>
 8018586:	2b69      	cmp	r3, #105	; 0x69
 8018588:	d027      	beq.n	80185da <_strtod_l+0x35a>
 801858a:	dc24      	bgt.n	80185d6 <_strtod_l+0x356>
 801858c:	2b49      	cmp	r3, #73	; 0x49
 801858e:	d024      	beq.n	80185da <_strtod_l+0x35a>
 8018590:	2b4e      	cmp	r3, #78	; 0x4e
 8018592:	f47f aed3 	bne.w	801833c <_strtod_l+0xbc>
 8018596:	499e      	ldr	r1, [pc, #632]	; (8018810 <_strtod_l+0x590>)
 8018598:	a81d      	add	r0, sp, #116	; 0x74
 801859a:	f001 f941 	bl	8019820 <__match>
 801859e:	2800      	cmp	r0, #0
 80185a0:	f43f aecc 	beq.w	801833c <_strtod_l+0xbc>
 80185a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80185a6:	781b      	ldrb	r3, [r3, #0]
 80185a8:	2b28      	cmp	r3, #40	; 0x28
 80185aa:	d12d      	bne.n	8018608 <_strtod_l+0x388>
 80185ac:	4999      	ldr	r1, [pc, #612]	; (8018814 <_strtod_l+0x594>)
 80185ae:	aa20      	add	r2, sp, #128	; 0x80
 80185b0:	a81d      	add	r0, sp, #116	; 0x74
 80185b2:	f001 f949 	bl	8019848 <__hexnan>
 80185b6:	2805      	cmp	r0, #5
 80185b8:	d126      	bne.n	8018608 <_strtod_l+0x388>
 80185ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80185bc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80185c0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80185c4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80185c8:	e69c      	b.n	8018304 <_strtod_l+0x84>
 80185ca:	210a      	movs	r1, #10
 80185cc:	fb01 3e0e 	mla	lr, r1, lr, r3
 80185d0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80185d4:	e7b9      	b.n	801854a <_strtod_l+0x2ca>
 80185d6:	2b6e      	cmp	r3, #110	; 0x6e
 80185d8:	e7db      	b.n	8018592 <_strtod_l+0x312>
 80185da:	498f      	ldr	r1, [pc, #572]	; (8018818 <_strtod_l+0x598>)
 80185dc:	a81d      	add	r0, sp, #116	; 0x74
 80185de:	f001 f91f 	bl	8019820 <__match>
 80185e2:	2800      	cmp	r0, #0
 80185e4:	f43f aeaa 	beq.w	801833c <_strtod_l+0xbc>
 80185e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80185ea:	498c      	ldr	r1, [pc, #560]	; (801881c <_strtod_l+0x59c>)
 80185ec:	3b01      	subs	r3, #1
 80185ee:	a81d      	add	r0, sp, #116	; 0x74
 80185f0:	931d      	str	r3, [sp, #116]	; 0x74
 80185f2:	f001 f915 	bl	8019820 <__match>
 80185f6:	b910      	cbnz	r0, 80185fe <_strtod_l+0x37e>
 80185f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80185fa:	3301      	adds	r3, #1
 80185fc:	931d      	str	r3, [sp, #116]	; 0x74
 80185fe:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801882c <_strtod_l+0x5ac>
 8018602:	f04f 0a00 	mov.w	sl, #0
 8018606:	e67d      	b.n	8018304 <_strtod_l+0x84>
 8018608:	4885      	ldr	r0, [pc, #532]	; (8018820 <_strtod_l+0x5a0>)
 801860a:	f002 fb21 	bl	801ac50 <nan>
 801860e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8018612:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8018616:	e675      	b.n	8018304 <_strtod_l+0x84>
 8018618:	9b07      	ldr	r3, [sp, #28]
 801861a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801861c:	1af3      	subs	r3, r6, r3
 801861e:	2f00      	cmp	r7, #0
 8018620:	bf08      	it	eq
 8018622:	462f      	moveq	r7, r5
 8018624:	2d10      	cmp	r5, #16
 8018626:	9308      	str	r3, [sp, #32]
 8018628:	46a8      	mov	r8, r5
 801862a:	bfa8      	it	ge
 801862c:	f04f 0810 	movge.w	r8, #16
 8018630:	f7e7 ff78 	bl	8000524 <__aeabi_ui2d>
 8018634:	2d09      	cmp	r5, #9
 8018636:	4682      	mov	sl, r0
 8018638:	468b      	mov	fp, r1
 801863a:	dd13      	ble.n	8018664 <_strtod_l+0x3e4>
 801863c:	4b79      	ldr	r3, [pc, #484]	; (8018824 <_strtod_l+0x5a4>)
 801863e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8018642:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8018646:	f7e7 ffe7 	bl	8000618 <__aeabi_dmul>
 801864a:	4682      	mov	sl, r0
 801864c:	4648      	mov	r0, r9
 801864e:	468b      	mov	fp, r1
 8018650:	f7e7 ff68 	bl	8000524 <__aeabi_ui2d>
 8018654:	4602      	mov	r2, r0
 8018656:	460b      	mov	r3, r1
 8018658:	4650      	mov	r0, sl
 801865a:	4659      	mov	r1, fp
 801865c:	f7e7 fe26 	bl	80002ac <__adddf3>
 8018660:	4682      	mov	sl, r0
 8018662:	468b      	mov	fp, r1
 8018664:	2d0f      	cmp	r5, #15
 8018666:	dc38      	bgt.n	80186da <_strtod_l+0x45a>
 8018668:	9b08      	ldr	r3, [sp, #32]
 801866a:	2b00      	cmp	r3, #0
 801866c:	f43f ae4a 	beq.w	8018304 <_strtod_l+0x84>
 8018670:	dd24      	ble.n	80186bc <_strtod_l+0x43c>
 8018672:	2b16      	cmp	r3, #22
 8018674:	dc0b      	bgt.n	801868e <_strtod_l+0x40e>
 8018676:	4d6b      	ldr	r5, [pc, #428]	; (8018824 <_strtod_l+0x5a4>)
 8018678:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801867c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8018680:	4652      	mov	r2, sl
 8018682:	465b      	mov	r3, fp
 8018684:	f7e7 ffc8 	bl	8000618 <__aeabi_dmul>
 8018688:	4682      	mov	sl, r0
 801868a:	468b      	mov	fp, r1
 801868c:	e63a      	b.n	8018304 <_strtod_l+0x84>
 801868e:	9a08      	ldr	r2, [sp, #32]
 8018690:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8018694:	4293      	cmp	r3, r2
 8018696:	db20      	blt.n	80186da <_strtod_l+0x45a>
 8018698:	4c62      	ldr	r4, [pc, #392]	; (8018824 <_strtod_l+0x5a4>)
 801869a:	f1c5 050f 	rsb	r5, r5, #15
 801869e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80186a2:	4652      	mov	r2, sl
 80186a4:	465b      	mov	r3, fp
 80186a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80186aa:	f7e7 ffb5 	bl	8000618 <__aeabi_dmul>
 80186ae:	9b08      	ldr	r3, [sp, #32]
 80186b0:	1b5d      	subs	r5, r3, r5
 80186b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80186b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80186ba:	e7e3      	b.n	8018684 <_strtod_l+0x404>
 80186bc:	9b08      	ldr	r3, [sp, #32]
 80186be:	3316      	adds	r3, #22
 80186c0:	db0b      	blt.n	80186da <_strtod_l+0x45a>
 80186c2:	9b07      	ldr	r3, [sp, #28]
 80186c4:	4a57      	ldr	r2, [pc, #348]	; (8018824 <_strtod_l+0x5a4>)
 80186c6:	1b9e      	subs	r6, r3, r6
 80186c8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80186cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80186d0:	4650      	mov	r0, sl
 80186d2:	4659      	mov	r1, fp
 80186d4:	f7e8 f8ca 	bl	800086c <__aeabi_ddiv>
 80186d8:	e7d6      	b.n	8018688 <_strtod_l+0x408>
 80186da:	9b08      	ldr	r3, [sp, #32]
 80186dc:	eba5 0808 	sub.w	r8, r5, r8
 80186e0:	4498      	add	r8, r3
 80186e2:	f1b8 0f00 	cmp.w	r8, #0
 80186e6:	dd71      	ble.n	80187cc <_strtod_l+0x54c>
 80186e8:	f018 030f 	ands.w	r3, r8, #15
 80186ec:	d00a      	beq.n	8018704 <_strtod_l+0x484>
 80186ee:	494d      	ldr	r1, [pc, #308]	; (8018824 <_strtod_l+0x5a4>)
 80186f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80186f4:	4652      	mov	r2, sl
 80186f6:	465b      	mov	r3, fp
 80186f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80186fc:	f7e7 ff8c 	bl	8000618 <__aeabi_dmul>
 8018700:	4682      	mov	sl, r0
 8018702:	468b      	mov	fp, r1
 8018704:	f038 080f 	bics.w	r8, r8, #15
 8018708:	d04d      	beq.n	80187a6 <_strtod_l+0x526>
 801870a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801870e:	dd22      	ble.n	8018756 <_strtod_l+0x4d6>
 8018710:	2500      	movs	r5, #0
 8018712:	462e      	mov	r6, r5
 8018714:	9509      	str	r5, [sp, #36]	; 0x24
 8018716:	9507      	str	r5, [sp, #28]
 8018718:	2322      	movs	r3, #34	; 0x22
 801871a:	f8df b110 	ldr.w	fp, [pc, #272]	; 801882c <_strtod_l+0x5ac>
 801871e:	6023      	str	r3, [r4, #0]
 8018720:	f04f 0a00 	mov.w	sl, #0
 8018724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018726:	2b00      	cmp	r3, #0
 8018728:	f43f adec 	beq.w	8018304 <_strtod_l+0x84>
 801872c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801872e:	4620      	mov	r0, r4
 8018730:	f001 f9a6 	bl	8019a80 <_Bfree>
 8018734:	9907      	ldr	r1, [sp, #28]
 8018736:	4620      	mov	r0, r4
 8018738:	f001 f9a2 	bl	8019a80 <_Bfree>
 801873c:	4631      	mov	r1, r6
 801873e:	4620      	mov	r0, r4
 8018740:	f001 f99e 	bl	8019a80 <_Bfree>
 8018744:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018746:	4620      	mov	r0, r4
 8018748:	f001 f99a 	bl	8019a80 <_Bfree>
 801874c:	4629      	mov	r1, r5
 801874e:	4620      	mov	r0, r4
 8018750:	f001 f996 	bl	8019a80 <_Bfree>
 8018754:	e5d6      	b.n	8018304 <_strtod_l+0x84>
 8018756:	2300      	movs	r3, #0
 8018758:	ea4f 1828 	mov.w	r8, r8, asr #4
 801875c:	4650      	mov	r0, sl
 801875e:	4659      	mov	r1, fp
 8018760:	4699      	mov	r9, r3
 8018762:	f1b8 0f01 	cmp.w	r8, #1
 8018766:	dc21      	bgt.n	80187ac <_strtod_l+0x52c>
 8018768:	b10b      	cbz	r3, 801876e <_strtod_l+0x4ee>
 801876a:	4682      	mov	sl, r0
 801876c:	468b      	mov	fp, r1
 801876e:	4b2e      	ldr	r3, [pc, #184]	; (8018828 <_strtod_l+0x5a8>)
 8018770:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8018774:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8018778:	4652      	mov	r2, sl
 801877a:	465b      	mov	r3, fp
 801877c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8018780:	f7e7 ff4a 	bl	8000618 <__aeabi_dmul>
 8018784:	4b29      	ldr	r3, [pc, #164]	; (801882c <_strtod_l+0x5ac>)
 8018786:	460a      	mov	r2, r1
 8018788:	400b      	ands	r3, r1
 801878a:	4929      	ldr	r1, [pc, #164]	; (8018830 <_strtod_l+0x5b0>)
 801878c:	428b      	cmp	r3, r1
 801878e:	4682      	mov	sl, r0
 8018790:	d8be      	bhi.n	8018710 <_strtod_l+0x490>
 8018792:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8018796:	428b      	cmp	r3, r1
 8018798:	bf86      	itte	hi
 801879a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8018834 <_strtod_l+0x5b4>
 801879e:	f04f 3aff 	movhi.w	sl, #4294967295
 80187a2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80187a6:	2300      	movs	r3, #0
 80187a8:	9304      	str	r3, [sp, #16]
 80187aa:	e081      	b.n	80188b0 <_strtod_l+0x630>
 80187ac:	f018 0f01 	tst.w	r8, #1
 80187b0:	d007      	beq.n	80187c2 <_strtod_l+0x542>
 80187b2:	4b1d      	ldr	r3, [pc, #116]	; (8018828 <_strtod_l+0x5a8>)
 80187b4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80187b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80187bc:	f7e7 ff2c 	bl	8000618 <__aeabi_dmul>
 80187c0:	2301      	movs	r3, #1
 80187c2:	f109 0901 	add.w	r9, r9, #1
 80187c6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80187ca:	e7ca      	b.n	8018762 <_strtod_l+0x4e2>
 80187cc:	d0eb      	beq.n	80187a6 <_strtod_l+0x526>
 80187ce:	f1c8 0800 	rsb	r8, r8, #0
 80187d2:	f018 020f 	ands.w	r2, r8, #15
 80187d6:	d00a      	beq.n	80187ee <_strtod_l+0x56e>
 80187d8:	4b12      	ldr	r3, [pc, #72]	; (8018824 <_strtod_l+0x5a4>)
 80187da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80187de:	4650      	mov	r0, sl
 80187e0:	4659      	mov	r1, fp
 80187e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80187e6:	f7e8 f841 	bl	800086c <__aeabi_ddiv>
 80187ea:	4682      	mov	sl, r0
 80187ec:	468b      	mov	fp, r1
 80187ee:	ea5f 1828 	movs.w	r8, r8, asr #4
 80187f2:	d0d8      	beq.n	80187a6 <_strtod_l+0x526>
 80187f4:	f1b8 0f1f 	cmp.w	r8, #31
 80187f8:	dd1e      	ble.n	8018838 <_strtod_l+0x5b8>
 80187fa:	2500      	movs	r5, #0
 80187fc:	462e      	mov	r6, r5
 80187fe:	9509      	str	r5, [sp, #36]	; 0x24
 8018800:	9507      	str	r5, [sp, #28]
 8018802:	2322      	movs	r3, #34	; 0x22
 8018804:	f04f 0a00 	mov.w	sl, #0
 8018808:	f04f 0b00 	mov.w	fp, #0
 801880c:	6023      	str	r3, [r4, #0]
 801880e:	e789      	b.n	8018724 <_strtod_l+0x4a4>
 8018810:	0801e067 	.word	0x0801e067
 8018814:	0801e080 	.word	0x0801e080
 8018818:	0801e05e 	.word	0x0801e05e
 801881c:	0801e061 	.word	0x0801e061
 8018820:	0801e120 	.word	0x0801e120
 8018824:	0801e238 	.word	0x0801e238
 8018828:	0801e210 	.word	0x0801e210
 801882c:	7ff00000 	.word	0x7ff00000
 8018830:	7ca00000 	.word	0x7ca00000
 8018834:	7fefffff 	.word	0x7fefffff
 8018838:	f018 0310 	ands.w	r3, r8, #16
 801883c:	bf18      	it	ne
 801883e:	236a      	movne	r3, #106	; 0x6a
 8018840:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8018bf8 <_strtod_l+0x978>
 8018844:	9304      	str	r3, [sp, #16]
 8018846:	4650      	mov	r0, sl
 8018848:	4659      	mov	r1, fp
 801884a:	2300      	movs	r3, #0
 801884c:	f018 0f01 	tst.w	r8, #1
 8018850:	d004      	beq.n	801885c <_strtod_l+0x5dc>
 8018852:	e9d9 2300 	ldrd	r2, r3, [r9]
 8018856:	f7e7 fedf 	bl	8000618 <__aeabi_dmul>
 801885a:	2301      	movs	r3, #1
 801885c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8018860:	f109 0908 	add.w	r9, r9, #8
 8018864:	d1f2      	bne.n	801884c <_strtod_l+0x5cc>
 8018866:	b10b      	cbz	r3, 801886c <_strtod_l+0x5ec>
 8018868:	4682      	mov	sl, r0
 801886a:	468b      	mov	fp, r1
 801886c:	9b04      	ldr	r3, [sp, #16]
 801886e:	b1bb      	cbz	r3, 80188a0 <_strtod_l+0x620>
 8018870:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8018874:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8018878:	2b00      	cmp	r3, #0
 801887a:	4659      	mov	r1, fp
 801887c:	dd10      	ble.n	80188a0 <_strtod_l+0x620>
 801887e:	2b1f      	cmp	r3, #31
 8018880:	f340 8128 	ble.w	8018ad4 <_strtod_l+0x854>
 8018884:	2b34      	cmp	r3, #52	; 0x34
 8018886:	bfde      	ittt	le
 8018888:	3b20      	suble	r3, #32
 801888a:	f04f 32ff 	movle.w	r2, #4294967295
 801888e:	fa02 f303 	lslle.w	r3, r2, r3
 8018892:	f04f 0a00 	mov.w	sl, #0
 8018896:	bfcc      	ite	gt
 8018898:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801889c:	ea03 0b01 	andle.w	fp, r3, r1
 80188a0:	2200      	movs	r2, #0
 80188a2:	2300      	movs	r3, #0
 80188a4:	4650      	mov	r0, sl
 80188a6:	4659      	mov	r1, fp
 80188a8:	f7e8 f91e 	bl	8000ae8 <__aeabi_dcmpeq>
 80188ac:	2800      	cmp	r0, #0
 80188ae:	d1a4      	bne.n	80187fa <_strtod_l+0x57a>
 80188b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80188b2:	9300      	str	r3, [sp, #0]
 80188b4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80188b6:	462b      	mov	r3, r5
 80188b8:	463a      	mov	r2, r7
 80188ba:	4620      	mov	r0, r4
 80188bc:	f001 f94c 	bl	8019b58 <__s2b>
 80188c0:	9009      	str	r0, [sp, #36]	; 0x24
 80188c2:	2800      	cmp	r0, #0
 80188c4:	f43f af24 	beq.w	8018710 <_strtod_l+0x490>
 80188c8:	9b07      	ldr	r3, [sp, #28]
 80188ca:	1b9e      	subs	r6, r3, r6
 80188cc:	9b08      	ldr	r3, [sp, #32]
 80188ce:	2b00      	cmp	r3, #0
 80188d0:	bfb4      	ite	lt
 80188d2:	4633      	movlt	r3, r6
 80188d4:	2300      	movge	r3, #0
 80188d6:	9310      	str	r3, [sp, #64]	; 0x40
 80188d8:	9b08      	ldr	r3, [sp, #32]
 80188da:	2500      	movs	r5, #0
 80188dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80188e0:	9318      	str	r3, [sp, #96]	; 0x60
 80188e2:	462e      	mov	r6, r5
 80188e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80188e6:	4620      	mov	r0, r4
 80188e8:	6859      	ldr	r1, [r3, #4]
 80188ea:	f001 f889 	bl	8019a00 <_Balloc>
 80188ee:	9007      	str	r0, [sp, #28]
 80188f0:	2800      	cmp	r0, #0
 80188f2:	f43f af11 	beq.w	8018718 <_strtod_l+0x498>
 80188f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80188f8:	691a      	ldr	r2, [r3, #16]
 80188fa:	3202      	adds	r2, #2
 80188fc:	f103 010c 	add.w	r1, r3, #12
 8018900:	0092      	lsls	r2, r2, #2
 8018902:	300c      	adds	r0, #12
 8018904:	f7ff fa78 	bl	8017df8 <memcpy>
 8018908:	ec4b ab10 	vmov	d0, sl, fp
 801890c:	aa20      	add	r2, sp, #128	; 0x80
 801890e:	a91f      	add	r1, sp, #124	; 0x7c
 8018910:	4620      	mov	r0, r4
 8018912:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8018916:	f001 fc5b 	bl	801a1d0 <__d2b>
 801891a:	901e      	str	r0, [sp, #120]	; 0x78
 801891c:	2800      	cmp	r0, #0
 801891e:	f43f aefb 	beq.w	8018718 <_strtod_l+0x498>
 8018922:	2101      	movs	r1, #1
 8018924:	4620      	mov	r0, r4
 8018926:	f001 f9b1 	bl	8019c8c <__i2b>
 801892a:	4606      	mov	r6, r0
 801892c:	2800      	cmp	r0, #0
 801892e:	f43f aef3 	beq.w	8018718 <_strtod_l+0x498>
 8018932:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018934:	9904      	ldr	r1, [sp, #16]
 8018936:	2b00      	cmp	r3, #0
 8018938:	bfab      	itete	ge
 801893a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801893c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801893e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8018940:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8018944:	bfac      	ite	ge
 8018946:	eb03 0902 	addge.w	r9, r3, r2
 801894a:	1ad7      	sublt	r7, r2, r3
 801894c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801894e:	eba3 0801 	sub.w	r8, r3, r1
 8018952:	4490      	add	r8, r2
 8018954:	4ba3      	ldr	r3, [pc, #652]	; (8018be4 <_strtod_l+0x964>)
 8018956:	f108 38ff 	add.w	r8, r8, #4294967295
 801895a:	4598      	cmp	r8, r3
 801895c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8018960:	f280 80cc 	bge.w	8018afc <_strtod_l+0x87c>
 8018964:	eba3 0308 	sub.w	r3, r3, r8
 8018968:	2b1f      	cmp	r3, #31
 801896a:	eba2 0203 	sub.w	r2, r2, r3
 801896e:	f04f 0101 	mov.w	r1, #1
 8018972:	f300 80b6 	bgt.w	8018ae2 <_strtod_l+0x862>
 8018976:	fa01 f303 	lsl.w	r3, r1, r3
 801897a:	9311      	str	r3, [sp, #68]	; 0x44
 801897c:	2300      	movs	r3, #0
 801897e:	930c      	str	r3, [sp, #48]	; 0x30
 8018980:	eb09 0802 	add.w	r8, r9, r2
 8018984:	9b04      	ldr	r3, [sp, #16]
 8018986:	45c1      	cmp	r9, r8
 8018988:	4417      	add	r7, r2
 801898a:	441f      	add	r7, r3
 801898c:	464b      	mov	r3, r9
 801898e:	bfa8      	it	ge
 8018990:	4643      	movge	r3, r8
 8018992:	42bb      	cmp	r3, r7
 8018994:	bfa8      	it	ge
 8018996:	463b      	movge	r3, r7
 8018998:	2b00      	cmp	r3, #0
 801899a:	bfc2      	ittt	gt
 801899c:	eba8 0803 	subgt.w	r8, r8, r3
 80189a0:	1aff      	subgt	r7, r7, r3
 80189a2:	eba9 0903 	subgt.w	r9, r9, r3
 80189a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80189a8:	2b00      	cmp	r3, #0
 80189aa:	dd17      	ble.n	80189dc <_strtod_l+0x75c>
 80189ac:	4631      	mov	r1, r6
 80189ae:	461a      	mov	r2, r3
 80189b0:	4620      	mov	r0, r4
 80189b2:	f001 fa27 	bl	8019e04 <__pow5mult>
 80189b6:	4606      	mov	r6, r0
 80189b8:	2800      	cmp	r0, #0
 80189ba:	f43f aead 	beq.w	8018718 <_strtod_l+0x498>
 80189be:	4601      	mov	r1, r0
 80189c0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80189c2:	4620      	mov	r0, r4
 80189c4:	f001 f978 	bl	8019cb8 <__multiply>
 80189c8:	900f      	str	r0, [sp, #60]	; 0x3c
 80189ca:	2800      	cmp	r0, #0
 80189cc:	f43f aea4 	beq.w	8018718 <_strtod_l+0x498>
 80189d0:	991e      	ldr	r1, [sp, #120]	; 0x78
 80189d2:	4620      	mov	r0, r4
 80189d4:	f001 f854 	bl	8019a80 <_Bfree>
 80189d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80189da:	931e      	str	r3, [sp, #120]	; 0x78
 80189dc:	f1b8 0f00 	cmp.w	r8, #0
 80189e0:	f300 8091 	bgt.w	8018b06 <_strtod_l+0x886>
 80189e4:	9b08      	ldr	r3, [sp, #32]
 80189e6:	2b00      	cmp	r3, #0
 80189e8:	dd08      	ble.n	80189fc <_strtod_l+0x77c>
 80189ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80189ec:	9907      	ldr	r1, [sp, #28]
 80189ee:	4620      	mov	r0, r4
 80189f0:	f001 fa08 	bl	8019e04 <__pow5mult>
 80189f4:	9007      	str	r0, [sp, #28]
 80189f6:	2800      	cmp	r0, #0
 80189f8:	f43f ae8e 	beq.w	8018718 <_strtod_l+0x498>
 80189fc:	2f00      	cmp	r7, #0
 80189fe:	dd08      	ble.n	8018a12 <_strtod_l+0x792>
 8018a00:	9907      	ldr	r1, [sp, #28]
 8018a02:	463a      	mov	r2, r7
 8018a04:	4620      	mov	r0, r4
 8018a06:	f001 fa57 	bl	8019eb8 <__lshift>
 8018a0a:	9007      	str	r0, [sp, #28]
 8018a0c:	2800      	cmp	r0, #0
 8018a0e:	f43f ae83 	beq.w	8018718 <_strtod_l+0x498>
 8018a12:	f1b9 0f00 	cmp.w	r9, #0
 8018a16:	dd08      	ble.n	8018a2a <_strtod_l+0x7aa>
 8018a18:	4631      	mov	r1, r6
 8018a1a:	464a      	mov	r2, r9
 8018a1c:	4620      	mov	r0, r4
 8018a1e:	f001 fa4b 	bl	8019eb8 <__lshift>
 8018a22:	4606      	mov	r6, r0
 8018a24:	2800      	cmp	r0, #0
 8018a26:	f43f ae77 	beq.w	8018718 <_strtod_l+0x498>
 8018a2a:	9a07      	ldr	r2, [sp, #28]
 8018a2c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8018a2e:	4620      	mov	r0, r4
 8018a30:	f001 faca 	bl	8019fc8 <__mdiff>
 8018a34:	4605      	mov	r5, r0
 8018a36:	2800      	cmp	r0, #0
 8018a38:	f43f ae6e 	beq.w	8018718 <_strtod_l+0x498>
 8018a3c:	68c3      	ldr	r3, [r0, #12]
 8018a3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8018a40:	2300      	movs	r3, #0
 8018a42:	60c3      	str	r3, [r0, #12]
 8018a44:	4631      	mov	r1, r6
 8018a46:	f001 faa3 	bl	8019f90 <__mcmp>
 8018a4a:	2800      	cmp	r0, #0
 8018a4c:	da65      	bge.n	8018b1a <_strtod_l+0x89a>
 8018a4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018a50:	ea53 030a 	orrs.w	r3, r3, sl
 8018a54:	f040 8087 	bne.w	8018b66 <_strtod_l+0x8e6>
 8018a58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018a5c:	2b00      	cmp	r3, #0
 8018a5e:	f040 8082 	bne.w	8018b66 <_strtod_l+0x8e6>
 8018a62:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8018a66:	0d1b      	lsrs	r3, r3, #20
 8018a68:	051b      	lsls	r3, r3, #20
 8018a6a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8018a6e:	d97a      	bls.n	8018b66 <_strtod_l+0x8e6>
 8018a70:	696b      	ldr	r3, [r5, #20]
 8018a72:	b913      	cbnz	r3, 8018a7a <_strtod_l+0x7fa>
 8018a74:	692b      	ldr	r3, [r5, #16]
 8018a76:	2b01      	cmp	r3, #1
 8018a78:	dd75      	ble.n	8018b66 <_strtod_l+0x8e6>
 8018a7a:	4629      	mov	r1, r5
 8018a7c:	2201      	movs	r2, #1
 8018a7e:	4620      	mov	r0, r4
 8018a80:	f001 fa1a 	bl	8019eb8 <__lshift>
 8018a84:	4631      	mov	r1, r6
 8018a86:	4605      	mov	r5, r0
 8018a88:	f001 fa82 	bl	8019f90 <__mcmp>
 8018a8c:	2800      	cmp	r0, #0
 8018a8e:	dd6a      	ble.n	8018b66 <_strtod_l+0x8e6>
 8018a90:	9904      	ldr	r1, [sp, #16]
 8018a92:	4a55      	ldr	r2, [pc, #340]	; (8018be8 <_strtod_l+0x968>)
 8018a94:	465b      	mov	r3, fp
 8018a96:	2900      	cmp	r1, #0
 8018a98:	f000 8085 	beq.w	8018ba6 <_strtod_l+0x926>
 8018a9c:	ea02 010b 	and.w	r1, r2, fp
 8018aa0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8018aa4:	dc7f      	bgt.n	8018ba6 <_strtod_l+0x926>
 8018aa6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8018aaa:	f77f aeaa 	ble.w	8018802 <_strtod_l+0x582>
 8018aae:	4a4f      	ldr	r2, [pc, #316]	; (8018bec <_strtod_l+0x96c>)
 8018ab0:	2300      	movs	r3, #0
 8018ab2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8018ab6:	4650      	mov	r0, sl
 8018ab8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8018abc:	4659      	mov	r1, fp
 8018abe:	f7e7 fdab 	bl	8000618 <__aeabi_dmul>
 8018ac2:	460b      	mov	r3, r1
 8018ac4:	4303      	orrs	r3, r0
 8018ac6:	bf08      	it	eq
 8018ac8:	2322      	moveq	r3, #34	; 0x22
 8018aca:	4682      	mov	sl, r0
 8018acc:	468b      	mov	fp, r1
 8018ace:	bf08      	it	eq
 8018ad0:	6023      	streq	r3, [r4, #0]
 8018ad2:	e62b      	b.n	801872c <_strtod_l+0x4ac>
 8018ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8018ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8018adc:	ea03 0a0a 	and.w	sl, r3, sl
 8018ae0:	e6de      	b.n	80188a0 <_strtod_l+0x620>
 8018ae2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8018ae6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8018aea:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8018aee:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8018af2:	fa01 f308 	lsl.w	r3, r1, r8
 8018af6:	930c      	str	r3, [sp, #48]	; 0x30
 8018af8:	9111      	str	r1, [sp, #68]	; 0x44
 8018afa:	e741      	b.n	8018980 <_strtod_l+0x700>
 8018afc:	2300      	movs	r3, #0
 8018afe:	930c      	str	r3, [sp, #48]	; 0x30
 8018b00:	2301      	movs	r3, #1
 8018b02:	9311      	str	r3, [sp, #68]	; 0x44
 8018b04:	e73c      	b.n	8018980 <_strtod_l+0x700>
 8018b06:	991e      	ldr	r1, [sp, #120]	; 0x78
 8018b08:	4642      	mov	r2, r8
 8018b0a:	4620      	mov	r0, r4
 8018b0c:	f001 f9d4 	bl	8019eb8 <__lshift>
 8018b10:	901e      	str	r0, [sp, #120]	; 0x78
 8018b12:	2800      	cmp	r0, #0
 8018b14:	f47f af66 	bne.w	80189e4 <_strtod_l+0x764>
 8018b18:	e5fe      	b.n	8018718 <_strtod_l+0x498>
 8018b1a:	465f      	mov	r7, fp
 8018b1c:	d16e      	bne.n	8018bfc <_strtod_l+0x97c>
 8018b1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018b20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018b24:	b342      	cbz	r2, 8018b78 <_strtod_l+0x8f8>
 8018b26:	4a32      	ldr	r2, [pc, #200]	; (8018bf0 <_strtod_l+0x970>)
 8018b28:	4293      	cmp	r3, r2
 8018b2a:	d128      	bne.n	8018b7e <_strtod_l+0x8fe>
 8018b2c:	9b04      	ldr	r3, [sp, #16]
 8018b2e:	4650      	mov	r0, sl
 8018b30:	b1eb      	cbz	r3, 8018b6e <_strtod_l+0x8ee>
 8018b32:	4a2d      	ldr	r2, [pc, #180]	; (8018be8 <_strtod_l+0x968>)
 8018b34:	403a      	ands	r2, r7
 8018b36:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8018b3a:	f04f 31ff 	mov.w	r1, #4294967295
 8018b3e:	d819      	bhi.n	8018b74 <_strtod_l+0x8f4>
 8018b40:	0d12      	lsrs	r2, r2, #20
 8018b42:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8018b46:	fa01 f303 	lsl.w	r3, r1, r3
 8018b4a:	4298      	cmp	r0, r3
 8018b4c:	d117      	bne.n	8018b7e <_strtod_l+0x8fe>
 8018b4e:	4b29      	ldr	r3, [pc, #164]	; (8018bf4 <_strtod_l+0x974>)
 8018b50:	429f      	cmp	r7, r3
 8018b52:	d102      	bne.n	8018b5a <_strtod_l+0x8da>
 8018b54:	3001      	adds	r0, #1
 8018b56:	f43f addf 	beq.w	8018718 <_strtod_l+0x498>
 8018b5a:	4b23      	ldr	r3, [pc, #140]	; (8018be8 <_strtod_l+0x968>)
 8018b5c:	403b      	ands	r3, r7
 8018b5e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8018b62:	f04f 0a00 	mov.w	sl, #0
 8018b66:	9b04      	ldr	r3, [sp, #16]
 8018b68:	2b00      	cmp	r3, #0
 8018b6a:	d1a0      	bne.n	8018aae <_strtod_l+0x82e>
 8018b6c:	e5de      	b.n	801872c <_strtod_l+0x4ac>
 8018b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8018b72:	e7ea      	b.n	8018b4a <_strtod_l+0x8ca>
 8018b74:	460b      	mov	r3, r1
 8018b76:	e7e8      	b.n	8018b4a <_strtod_l+0x8ca>
 8018b78:	ea53 030a 	orrs.w	r3, r3, sl
 8018b7c:	d088      	beq.n	8018a90 <_strtod_l+0x810>
 8018b7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018b80:	b1db      	cbz	r3, 8018bba <_strtod_l+0x93a>
 8018b82:	423b      	tst	r3, r7
 8018b84:	d0ef      	beq.n	8018b66 <_strtod_l+0x8e6>
 8018b86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018b88:	9a04      	ldr	r2, [sp, #16]
 8018b8a:	4650      	mov	r0, sl
 8018b8c:	4659      	mov	r1, fp
 8018b8e:	b1c3      	cbz	r3, 8018bc2 <_strtod_l+0x942>
 8018b90:	f7ff fb59 	bl	8018246 <sulp>
 8018b94:	4602      	mov	r2, r0
 8018b96:	460b      	mov	r3, r1
 8018b98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018b9c:	f7e7 fb86 	bl	80002ac <__adddf3>
 8018ba0:	4682      	mov	sl, r0
 8018ba2:	468b      	mov	fp, r1
 8018ba4:	e7df      	b.n	8018b66 <_strtod_l+0x8e6>
 8018ba6:	4013      	ands	r3, r2
 8018ba8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8018bac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8018bb0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8018bb4:	f04f 3aff 	mov.w	sl, #4294967295
 8018bb8:	e7d5      	b.n	8018b66 <_strtod_l+0x8e6>
 8018bba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018bbc:	ea13 0f0a 	tst.w	r3, sl
 8018bc0:	e7e0      	b.n	8018b84 <_strtod_l+0x904>
 8018bc2:	f7ff fb40 	bl	8018246 <sulp>
 8018bc6:	4602      	mov	r2, r0
 8018bc8:	460b      	mov	r3, r1
 8018bca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018bce:	f7e7 fb6b 	bl	80002a8 <__aeabi_dsub>
 8018bd2:	2200      	movs	r2, #0
 8018bd4:	2300      	movs	r3, #0
 8018bd6:	4682      	mov	sl, r0
 8018bd8:	468b      	mov	fp, r1
 8018bda:	f7e7 ff85 	bl	8000ae8 <__aeabi_dcmpeq>
 8018bde:	2800      	cmp	r0, #0
 8018be0:	d0c1      	beq.n	8018b66 <_strtod_l+0x8e6>
 8018be2:	e60e      	b.n	8018802 <_strtod_l+0x582>
 8018be4:	fffffc02 	.word	0xfffffc02
 8018be8:	7ff00000 	.word	0x7ff00000
 8018bec:	39500000 	.word	0x39500000
 8018bf0:	000fffff 	.word	0x000fffff
 8018bf4:	7fefffff 	.word	0x7fefffff
 8018bf8:	0801e098 	.word	0x0801e098
 8018bfc:	4631      	mov	r1, r6
 8018bfe:	4628      	mov	r0, r5
 8018c00:	f001 fb42 	bl	801a288 <__ratio>
 8018c04:	ec59 8b10 	vmov	r8, r9, d0
 8018c08:	ee10 0a10 	vmov	r0, s0
 8018c0c:	2200      	movs	r2, #0
 8018c0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8018c12:	4649      	mov	r1, r9
 8018c14:	f7e7 ff7c 	bl	8000b10 <__aeabi_dcmple>
 8018c18:	2800      	cmp	r0, #0
 8018c1a:	d07c      	beq.n	8018d16 <_strtod_l+0xa96>
 8018c1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018c1e:	2b00      	cmp	r3, #0
 8018c20:	d04c      	beq.n	8018cbc <_strtod_l+0xa3c>
 8018c22:	4b95      	ldr	r3, [pc, #596]	; (8018e78 <_strtod_l+0xbf8>)
 8018c24:	2200      	movs	r2, #0
 8018c26:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8018c2a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8018e78 <_strtod_l+0xbf8>
 8018c2e:	f04f 0800 	mov.w	r8, #0
 8018c32:	4b92      	ldr	r3, [pc, #584]	; (8018e7c <_strtod_l+0xbfc>)
 8018c34:	403b      	ands	r3, r7
 8018c36:	9311      	str	r3, [sp, #68]	; 0x44
 8018c38:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018c3a:	4b91      	ldr	r3, [pc, #580]	; (8018e80 <_strtod_l+0xc00>)
 8018c3c:	429a      	cmp	r2, r3
 8018c3e:	f040 80b2 	bne.w	8018da6 <_strtod_l+0xb26>
 8018c42:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018c46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018c4a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8018c4e:	ec4b ab10 	vmov	d0, sl, fp
 8018c52:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8018c56:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8018c5a:	f001 fa3d 	bl	801a0d8 <__ulp>
 8018c5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018c62:	ec53 2b10 	vmov	r2, r3, d0
 8018c66:	f7e7 fcd7 	bl	8000618 <__aeabi_dmul>
 8018c6a:	4652      	mov	r2, sl
 8018c6c:	465b      	mov	r3, fp
 8018c6e:	f7e7 fb1d 	bl	80002ac <__adddf3>
 8018c72:	460b      	mov	r3, r1
 8018c74:	4981      	ldr	r1, [pc, #516]	; (8018e7c <_strtod_l+0xbfc>)
 8018c76:	4a83      	ldr	r2, [pc, #524]	; (8018e84 <_strtod_l+0xc04>)
 8018c78:	4019      	ands	r1, r3
 8018c7a:	4291      	cmp	r1, r2
 8018c7c:	4682      	mov	sl, r0
 8018c7e:	d95e      	bls.n	8018d3e <_strtod_l+0xabe>
 8018c80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018c82:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8018c86:	4293      	cmp	r3, r2
 8018c88:	d103      	bne.n	8018c92 <_strtod_l+0xa12>
 8018c8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018c8c:	3301      	adds	r3, #1
 8018c8e:	f43f ad43 	beq.w	8018718 <_strtod_l+0x498>
 8018c92:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8018e90 <_strtod_l+0xc10>
 8018c96:	f04f 3aff 	mov.w	sl, #4294967295
 8018c9a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8018c9c:	4620      	mov	r0, r4
 8018c9e:	f000 feef 	bl	8019a80 <_Bfree>
 8018ca2:	9907      	ldr	r1, [sp, #28]
 8018ca4:	4620      	mov	r0, r4
 8018ca6:	f000 feeb 	bl	8019a80 <_Bfree>
 8018caa:	4631      	mov	r1, r6
 8018cac:	4620      	mov	r0, r4
 8018cae:	f000 fee7 	bl	8019a80 <_Bfree>
 8018cb2:	4629      	mov	r1, r5
 8018cb4:	4620      	mov	r0, r4
 8018cb6:	f000 fee3 	bl	8019a80 <_Bfree>
 8018cba:	e613      	b.n	80188e4 <_strtod_l+0x664>
 8018cbc:	f1ba 0f00 	cmp.w	sl, #0
 8018cc0:	d11b      	bne.n	8018cfa <_strtod_l+0xa7a>
 8018cc2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018cc6:	b9f3      	cbnz	r3, 8018d06 <_strtod_l+0xa86>
 8018cc8:	4b6b      	ldr	r3, [pc, #428]	; (8018e78 <_strtod_l+0xbf8>)
 8018cca:	2200      	movs	r2, #0
 8018ccc:	4640      	mov	r0, r8
 8018cce:	4649      	mov	r1, r9
 8018cd0:	f7e7 ff14 	bl	8000afc <__aeabi_dcmplt>
 8018cd4:	b9d0      	cbnz	r0, 8018d0c <_strtod_l+0xa8c>
 8018cd6:	4640      	mov	r0, r8
 8018cd8:	4649      	mov	r1, r9
 8018cda:	4b6b      	ldr	r3, [pc, #428]	; (8018e88 <_strtod_l+0xc08>)
 8018cdc:	2200      	movs	r2, #0
 8018cde:	f7e7 fc9b 	bl	8000618 <__aeabi_dmul>
 8018ce2:	4680      	mov	r8, r0
 8018ce4:	4689      	mov	r9, r1
 8018ce6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8018cea:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8018cee:	931b      	str	r3, [sp, #108]	; 0x6c
 8018cf0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8018cf4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8018cf8:	e79b      	b.n	8018c32 <_strtod_l+0x9b2>
 8018cfa:	f1ba 0f01 	cmp.w	sl, #1
 8018cfe:	d102      	bne.n	8018d06 <_strtod_l+0xa86>
 8018d00:	2f00      	cmp	r7, #0
 8018d02:	f43f ad7e 	beq.w	8018802 <_strtod_l+0x582>
 8018d06:	4b61      	ldr	r3, [pc, #388]	; (8018e8c <_strtod_l+0xc0c>)
 8018d08:	2200      	movs	r2, #0
 8018d0a:	e78c      	b.n	8018c26 <_strtod_l+0x9a6>
 8018d0c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8018e88 <_strtod_l+0xc08>
 8018d10:	f04f 0800 	mov.w	r8, #0
 8018d14:	e7e7      	b.n	8018ce6 <_strtod_l+0xa66>
 8018d16:	4b5c      	ldr	r3, [pc, #368]	; (8018e88 <_strtod_l+0xc08>)
 8018d18:	4640      	mov	r0, r8
 8018d1a:	4649      	mov	r1, r9
 8018d1c:	2200      	movs	r2, #0
 8018d1e:	f7e7 fc7b 	bl	8000618 <__aeabi_dmul>
 8018d22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018d24:	4680      	mov	r8, r0
 8018d26:	4689      	mov	r9, r1
 8018d28:	b933      	cbnz	r3, 8018d38 <_strtod_l+0xab8>
 8018d2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018d2e:	9012      	str	r0, [sp, #72]	; 0x48
 8018d30:	9313      	str	r3, [sp, #76]	; 0x4c
 8018d32:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8018d36:	e7dd      	b.n	8018cf4 <_strtod_l+0xa74>
 8018d38:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8018d3c:	e7f9      	b.n	8018d32 <_strtod_l+0xab2>
 8018d3e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8018d42:	9b04      	ldr	r3, [sp, #16]
 8018d44:	2b00      	cmp	r3, #0
 8018d46:	d1a8      	bne.n	8018c9a <_strtod_l+0xa1a>
 8018d48:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8018d4c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018d4e:	0d1b      	lsrs	r3, r3, #20
 8018d50:	051b      	lsls	r3, r3, #20
 8018d52:	429a      	cmp	r2, r3
 8018d54:	d1a1      	bne.n	8018c9a <_strtod_l+0xa1a>
 8018d56:	4640      	mov	r0, r8
 8018d58:	4649      	mov	r1, r9
 8018d5a:	f7e7 ff45 	bl	8000be8 <__aeabi_d2lz>
 8018d5e:	f7e7 fc2d 	bl	80005bc <__aeabi_l2d>
 8018d62:	4602      	mov	r2, r0
 8018d64:	460b      	mov	r3, r1
 8018d66:	4640      	mov	r0, r8
 8018d68:	4649      	mov	r1, r9
 8018d6a:	f7e7 fa9d 	bl	80002a8 <__aeabi_dsub>
 8018d6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018d70:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018d74:	ea43 030a 	orr.w	r3, r3, sl
 8018d78:	4313      	orrs	r3, r2
 8018d7a:	4680      	mov	r8, r0
 8018d7c:	4689      	mov	r9, r1
 8018d7e:	d053      	beq.n	8018e28 <_strtod_l+0xba8>
 8018d80:	a335      	add	r3, pc, #212	; (adr r3, 8018e58 <_strtod_l+0xbd8>)
 8018d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d86:	f7e7 feb9 	bl	8000afc <__aeabi_dcmplt>
 8018d8a:	2800      	cmp	r0, #0
 8018d8c:	f47f acce 	bne.w	801872c <_strtod_l+0x4ac>
 8018d90:	a333      	add	r3, pc, #204	; (adr r3, 8018e60 <_strtod_l+0xbe0>)
 8018d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d96:	4640      	mov	r0, r8
 8018d98:	4649      	mov	r1, r9
 8018d9a:	f7e7 fecd 	bl	8000b38 <__aeabi_dcmpgt>
 8018d9e:	2800      	cmp	r0, #0
 8018da0:	f43f af7b 	beq.w	8018c9a <_strtod_l+0xa1a>
 8018da4:	e4c2      	b.n	801872c <_strtod_l+0x4ac>
 8018da6:	9b04      	ldr	r3, [sp, #16]
 8018da8:	b333      	cbz	r3, 8018df8 <_strtod_l+0xb78>
 8018daa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018dac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8018db0:	d822      	bhi.n	8018df8 <_strtod_l+0xb78>
 8018db2:	a32d      	add	r3, pc, #180	; (adr r3, 8018e68 <_strtod_l+0xbe8>)
 8018db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018db8:	4640      	mov	r0, r8
 8018dba:	4649      	mov	r1, r9
 8018dbc:	f7e7 fea8 	bl	8000b10 <__aeabi_dcmple>
 8018dc0:	b1a0      	cbz	r0, 8018dec <_strtod_l+0xb6c>
 8018dc2:	4649      	mov	r1, r9
 8018dc4:	4640      	mov	r0, r8
 8018dc6:	f7e7 fed7 	bl	8000b78 <__aeabi_d2uiz>
 8018dca:	2801      	cmp	r0, #1
 8018dcc:	bf38      	it	cc
 8018dce:	2001      	movcc	r0, #1
 8018dd0:	f7e7 fba8 	bl	8000524 <__aeabi_ui2d>
 8018dd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018dd6:	4680      	mov	r8, r0
 8018dd8:	4689      	mov	r9, r1
 8018dda:	bb13      	cbnz	r3, 8018e22 <_strtod_l+0xba2>
 8018ddc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018de0:	9014      	str	r0, [sp, #80]	; 0x50
 8018de2:	9315      	str	r3, [sp, #84]	; 0x54
 8018de4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8018de8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8018dec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018dee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018df0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8018df4:	1a9b      	subs	r3, r3, r2
 8018df6:	930d      	str	r3, [sp, #52]	; 0x34
 8018df8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018dfc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8018e00:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8018e04:	f001 f968 	bl	801a0d8 <__ulp>
 8018e08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018e0c:	ec53 2b10 	vmov	r2, r3, d0
 8018e10:	f7e7 fc02 	bl	8000618 <__aeabi_dmul>
 8018e14:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018e18:	f7e7 fa48 	bl	80002ac <__adddf3>
 8018e1c:	4682      	mov	sl, r0
 8018e1e:	468b      	mov	fp, r1
 8018e20:	e78f      	b.n	8018d42 <_strtod_l+0xac2>
 8018e22:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8018e26:	e7dd      	b.n	8018de4 <_strtod_l+0xb64>
 8018e28:	a311      	add	r3, pc, #68	; (adr r3, 8018e70 <_strtod_l+0xbf0>)
 8018e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e2e:	f7e7 fe65 	bl	8000afc <__aeabi_dcmplt>
 8018e32:	e7b4      	b.n	8018d9e <_strtod_l+0xb1e>
 8018e34:	2300      	movs	r3, #0
 8018e36:	930e      	str	r3, [sp, #56]	; 0x38
 8018e38:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8018e3a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018e3c:	6013      	str	r3, [r2, #0]
 8018e3e:	f7ff ba65 	b.w	801830c <_strtod_l+0x8c>
 8018e42:	2b65      	cmp	r3, #101	; 0x65
 8018e44:	f43f ab5d 	beq.w	8018502 <_strtod_l+0x282>
 8018e48:	2b45      	cmp	r3, #69	; 0x45
 8018e4a:	f43f ab5a 	beq.w	8018502 <_strtod_l+0x282>
 8018e4e:	2201      	movs	r2, #1
 8018e50:	f7ff bb92 	b.w	8018578 <_strtod_l+0x2f8>
 8018e54:	f3af 8000 	nop.w
 8018e58:	94a03595 	.word	0x94a03595
 8018e5c:	3fdfffff 	.word	0x3fdfffff
 8018e60:	35afe535 	.word	0x35afe535
 8018e64:	3fe00000 	.word	0x3fe00000
 8018e68:	ffc00000 	.word	0xffc00000
 8018e6c:	41dfffff 	.word	0x41dfffff
 8018e70:	94a03595 	.word	0x94a03595
 8018e74:	3fcfffff 	.word	0x3fcfffff
 8018e78:	3ff00000 	.word	0x3ff00000
 8018e7c:	7ff00000 	.word	0x7ff00000
 8018e80:	7fe00000 	.word	0x7fe00000
 8018e84:	7c9fffff 	.word	0x7c9fffff
 8018e88:	3fe00000 	.word	0x3fe00000
 8018e8c:	bff00000 	.word	0xbff00000
 8018e90:	7fefffff 	.word	0x7fefffff

08018e94 <strtod>:
 8018e94:	460a      	mov	r2, r1
 8018e96:	4601      	mov	r1, r0
 8018e98:	4802      	ldr	r0, [pc, #8]	; (8018ea4 <strtod+0x10>)
 8018e9a:	4b03      	ldr	r3, [pc, #12]	; (8018ea8 <strtod+0x14>)
 8018e9c:	6800      	ldr	r0, [r0, #0]
 8018e9e:	f7ff b9ef 	b.w	8018280 <_strtod_l>
 8018ea2:	bf00      	nop
 8018ea4:	2000001c 	.word	0x2000001c
 8018ea8:	20000084 	.word	0x20000084

08018eac <_strtol_l.isra.0>:
 8018eac:	2b01      	cmp	r3, #1
 8018eae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018eb2:	d001      	beq.n	8018eb8 <_strtol_l.isra.0+0xc>
 8018eb4:	2b24      	cmp	r3, #36	; 0x24
 8018eb6:	d906      	bls.n	8018ec6 <_strtol_l.isra.0+0x1a>
 8018eb8:	f000 f9c8 	bl	801924c <__errno>
 8018ebc:	2316      	movs	r3, #22
 8018ebe:	6003      	str	r3, [r0, #0]
 8018ec0:	2000      	movs	r0, #0
 8018ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018ec6:	4f3a      	ldr	r7, [pc, #232]	; (8018fb0 <_strtol_l.isra.0+0x104>)
 8018ec8:	468e      	mov	lr, r1
 8018eca:	4676      	mov	r6, lr
 8018ecc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8018ed0:	5de5      	ldrb	r5, [r4, r7]
 8018ed2:	f015 0508 	ands.w	r5, r5, #8
 8018ed6:	d1f8      	bne.n	8018eca <_strtol_l.isra.0+0x1e>
 8018ed8:	2c2d      	cmp	r4, #45	; 0x2d
 8018eda:	d134      	bne.n	8018f46 <_strtol_l.isra.0+0x9a>
 8018edc:	f89e 4000 	ldrb.w	r4, [lr]
 8018ee0:	f04f 0801 	mov.w	r8, #1
 8018ee4:	f106 0e02 	add.w	lr, r6, #2
 8018ee8:	2b00      	cmp	r3, #0
 8018eea:	d05c      	beq.n	8018fa6 <_strtol_l.isra.0+0xfa>
 8018eec:	2b10      	cmp	r3, #16
 8018eee:	d10c      	bne.n	8018f0a <_strtol_l.isra.0+0x5e>
 8018ef0:	2c30      	cmp	r4, #48	; 0x30
 8018ef2:	d10a      	bne.n	8018f0a <_strtol_l.isra.0+0x5e>
 8018ef4:	f89e 4000 	ldrb.w	r4, [lr]
 8018ef8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8018efc:	2c58      	cmp	r4, #88	; 0x58
 8018efe:	d14d      	bne.n	8018f9c <_strtol_l.isra.0+0xf0>
 8018f00:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8018f04:	2310      	movs	r3, #16
 8018f06:	f10e 0e02 	add.w	lr, lr, #2
 8018f0a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8018f0e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8018f12:	2600      	movs	r6, #0
 8018f14:	fbbc f9f3 	udiv	r9, ip, r3
 8018f18:	4635      	mov	r5, r6
 8018f1a:	fb03 ca19 	mls	sl, r3, r9, ip
 8018f1e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8018f22:	2f09      	cmp	r7, #9
 8018f24:	d818      	bhi.n	8018f58 <_strtol_l.isra.0+0xac>
 8018f26:	463c      	mov	r4, r7
 8018f28:	42a3      	cmp	r3, r4
 8018f2a:	dd24      	ble.n	8018f76 <_strtol_l.isra.0+0xca>
 8018f2c:	2e00      	cmp	r6, #0
 8018f2e:	db1f      	blt.n	8018f70 <_strtol_l.isra.0+0xc4>
 8018f30:	45a9      	cmp	r9, r5
 8018f32:	d31d      	bcc.n	8018f70 <_strtol_l.isra.0+0xc4>
 8018f34:	d101      	bne.n	8018f3a <_strtol_l.isra.0+0x8e>
 8018f36:	45a2      	cmp	sl, r4
 8018f38:	db1a      	blt.n	8018f70 <_strtol_l.isra.0+0xc4>
 8018f3a:	fb05 4503 	mla	r5, r5, r3, r4
 8018f3e:	2601      	movs	r6, #1
 8018f40:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8018f44:	e7eb      	b.n	8018f1e <_strtol_l.isra.0+0x72>
 8018f46:	2c2b      	cmp	r4, #43	; 0x2b
 8018f48:	bf08      	it	eq
 8018f4a:	f89e 4000 	ldrbeq.w	r4, [lr]
 8018f4e:	46a8      	mov	r8, r5
 8018f50:	bf08      	it	eq
 8018f52:	f106 0e02 	addeq.w	lr, r6, #2
 8018f56:	e7c7      	b.n	8018ee8 <_strtol_l.isra.0+0x3c>
 8018f58:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8018f5c:	2f19      	cmp	r7, #25
 8018f5e:	d801      	bhi.n	8018f64 <_strtol_l.isra.0+0xb8>
 8018f60:	3c37      	subs	r4, #55	; 0x37
 8018f62:	e7e1      	b.n	8018f28 <_strtol_l.isra.0+0x7c>
 8018f64:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8018f68:	2f19      	cmp	r7, #25
 8018f6a:	d804      	bhi.n	8018f76 <_strtol_l.isra.0+0xca>
 8018f6c:	3c57      	subs	r4, #87	; 0x57
 8018f6e:	e7db      	b.n	8018f28 <_strtol_l.isra.0+0x7c>
 8018f70:	f04f 36ff 	mov.w	r6, #4294967295
 8018f74:	e7e4      	b.n	8018f40 <_strtol_l.isra.0+0x94>
 8018f76:	2e00      	cmp	r6, #0
 8018f78:	da05      	bge.n	8018f86 <_strtol_l.isra.0+0xda>
 8018f7a:	2322      	movs	r3, #34	; 0x22
 8018f7c:	6003      	str	r3, [r0, #0]
 8018f7e:	4665      	mov	r5, ip
 8018f80:	b942      	cbnz	r2, 8018f94 <_strtol_l.isra.0+0xe8>
 8018f82:	4628      	mov	r0, r5
 8018f84:	e79d      	b.n	8018ec2 <_strtol_l.isra.0+0x16>
 8018f86:	f1b8 0f00 	cmp.w	r8, #0
 8018f8a:	d000      	beq.n	8018f8e <_strtol_l.isra.0+0xe2>
 8018f8c:	426d      	negs	r5, r5
 8018f8e:	2a00      	cmp	r2, #0
 8018f90:	d0f7      	beq.n	8018f82 <_strtol_l.isra.0+0xd6>
 8018f92:	b10e      	cbz	r6, 8018f98 <_strtol_l.isra.0+0xec>
 8018f94:	f10e 31ff 	add.w	r1, lr, #4294967295
 8018f98:	6011      	str	r1, [r2, #0]
 8018f9a:	e7f2      	b.n	8018f82 <_strtol_l.isra.0+0xd6>
 8018f9c:	2430      	movs	r4, #48	; 0x30
 8018f9e:	2b00      	cmp	r3, #0
 8018fa0:	d1b3      	bne.n	8018f0a <_strtol_l.isra.0+0x5e>
 8018fa2:	2308      	movs	r3, #8
 8018fa4:	e7b1      	b.n	8018f0a <_strtol_l.isra.0+0x5e>
 8018fa6:	2c30      	cmp	r4, #48	; 0x30
 8018fa8:	d0a4      	beq.n	8018ef4 <_strtol_l.isra.0+0x48>
 8018faa:	230a      	movs	r3, #10
 8018fac:	e7ad      	b.n	8018f0a <_strtol_l.isra.0+0x5e>
 8018fae:	bf00      	nop
 8018fb0:	0801de83 	.word	0x0801de83

08018fb4 <strtol>:
 8018fb4:	4613      	mov	r3, r2
 8018fb6:	460a      	mov	r2, r1
 8018fb8:	4601      	mov	r1, r0
 8018fba:	4802      	ldr	r0, [pc, #8]	; (8018fc4 <strtol+0x10>)
 8018fbc:	6800      	ldr	r0, [r0, #0]
 8018fbe:	f7ff bf75 	b.w	8018eac <_strtol_l.isra.0>
 8018fc2:	bf00      	nop
 8018fc4:	2000001c 	.word	0x2000001c

08018fc8 <__utoa>:
 8018fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018fca:	4c1f      	ldr	r4, [pc, #124]	; (8019048 <__utoa+0x80>)
 8018fcc:	b08b      	sub	sp, #44	; 0x2c
 8018fce:	4605      	mov	r5, r0
 8018fd0:	460b      	mov	r3, r1
 8018fd2:	466e      	mov	r6, sp
 8018fd4:	f104 0c20 	add.w	ip, r4, #32
 8018fd8:	6820      	ldr	r0, [r4, #0]
 8018fda:	6861      	ldr	r1, [r4, #4]
 8018fdc:	4637      	mov	r7, r6
 8018fde:	c703      	stmia	r7!, {r0, r1}
 8018fe0:	3408      	adds	r4, #8
 8018fe2:	4564      	cmp	r4, ip
 8018fe4:	463e      	mov	r6, r7
 8018fe6:	d1f7      	bne.n	8018fd8 <__utoa+0x10>
 8018fe8:	7921      	ldrb	r1, [r4, #4]
 8018fea:	7139      	strb	r1, [r7, #4]
 8018fec:	1e91      	subs	r1, r2, #2
 8018fee:	6820      	ldr	r0, [r4, #0]
 8018ff0:	6038      	str	r0, [r7, #0]
 8018ff2:	2922      	cmp	r1, #34	; 0x22
 8018ff4:	f04f 0100 	mov.w	r1, #0
 8018ff8:	d904      	bls.n	8019004 <__utoa+0x3c>
 8018ffa:	7019      	strb	r1, [r3, #0]
 8018ffc:	460b      	mov	r3, r1
 8018ffe:	4618      	mov	r0, r3
 8019000:	b00b      	add	sp, #44	; 0x2c
 8019002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019004:	1e58      	subs	r0, r3, #1
 8019006:	4684      	mov	ip, r0
 8019008:	fbb5 f7f2 	udiv	r7, r5, r2
 801900c:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8019010:	fb02 5617 	mls	r6, r2, r7, r5
 8019014:	4476      	add	r6, lr
 8019016:	460c      	mov	r4, r1
 8019018:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 801901c:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8019020:	462e      	mov	r6, r5
 8019022:	42b2      	cmp	r2, r6
 8019024:	f101 0101 	add.w	r1, r1, #1
 8019028:	463d      	mov	r5, r7
 801902a:	d9ed      	bls.n	8019008 <__utoa+0x40>
 801902c:	2200      	movs	r2, #0
 801902e:	545a      	strb	r2, [r3, r1]
 8019030:	1919      	adds	r1, r3, r4
 8019032:	1aa5      	subs	r5, r4, r2
 8019034:	42aa      	cmp	r2, r5
 8019036:	dae2      	bge.n	8018ffe <__utoa+0x36>
 8019038:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 801903c:	780e      	ldrb	r6, [r1, #0]
 801903e:	7006      	strb	r6, [r0, #0]
 8019040:	3201      	adds	r2, #1
 8019042:	f801 5901 	strb.w	r5, [r1], #-1
 8019046:	e7f4      	b.n	8019032 <__utoa+0x6a>
 8019048:	0801e0c0 	.word	0x0801e0c0

0801904c <__swbuf_r>:
 801904c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801904e:	460e      	mov	r6, r1
 8019050:	4614      	mov	r4, r2
 8019052:	4605      	mov	r5, r0
 8019054:	b118      	cbz	r0, 801905e <__swbuf_r+0x12>
 8019056:	6983      	ldr	r3, [r0, #24]
 8019058:	b90b      	cbnz	r3, 801905e <__swbuf_r+0x12>
 801905a:	f7fe fd6b 	bl	8017b34 <__sinit>
 801905e:	4b21      	ldr	r3, [pc, #132]	; (80190e4 <__swbuf_r+0x98>)
 8019060:	429c      	cmp	r4, r3
 8019062:	d12b      	bne.n	80190bc <__swbuf_r+0x70>
 8019064:	686c      	ldr	r4, [r5, #4]
 8019066:	69a3      	ldr	r3, [r4, #24]
 8019068:	60a3      	str	r3, [r4, #8]
 801906a:	89a3      	ldrh	r3, [r4, #12]
 801906c:	071a      	lsls	r2, r3, #28
 801906e:	d52f      	bpl.n	80190d0 <__swbuf_r+0x84>
 8019070:	6923      	ldr	r3, [r4, #16]
 8019072:	b36b      	cbz	r3, 80190d0 <__swbuf_r+0x84>
 8019074:	6923      	ldr	r3, [r4, #16]
 8019076:	6820      	ldr	r0, [r4, #0]
 8019078:	1ac0      	subs	r0, r0, r3
 801907a:	6963      	ldr	r3, [r4, #20]
 801907c:	b2f6      	uxtb	r6, r6
 801907e:	4283      	cmp	r3, r0
 8019080:	4637      	mov	r7, r6
 8019082:	dc04      	bgt.n	801908e <__swbuf_r+0x42>
 8019084:	4621      	mov	r1, r4
 8019086:	4628      	mov	r0, r5
 8019088:	f7fe fcc0 	bl	8017a0c <_fflush_r>
 801908c:	bb30      	cbnz	r0, 80190dc <__swbuf_r+0x90>
 801908e:	68a3      	ldr	r3, [r4, #8]
 8019090:	3b01      	subs	r3, #1
 8019092:	60a3      	str	r3, [r4, #8]
 8019094:	6823      	ldr	r3, [r4, #0]
 8019096:	1c5a      	adds	r2, r3, #1
 8019098:	6022      	str	r2, [r4, #0]
 801909a:	701e      	strb	r6, [r3, #0]
 801909c:	6963      	ldr	r3, [r4, #20]
 801909e:	3001      	adds	r0, #1
 80190a0:	4283      	cmp	r3, r0
 80190a2:	d004      	beq.n	80190ae <__swbuf_r+0x62>
 80190a4:	89a3      	ldrh	r3, [r4, #12]
 80190a6:	07db      	lsls	r3, r3, #31
 80190a8:	d506      	bpl.n	80190b8 <__swbuf_r+0x6c>
 80190aa:	2e0a      	cmp	r6, #10
 80190ac:	d104      	bne.n	80190b8 <__swbuf_r+0x6c>
 80190ae:	4621      	mov	r1, r4
 80190b0:	4628      	mov	r0, r5
 80190b2:	f7fe fcab 	bl	8017a0c <_fflush_r>
 80190b6:	b988      	cbnz	r0, 80190dc <__swbuf_r+0x90>
 80190b8:	4638      	mov	r0, r7
 80190ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80190bc:	4b0a      	ldr	r3, [pc, #40]	; (80190e8 <__swbuf_r+0x9c>)
 80190be:	429c      	cmp	r4, r3
 80190c0:	d101      	bne.n	80190c6 <__swbuf_r+0x7a>
 80190c2:	68ac      	ldr	r4, [r5, #8]
 80190c4:	e7cf      	b.n	8019066 <__swbuf_r+0x1a>
 80190c6:	4b09      	ldr	r3, [pc, #36]	; (80190ec <__swbuf_r+0xa0>)
 80190c8:	429c      	cmp	r4, r3
 80190ca:	bf08      	it	eq
 80190cc:	68ec      	ldreq	r4, [r5, #12]
 80190ce:	e7ca      	b.n	8019066 <__swbuf_r+0x1a>
 80190d0:	4621      	mov	r1, r4
 80190d2:	4628      	mov	r0, r5
 80190d4:	f000 f81e 	bl	8019114 <__swsetup_r>
 80190d8:	2800      	cmp	r0, #0
 80190da:	d0cb      	beq.n	8019074 <__swbuf_r+0x28>
 80190dc:	f04f 37ff 	mov.w	r7, #4294967295
 80190e0:	e7ea      	b.n	80190b8 <__swbuf_r+0x6c>
 80190e2:	bf00      	nop
 80190e4:	0801dfa4 	.word	0x0801dfa4
 80190e8:	0801dfc4 	.word	0x0801dfc4
 80190ec:	0801df84 	.word	0x0801df84

080190f0 <_write_r>:
 80190f0:	b538      	push	{r3, r4, r5, lr}
 80190f2:	4d07      	ldr	r5, [pc, #28]	; (8019110 <_write_r+0x20>)
 80190f4:	4604      	mov	r4, r0
 80190f6:	4608      	mov	r0, r1
 80190f8:	4611      	mov	r1, r2
 80190fa:	2200      	movs	r2, #0
 80190fc:	602a      	str	r2, [r5, #0]
 80190fe:	461a      	mov	r2, r3
 8019100:	f7eb f839 	bl	8004176 <_write>
 8019104:	1c43      	adds	r3, r0, #1
 8019106:	d102      	bne.n	801910e <_write_r+0x1e>
 8019108:	682b      	ldr	r3, [r5, #0]
 801910a:	b103      	cbz	r3, 801910e <_write_r+0x1e>
 801910c:	6023      	str	r3, [r4, #0]
 801910e:	bd38      	pop	{r3, r4, r5, pc}
 8019110:	2000952c 	.word	0x2000952c

08019114 <__swsetup_r>:
 8019114:	4b32      	ldr	r3, [pc, #200]	; (80191e0 <__swsetup_r+0xcc>)
 8019116:	b570      	push	{r4, r5, r6, lr}
 8019118:	681d      	ldr	r5, [r3, #0]
 801911a:	4606      	mov	r6, r0
 801911c:	460c      	mov	r4, r1
 801911e:	b125      	cbz	r5, 801912a <__swsetup_r+0x16>
 8019120:	69ab      	ldr	r3, [r5, #24]
 8019122:	b913      	cbnz	r3, 801912a <__swsetup_r+0x16>
 8019124:	4628      	mov	r0, r5
 8019126:	f7fe fd05 	bl	8017b34 <__sinit>
 801912a:	4b2e      	ldr	r3, [pc, #184]	; (80191e4 <__swsetup_r+0xd0>)
 801912c:	429c      	cmp	r4, r3
 801912e:	d10f      	bne.n	8019150 <__swsetup_r+0x3c>
 8019130:	686c      	ldr	r4, [r5, #4]
 8019132:	89a3      	ldrh	r3, [r4, #12]
 8019134:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019138:	0719      	lsls	r1, r3, #28
 801913a:	d42c      	bmi.n	8019196 <__swsetup_r+0x82>
 801913c:	06dd      	lsls	r5, r3, #27
 801913e:	d411      	bmi.n	8019164 <__swsetup_r+0x50>
 8019140:	2309      	movs	r3, #9
 8019142:	6033      	str	r3, [r6, #0]
 8019144:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019148:	81a3      	strh	r3, [r4, #12]
 801914a:	f04f 30ff 	mov.w	r0, #4294967295
 801914e:	e03e      	b.n	80191ce <__swsetup_r+0xba>
 8019150:	4b25      	ldr	r3, [pc, #148]	; (80191e8 <__swsetup_r+0xd4>)
 8019152:	429c      	cmp	r4, r3
 8019154:	d101      	bne.n	801915a <__swsetup_r+0x46>
 8019156:	68ac      	ldr	r4, [r5, #8]
 8019158:	e7eb      	b.n	8019132 <__swsetup_r+0x1e>
 801915a:	4b24      	ldr	r3, [pc, #144]	; (80191ec <__swsetup_r+0xd8>)
 801915c:	429c      	cmp	r4, r3
 801915e:	bf08      	it	eq
 8019160:	68ec      	ldreq	r4, [r5, #12]
 8019162:	e7e6      	b.n	8019132 <__swsetup_r+0x1e>
 8019164:	0758      	lsls	r0, r3, #29
 8019166:	d512      	bpl.n	801918e <__swsetup_r+0x7a>
 8019168:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801916a:	b141      	cbz	r1, 801917e <__swsetup_r+0x6a>
 801916c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019170:	4299      	cmp	r1, r3
 8019172:	d002      	beq.n	801917a <__swsetup_r+0x66>
 8019174:	4630      	mov	r0, r6
 8019176:	f7fe fe6f 	bl	8017e58 <_free_r>
 801917a:	2300      	movs	r3, #0
 801917c:	6363      	str	r3, [r4, #52]	; 0x34
 801917e:	89a3      	ldrh	r3, [r4, #12]
 8019180:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019184:	81a3      	strh	r3, [r4, #12]
 8019186:	2300      	movs	r3, #0
 8019188:	6063      	str	r3, [r4, #4]
 801918a:	6923      	ldr	r3, [r4, #16]
 801918c:	6023      	str	r3, [r4, #0]
 801918e:	89a3      	ldrh	r3, [r4, #12]
 8019190:	f043 0308 	orr.w	r3, r3, #8
 8019194:	81a3      	strh	r3, [r4, #12]
 8019196:	6923      	ldr	r3, [r4, #16]
 8019198:	b94b      	cbnz	r3, 80191ae <__swsetup_r+0x9a>
 801919a:	89a3      	ldrh	r3, [r4, #12]
 801919c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80191a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80191a4:	d003      	beq.n	80191ae <__swsetup_r+0x9a>
 80191a6:	4621      	mov	r1, r4
 80191a8:	4630      	mov	r0, r6
 80191aa:	f7fe fdc7 	bl	8017d3c <__smakebuf_r>
 80191ae:	89a0      	ldrh	r0, [r4, #12]
 80191b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80191b4:	f010 0301 	ands.w	r3, r0, #1
 80191b8:	d00a      	beq.n	80191d0 <__swsetup_r+0xbc>
 80191ba:	2300      	movs	r3, #0
 80191bc:	60a3      	str	r3, [r4, #8]
 80191be:	6963      	ldr	r3, [r4, #20]
 80191c0:	425b      	negs	r3, r3
 80191c2:	61a3      	str	r3, [r4, #24]
 80191c4:	6923      	ldr	r3, [r4, #16]
 80191c6:	b943      	cbnz	r3, 80191da <__swsetup_r+0xc6>
 80191c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80191cc:	d1ba      	bne.n	8019144 <__swsetup_r+0x30>
 80191ce:	bd70      	pop	{r4, r5, r6, pc}
 80191d0:	0781      	lsls	r1, r0, #30
 80191d2:	bf58      	it	pl
 80191d4:	6963      	ldrpl	r3, [r4, #20]
 80191d6:	60a3      	str	r3, [r4, #8]
 80191d8:	e7f4      	b.n	80191c4 <__swsetup_r+0xb0>
 80191da:	2000      	movs	r0, #0
 80191dc:	e7f7      	b.n	80191ce <__swsetup_r+0xba>
 80191de:	bf00      	nop
 80191e0:	2000001c 	.word	0x2000001c
 80191e4:	0801dfa4 	.word	0x0801dfa4
 80191e8:	0801dfc4 	.word	0x0801dfc4
 80191ec:	0801df84 	.word	0x0801df84

080191f0 <__assert_func>:
 80191f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80191f2:	4614      	mov	r4, r2
 80191f4:	461a      	mov	r2, r3
 80191f6:	4b09      	ldr	r3, [pc, #36]	; (801921c <__assert_func+0x2c>)
 80191f8:	681b      	ldr	r3, [r3, #0]
 80191fa:	4605      	mov	r5, r0
 80191fc:	68d8      	ldr	r0, [r3, #12]
 80191fe:	b14c      	cbz	r4, 8019214 <__assert_func+0x24>
 8019200:	4b07      	ldr	r3, [pc, #28]	; (8019220 <__assert_func+0x30>)
 8019202:	9100      	str	r1, [sp, #0]
 8019204:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019208:	4906      	ldr	r1, [pc, #24]	; (8019224 <__assert_func+0x34>)
 801920a:	462b      	mov	r3, r5
 801920c:	f000 f824 	bl	8019258 <fiprintf>
 8019210:	f7fe fb6a 	bl	80178e8 <abort>
 8019214:	4b04      	ldr	r3, [pc, #16]	; (8019228 <__assert_func+0x38>)
 8019216:	461c      	mov	r4, r3
 8019218:	e7f3      	b.n	8019202 <__assert_func+0x12>
 801921a:	bf00      	nop
 801921c:	2000001c 	.word	0x2000001c
 8019220:	0801e0e5 	.word	0x0801e0e5
 8019224:	0801e0f2 	.word	0x0801e0f2
 8019228:	0801e120 	.word	0x0801e120

0801922c <_close_r>:
 801922c:	b538      	push	{r3, r4, r5, lr}
 801922e:	4d06      	ldr	r5, [pc, #24]	; (8019248 <_close_r+0x1c>)
 8019230:	2300      	movs	r3, #0
 8019232:	4604      	mov	r4, r0
 8019234:	4608      	mov	r0, r1
 8019236:	602b      	str	r3, [r5, #0]
 8019238:	f7ea ffb9 	bl	80041ae <_close>
 801923c:	1c43      	adds	r3, r0, #1
 801923e:	d102      	bne.n	8019246 <_close_r+0x1a>
 8019240:	682b      	ldr	r3, [r5, #0]
 8019242:	b103      	cbz	r3, 8019246 <_close_r+0x1a>
 8019244:	6023      	str	r3, [r4, #0]
 8019246:	bd38      	pop	{r3, r4, r5, pc}
 8019248:	2000952c 	.word	0x2000952c

0801924c <__errno>:
 801924c:	4b01      	ldr	r3, [pc, #4]	; (8019254 <__errno+0x8>)
 801924e:	6818      	ldr	r0, [r3, #0]
 8019250:	4770      	bx	lr
 8019252:	bf00      	nop
 8019254:	2000001c 	.word	0x2000001c

08019258 <fiprintf>:
 8019258:	b40e      	push	{r1, r2, r3}
 801925a:	b503      	push	{r0, r1, lr}
 801925c:	4601      	mov	r1, r0
 801925e:	ab03      	add	r3, sp, #12
 8019260:	4805      	ldr	r0, [pc, #20]	; (8019278 <fiprintf+0x20>)
 8019262:	f853 2b04 	ldr.w	r2, [r3], #4
 8019266:	6800      	ldr	r0, [r0, #0]
 8019268:	9301      	str	r3, [sp, #4]
 801926a:	f001 fa19 	bl	801a6a0 <_vfiprintf_r>
 801926e:	b002      	add	sp, #8
 8019270:	f85d eb04 	ldr.w	lr, [sp], #4
 8019274:	b003      	add	sp, #12
 8019276:	4770      	bx	lr
 8019278:	2000001c 	.word	0x2000001c

0801927c <_fstat_r>:
 801927c:	b538      	push	{r3, r4, r5, lr}
 801927e:	4d07      	ldr	r5, [pc, #28]	; (801929c <_fstat_r+0x20>)
 8019280:	2300      	movs	r3, #0
 8019282:	4604      	mov	r4, r0
 8019284:	4608      	mov	r0, r1
 8019286:	4611      	mov	r1, r2
 8019288:	602b      	str	r3, [r5, #0]
 801928a:	f7ea ff9c 	bl	80041c6 <_fstat>
 801928e:	1c43      	adds	r3, r0, #1
 8019290:	d102      	bne.n	8019298 <_fstat_r+0x1c>
 8019292:	682b      	ldr	r3, [r5, #0]
 8019294:	b103      	cbz	r3, 8019298 <_fstat_r+0x1c>
 8019296:	6023      	str	r3, [r4, #0]
 8019298:	bd38      	pop	{r3, r4, r5, pc}
 801929a:	bf00      	nop
 801929c:	2000952c 	.word	0x2000952c

080192a0 <rshift>:
 80192a0:	6903      	ldr	r3, [r0, #16]
 80192a2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80192a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80192aa:	ea4f 1261 	mov.w	r2, r1, asr #5
 80192ae:	f100 0414 	add.w	r4, r0, #20
 80192b2:	dd45      	ble.n	8019340 <rshift+0xa0>
 80192b4:	f011 011f 	ands.w	r1, r1, #31
 80192b8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80192bc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80192c0:	d10c      	bne.n	80192dc <rshift+0x3c>
 80192c2:	f100 0710 	add.w	r7, r0, #16
 80192c6:	4629      	mov	r1, r5
 80192c8:	42b1      	cmp	r1, r6
 80192ca:	d334      	bcc.n	8019336 <rshift+0x96>
 80192cc:	1a9b      	subs	r3, r3, r2
 80192ce:	009b      	lsls	r3, r3, #2
 80192d0:	1eea      	subs	r2, r5, #3
 80192d2:	4296      	cmp	r6, r2
 80192d4:	bf38      	it	cc
 80192d6:	2300      	movcc	r3, #0
 80192d8:	4423      	add	r3, r4
 80192da:	e015      	b.n	8019308 <rshift+0x68>
 80192dc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80192e0:	f1c1 0820 	rsb	r8, r1, #32
 80192e4:	40cf      	lsrs	r7, r1
 80192e6:	f105 0e04 	add.w	lr, r5, #4
 80192ea:	46a1      	mov	r9, r4
 80192ec:	4576      	cmp	r6, lr
 80192ee:	46f4      	mov	ip, lr
 80192f0:	d815      	bhi.n	801931e <rshift+0x7e>
 80192f2:	1a9b      	subs	r3, r3, r2
 80192f4:	009a      	lsls	r2, r3, #2
 80192f6:	3a04      	subs	r2, #4
 80192f8:	3501      	adds	r5, #1
 80192fa:	42ae      	cmp	r6, r5
 80192fc:	bf38      	it	cc
 80192fe:	2200      	movcc	r2, #0
 8019300:	18a3      	adds	r3, r4, r2
 8019302:	50a7      	str	r7, [r4, r2]
 8019304:	b107      	cbz	r7, 8019308 <rshift+0x68>
 8019306:	3304      	adds	r3, #4
 8019308:	1b1a      	subs	r2, r3, r4
 801930a:	42a3      	cmp	r3, r4
 801930c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8019310:	bf08      	it	eq
 8019312:	2300      	moveq	r3, #0
 8019314:	6102      	str	r2, [r0, #16]
 8019316:	bf08      	it	eq
 8019318:	6143      	streq	r3, [r0, #20]
 801931a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801931e:	f8dc c000 	ldr.w	ip, [ip]
 8019322:	fa0c fc08 	lsl.w	ip, ip, r8
 8019326:	ea4c 0707 	orr.w	r7, ip, r7
 801932a:	f849 7b04 	str.w	r7, [r9], #4
 801932e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8019332:	40cf      	lsrs	r7, r1
 8019334:	e7da      	b.n	80192ec <rshift+0x4c>
 8019336:	f851 cb04 	ldr.w	ip, [r1], #4
 801933a:	f847 cf04 	str.w	ip, [r7, #4]!
 801933e:	e7c3      	b.n	80192c8 <rshift+0x28>
 8019340:	4623      	mov	r3, r4
 8019342:	e7e1      	b.n	8019308 <rshift+0x68>

08019344 <__hexdig_fun>:
 8019344:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8019348:	2b09      	cmp	r3, #9
 801934a:	d802      	bhi.n	8019352 <__hexdig_fun+0xe>
 801934c:	3820      	subs	r0, #32
 801934e:	b2c0      	uxtb	r0, r0
 8019350:	4770      	bx	lr
 8019352:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8019356:	2b05      	cmp	r3, #5
 8019358:	d801      	bhi.n	801935e <__hexdig_fun+0x1a>
 801935a:	3847      	subs	r0, #71	; 0x47
 801935c:	e7f7      	b.n	801934e <__hexdig_fun+0xa>
 801935e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8019362:	2b05      	cmp	r3, #5
 8019364:	d801      	bhi.n	801936a <__hexdig_fun+0x26>
 8019366:	3827      	subs	r0, #39	; 0x27
 8019368:	e7f1      	b.n	801934e <__hexdig_fun+0xa>
 801936a:	2000      	movs	r0, #0
 801936c:	4770      	bx	lr
	...

08019370 <__gethex>:
 8019370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019374:	ed2d 8b02 	vpush	{d8}
 8019378:	b089      	sub	sp, #36	; 0x24
 801937a:	ee08 0a10 	vmov	s16, r0
 801937e:	9304      	str	r3, [sp, #16]
 8019380:	4bbc      	ldr	r3, [pc, #752]	; (8019674 <__gethex+0x304>)
 8019382:	681b      	ldr	r3, [r3, #0]
 8019384:	9301      	str	r3, [sp, #4]
 8019386:	4618      	mov	r0, r3
 8019388:	468b      	mov	fp, r1
 801938a:	4690      	mov	r8, r2
 801938c:	f7e6 ff30 	bl	80001f0 <strlen>
 8019390:	9b01      	ldr	r3, [sp, #4]
 8019392:	f8db 2000 	ldr.w	r2, [fp]
 8019396:	4403      	add	r3, r0
 8019398:	4682      	mov	sl, r0
 801939a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801939e:	9305      	str	r3, [sp, #20]
 80193a0:	1c93      	adds	r3, r2, #2
 80193a2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80193a6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80193aa:	32fe      	adds	r2, #254	; 0xfe
 80193ac:	18d1      	adds	r1, r2, r3
 80193ae:	461f      	mov	r7, r3
 80193b0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80193b4:	9100      	str	r1, [sp, #0]
 80193b6:	2830      	cmp	r0, #48	; 0x30
 80193b8:	d0f8      	beq.n	80193ac <__gethex+0x3c>
 80193ba:	f7ff ffc3 	bl	8019344 <__hexdig_fun>
 80193be:	4604      	mov	r4, r0
 80193c0:	2800      	cmp	r0, #0
 80193c2:	d13a      	bne.n	801943a <__gethex+0xca>
 80193c4:	9901      	ldr	r1, [sp, #4]
 80193c6:	4652      	mov	r2, sl
 80193c8:	4638      	mov	r0, r7
 80193ca:	f7fe ff13 	bl	80181f4 <strncmp>
 80193ce:	4605      	mov	r5, r0
 80193d0:	2800      	cmp	r0, #0
 80193d2:	d168      	bne.n	80194a6 <__gethex+0x136>
 80193d4:	f817 000a 	ldrb.w	r0, [r7, sl]
 80193d8:	eb07 060a 	add.w	r6, r7, sl
 80193dc:	f7ff ffb2 	bl	8019344 <__hexdig_fun>
 80193e0:	2800      	cmp	r0, #0
 80193e2:	d062      	beq.n	80194aa <__gethex+0x13a>
 80193e4:	4633      	mov	r3, r6
 80193e6:	7818      	ldrb	r0, [r3, #0]
 80193e8:	2830      	cmp	r0, #48	; 0x30
 80193ea:	461f      	mov	r7, r3
 80193ec:	f103 0301 	add.w	r3, r3, #1
 80193f0:	d0f9      	beq.n	80193e6 <__gethex+0x76>
 80193f2:	f7ff ffa7 	bl	8019344 <__hexdig_fun>
 80193f6:	2301      	movs	r3, #1
 80193f8:	fab0 f480 	clz	r4, r0
 80193fc:	0964      	lsrs	r4, r4, #5
 80193fe:	4635      	mov	r5, r6
 8019400:	9300      	str	r3, [sp, #0]
 8019402:	463a      	mov	r2, r7
 8019404:	4616      	mov	r6, r2
 8019406:	3201      	adds	r2, #1
 8019408:	7830      	ldrb	r0, [r6, #0]
 801940a:	f7ff ff9b 	bl	8019344 <__hexdig_fun>
 801940e:	2800      	cmp	r0, #0
 8019410:	d1f8      	bne.n	8019404 <__gethex+0x94>
 8019412:	9901      	ldr	r1, [sp, #4]
 8019414:	4652      	mov	r2, sl
 8019416:	4630      	mov	r0, r6
 8019418:	f7fe feec 	bl	80181f4 <strncmp>
 801941c:	b980      	cbnz	r0, 8019440 <__gethex+0xd0>
 801941e:	b94d      	cbnz	r5, 8019434 <__gethex+0xc4>
 8019420:	eb06 050a 	add.w	r5, r6, sl
 8019424:	462a      	mov	r2, r5
 8019426:	4616      	mov	r6, r2
 8019428:	3201      	adds	r2, #1
 801942a:	7830      	ldrb	r0, [r6, #0]
 801942c:	f7ff ff8a 	bl	8019344 <__hexdig_fun>
 8019430:	2800      	cmp	r0, #0
 8019432:	d1f8      	bne.n	8019426 <__gethex+0xb6>
 8019434:	1bad      	subs	r5, r5, r6
 8019436:	00ad      	lsls	r5, r5, #2
 8019438:	e004      	b.n	8019444 <__gethex+0xd4>
 801943a:	2400      	movs	r4, #0
 801943c:	4625      	mov	r5, r4
 801943e:	e7e0      	b.n	8019402 <__gethex+0x92>
 8019440:	2d00      	cmp	r5, #0
 8019442:	d1f7      	bne.n	8019434 <__gethex+0xc4>
 8019444:	7833      	ldrb	r3, [r6, #0]
 8019446:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801944a:	2b50      	cmp	r3, #80	; 0x50
 801944c:	d13b      	bne.n	80194c6 <__gethex+0x156>
 801944e:	7873      	ldrb	r3, [r6, #1]
 8019450:	2b2b      	cmp	r3, #43	; 0x2b
 8019452:	d02c      	beq.n	80194ae <__gethex+0x13e>
 8019454:	2b2d      	cmp	r3, #45	; 0x2d
 8019456:	d02e      	beq.n	80194b6 <__gethex+0x146>
 8019458:	1c71      	adds	r1, r6, #1
 801945a:	f04f 0900 	mov.w	r9, #0
 801945e:	7808      	ldrb	r0, [r1, #0]
 8019460:	f7ff ff70 	bl	8019344 <__hexdig_fun>
 8019464:	1e43      	subs	r3, r0, #1
 8019466:	b2db      	uxtb	r3, r3
 8019468:	2b18      	cmp	r3, #24
 801946a:	d82c      	bhi.n	80194c6 <__gethex+0x156>
 801946c:	f1a0 0210 	sub.w	r2, r0, #16
 8019470:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8019474:	f7ff ff66 	bl	8019344 <__hexdig_fun>
 8019478:	1e43      	subs	r3, r0, #1
 801947a:	b2db      	uxtb	r3, r3
 801947c:	2b18      	cmp	r3, #24
 801947e:	d91d      	bls.n	80194bc <__gethex+0x14c>
 8019480:	f1b9 0f00 	cmp.w	r9, #0
 8019484:	d000      	beq.n	8019488 <__gethex+0x118>
 8019486:	4252      	negs	r2, r2
 8019488:	4415      	add	r5, r2
 801948a:	f8cb 1000 	str.w	r1, [fp]
 801948e:	b1e4      	cbz	r4, 80194ca <__gethex+0x15a>
 8019490:	9b00      	ldr	r3, [sp, #0]
 8019492:	2b00      	cmp	r3, #0
 8019494:	bf14      	ite	ne
 8019496:	2700      	movne	r7, #0
 8019498:	2706      	moveq	r7, #6
 801949a:	4638      	mov	r0, r7
 801949c:	b009      	add	sp, #36	; 0x24
 801949e:	ecbd 8b02 	vpop	{d8}
 80194a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194a6:	463e      	mov	r6, r7
 80194a8:	4625      	mov	r5, r4
 80194aa:	2401      	movs	r4, #1
 80194ac:	e7ca      	b.n	8019444 <__gethex+0xd4>
 80194ae:	f04f 0900 	mov.w	r9, #0
 80194b2:	1cb1      	adds	r1, r6, #2
 80194b4:	e7d3      	b.n	801945e <__gethex+0xee>
 80194b6:	f04f 0901 	mov.w	r9, #1
 80194ba:	e7fa      	b.n	80194b2 <__gethex+0x142>
 80194bc:	230a      	movs	r3, #10
 80194be:	fb03 0202 	mla	r2, r3, r2, r0
 80194c2:	3a10      	subs	r2, #16
 80194c4:	e7d4      	b.n	8019470 <__gethex+0x100>
 80194c6:	4631      	mov	r1, r6
 80194c8:	e7df      	b.n	801948a <__gethex+0x11a>
 80194ca:	1bf3      	subs	r3, r6, r7
 80194cc:	3b01      	subs	r3, #1
 80194ce:	4621      	mov	r1, r4
 80194d0:	2b07      	cmp	r3, #7
 80194d2:	dc0b      	bgt.n	80194ec <__gethex+0x17c>
 80194d4:	ee18 0a10 	vmov	r0, s16
 80194d8:	f000 fa92 	bl	8019a00 <_Balloc>
 80194dc:	4604      	mov	r4, r0
 80194de:	b940      	cbnz	r0, 80194f2 <__gethex+0x182>
 80194e0:	4b65      	ldr	r3, [pc, #404]	; (8019678 <__gethex+0x308>)
 80194e2:	4602      	mov	r2, r0
 80194e4:	21de      	movs	r1, #222	; 0xde
 80194e6:	4865      	ldr	r0, [pc, #404]	; (801967c <__gethex+0x30c>)
 80194e8:	f7ff fe82 	bl	80191f0 <__assert_func>
 80194ec:	3101      	adds	r1, #1
 80194ee:	105b      	asrs	r3, r3, #1
 80194f0:	e7ee      	b.n	80194d0 <__gethex+0x160>
 80194f2:	f100 0914 	add.w	r9, r0, #20
 80194f6:	f04f 0b00 	mov.w	fp, #0
 80194fa:	f1ca 0301 	rsb	r3, sl, #1
 80194fe:	f8cd 9008 	str.w	r9, [sp, #8]
 8019502:	f8cd b000 	str.w	fp, [sp]
 8019506:	9306      	str	r3, [sp, #24]
 8019508:	42b7      	cmp	r7, r6
 801950a:	d340      	bcc.n	801958e <__gethex+0x21e>
 801950c:	9802      	ldr	r0, [sp, #8]
 801950e:	9b00      	ldr	r3, [sp, #0]
 8019510:	f840 3b04 	str.w	r3, [r0], #4
 8019514:	eba0 0009 	sub.w	r0, r0, r9
 8019518:	1080      	asrs	r0, r0, #2
 801951a:	0146      	lsls	r6, r0, #5
 801951c:	6120      	str	r0, [r4, #16]
 801951e:	4618      	mov	r0, r3
 8019520:	f000 fb64 	bl	8019bec <__hi0bits>
 8019524:	1a30      	subs	r0, r6, r0
 8019526:	f8d8 6000 	ldr.w	r6, [r8]
 801952a:	42b0      	cmp	r0, r6
 801952c:	dd63      	ble.n	80195f6 <__gethex+0x286>
 801952e:	1b87      	subs	r7, r0, r6
 8019530:	4639      	mov	r1, r7
 8019532:	4620      	mov	r0, r4
 8019534:	f000 fefe 	bl	801a334 <__any_on>
 8019538:	4682      	mov	sl, r0
 801953a:	b1a8      	cbz	r0, 8019568 <__gethex+0x1f8>
 801953c:	1e7b      	subs	r3, r7, #1
 801953e:	1159      	asrs	r1, r3, #5
 8019540:	f003 021f 	and.w	r2, r3, #31
 8019544:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8019548:	f04f 0a01 	mov.w	sl, #1
 801954c:	fa0a f202 	lsl.w	r2, sl, r2
 8019550:	420a      	tst	r2, r1
 8019552:	d009      	beq.n	8019568 <__gethex+0x1f8>
 8019554:	4553      	cmp	r3, sl
 8019556:	dd05      	ble.n	8019564 <__gethex+0x1f4>
 8019558:	1eb9      	subs	r1, r7, #2
 801955a:	4620      	mov	r0, r4
 801955c:	f000 feea 	bl	801a334 <__any_on>
 8019560:	2800      	cmp	r0, #0
 8019562:	d145      	bne.n	80195f0 <__gethex+0x280>
 8019564:	f04f 0a02 	mov.w	sl, #2
 8019568:	4639      	mov	r1, r7
 801956a:	4620      	mov	r0, r4
 801956c:	f7ff fe98 	bl	80192a0 <rshift>
 8019570:	443d      	add	r5, r7
 8019572:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019576:	42ab      	cmp	r3, r5
 8019578:	da4c      	bge.n	8019614 <__gethex+0x2a4>
 801957a:	ee18 0a10 	vmov	r0, s16
 801957e:	4621      	mov	r1, r4
 8019580:	f000 fa7e 	bl	8019a80 <_Bfree>
 8019584:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019586:	2300      	movs	r3, #0
 8019588:	6013      	str	r3, [r2, #0]
 801958a:	27a3      	movs	r7, #163	; 0xa3
 801958c:	e785      	b.n	801949a <__gethex+0x12a>
 801958e:	1e73      	subs	r3, r6, #1
 8019590:	9a05      	ldr	r2, [sp, #20]
 8019592:	9303      	str	r3, [sp, #12]
 8019594:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8019598:	4293      	cmp	r3, r2
 801959a:	d019      	beq.n	80195d0 <__gethex+0x260>
 801959c:	f1bb 0f20 	cmp.w	fp, #32
 80195a0:	d107      	bne.n	80195b2 <__gethex+0x242>
 80195a2:	9b02      	ldr	r3, [sp, #8]
 80195a4:	9a00      	ldr	r2, [sp, #0]
 80195a6:	f843 2b04 	str.w	r2, [r3], #4
 80195aa:	9302      	str	r3, [sp, #8]
 80195ac:	2300      	movs	r3, #0
 80195ae:	9300      	str	r3, [sp, #0]
 80195b0:	469b      	mov	fp, r3
 80195b2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80195b6:	f7ff fec5 	bl	8019344 <__hexdig_fun>
 80195ba:	9b00      	ldr	r3, [sp, #0]
 80195bc:	f000 000f 	and.w	r0, r0, #15
 80195c0:	fa00 f00b 	lsl.w	r0, r0, fp
 80195c4:	4303      	orrs	r3, r0
 80195c6:	9300      	str	r3, [sp, #0]
 80195c8:	f10b 0b04 	add.w	fp, fp, #4
 80195cc:	9b03      	ldr	r3, [sp, #12]
 80195ce:	e00d      	b.n	80195ec <__gethex+0x27c>
 80195d0:	9b03      	ldr	r3, [sp, #12]
 80195d2:	9a06      	ldr	r2, [sp, #24]
 80195d4:	4413      	add	r3, r2
 80195d6:	42bb      	cmp	r3, r7
 80195d8:	d3e0      	bcc.n	801959c <__gethex+0x22c>
 80195da:	4618      	mov	r0, r3
 80195dc:	9901      	ldr	r1, [sp, #4]
 80195de:	9307      	str	r3, [sp, #28]
 80195e0:	4652      	mov	r2, sl
 80195e2:	f7fe fe07 	bl	80181f4 <strncmp>
 80195e6:	9b07      	ldr	r3, [sp, #28]
 80195e8:	2800      	cmp	r0, #0
 80195ea:	d1d7      	bne.n	801959c <__gethex+0x22c>
 80195ec:	461e      	mov	r6, r3
 80195ee:	e78b      	b.n	8019508 <__gethex+0x198>
 80195f0:	f04f 0a03 	mov.w	sl, #3
 80195f4:	e7b8      	b.n	8019568 <__gethex+0x1f8>
 80195f6:	da0a      	bge.n	801960e <__gethex+0x29e>
 80195f8:	1a37      	subs	r7, r6, r0
 80195fa:	4621      	mov	r1, r4
 80195fc:	ee18 0a10 	vmov	r0, s16
 8019600:	463a      	mov	r2, r7
 8019602:	f000 fc59 	bl	8019eb8 <__lshift>
 8019606:	1bed      	subs	r5, r5, r7
 8019608:	4604      	mov	r4, r0
 801960a:	f100 0914 	add.w	r9, r0, #20
 801960e:	f04f 0a00 	mov.w	sl, #0
 8019612:	e7ae      	b.n	8019572 <__gethex+0x202>
 8019614:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8019618:	42a8      	cmp	r0, r5
 801961a:	dd72      	ble.n	8019702 <__gethex+0x392>
 801961c:	1b45      	subs	r5, r0, r5
 801961e:	42ae      	cmp	r6, r5
 8019620:	dc36      	bgt.n	8019690 <__gethex+0x320>
 8019622:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019626:	2b02      	cmp	r3, #2
 8019628:	d02a      	beq.n	8019680 <__gethex+0x310>
 801962a:	2b03      	cmp	r3, #3
 801962c:	d02c      	beq.n	8019688 <__gethex+0x318>
 801962e:	2b01      	cmp	r3, #1
 8019630:	d115      	bne.n	801965e <__gethex+0x2ee>
 8019632:	42ae      	cmp	r6, r5
 8019634:	d113      	bne.n	801965e <__gethex+0x2ee>
 8019636:	2e01      	cmp	r6, #1
 8019638:	d10b      	bne.n	8019652 <__gethex+0x2e2>
 801963a:	9a04      	ldr	r2, [sp, #16]
 801963c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8019640:	6013      	str	r3, [r2, #0]
 8019642:	2301      	movs	r3, #1
 8019644:	6123      	str	r3, [r4, #16]
 8019646:	f8c9 3000 	str.w	r3, [r9]
 801964a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801964c:	2762      	movs	r7, #98	; 0x62
 801964e:	601c      	str	r4, [r3, #0]
 8019650:	e723      	b.n	801949a <__gethex+0x12a>
 8019652:	1e71      	subs	r1, r6, #1
 8019654:	4620      	mov	r0, r4
 8019656:	f000 fe6d 	bl	801a334 <__any_on>
 801965a:	2800      	cmp	r0, #0
 801965c:	d1ed      	bne.n	801963a <__gethex+0x2ca>
 801965e:	ee18 0a10 	vmov	r0, s16
 8019662:	4621      	mov	r1, r4
 8019664:	f000 fa0c 	bl	8019a80 <_Bfree>
 8019668:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801966a:	2300      	movs	r3, #0
 801966c:	6013      	str	r3, [r2, #0]
 801966e:	2750      	movs	r7, #80	; 0x50
 8019670:	e713      	b.n	801949a <__gethex+0x12a>
 8019672:	bf00      	nop
 8019674:	0801e19c 	.word	0x0801e19c
 8019678:	0801e121 	.word	0x0801e121
 801967c:	0801e132 	.word	0x0801e132
 8019680:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019682:	2b00      	cmp	r3, #0
 8019684:	d1eb      	bne.n	801965e <__gethex+0x2ee>
 8019686:	e7d8      	b.n	801963a <__gethex+0x2ca>
 8019688:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801968a:	2b00      	cmp	r3, #0
 801968c:	d1d5      	bne.n	801963a <__gethex+0x2ca>
 801968e:	e7e6      	b.n	801965e <__gethex+0x2ee>
 8019690:	1e6f      	subs	r7, r5, #1
 8019692:	f1ba 0f00 	cmp.w	sl, #0
 8019696:	d131      	bne.n	80196fc <__gethex+0x38c>
 8019698:	b127      	cbz	r7, 80196a4 <__gethex+0x334>
 801969a:	4639      	mov	r1, r7
 801969c:	4620      	mov	r0, r4
 801969e:	f000 fe49 	bl	801a334 <__any_on>
 80196a2:	4682      	mov	sl, r0
 80196a4:	117b      	asrs	r3, r7, #5
 80196a6:	2101      	movs	r1, #1
 80196a8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80196ac:	f007 071f 	and.w	r7, r7, #31
 80196b0:	fa01 f707 	lsl.w	r7, r1, r7
 80196b4:	421f      	tst	r7, r3
 80196b6:	4629      	mov	r1, r5
 80196b8:	4620      	mov	r0, r4
 80196ba:	bf18      	it	ne
 80196bc:	f04a 0a02 	orrne.w	sl, sl, #2
 80196c0:	1b76      	subs	r6, r6, r5
 80196c2:	f7ff fded 	bl	80192a0 <rshift>
 80196c6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80196ca:	2702      	movs	r7, #2
 80196cc:	f1ba 0f00 	cmp.w	sl, #0
 80196d0:	d048      	beq.n	8019764 <__gethex+0x3f4>
 80196d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80196d6:	2b02      	cmp	r3, #2
 80196d8:	d015      	beq.n	8019706 <__gethex+0x396>
 80196da:	2b03      	cmp	r3, #3
 80196dc:	d017      	beq.n	801970e <__gethex+0x39e>
 80196de:	2b01      	cmp	r3, #1
 80196e0:	d109      	bne.n	80196f6 <__gethex+0x386>
 80196e2:	f01a 0f02 	tst.w	sl, #2
 80196e6:	d006      	beq.n	80196f6 <__gethex+0x386>
 80196e8:	f8d9 0000 	ldr.w	r0, [r9]
 80196ec:	ea4a 0a00 	orr.w	sl, sl, r0
 80196f0:	f01a 0f01 	tst.w	sl, #1
 80196f4:	d10e      	bne.n	8019714 <__gethex+0x3a4>
 80196f6:	f047 0710 	orr.w	r7, r7, #16
 80196fa:	e033      	b.n	8019764 <__gethex+0x3f4>
 80196fc:	f04f 0a01 	mov.w	sl, #1
 8019700:	e7d0      	b.n	80196a4 <__gethex+0x334>
 8019702:	2701      	movs	r7, #1
 8019704:	e7e2      	b.n	80196cc <__gethex+0x35c>
 8019706:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019708:	f1c3 0301 	rsb	r3, r3, #1
 801970c:	9315      	str	r3, [sp, #84]	; 0x54
 801970e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019710:	2b00      	cmp	r3, #0
 8019712:	d0f0      	beq.n	80196f6 <__gethex+0x386>
 8019714:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8019718:	f104 0314 	add.w	r3, r4, #20
 801971c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8019720:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8019724:	f04f 0c00 	mov.w	ip, #0
 8019728:	4618      	mov	r0, r3
 801972a:	f853 2b04 	ldr.w	r2, [r3], #4
 801972e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8019732:	d01c      	beq.n	801976e <__gethex+0x3fe>
 8019734:	3201      	adds	r2, #1
 8019736:	6002      	str	r2, [r0, #0]
 8019738:	2f02      	cmp	r7, #2
 801973a:	f104 0314 	add.w	r3, r4, #20
 801973e:	d13f      	bne.n	80197c0 <__gethex+0x450>
 8019740:	f8d8 2000 	ldr.w	r2, [r8]
 8019744:	3a01      	subs	r2, #1
 8019746:	42b2      	cmp	r2, r6
 8019748:	d10a      	bne.n	8019760 <__gethex+0x3f0>
 801974a:	1171      	asrs	r1, r6, #5
 801974c:	2201      	movs	r2, #1
 801974e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019752:	f006 061f 	and.w	r6, r6, #31
 8019756:	fa02 f606 	lsl.w	r6, r2, r6
 801975a:	421e      	tst	r6, r3
 801975c:	bf18      	it	ne
 801975e:	4617      	movne	r7, r2
 8019760:	f047 0720 	orr.w	r7, r7, #32
 8019764:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019766:	601c      	str	r4, [r3, #0]
 8019768:	9b04      	ldr	r3, [sp, #16]
 801976a:	601d      	str	r5, [r3, #0]
 801976c:	e695      	b.n	801949a <__gethex+0x12a>
 801976e:	4299      	cmp	r1, r3
 8019770:	f843 cc04 	str.w	ip, [r3, #-4]
 8019774:	d8d8      	bhi.n	8019728 <__gethex+0x3b8>
 8019776:	68a3      	ldr	r3, [r4, #8]
 8019778:	459b      	cmp	fp, r3
 801977a:	db19      	blt.n	80197b0 <__gethex+0x440>
 801977c:	6861      	ldr	r1, [r4, #4]
 801977e:	ee18 0a10 	vmov	r0, s16
 8019782:	3101      	adds	r1, #1
 8019784:	f000 f93c 	bl	8019a00 <_Balloc>
 8019788:	4681      	mov	r9, r0
 801978a:	b918      	cbnz	r0, 8019794 <__gethex+0x424>
 801978c:	4b1a      	ldr	r3, [pc, #104]	; (80197f8 <__gethex+0x488>)
 801978e:	4602      	mov	r2, r0
 8019790:	2184      	movs	r1, #132	; 0x84
 8019792:	e6a8      	b.n	80194e6 <__gethex+0x176>
 8019794:	6922      	ldr	r2, [r4, #16]
 8019796:	3202      	adds	r2, #2
 8019798:	f104 010c 	add.w	r1, r4, #12
 801979c:	0092      	lsls	r2, r2, #2
 801979e:	300c      	adds	r0, #12
 80197a0:	f7fe fb2a 	bl	8017df8 <memcpy>
 80197a4:	4621      	mov	r1, r4
 80197a6:	ee18 0a10 	vmov	r0, s16
 80197aa:	f000 f969 	bl	8019a80 <_Bfree>
 80197ae:	464c      	mov	r4, r9
 80197b0:	6923      	ldr	r3, [r4, #16]
 80197b2:	1c5a      	adds	r2, r3, #1
 80197b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80197b8:	6122      	str	r2, [r4, #16]
 80197ba:	2201      	movs	r2, #1
 80197bc:	615a      	str	r2, [r3, #20]
 80197be:	e7bb      	b.n	8019738 <__gethex+0x3c8>
 80197c0:	6922      	ldr	r2, [r4, #16]
 80197c2:	455a      	cmp	r2, fp
 80197c4:	dd0b      	ble.n	80197de <__gethex+0x46e>
 80197c6:	2101      	movs	r1, #1
 80197c8:	4620      	mov	r0, r4
 80197ca:	f7ff fd69 	bl	80192a0 <rshift>
 80197ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80197d2:	3501      	adds	r5, #1
 80197d4:	42ab      	cmp	r3, r5
 80197d6:	f6ff aed0 	blt.w	801957a <__gethex+0x20a>
 80197da:	2701      	movs	r7, #1
 80197dc:	e7c0      	b.n	8019760 <__gethex+0x3f0>
 80197de:	f016 061f 	ands.w	r6, r6, #31
 80197e2:	d0fa      	beq.n	80197da <__gethex+0x46a>
 80197e4:	449a      	add	sl, r3
 80197e6:	f1c6 0620 	rsb	r6, r6, #32
 80197ea:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80197ee:	f000 f9fd 	bl	8019bec <__hi0bits>
 80197f2:	42b0      	cmp	r0, r6
 80197f4:	dbe7      	blt.n	80197c6 <__gethex+0x456>
 80197f6:	e7f0      	b.n	80197da <__gethex+0x46a>
 80197f8:	0801e121 	.word	0x0801e121

080197fc <L_shift>:
 80197fc:	f1c2 0208 	rsb	r2, r2, #8
 8019800:	0092      	lsls	r2, r2, #2
 8019802:	b570      	push	{r4, r5, r6, lr}
 8019804:	f1c2 0620 	rsb	r6, r2, #32
 8019808:	6843      	ldr	r3, [r0, #4]
 801980a:	6804      	ldr	r4, [r0, #0]
 801980c:	fa03 f506 	lsl.w	r5, r3, r6
 8019810:	432c      	orrs	r4, r5
 8019812:	40d3      	lsrs	r3, r2
 8019814:	6004      	str	r4, [r0, #0]
 8019816:	f840 3f04 	str.w	r3, [r0, #4]!
 801981a:	4288      	cmp	r0, r1
 801981c:	d3f4      	bcc.n	8019808 <L_shift+0xc>
 801981e:	bd70      	pop	{r4, r5, r6, pc}

08019820 <__match>:
 8019820:	b530      	push	{r4, r5, lr}
 8019822:	6803      	ldr	r3, [r0, #0]
 8019824:	3301      	adds	r3, #1
 8019826:	f811 4b01 	ldrb.w	r4, [r1], #1
 801982a:	b914      	cbnz	r4, 8019832 <__match+0x12>
 801982c:	6003      	str	r3, [r0, #0]
 801982e:	2001      	movs	r0, #1
 8019830:	bd30      	pop	{r4, r5, pc}
 8019832:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019836:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801983a:	2d19      	cmp	r5, #25
 801983c:	bf98      	it	ls
 801983e:	3220      	addls	r2, #32
 8019840:	42a2      	cmp	r2, r4
 8019842:	d0f0      	beq.n	8019826 <__match+0x6>
 8019844:	2000      	movs	r0, #0
 8019846:	e7f3      	b.n	8019830 <__match+0x10>

08019848 <__hexnan>:
 8019848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801984c:	680b      	ldr	r3, [r1, #0]
 801984e:	6801      	ldr	r1, [r0, #0]
 8019850:	115e      	asrs	r6, r3, #5
 8019852:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8019856:	f013 031f 	ands.w	r3, r3, #31
 801985a:	b087      	sub	sp, #28
 801985c:	bf18      	it	ne
 801985e:	3604      	addne	r6, #4
 8019860:	2500      	movs	r5, #0
 8019862:	1f37      	subs	r7, r6, #4
 8019864:	4682      	mov	sl, r0
 8019866:	4690      	mov	r8, r2
 8019868:	9301      	str	r3, [sp, #4]
 801986a:	f846 5c04 	str.w	r5, [r6, #-4]
 801986e:	46b9      	mov	r9, r7
 8019870:	463c      	mov	r4, r7
 8019872:	9502      	str	r5, [sp, #8]
 8019874:	46ab      	mov	fp, r5
 8019876:	784a      	ldrb	r2, [r1, #1]
 8019878:	1c4b      	adds	r3, r1, #1
 801987a:	9303      	str	r3, [sp, #12]
 801987c:	b342      	cbz	r2, 80198d0 <__hexnan+0x88>
 801987e:	4610      	mov	r0, r2
 8019880:	9105      	str	r1, [sp, #20]
 8019882:	9204      	str	r2, [sp, #16]
 8019884:	f7ff fd5e 	bl	8019344 <__hexdig_fun>
 8019888:	2800      	cmp	r0, #0
 801988a:	d14f      	bne.n	801992c <__hexnan+0xe4>
 801988c:	9a04      	ldr	r2, [sp, #16]
 801988e:	9905      	ldr	r1, [sp, #20]
 8019890:	2a20      	cmp	r2, #32
 8019892:	d818      	bhi.n	80198c6 <__hexnan+0x7e>
 8019894:	9b02      	ldr	r3, [sp, #8]
 8019896:	459b      	cmp	fp, r3
 8019898:	dd13      	ble.n	80198c2 <__hexnan+0x7a>
 801989a:	454c      	cmp	r4, r9
 801989c:	d206      	bcs.n	80198ac <__hexnan+0x64>
 801989e:	2d07      	cmp	r5, #7
 80198a0:	dc04      	bgt.n	80198ac <__hexnan+0x64>
 80198a2:	462a      	mov	r2, r5
 80198a4:	4649      	mov	r1, r9
 80198a6:	4620      	mov	r0, r4
 80198a8:	f7ff ffa8 	bl	80197fc <L_shift>
 80198ac:	4544      	cmp	r4, r8
 80198ae:	d950      	bls.n	8019952 <__hexnan+0x10a>
 80198b0:	2300      	movs	r3, #0
 80198b2:	f1a4 0904 	sub.w	r9, r4, #4
 80198b6:	f844 3c04 	str.w	r3, [r4, #-4]
 80198ba:	f8cd b008 	str.w	fp, [sp, #8]
 80198be:	464c      	mov	r4, r9
 80198c0:	461d      	mov	r5, r3
 80198c2:	9903      	ldr	r1, [sp, #12]
 80198c4:	e7d7      	b.n	8019876 <__hexnan+0x2e>
 80198c6:	2a29      	cmp	r2, #41	; 0x29
 80198c8:	d156      	bne.n	8019978 <__hexnan+0x130>
 80198ca:	3102      	adds	r1, #2
 80198cc:	f8ca 1000 	str.w	r1, [sl]
 80198d0:	f1bb 0f00 	cmp.w	fp, #0
 80198d4:	d050      	beq.n	8019978 <__hexnan+0x130>
 80198d6:	454c      	cmp	r4, r9
 80198d8:	d206      	bcs.n	80198e8 <__hexnan+0xa0>
 80198da:	2d07      	cmp	r5, #7
 80198dc:	dc04      	bgt.n	80198e8 <__hexnan+0xa0>
 80198de:	462a      	mov	r2, r5
 80198e0:	4649      	mov	r1, r9
 80198e2:	4620      	mov	r0, r4
 80198e4:	f7ff ff8a 	bl	80197fc <L_shift>
 80198e8:	4544      	cmp	r4, r8
 80198ea:	d934      	bls.n	8019956 <__hexnan+0x10e>
 80198ec:	f1a8 0204 	sub.w	r2, r8, #4
 80198f0:	4623      	mov	r3, r4
 80198f2:	f853 1b04 	ldr.w	r1, [r3], #4
 80198f6:	f842 1f04 	str.w	r1, [r2, #4]!
 80198fa:	429f      	cmp	r7, r3
 80198fc:	d2f9      	bcs.n	80198f2 <__hexnan+0xaa>
 80198fe:	1b3b      	subs	r3, r7, r4
 8019900:	f023 0303 	bic.w	r3, r3, #3
 8019904:	3304      	adds	r3, #4
 8019906:	3401      	adds	r4, #1
 8019908:	3e03      	subs	r6, #3
 801990a:	42b4      	cmp	r4, r6
 801990c:	bf88      	it	hi
 801990e:	2304      	movhi	r3, #4
 8019910:	4443      	add	r3, r8
 8019912:	2200      	movs	r2, #0
 8019914:	f843 2b04 	str.w	r2, [r3], #4
 8019918:	429f      	cmp	r7, r3
 801991a:	d2fb      	bcs.n	8019914 <__hexnan+0xcc>
 801991c:	683b      	ldr	r3, [r7, #0]
 801991e:	b91b      	cbnz	r3, 8019928 <__hexnan+0xe0>
 8019920:	4547      	cmp	r7, r8
 8019922:	d127      	bne.n	8019974 <__hexnan+0x12c>
 8019924:	2301      	movs	r3, #1
 8019926:	603b      	str	r3, [r7, #0]
 8019928:	2005      	movs	r0, #5
 801992a:	e026      	b.n	801997a <__hexnan+0x132>
 801992c:	3501      	adds	r5, #1
 801992e:	2d08      	cmp	r5, #8
 8019930:	f10b 0b01 	add.w	fp, fp, #1
 8019934:	dd06      	ble.n	8019944 <__hexnan+0xfc>
 8019936:	4544      	cmp	r4, r8
 8019938:	d9c3      	bls.n	80198c2 <__hexnan+0x7a>
 801993a:	2300      	movs	r3, #0
 801993c:	f844 3c04 	str.w	r3, [r4, #-4]
 8019940:	2501      	movs	r5, #1
 8019942:	3c04      	subs	r4, #4
 8019944:	6822      	ldr	r2, [r4, #0]
 8019946:	f000 000f 	and.w	r0, r0, #15
 801994a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801994e:	6022      	str	r2, [r4, #0]
 8019950:	e7b7      	b.n	80198c2 <__hexnan+0x7a>
 8019952:	2508      	movs	r5, #8
 8019954:	e7b5      	b.n	80198c2 <__hexnan+0x7a>
 8019956:	9b01      	ldr	r3, [sp, #4]
 8019958:	2b00      	cmp	r3, #0
 801995a:	d0df      	beq.n	801991c <__hexnan+0xd4>
 801995c:	f04f 32ff 	mov.w	r2, #4294967295
 8019960:	f1c3 0320 	rsb	r3, r3, #32
 8019964:	fa22 f303 	lsr.w	r3, r2, r3
 8019968:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801996c:	401a      	ands	r2, r3
 801996e:	f846 2c04 	str.w	r2, [r6, #-4]
 8019972:	e7d3      	b.n	801991c <__hexnan+0xd4>
 8019974:	3f04      	subs	r7, #4
 8019976:	e7d1      	b.n	801991c <__hexnan+0xd4>
 8019978:	2004      	movs	r0, #4
 801997a:	b007      	add	sp, #28
 801997c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019980 <_isatty_r>:
 8019980:	b538      	push	{r3, r4, r5, lr}
 8019982:	4d06      	ldr	r5, [pc, #24]	; (801999c <_isatty_r+0x1c>)
 8019984:	2300      	movs	r3, #0
 8019986:	4604      	mov	r4, r0
 8019988:	4608      	mov	r0, r1
 801998a:	602b      	str	r3, [r5, #0]
 801998c:	f7ea fc2b 	bl	80041e6 <_isatty>
 8019990:	1c43      	adds	r3, r0, #1
 8019992:	d102      	bne.n	801999a <_isatty_r+0x1a>
 8019994:	682b      	ldr	r3, [r5, #0]
 8019996:	b103      	cbz	r3, 801999a <_isatty_r+0x1a>
 8019998:	6023      	str	r3, [r4, #0]
 801999a:	bd38      	pop	{r3, r4, r5, pc}
 801999c:	2000952c 	.word	0x2000952c

080199a0 <_lseek_r>:
 80199a0:	b538      	push	{r3, r4, r5, lr}
 80199a2:	4d07      	ldr	r5, [pc, #28]	; (80199c0 <_lseek_r+0x20>)
 80199a4:	4604      	mov	r4, r0
 80199a6:	4608      	mov	r0, r1
 80199a8:	4611      	mov	r1, r2
 80199aa:	2200      	movs	r2, #0
 80199ac:	602a      	str	r2, [r5, #0]
 80199ae:	461a      	mov	r2, r3
 80199b0:	f7ea fc24 	bl	80041fc <_lseek>
 80199b4:	1c43      	adds	r3, r0, #1
 80199b6:	d102      	bne.n	80199be <_lseek_r+0x1e>
 80199b8:	682b      	ldr	r3, [r5, #0]
 80199ba:	b103      	cbz	r3, 80199be <_lseek_r+0x1e>
 80199bc:	6023      	str	r3, [r4, #0]
 80199be:	bd38      	pop	{r3, r4, r5, pc}
 80199c0:	2000952c 	.word	0x2000952c

080199c4 <__ascii_mbtowc>:
 80199c4:	b082      	sub	sp, #8
 80199c6:	b901      	cbnz	r1, 80199ca <__ascii_mbtowc+0x6>
 80199c8:	a901      	add	r1, sp, #4
 80199ca:	b142      	cbz	r2, 80199de <__ascii_mbtowc+0x1a>
 80199cc:	b14b      	cbz	r3, 80199e2 <__ascii_mbtowc+0x1e>
 80199ce:	7813      	ldrb	r3, [r2, #0]
 80199d0:	600b      	str	r3, [r1, #0]
 80199d2:	7812      	ldrb	r2, [r2, #0]
 80199d4:	1e10      	subs	r0, r2, #0
 80199d6:	bf18      	it	ne
 80199d8:	2001      	movne	r0, #1
 80199da:	b002      	add	sp, #8
 80199dc:	4770      	bx	lr
 80199de:	4610      	mov	r0, r2
 80199e0:	e7fb      	b.n	80199da <__ascii_mbtowc+0x16>
 80199e2:	f06f 0001 	mvn.w	r0, #1
 80199e6:	e7f8      	b.n	80199da <__ascii_mbtowc+0x16>

080199e8 <__malloc_lock>:
 80199e8:	4801      	ldr	r0, [pc, #4]	; (80199f0 <__malloc_lock+0x8>)
 80199ea:	f7fe b980 	b.w	8017cee <__retarget_lock_acquire_recursive>
 80199ee:	bf00      	nop
 80199f0:	20009524 	.word	0x20009524

080199f4 <__malloc_unlock>:
 80199f4:	4801      	ldr	r0, [pc, #4]	; (80199fc <__malloc_unlock+0x8>)
 80199f6:	f7fe b97b 	b.w	8017cf0 <__retarget_lock_release_recursive>
 80199fa:	bf00      	nop
 80199fc:	20009524 	.word	0x20009524

08019a00 <_Balloc>:
 8019a00:	b570      	push	{r4, r5, r6, lr}
 8019a02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019a04:	4604      	mov	r4, r0
 8019a06:	460d      	mov	r5, r1
 8019a08:	b976      	cbnz	r6, 8019a28 <_Balloc+0x28>
 8019a0a:	2010      	movs	r0, #16
 8019a0c:	f7fe f9d6 	bl	8017dbc <malloc>
 8019a10:	4602      	mov	r2, r0
 8019a12:	6260      	str	r0, [r4, #36]	; 0x24
 8019a14:	b920      	cbnz	r0, 8019a20 <_Balloc+0x20>
 8019a16:	4b18      	ldr	r3, [pc, #96]	; (8019a78 <_Balloc+0x78>)
 8019a18:	4818      	ldr	r0, [pc, #96]	; (8019a7c <_Balloc+0x7c>)
 8019a1a:	2166      	movs	r1, #102	; 0x66
 8019a1c:	f7ff fbe8 	bl	80191f0 <__assert_func>
 8019a20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019a24:	6006      	str	r6, [r0, #0]
 8019a26:	60c6      	str	r6, [r0, #12]
 8019a28:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8019a2a:	68f3      	ldr	r3, [r6, #12]
 8019a2c:	b183      	cbz	r3, 8019a50 <_Balloc+0x50>
 8019a2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019a30:	68db      	ldr	r3, [r3, #12]
 8019a32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8019a36:	b9b8      	cbnz	r0, 8019a68 <_Balloc+0x68>
 8019a38:	2101      	movs	r1, #1
 8019a3a:	fa01 f605 	lsl.w	r6, r1, r5
 8019a3e:	1d72      	adds	r2, r6, #5
 8019a40:	0092      	lsls	r2, r2, #2
 8019a42:	4620      	mov	r0, r4
 8019a44:	f000 fc97 	bl	801a376 <_calloc_r>
 8019a48:	b160      	cbz	r0, 8019a64 <_Balloc+0x64>
 8019a4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8019a4e:	e00e      	b.n	8019a6e <_Balloc+0x6e>
 8019a50:	2221      	movs	r2, #33	; 0x21
 8019a52:	2104      	movs	r1, #4
 8019a54:	4620      	mov	r0, r4
 8019a56:	f000 fc8e 	bl	801a376 <_calloc_r>
 8019a5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019a5c:	60f0      	str	r0, [r6, #12]
 8019a5e:	68db      	ldr	r3, [r3, #12]
 8019a60:	2b00      	cmp	r3, #0
 8019a62:	d1e4      	bne.n	8019a2e <_Balloc+0x2e>
 8019a64:	2000      	movs	r0, #0
 8019a66:	bd70      	pop	{r4, r5, r6, pc}
 8019a68:	6802      	ldr	r2, [r0, #0]
 8019a6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019a6e:	2300      	movs	r3, #0
 8019a70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019a74:	e7f7      	b.n	8019a66 <_Balloc+0x66>
 8019a76:	bf00      	nop
 8019a78:	0801dfe8 	.word	0x0801dfe8
 8019a7c:	0801e1b0 	.word	0x0801e1b0

08019a80 <_Bfree>:
 8019a80:	b570      	push	{r4, r5, r6, lr}
 8019a82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019a84:	4605      	mov	r5, r0
 8019a86:	460c      	mov	r4, r1
 8019a88:	b976      	cbnz	r6, 8019aa8 <_Bfree+0x28>
 8019a8a:	2010      	movs	r0, #16
 8019a8c:	f7fe f996 	bl	8017dbc <malloc>
 8019a90:	4602      	mov	r2, r0
 8019a92:	6268      	str	r0, [r5, #36]	; 0x24
 8019a94:	b920      	cbnz	r0, 8019aa0 <_Bfree+0x20>
 8019a96:	4b09      	ldr	r3, [pc, #36]	; (8019abc <_Bfree+0x3c>)
 8019a98:	4809      	ldr	r0, [pc, #36]	; (8019ac0 <_Bfree+0x40>)
 8019a9a:	218a      	movs	r1, #138	; 0x8a
 8019a9c:	f7ff fba8 	bl	80191f0 <__assert_func>
 8019aa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019aa4:	6006      	str	r6, [r0, #0]
 8019aa6:	60c6      	str	r6, [r0, #12]
 8019aa8:	b13c      	cbz	r4, 8019aba <_Bfree+0x3a>
 8019aaa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8019aac:	6862      	ldr	r2, [r4, #4]
 8019aae:	68db      	ldr	r3, [r3, #12]
 8019ab0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019ab4:	6021      	str	r1, [r4, #0]
 8019ab6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8019aba:	bd70      	pop	{r4, r5, r6, pc}
 8019abc:	0801dfe8 	.word	0x0801dfe8
 8019ac0:	0801e1b0 	.word	0x0801e1b0

08019ac4 <__multadd>:
 8019ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ac8:	690e      	ldr	r6, [r1, #16]
 8019aca:	4607      	mov	r7, r0
 8019acc:	4698      	mov	r8, r3
 8019ace:	460c      	mov	r4, r1
 8019ad0:	f101 0014 	add.w	r0, r1, #20
 8019ad4:	2300      	movs	r3, #0
 8019ad6:	6805      	ldr	r5, [r0, #0]
 8019ad8:	b2a9      	uxth	r1, r5
 8019ada:	fb02 8101 	mla	r1, r2, r1, r8
 8019ade:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8019ae2:	0c2d      	lsrs	r5, r5, #16
 8019ae4:	fb02 c505 	mla	r5, r2, r5, ip
 8019ae8:	b289      	uxth	r1, r1
 8019aea:	3301      	adds	r3, #1
 8019aec:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8019af0:	429e      	cmp	r6, r3
 8019af2:	f840 1b04 	str.w	r1, [r0], #4
 8019af6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8019afa:	dcec      	bgt.n	8019ad6 <__multadd+0x12>
 8019afc:	f1b8 0f00 	cmp.w	r8, #0
 8019b00:	d022      	beq.n	8019b48 <__multadd+0x84>
 8019b02:	68a3      	ldr	r3, [r4, #8]
 8019b04:	42b3      	cmp	r3, r6
 8019b06:	dc19      	bgt.n	8019b3c <__multadd+0x78>
 8019b08:	6861      	ldr	r1, [r4, #4]
 8019b0a:	4638      	mov	r0, r7
 8019b0c:	3101      	adds	r1, #1
 8019b0e:	f7ff ff77 	bl	8019a00 <_Balloc>
 8019b12:	4605      	mov	r5, r0
 8019b14:	b928      	cbnz	r0, 8019b22 <__multadd+0x5e>
 8019b16:	4602      	mov	r2, r0
 8019b18:	4b0d      	ldr	r3, [pc, #52]	; (8019b50 <__multadd+0x8c>)
 8019b1a:	480e      	ldr	r0, [pc, #56]	; (8019b54 <__multadd+0x90>)
 8019b1c:	21b5      	movs	r1, #181	; 0xb5
 8019b1e:	f7ff fb67 	bl	80191f0 <__assert_func>
 8019b22:	6922      	ldr	r2, [r4, #16]
 8019b24:	3202      	adds	r2, #2
 8019b26:	f104 010c 	add.w	r1, r4, #12
 8019b2a:	0092      	lsls	r2, r2, #2
 8019b2c:	300c      	adds	r0, #12
 8019b2e:	f7fe f963 	bl	8017df8 <memcpy>
 8019b32:	4621      	mov	r1, r4
 8019b34:	4638      	mov	r0, r7
 8019b36:	f7ff ffa3 	bl	8019a80 <_Bfree>
 8019b3a:	462c      	mov	r4, r5
 8019b3c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8019b40:	3601      	adds	r6, #1
 8019b42:	f8c3 8014 	str.w	r8, [r3, #20]
 8019b46:	6126      	str	r6, [r4, #16]
 8019b48:	4620      	mov	r0, r4
 8019b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b4e:	bf00      	nop
 8019b50:	0801e121 	.word	0x0801e121
 8019b54:	0801e1b0 	.word	0x0801e1b0

08019b58 <__s2b>:
 8019b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019b5c:	460c      	mov	r4, r1
 8019b5e:	4615      	mov	r5, r2
 8019b60:	461f      	mov	r7, r3
 8019b62:	2209      	movs	r2, #9
 8019b64:	3308      	adds	r3, #8
 8019b66:	4606      	mov	r6, r0
 8019b68:	fb93 f3f2 	sdiv	r3, r3, r2
 8019b6c:	2100      	movs	r1, #0
 8019b6e:	2201      	movs	r2, #1
 8019b70:	429a      	cmp	r2, r3
 8019b72:	db09      	blt.n	8019b88 <__s2b+0x30>
 8019b74:	4630      	mov	r0, r6
 8019b76:	f7ff ff43 	bl	8019a00 <_Balloc>
 8019b7a:	b940      	cbnz	r0, 8019b8e <__s2b+0x36>
 8019b7c:	4602      	mov	r2, r0
 8019b7e:	4b19      	ldr	r3, [pc, #100]	; (8019be4 <__s2b+0x8c>)
 8019b80:	4819      	ldr	r0, [pc, #100]	; (8019be8 <__s2b+0x90>)
 8019b82:	21ce      	movs	r1, #206	; 0xce
 8019b84:	f7ff fb34 	bl	80191f0 <__assert_func>
 8019b88:	0052      	lsls	r2, r2, #1
 8019b8a:	3101      	adds	r1, #1
 8019b8c:	e7f0      	b.n	8019b70 <__s2b+0x18>
 8019b8e:	9b08      	ldr	r3, [sp, #32]
 8019b90:	6143      	str	r3, [r0, #20]
 8019b92:	2d09      	cmp	r5, #9
 8019b94:	f04f 0301 	mov.w	r3, #1
 8019b98:	6103      	str	r3, [r0, #16]
 8019b9a:	dd16      	ble.n	8019bca <__s2b+0x72>
 8019b9c:	f104 0909 	add.w	r9, r4, #9
 8019ba0:	46c8      	mov	r8, r9
 8019ba2:	442c      	add	r4, r5
 8019ba4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8019ba8:	4601      	mov	r1, r0
 8019baa:	3b30      	subs	r3, #48	; 0x30
 8019bac:	220a      	movs	r2, #10
 8019bae:	4630      	mov	r0, r6
 8019bb0:	f7ff ff88 	bl	8019ac4 <__multadd>
 8019bb4:	45a0      	cmp	r8, r4
 8019bb6:	d1f5      	bne.n	8019ba4 <__s2b+0x4c>
 8019bb8:	f1a5 0408 	sub.w	r4, r5, #8
 8019bbc:	444c      	add	r4, r9
 8019bbe:	1b2d      	subs	r5, r5, r4
 8019bc0:	1963      	adds	r3, r4, r5
 8019bc2:	42bb      	cmp	r3, r7
 8019bc4:	db04      	blt.n	8019bd0 <__s2b+0x78>
 8019bc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019bca:	340a      	adds	r4, #10
 8019bcc:	2509      	movs	r5, #9
 8019bce:	e7f6      	b.n	8019bbe <__s2b+0x66>
 8019bd0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019bd4:	4601      	mov	r1, r0
 8019bd6:	3b30      	subs	r3, #48	; 0x30
 8019bd8:	220a      	movs	r2, #10
 8019bda:	4630      	mov	r0, r6
 8019bdc:	f7ff ff72 	bl	8019ac4 <__multadd>
 8019be0:	e7ee      	b.n	8019bc0 <__s2b+0x68>
 8019be2:	bf00      	nop
 8019be4:	0801e121 	.word	0x0801e121
 8019be8:	0801e1b0 	.word	0x0801e1b0

08019bec <__hi0bits>:
 8019bec:	0c03      	lsrs	r3, r0, #16
 8019bee:	041b      	lsls	r3, r3, #16
 8019bf0:	b9d3      	cbnz	r3, 8019c28 <__hi0bits+0x3c>
 8019bf2:	0400      	lsls	r0, r0, #16
 8019bf4:	2310      	movs	r3, #16
 8019bf6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8019bfa:	bf04      	itt	eq
 8019bfc:	0200      	lsleq	r0, r0, #8
 8019bfe:	3308      	addeq	r3, #8
 8019c00:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8019c04:	bf04      	itt	eq
 8019c06:	0100      	lsleq	r0, r0, #4
 8019c08:	3304      	addeq	r3, #4
 8019c0a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8019c0e:	bf04      	itt	eq
 8019c10:	0080      	lsleq	r0, r0, #2
 8019c12:	3302      	addeq	r3, #2
 8019c14:	2800      	cmp	r0, #0
 8019c16:	db05      	blt.n	8019c24 <__hi0bits+0x38>
 8019c18:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8019c1c:	f103 0301 	add.w	r3, r3, #1
 8019c20:	bf08      	it	eq
 8019c22:	2320      	moveq	r3, #32
 8019c24:	4618      	mov	r0, r3
 8019c26:	4770      	bx	lr
 8019c28:	2300      	movs	r3, #0
 8019c2a:	e7e4      	b.n	8019bf6 <__hi0bits+0xa>

08019c2c <__lo0bits>:
 8019c2c:	6803      	ldr	r3, [r0, #0]
 8019c2e:	f013 0207 	ands.w	r2, r3, #7
 8019c32:	4601      	mov	r1, r0
 8019c34:	d00b      	beq.n	8019c4e <__lo0bits+0x22>
 8019c36:	07da      	lsls	r2, r3, #31
 8019c38:	d424      	bmi.n	8019c84 <__lo0bits+0x58>
 8019c3a:	0798      	lsls	r0, r3, #30
 8019c3c:	bf49      	itett	mi
 8019c3e:	085b      	lsrmi	r3, r3, #1
 8019c40:	089b      	lsrpl	r3, r3, #2
 8019c42:	2001      	movmi	r0, #1
 8019c44:	600b      	strmi	r3, [r1, #0]
 8019c46:	bf5c      	itt	pl
 8019c48:	600b      	strpl	r3, [r1, #0]
 8019c4a:	2002      	movpl	r0, #2
 8019c4c:	4770      	bx	lr
 8019c4e:	b298      	uxth	r0, r3
 8019c50:	b9b0      	cbnz	r0, 8019c80 <__lo0bits+0x54>
 8019c52:	0c1b      	lsrs	r3, r3, #16
 8019c54:	2010      	movs	r0, #16
 8019c56:	f013 0fff 	tst.w	r3, #255	; 0xff
 8019c5a:	bf04      	itt	eq
 8019c5c:	0a1b      	lsreq	r3, r3, #8
 8019c5e:	3008      	addeq	r0, #8
 8019c60:	071a      	lsls	r2, r3, #28
 8019c62:	bf04      	itt	eq
 8019c64:	091b      	lsreq	r3, r3, #4
 8019c66:	3004      	addeq	r0, #4
 8019c68:	079a      	lsls	r2, r3, #30
 8019c6a:	bf04      	itt	eq
 8019c6c:	089b      	lsreq	r3, r3, #2
 8019c6e:	3002      	addeq	r0, #2
 8019c70:	07da      	lsls	r2, r3, #31
 8019c72:	d403      	bmi.n	8019c7c <__lo0bits+0x50>
 8019c74:	085b      	lsrs	r3, r3, #1
 8019c76:	f100 0001 	add.w	r0, r0, #1
 8019c7a:	d005      	beq.n	8019c88 <__lo0bits+0x5c>
 8019c7c:	600b      	str	r3, [r1, #0]
 8019c7e:	4770      	bx	lr
 8019c80:	4610      	mov	r0, r2
 8019c82:	e7e8      	b.n	8019c56 <__lo0bits+0x2a>
 8019c84:	2000      	movs	r0, #0
 8019c86:	4770      	bx	lr
 8019c88:	2020      	movs	r0, #32
 8019c8a:	4770      	bx	lr

08019c8c <__i2b>:
 8019c8c:	b510      	push	{r4, lr}
 8019c8e:	460c      	mov	r4, r1
 8019c90:	2101      	movs	r1, #1
 8019c92:	f7ff feb5 	bl	8019a00 <_Balloc>
 8019c96:	4602      	mov	r2, r0
 8019c98:	b928      	cbnz	r0, 8019ca6 <__i2b+0x1a>
 8019c9a:	4b05      	ldr	r3, [pc, #20]	; (8019cb0 <__i2b+0x24>)
 8019c9c:	4805      	ldr	r0, [pc, #20]	; (8019cb4 <__i2b+0x28>)
 8019c9e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8019ca2:	f7ff faa5 	bl	80191f0 <__assert_func>
 8019ca6:	2301      	movs	r3, #1
 8019ca8:	6144      	str	r4, [r0, #20]
 8019caa:	6103      	str	r3, [r0, #16]
 8019cac:	bd10      	pop	{r4, pc}
 8019cae:	bf00      	nop
 8019cb0:	0801e121 	.word	0x0801e121
 8019cb4:	0801e1b0 	.word	0x0801e1b0

08019cb8 <__multiply>:
 8019cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cbc:	4614      	mov	r4, r2
 8019cbe:	690a      	ldr	r2, [r1, #16]
 8019cc0:	6923      	ldr	r3, [r4, #16]
 8019cc2:	429a      	cmp	r2, r3
 8019cc4:	bfb8      	it	lt
 8019cc6:	460b      	movlt	r3, r1
 8019cc8:	460d      	mov	r5, r1
 8019cca:	bfbc      	itt	lt
 8019ccc:	4625      	movlt	r5, r4
 8019cce:	461c      	movlt	r4, r3
 8019cd0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8019cd4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8019cd8:	68ab      	ldr	r3, [r5, #8]
 8019cda:	6869      	ldr	r1, [r5, #4]
 8019cdc:	eb0a 0709 	add.w	r7, sl, r9
 8019ce0:	42bb      	cmp	r3, r7
 8019ce2:	b085      	sub	sp, #20
 8019ce4:	bfb8      	it	lt
 8019ce6:	3101      	addlt	r1, #1
 8019ce8:	f7ff fe8a 	bl	8019a00 <_Balloc>
 8019cec:	b930      	cbnz	r0, 8019cfc <__multiply+0x44>
 8019cee:	4602      	mov	r2, r0
 8019cf0:	4b42      	ldr	r3, [pc, #264]	; (8019dfc <__multiply+0x144>)
 8019cf2:	4843      	ldr	r0, [pc, #268]	; (8019e00 <__multiply+0x148>)
 8019cf4:	f240 115d 	movw	r1, #349	; 0x15d
 8019cf8:	f7ff fa7a 	bl	80191f0 <__assert_func>
 8019cfc:	f100 0614 	add.w	r6, r0, #20
 8019d00:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8019d04:	4633      	mov	r3, r6
 8019d06:	2200      	movs	r2, #0
 8019d08:	4543      	cmp	r3, r8
 8019d0a:	d31e      	bcc.n	8019d4a <__multiply+0x92>
 8019d0c:	f105 0c14 	add.w	ip, r5, #20
 8019d10:	f104 0314 	add.w	r3, r4, #20
 8019d14:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8019d18:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8019d1c:	9202      	str	r2, [sp, #8]
 8019d1e:	ebac 0205 	sub.w	r2, ip, r5
 8019d22:	3a15      	subs	r2, #21
 8019d24:	f022 0203 	bic.w	r2, r2, #3
 8019d28:	3204      	adds	r2, #4
 8019d2a:	f105 0115 	add.w	r1, r5, #21
 8019d2e:	458c      	cmp	ip, r1
 8019d30:	bf38      	it	cc
 8019d32:	2204      	movcc	r2, #4
 8019d34:	9201      	str	r2, [sp, #4]
 8019d36:	9a02      	ldr	r2, [sp, #8]
 8019d38:	9303      	str	r3, [sp, #12]
 8019d3a:	429a      	cmp	r2, r3
 8019d3c:	d808      	bhi.n	8019d50 <__multiply+0x98>
 8019d3e:	2f00      	cmp	r7, #0
 8019d40:	dc55      	bgt.n	8019dee <__multiply+0x136>
 8019d42:	6107      	str	r7, [r0, #16]
 8019d44:	b005      	add	sp, #20
 8019d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d4a:	f843 2b04 	str.w	r2, [r3], #4
 8019d4e:	e7db      	b.n	8019d08 <__multiply+0x50>
 8019d50:	f8b3 a000 	ldrh.w	sl, [r3]
 8019d54:	f1ba 0f00 	cmp.w	sl, #0
 8019d58:	d020      	beq.n	8019d9c <__multiply+0xe4>
 8019d5a:	f105 0e14 	add.w	lr, r5, #20
 8019d5e:	46b1      	mov	r9, r6
 8019d60:	2200      	movs	r2, #0
 8019d62:	f85e 4b04 	ldr.w	r4, [lr], #4
 8019d66:	f8d9 b000 	ldr.w	fp, [r9]
 8019d6a:	b2a1      	uxth	r1, r4
 8019d6c:	fa1f fb8b 	uxth.w	fp, fp
 8019d70:	fb0a b101 	mla	r1, sl, r1, fp
 8019d74:	4411      	add	r1, r2
 8019d76:	f8d9 2000 	ldr.w	r2, [r9]
 8019d7a:	0c24      	lsrs	r4, r4, #16
 8019d7c:	0c12      	lsrs	r2, r2, #16
 8019d7e:	fb0a 2404 	mla	r4, sl, r4, r2
 8019d82:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8019d86:	b289      	uxth	r1, r1
 8019d88:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8019d8c:	45f4      	cmp	ip, lr
 8019d8e:	f849 1b04 	str.w	r1, [r9], #4
 8019d92:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8019d96:	d8e4      	bhi.n	8019d62 <__multiply+0xaa>
 8019d98:	9901      	ldr	r1, [sp, #4]
 8019d9a:	5072      	str	r2, [r6, r1]
 8019d9c:	9a03      	ldr	r2, [sp, #12]
 8019d9e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8019da2:	3304      	adds	r3, #4
 8019da4:	f1b9 0f00 	cmp.w	r9, #0
 8019da8:	d01f      	beq.n	8019dea <__multiply+0x132>
 8019daa:	6834      	ldr	r4, [r6, #0]
 8019dac:	f105 0114 	add.w	r1, r5, #20
 8019db0:	46b6      	mov	lr, r6
 8019db2:	f04f 0a00 	mov.w	sl, #0
 8019db6:	880a      	ldrh	r2, [r1, #0]
 8019db8:	f8be b002 	ldrh.w	fp, [lr, #2]
 8019dbc:	fb09 b202 	mla	r2, r9, r2, fp
 8019dc0:	4492      	add	sl, r2
 8019dc2:	b2a4      	uxth	r4, r4
 8019dc4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8019dc8:	f84e 4b04 	str.w	r4, [lr], #4
 8019dcc:	f851 4b04 	ldr.w	r4, [r1], #4
 8019dd0:	f8be 2000 	ldrh.w	r2, [lr]
 8019dd4:	0c24      	lsrs	r4, r4, #16
 8019dd6:	fb09 2404 	mla	r4, r9, r4, r2
 8019dda:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8019dde:	458c      	cmp	ip, r1
 8019de0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8019de4:	d8e7      	bhi.n	8019db6 <__multiply+0xfe>
 8019de6:	9a01      	ldr	r2, [sp, #4]
 8019de8:	50b4      	str	r4, [r6, r2]
 8019dea:	3604      	adds	r6, #4
 8019dec:	e7a3      	b.n	8019d36 <__multiply+0x7e>
 8019dee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8019df2:	2b00      	cmp	r3, #0
 8019df4:	d1a5      	bne.n	8019d42 <__multiply+0x8a>
 8019df6:	3f01      	subs	r7, #1
 8019df8:	e7a1      	b.n	8019d3e <__multiply+0x86>
 8019dfa:	bf00      	nop
 8019dfc:	0801e121 	.word	0x0801e121
 8019e00:	0801e1b0 	.word	0x0801e1b0

08019e04 <__pow5mult>:
 8019e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019e08:	4615      	mov	r5, r2
 8019e0a:	f012 0203 	ands.w	r2, r2, #3
 8019e0e:	4606      	mov	r6, r0
 8019e10:	460f      	mov	r7, r1
 8019e12:	d007      	beq.n	8019e24 <__pow5mult+0x20>
 8019e14:	4c25      	ldr	r4, [pc, #148]	; (8019eac <__pow5mult+0xa8>)
 8019e16:	3a01      	subs	r2, #1
 8019e18:	2300      	movs	r3, #0
 8019e1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8019e1e:	f7ff fe51 	bl	8019ac4 <__multadd>
 8019e22:	4607      	mov	r7, r0
 8019e24:	10ad      	asrs	r5, r5, #2
 8019e26:	d03d      	beq.n	8019ea4 <__pow5mult+0xa0>
 8019e28:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8019e2a:	b97c      	cbnz	r4, 8019e4c <__pow5mult+0x48>
 8019e2c:	2010      	movs	r0, #16
 8019e2e:	f7fd ffc5 	bl	8017dbc <malloc>
 8019e32:	4602      	mov	r2, r0
 8019e34:	6270      	str	r0, [r6, #36]	; 0x24
 8019e36:	b928      	cbnz	r0, 8019e44 <__pow5mult+0x40>
 8019e38:	4b1d      	ldr	r3, [pc, #116]	; (8019eb0 <__pow5mult+0xac>)
 8019e3a:	481e      	ldr	r0, [pc, #120]	; (8019eb4 <__pow5mult+0xb0>)
 8019e3c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8019e40:	f7ff f9d6 	bl	80191f0 <__assert_func>
 8019e44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019e48:	6004      	str	r4, [r0, #0]
 8019e4a:	60c4      	str	r4, [r0, #12]
 8019e4c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8019e50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019e54:	b94c      	cbnz	r4, 8019e6a <__pow5mult+0x66>
 8019e56:	f240 2171 	movw	r1, #625	; 0x271
 8019e5a:	4630      	mov	r0, r6
 8019e5c:	f7ff ff16 	bl	8019c8c <__i2b>
 8019e60:	2300      	movs	r3, #0
 8019e62:	f8c8 0008 	str.w	r0, [r8, #8]
 8019e66:	4604      	mov	r4, r0
 8019e68:	6003      	str	r3, [r0, #0]
 8019e6a:	f04f 0900 	mov.w	r9, #0
 8019e6e:	07eb      	lsls	r3, r5, #31
 8019e70:	d50a      	bpl.n	8019e88 <__pow5mult+0x84>
 8019e72:	4639      	mov	r1, r7
 8019e74:	4622      	mov	r2, r4
 8019e76:	4630      	mov	r0, r6
 8019e78:	f7ff ff1e 	bl	8019cb8 <__multiply>
 8019e7c:	4639      	mov	r1, r7
 8019e7e:	4680      	mov	r8, r0
 8019e80:	4630      	mov	r0, r6
 8019e82:	f7ff fdfd 	bl	8019a80 <_Bfree>
 8019e86:	4647      	mov	r7, r8
 8019e88:	106d      	asrs	r5, r5, #1
 8019e8a:	d00b      	beq.n	8019ea4 <__pow5mult+0xa0>
 8019e8c:	6820      	ldr	r0, [r4, #0]
 8019e8e:	b938      	cbnz	r0, 8019ea0 <__pow5mult+0x9c>
 8019e90:	4622      	mov	r2, r4
 8019e92:	4621      	mov	r1, r4
 8019e94:	4630      	mov	r0, r6
 8019e96:	f7ff ff0f 	bl	8019cb8 <__multiply>
 8019e9a:	6020      	str	r0, [r4, #0]
 8019e9c:	f8c0 9000 	str.w	r9, [r0]
 8019ea0:	4604      	mov	r4, r0
 8019ea2:	e7e4      	b.n	8019e6e <__pow5mult+0x6a>
 8019ea4:	4638      	mov	r0, r7
 8019ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019eaa:	bf00      	nop
 8019eac:	0801e300 	.word	0x0801e300
 8019eb0:	0801dfe8 	.word	0x0801dfe8
 8019eb4:	0801e1b0 	.word	0x0801e1b0

08019eb8 <__lshift>:
 8019eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ebc:	460c      	mov	r4, r1
 8019ebe:	6849      	ldr	r1, [r1, #4]
 8019ec0:	6923      	ldr	r3, [r4, #16]
 8019ec2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8019ec6:	68a3      	ldr	r3, [r4, #8]
 8019ec8:	4607      	mov	r7, r0
 8019eca:	4691      	mov	r9, r2
 8019ecc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019ed0:	f108 0601 	add.w	r6, r8, #1
 8019ed4:	42b3      	cmp	r3, r6
 8019ed6:	db0b      	blt.n	8019ef0 <__lshift+0x38>
 8019ed8:	4638      	mov	r0, r7
 8019eda:	f7ff fd91 	bl	8019a00 <_Balloc>
 8019ede:	4605      	mov	r5, r0
 8019ee0:	b948      	cbnz	r0, 8019ef6 <__lshift+0x3e>
 8019ee2:	4602      	mov	r2, r0
 8019ee4:	4b28      	ldr	r3, [pc, #160]	; (8019f88 <__lshift+0xd0>)
 8019ee6:	4829      	ldr	r0, [pc, #164]	; (8019f8c <__lshift+0xd4>)
 8019ee8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8019eec:	f7ff f980 	bl	80191f0 <__assert_func>
 8019ef0:	3101      	adds	r1, #1
 8019ef2:	005b      	lsls	r3, r3, #1
 8019ef4:	e7ee      	b.n	8019ed4 <__lshift+0x1c>
 8019ef6:	2300      	movs	r3, #0
 8019ef8:	f100 0114 	add.w	r1, r0, #20
 8019efc:	f100 0210 	add.w	r2, r0, #16
 8019f00:	4618      	mov	r0, r3
 8019f02:	4553      	cmp	r3, sl
 8019f04:	db33      	blt.n	8019f6e <__lshift+0xb6>
 8019f06:	6920      	ldr	r0, [r4, #16]
 8019f08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019f0c:	f104 0314 	add.w	r3, r4, #20
 8019f10:	f019 091f 	ands.w	r9, r9, #31
 8019f14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019f18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019f1c:	d02b      	beq.n	8019f76 <__lshift+0xbe>
 8019f1e:	f1c9 0e20 	rsb	lr, r9, #32
 8019f22:	468a      	mov	sl, r1
 8019f24:	2200      	movs	r2, #0
 8019f26:	6818      	ldr	r0, [r3, #0]
 8019f28:	fa00 f009 	lsl.w	r0, r0, r9
 8019f2c:	4302      	orrs	r2, r0
 8019f2e:	f84a 2b04 	str.w	r2, [sl], #4
 8019f32:	f853 2b04 	ldr.w	r2, [r3], #4
 8019f36:	459c      	cmp	ip, r3
 8019f38:	fa22 f20e 	lsr.w	r2, r2, lr
 8019f3c:	d8f3      	bhi.n	8019f26 <__lshift+0x6e>
 8019f3e:	ebac 0304 	sub.w	r3, ip, r4
 8019f42:	3b15      	subs	r3, #21
 8019f44:	f023 0303 	bic.w	r3, r3, #3
 8019f48:	3304      	adds	r3, #4
 8019f4a:	f104 0015 	add.w	r0, r4, #21
 8019f4e:	4584      	cmp	ip, r0
 8019f50:	bf38      	it	cc
 8019f52:	2304      	movcc	r3, #4
 8019f54:	50ca      	str	r2, [r1, r3]
 8019f56:	b10a      	cbz	r2, 8019f5c <__lshift+0xa4>
 8019f58:	f108 0602 	add.w	r6, r8, #2
 8019f5c:	3e01      	subs	r6, #1
 8019f5e:	4638      	mov	r0, r7
 8019f60:	612e      	str	r6, [r5, #16]
 8019f62:	4621      	mov	r1, r4
 8019f64:	f7ff fd8c 	bl	8019a80 <_Bfree>
 8019f68:	4628      	mov	r0, r5
 8019f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f6e:	f842 0f04 	str.w	r0, [r2, #4]!
 8019f72:	3301      	adds	r3, #1
 8019f74:	e7c5      	b.n	8019f02 <__lshift+0x4a>
 8019f76:	3904      	subs	r1, #4
 8019f78:	f853 2b04 	ldr.w	r2, [r3], #4
 8019f7c:	f841 2f04 	str.w	r2, [r1, #4]!
 8019f80:	459c      	cmp	ip, r3
 8019f82:	d8f9      	bhi.n	8019f78 <__lshift+0xc0>
 8019f84:	e7ea      	b.n	8019f5c <__lshift+0xa4>
 8019f86:	bf00      	nop
 8019f88:	0801e121 	.word	0x0801e121
 8019f8c:	0801e1b0 	.word	0x0801e1b0

08019f90 <__mcmp>:
 8019f90:	b530      	push	{r4, r5, lr}
 8019f92:	6902      	ldr	r2, [r0, #16]
 8019f94:	690c      	ldr	r4, [r1, #16]
 8019f96:	1b12      	subs	r2, r2, r4
 8019f98:	d10e      	bne.n	8019fb8 <__mcmp+0x28>
 8019f9a:	f100 0314 	add.w	r3, r0, #20
 8019f9e:	3114      	adds	r1, #20
 8019fa0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8019fa4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8019fa8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019fac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8019fb0:	42a5      	cmp	r5, r4
 8019fb2:	d003      	beq.n	8019fbc <__mcmp+0x2c>
 8019fb4:	d305      	bcc.n	8019fc2 <__mcmp+0x32>
 8019fb6:	2201      	movs	r2, #1
 8019fb8:	4610      	mov	r0, r2
 8019fba:	bd30      	pop	{r4, r5, pc}
 8019fbc:	4283      	cmp	r3, r0
 8019fbe:	d3f3      	bcc.n	8019fa8 <__mcmp+0x18>
 8019fc0:	e7fa      	b.n	8019fb8 <__mcmp+0x28>
 8019fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8019fc6:	e7f7      	b.n	8019fb8 <__mcmp+0x28>

08019fc8 <__mdiff>:
 8019fc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fcc:	460c      	mov	r4, r1
 8019fce:	4606      	mov	r6, r0
 8019fd0:	4611      	mov	r1, r2
 8019fd2:	4620      	mov	r0, r4
 8019fd4:	4617      	mov	r7, r2
 8019fd6:	f7ff ffdb 	bl	8019f90 <__mcmp>
 8019fda:	1e05      	subs	r5, r0, #0
 8019fdc:	d110      	bne.n	801a000 <__mdiff+0x38>
 8019fde:	4629      	mov	r1, r5
 8019fe0:	4630      	mov	r0, r6
 8019fe2:	f7ff fd0d 	bl	8019a00 <_Balloc>
 8019fe6:	b930      	cbnz	r0, 8019ff6 <__mdiff+0x2e>
 8019fe8:	4b39      	ldr	r3, [pc, #228]	; (801a0d0 <__mdiff+0x108>)
 8019fea:	4602      	mov	r2, r0
 8019fec:	f240 2132 	movw	r1, #562	; 0x232
 8019ff0:	4838      	ldr	r0, [pc, #224]	; (801a0d4 <__mdiff+0x10c>)
 8019ff2:	f7ff f8fd 	bl	80191f0 <__assert_func>
 8019ff6:	2301      	movs	r3, #1
 8019ff8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019ffc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a000:	bfa4      	itt	ge
 801a002:	463b      	movge	r3, r7
 801a004:	4627      	movge	r7, r4
 801a006:	4630      	mov	r0, r6
 801a008:	6879      	ldr	r1, [r7, #4]
 801a00a:	bfa6      	itte	ge
 801a00c:	461c      	movge	r4, r3
 801a00e:	2500      	movge	r5, #0
 801a010:	2501      	movlt	r5, #1
 801a012:	f7ff fcf5 	bl	8019a00 <_Balloc>
 801a016:	b920      	cbnz	r0, 801a022 <__mdiff+0x5a>
 801a018:	4b2d      	ldr	r3, [pc, #180]	; (801a0d0 <__mdiff+0x108>)
 801a01a:	4602      	mov	r2, r0
 801a01c:	f44f 7110 	mov.w	r1, #576	; 0x240
 801a020:	e7e6      	b.n	8019ff0 <__mdiff+0x28>
 801a022:	693e      	ldr	r6, [r7, #16]
 801a024:	60c5      	str	r5, [r0, #12]
 801a026:	6925      	ldr	r5, [r4, #16]
 801a028:	f107 0114 	add.w	r1, r7, #20
 801a02c:	f104 0914 	add.w	r9, r4, #20
 801a030:	f100 0e14 	add.w	lr, r0, #20
 801a034:	f107 0210 	add.w	r2, r7, #16
 801a038:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801a03c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801a040:	46f2      	mov	sl, lr
 801a042:	2700      	movs	r7, #0
 801a044:	f859 3b04 	ldr.w	r3, [r9], #4
 801a048:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801a04c:	fa1f f883 	uxth.w	r8, r3
 801a050:	fa17 f78b 	uxtah	r7, r7, fp
 801a054:	0c1b      	lsrs	r3, r3, #16
 801a056:	eba7 0808 	sub.w	r8, r7, r8
 801a05a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801a05e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801a062:	fa1f f888 	uxth.w	r8, r8
 801a066:	141f      	asrs	r7, r3, #16
 801a068:	454d      	cmp	r5, r9
 801a06a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801a06e:	f84a 3b04 	str.w	r3, [sl], #4
 801a072:	d8e7      	bhi.n	801a044 <__mdiff+0x7c>
 801a074:	1b2b      	subs	r3, r5, r4
 801a076:	3b15      	subs	r3, #21
 801a078:	f023 0303 	bic.w	r3, r3, #3
 801a07c:	3304      	adds	r3, #4
 801a07e:	3415      	adds	r4, #21
 801a080:	42a5      	cmp	r5, r4
 801a082:	bf38      	it	cc
 801a084:	2304      	movcc	r3, #4
 801a086:	4419      	add	r1, r3
 801a088:	4473      	add	r3, lr
 801a08a:	469e      	mov	lr, r3
 801a08c:	460d      	mov	r5, r1
 801a08e:	4565      	cmp	r5, ip
 801a090:	d30e      	bcc.n	801a0b0 <__mdiff+0xe8>
 801a092:	f10c 0203 	add.w	r2, ip, #3
 801a096:	1a52      	subs	r2, r2, r1
 801a098:	f022 0203 	bic.w	r2, r2, #3
 801a09c:	3903      	subs	r1, #3
 801a09e:	458c      	cmp	ip, r1
 801a0a0:	bf38      	it	cc
 801a0a2:	2200      	movcc	r2, #0
 801a0a4:	441a      	add	r2, r3
 801a0a6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801a0aa:	b17b      	cbz	r3, 801a0cc <__mdiff+0x104>
 801a0ac:	6106      	str	r6, [r0, #16]
 801a0ae:	e7a5      	b.n	8019ffc <__mdiff+0x34>
 801a0b0:	f855 8b04 	ldr.w	r8, [r5], #4
 801a0b4:	fa17 f488 	uxtah	r4, r7, r8
 801a0b8:	1422      	asrs	r2, r4, #16
 801a0ba:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801a0be:	b2a4      	uxth	r4, r4
 801a0c0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801a0c4:	f84e 4b04 	str.w	r4, [lr], #4
 801a0c8:	1417      	asrs	r7, r2, #16
 801a0ca:	e7e0      	b.n	801a08e <__mdiff+0xc6>
 801a0cc:	3e01      	subs	r6, #1
 801a0ce:	e7ea      	b.n	801a0a6 <__mdiff+0xde>
 801a0d0:	0801e121 	.word	0x0801e121
 801a0d4:	0801e1b0 	.word	0x0801e1b0

0801a0d8 <__ulp>:
 801a0d8:	b082      	sub	sp, #8
 801a0da:	ed8d 0b00 	vstr	d0, [sp]
 801a0de:	9b01      	ldr	r3, [sp, #4]
 801a0e0:	4912      	ldr	r1, [pc, #72]	; (801a12c <__ulp+0x54>)
 801a0e2:	4019      	ands	r1, r3
 801a0e4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801a0e8:	2900      	cmp	r1, #0
 801a0ea:	dd05      	ble.n	801a0f8 <__ulp+0x20>
 801a0ec:	2200      	movs	r2, #0
 801a0ee:	460b      	mov	r3, r1
 801a0f0:	ec43 2b10 	vmov	d0, r2, r3
 801a0f4:	b002      	add	sp, #8
 801a0f6:	4770      	bx	lr
 801a0f8:	4249      	negs	r1, r1
 801a0fa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801a0fe:	ea4f 5021 	mov.w	r0, r1, asr #20
 801a102:	f04f 0200 	mov.w	r2, #0
 801a106:	f04f 0300 	mov.w	r3, #0
 801a10a:	da04      	bge.n	801a116 <__ulp+0x3e>
 801a10c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801a110:	fa41 f300 	asr.w	r3, r1, r0
 801a114:	e7ec      	b.n	801a0f0 <__ulp+0x18>
 801a116:	f1a0 0114 	sub.w	r1, r0, #20
 801a11a:	291e      	cmp	r1, #30
 801a11c:	bfda      	itte	le
 801a11e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801a122:	fa20 f101 	lsrle.w	r1, r0, r1
 801a126:	2101      	movgt	r1, #1
 801a128:	460a      	mov	r2, r1
 801a12a:	e7e1      	b.n	801a0f0 <__ulp+0x18>
 801a12c:	7ff00000 	.word	0x7ff00000

0801a130 <__b2d>:
 801a130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a132:	6905      	ldr	r5, [r0, #16]
 801a134:	f100 0714 	add.w	r7, r0, #20
 801a138:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801a13c:	1f2e      	subs	r6, r5, #4
 801a13e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801a142:	4620      	mov	r0, r4
 801a144:	f7ff fd52 	bl	8019bec <__hi0bits>
 801a148:	f1c0 0320 	rsb	r3, r0, #32
 801a14c:	280a      	cmp	r0, #10
 801a14e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801a1cc <__b2d+0x9c>
 801a152:	600b      	str	r3, [r1, #0]
 801a154:	dc14      	bgt.n	801a180 <__b2d+0x50>
 801a156:	f1c0 0e0b 	rsb	lr, r0, #11
 801a15a:	fa24 f10e 	lsr.w	r1, r4, lr
 801a15e:	42b7      	cmp	r7, r6
 801a160:	ea41 030c 	orr.w	r3, r1, ip
 801a164:	bf34      	ite	cc
 801a166:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801a16a:	2100      	movcs	r1, #0
 801a16c:	3015      	adds	r0, #21
 801a16e:	fa04 f000 	lsl.w	r0, r4, r0
 801a172:	fa21 f10e 	lsr.w	r1, r1, lr
 801a176:	ea40 0201 	orr.w	r2, r0, r1
 801a17a:	ec43 2b10 	vmov	d0, r2, r3
 801a17e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a180:	42b7      	cmp	r7, r6
 801a182:	bf3a      	itte	cc
 801a184:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801a188:	f1a5 0608 	subcc.w	r6, r5, #8
 801a18c:	2100      	movcs	r1, #0
 801a18e:	380b      	subs	r0, #11
 801a190:	d017      	beq.n	801a1c2 <__b2d+0x92>
 801a192:	f1c0 0c20 	rsb	ip, r0, #32
 801a196:	fa04 f500 	lsl.w	r5, r4, r0
 801a19a:	42be      	cmp	r6, r7
 801a19c:	fa21 f40c 	lsr.w	r4, r1, ip
 801a1a0:	ea45 0504 	orr.w	r5, r5, r4
 801a1a4:	bf8c      	ite	hi
 801a1a6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801a1aa:	2400      	movls	r4, #0
 801a1ac:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801a1b0:	fa01 f000 	lsl.w	r0, r1, r0
 801a1b4:	fa24 f40c 	lsr.w	r4, r4, ip
 801a1b8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801a1bc:	ea40 0204 	orr.w	r2, r0, r4
 801a1c0:	e7db      	b.n	801a17a <__b2d+0x4a>
 801a1c2:	ea44 030c 	orr.w	r3, r4, ip
 801a1c6:	460a      	mov	r2, r1
 801a1c8:	e7d7      	b.n	801a17a <__b2d+0x4a>
 801a1ca:	bf00      	nop
 801a1cc:	3ff00000 	.word	0x3ff00000

0801a1d0 <__d2b>:
 801a1d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a1d4:	4689      	mov	r9, r1
 801a1d6:	2101      	movs	r1, #1
 801a1d8:	ec57 6b10 	vmov	r6, r7, d0
 801a1dc:	4690      	mov	r8, r2
 801a1de:	f7ff fc0f 	bl	8019a00 <_Balloc>
 801a1e2:	4604      	mov	r4, r0
 801a1e4:	b930      	cbnz	r0, 801a1f4 <__d2b+0x24>
 801a1e6:	4602      	mov	r2, r0
 801a1e8:	4b25      	ldr	r3, [pc, #148]	; (801a280 <__d2b+0xb0>)
 801a1ea:	4826      	ldr	r0, [pc, #152]	; (801a284 <__d2b+0xb4>)
 801a1ec:	f240 310a 	movw	r1, #778	; 0x30a
 801a1f0:	f7fe fffe 	bl	80191f0 <__assert_func>
 801a1f4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801a1f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801a1fc:	bb35      	cbnz	r5, 801a24c <__d2b+0x7c>
 801a1fe:	2e00      	cmp	r6, #0
 801a200:	9301      	str	r3, [sp, #4]
 801a202:	d028      	beq.n	801a256 <__d2b+0x86>
 801a204:	4668      	mov	r0, sp
 801a206:	9600      	str	r6, [sp, #0]
 801a208:	f7ff fd10 	bl	8019c2c <__lo0bits>
 801a20c:	9900      	ldr	r1, [sp, #0]
 801a20e:	b300      	cbz	r0, 801a252 <__d2b+0x82>
 801a210:	9a01      	ldr	r2, [sp, #4]
 801a212:	f1c0 0320 	rsb	r3, r0, #32
 801a216:	fa02 f303 	lsl.w	r3, r2, r3
 801a21a:	430b      	orrs	r3, r1
 801a21c:	40c2      	lsrs	r2, r0
 801a21e:	6163      	str	r3, [r4, #20]
 801a220:	9201      	str	r2, [sp, #4]
 801a222:	9b01      	ldr	r3, [sp, #4]
 801a224:	61a3      	str	r3, [r4, #24]
 801a226:	2b00      	cmp	r3, #0
 801a228:	bf14      	ite	ne
 801a22a:	2202      	movne	r2, #2
 801a22c:	2201      	moveq	r2, #1
 801a22e:	6122      	str	r2, [r4, #16]
 801a230:	b1d5      	cbz	r5, 801a268 <__d2b+0x98>
 801a232:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801a236:	4405      	add	r5, r0
 801a238:	f8c9 5000 	str.w	r5, [r9]
 801a23c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801a240:	f8c8 0000 	str.w	r0, [r8]
 801a244:	4620      	mov	r0, r4
 801a246:	b003      	add	sp, #12
 801a248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a24c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a250:	e7d5      	b.n	801a1fe <__d2b+0x2e>
 801a252:	6161      	str	r1, [r4, #20]
 801a254:	e7e5      	b.n	801a222 <__d2b+0x52>
 801a256:	a801      	add	r0, sp, #4
 801a258:	f7ff fce8 	bl	8019c2c <__lo0bits>
 801a25c:	9b01      	ldr	r3, [sp, #4]
 801a25e:	6163      	str	r3, [r4, #20]
 801a260:	2201      	movs	r2, #1
 801a262:	6122      	str	r2, [r4, #16]
 801a264:	3020      	adds	r0, #32
 801a266:	e7e3      	b.n	801a230 <__d2b+0x60>
 801a268:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801a26c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801a270:	f8c9 0000 	str.w	r0, [r9]
 801a274:	6918      	ldr	r0, [r3, #16]
 801a276:	f7ff fcb9 	bl	8019bec <__hi0bits>
 801a27a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801a27e:	e7df      	b.n	801a240 <__d2b+0x70>
 801a280:	0801e121 	.word	0x0801e121
 801a284:	0801e1b0 	.word	0x0801e1b0

0801a288 <__ratio>:
 801a288:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a28c:	4688      	mov	r8, r1
 801a28e:	4669      	mov	r1, sp
 801a290:	4681      	mov	r9, r0
 801a292:	f7ff ff4d 	bl	801a130 <__b2d>
 801a296:	a901      	add	r1, sp, #4
 801a298:	4640      	mov	r0, r8
 801a29a:	ec55 4b10 	vmov	r4, r5, d0
 801a29e:	f7ff ff47 	bl	801a130 <__b2d>
 801a2a2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a2a6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801a2aa:	eba3 0c02 	sub.w	ip, r3, r2
 801a2ae:	e9dd 3200 	ldrd	r3, r2, [sp]
 801a2b2:	1a9b      	subs	r3, r3, r2
 801a2b4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801a2b8:	ec51 0b10 	vmov	r0, r1, d0
 801a2bc:	2b00      	cmp	r3, #0
 801a2be:	bfd6      	itet	le
 801a2c0:	460a      	movle	r2, r1
 801a2c2:	462a      	movgt	r2, r5
 801a2c4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801a2c8:	468b      	mov	fp, r1
 801a2ca:	462f      	mov	r7, r5
 801a2cc:	bfd4      	ite	le
 801a2ce:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801a2d2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801a2d6:	4620      	mov	r0, r4
 801a2d8:	ee10 2a10 	vmov	r2, s0
 801a2dc:	465b      	mov	r3, fp
 801a2de:	4639      	mov	r1, r7
 801a2e0:	f7e6 fac4 	bl	800086c <__aeabi_ddiv>
 801a2e4:	ec41 0b10 	vmov	d0, r0, r1
 801a2e8:	b003      	add	sp, #12
 801a2ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a2ee <__copybits>:
 801a2ee:	3901      	subs	r1, #1
 801a2f0:	b570      	push	{r4, r5, r6, lr}
 801a2f2:	1149      	asrs	r1, r1, #5
 801a2f4:	6914      	ldr	r4, [r2, #16]
 801a2f6:	3101      	adds	r1, #1
 801a2f8:	f102 0314 	add.w	r3, r2, #20
 801a2fc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801a300:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801a304:	1f05      	subs	r5, r0, #4
 801a306:	42a3      	cmp	r3, r4
 801a308:	d30c      	bcc.n	801a324 <__copybits+0x36>
 801a30a:	1aa3      	subs	r3, r4, r2
 801a30c:	3b11      	subs	r3, #17
 801a30e:	f023 0303 	bic.w	r3, r3, #3
 801a312:	3211      	adds	r2, #17
 801a314:	42a2      	cmp	r2, r4
 801a316:	bf88      	it	hi
 801a318:	2300      	movhi	r3, #0
 801a31a:	4418      	add	r0, r3
 801a31c:	2300      	movs	r3, #0
 801a31e:	4288      	cmp	r0, r1
 801a320:	d305      	bcc.n	801a32e <__copybits+0x40>
 801a322:	bd70      	pop	{r4, r5, r6, pc}
 801a324:	f853 6b04 	ldr.w	r6, [r3], #4
 801a328:	f845 6f04 	str.w	r6, [r5, #4]!
 801a32c:	e7eb      	b.n	801a306 <__copybits+0x18>
 801a32e:	f840 3b04 	str.w	r3, [r0], #4
 801a332:	e7f4      	b.n	801a31e <__copybits+0x30>

0801a334 <__any_on>:
 801a334:	f100 0214 	add.w	r2, r0, #20
 801a338:	6900      	ldr	r0, [r0, #16]
 801a33a:	114b      	asrs	r3, r1, #5
 801a33c:	4298      	cmp	r0, r3
 801a33e:	b510      	push	{r4, lr}
 801a340:	db11      	blt.n	801a366 <__any_on+0x32>
 801a342:	dd0a      	ble.n	801a35a <__any_on+0x26>
 801a344:	f011 011f 	ands.w	r1, r1, #31
 801a348:	d007      	beq.n	801a35a <__any_on+0x26>
 801a34a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801a34e:	fa24 f001 	lsr.w	r0, r4, r1
 801a352:	fa00 f101 	lsl.w	r1, r0, r1
 801a356:	428c      	cmp	r4, r1
 801a358:	d10b      	bne.n	801a372 <__any_on+0x3e>
 801a35a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a35e:	4293      	cmp	r3, r2
 801a360:	d803      	bhi.n	801a36a <__any_on+0x36>
 801a362:	2000      	movs	r0, #0
 801a364:	bd10      	pop	{r4, pc}
 801a366:	4603      	mov	r3, r0
 801a368:	e7f7      	b.n	801a35a <__any_on+0x26>
 801a36a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801a36e:	2900      	cmp	r1, #0
 801a370:	d0f5      	beq.n	801a35e <__any_on+0x2a>
 801a372:	2001      	movs	r0, #1
 801a374:	e7f6      	b.n	801a364 <__any_on+0x30>

0801a376 <_calloc_r>:
 801a376:	b513      	push	{r0, r1, r4, lr}
 801a378:	434a      	muls	r2, r1
 801a37a:	4611      	mov	r1, r2
 801a37c:	9201      	str	r2, [sp, #4]
 801a37e:	f7fd fdbb 	bl	8017ef8 <_malloc_r>
 801a382:	4604      	mov	r4, r0
 801a384:	b118      	cbz	r0, 801a38e <_calloc_r+0x18>
 801a386:	9a01      	ldr	r2, [sp, #4]
 801a388:	2100      	movs	r1, #0
 801a38a:	f7fd fd5d 	bl	8017e48 <memset>
 801a38e:	4620      	mov	r0, r4
 801a390:	b002      	add	sp, #8
 801a392:	bd10      	pop	{r4, pc}

0801a394 <__ssputs_r>:
 801a394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a398:	688e      	ldr	r6, [r1, #8]
 801a39a:	429e      	cmp	r6, r3
 801a39c:	4682      	mov	sl, r0
 801a39e:	460c      	mov	r4, r1
 801a3a0:	4690      	mov	r8, r2
 801a3a2:	461f      	mov	r7, r3
 801a3a4:	d838      	bhi.n	801a418 <__ssputs_r+0x84>
 801a3a6:	898a      	ldrh	r2, [r1, #12]
 801a3a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a3ac:	d032      	beq.n	801a414 <__ssputs_r+0x80>
 801a3ae:	6825      	ldr	r5, [r4, #0]
 801a3b0:	6909      	ldr	r1, [r1, #16]
 801a3b2:	eba5 0901 	sub.w	r9, r5, r1
 801a3b6:	6965      	ldr	r5, [r4, #20]
 801a3b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a3bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a3c0:	3301      	adds	r3, #1
 801a3c2:	444b      	add	r3, r9
 801a3c4:	106d      	asrs	r5, r5, #1
 801a3c6:	429d      	cmp	r5, r3
 801a3c8:	bf38      	it	cc
 801a3ca:	461d      	movcc	r5, r3
 801a3cc:	0553      	lsls	r3, r2, #21
 801a3ce:	d531      	bpl.n	801a434 <__ssputs_r+0xa0>
 801a3d0:	4629      	mov	r1, r5
 801a3d2:	f7fd fd91 	bl	8017ef8 <_malloc_r>
 801a3d6:	4606      	mov	r6, r0
 801a3d8:	b950      	cbnz	r0, 801a3f0 <__ssputs_r+0x5c>
 801a3da:	230c      	movs	r3, #12
 801a3dc:	f8ca 3000 	str.w	r3, [sl]
 801a3e0:	89a3      	ldrh	r3, [r4, #12]
 801a3e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a3e6:	81a3      	strh	r3, [r4, #12]
 801a3e8:	f04f 30ff 	mov.w	r0, #4294967295
 801a3ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a3f0:	6921      	ldr	r1, [r4, #16]
 801a3f2:	464a      	mov	r2, r9
 801a3f4:	f7fd fd00 	bl	8017df8 <memcpy>
 801a3f8:	89a3      	ldrh	r3, [r4, #12]
 801a3fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a3fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a402:	81a3      	strh	r3, [r4, #12]
 801a404:	6126      	str	r6, [r4, #16]
 801a406:	6165      	str	r5, [r4, #20]
 801a408:	444e      	add	r6, r9
 801a40a:	eba5 0509 	sub.w	r5, r5, r9
 801a40e:	6026      	str	r6, [r4, #0]
 801a410:	60a5      	str	r5, [r4, #8]
 801a412:	463e      	mov	r6, r7
 801a414:	42be      	cmp	r6, r7
 801a416:	d900      	bls.n	801a41a <__ssputs_r+0x86>
 801a418:	463e      	mov	r6, r7
 801a41a:	4632      	mov	r2, r6
 801a41c:	6820      	ldr	r0, [r4, #0]
 801a41e:	4641      	mov	r1, r8
 801a420:	f7fd fcf8 	bl	8017e14 <memmove>
 801a424:	68a3      	ldr	r3, [r4, #8]
 801a426:	6822      	ldr	r2, [r4, #0]
 801a428:	1b9b      	subs	r3, r3, r6
 801a42a:	4432      	add	r2, r6
 801a42c:	60a3      	str	r3, [r4, #8]
 801a42e:	6022      	str	r2, [r4, #0]
 801a430:	2000      	movs	r0, #0
 801a432:	e7db      	b.n	801a3ec <__ssputs_r+0x58>
 801a434:	462a      	mov	r2, r5
 801a436:	f000 fc20 	bl	801ac7a <_realloc_r>
 801a43a:	4606      	mov	r6, r0
 801a43c:	2800      	cmp	r0, #0
 801a43e:	d1e1      	bne.n	801a404 <__ssputs_r+0x70>
 801a440:	6921      	ldr	r1, [r4, #16]
 801a442:	4650      	mov	r0, sl
 801a444:	f7fd fd08 	bl	8017e58 <_free_r>
 801a448:	e7c7      	b.n	801a3da <__ssputs_r+0x46>
	...

0801a44c <_svfiprintf_r>:
 801a44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a450:	4698      	mov	r8, r3
 801a452:	898b      	ldrh	r3, [r1, #12]
 801a454:	061b      	lsls	r3, r3, #24
 801a456:	b09d      	sub	sp, #116	; 0x74
 801a458:	4607      	mov	r7, r0
 801a45a:	460d      	mov	r5, r1
 801a45c:	4614      	mov	r4, r2
 801a45e:	d50e      	bpl.n	801a47e <_svfiprintf_r+0x32>
 801a460:	690b      	ldr	r3, [r1, #16]
 801a462:	b963      	cbnz	r3, 801a47e <_svfiprintf_r+0x32>
 801a464:	2140      	movs	r1, #64	; 0x40
 801a466:	f7fd fd47 	bl	8017ef8 <_malloc_r>
 801a46a:	6028      	str	r0, [r5, #0]
 801a46c:	6128      	str	r0, [r5, #16]
 801a46e:	b920      	cbnz	r0, 801a47a <_svfiprintf_r+0x2e>
 801a470:	230c      	movs	r3, #12
 801a472:	603b      	str	r3, [r7, #0]
 801a474:	f04f 30ff 	mov.w	r0, #4294967295
 801a478:	e0d1      	b.n	801a61e <_svfiprintf_r+0x1d2>
 801a47a:	2340      	movs	r3, #64	; 0x40
 801a47c:	616b      	str	r3, [r5, #20]
 801a47e:	2300      	movs	r3, #0
 801a480:	9309      	str	r3, [sp, #36]	; 0x24
 801a482:	2320      	movs	r3, #32
 801a484:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a488:	f8cd 800c 	str.w	r8, [sp, #12]
 801a48c:	2330      	movs	r3, #48	; 0x30
 801a48e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801a638 <_svfiprintf_r+0x1ec>
 801a492:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a496:	f04f 0901 	mov.w	r9, #1
 801a49a:	4623      	mov	r3, r4
 801a49c:	469a      	mov	sl, r3
 801a49e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a4a2:	b10a      	cbz	r2, 801a4a8 <_svfiprintf_r+0x5c>
 801a4a4:	2a25      	cmp	r2, #37	; 0x25
 801a4a6:	d1f9      	bne.n	801a49c <_svfiprintf_r+0x50>
 801a4a8:	ebba 0b04 	subs.w	fp, sl, r4
 801a4ac:	d00b      	beq.n	801a4c6 <_svfiprintf_r+0x7a>
 801a4ae:	465b      	mov	r3, fp
 801a4b0:	4622      	mov	r2, r4
 801a4b2:	4629      	mov	r1, r5
 801a4b4:	4638      	mov	r0, r7
 801a4b6:	f7ff ff6d 	bl	801a394 <__ssputs_r>
 801a4ba:	3001      	adds	r0, #1
 801a4bc:	f000 80aa 	beq.w	801a614 <_svfiprintf_r+0x1c8>
 801a4c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a4c2:	445a      	add	r2, fp
 801a4c4:	9209      	str	r2, [sp, #36]	; 0x24
 801a4c6:	f89a 3000 	ldrb.w	r3, [sl]
 801a4ca:	2b00      	cmp	r3, #0
 801a4cc:	f000 80a2 	beq.w	801a614 <_svfiprintf_r+0x1c8>
 801a4d0:	2300      	movs	r3, #0
 801a4d2:	f04f 32ff 	mov.w	r2, #4294967295
 801a4d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a4da:	f10a 0a01 	add.w	sl, sl, #1
 801a4de:	9304      	str	r3, [sp, #16]
 801a4e0:	9307      	str	r3, [sp, #28]
 801a4e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a4e6:	931a      	str	r3, [sp, #104]	; 0x68
 801a4e8:	4654      	mov	r4, sl
 801a4ea:	2205      	movs	r2, #5
 801a4ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a4f0:	4851      	ldr	r0, [pc, #324]	; (801a638 <_svfiprintf_r+0x1ec>)
 801a4f2:	f7e5 fe85 	bl	8000200 <memchr>
 801a4f6:	9a04      	ldr	r2, [sp, #16]
 801a4f8:	b9d8      	cbnz	r0, 801a532 <_svfiprintf_r+0xe6>
 801a4fa:	06d0      	lsls	r0, r2, #27
 801a4fc:	bf44      	itt	mi
 801a4fe:	2320      	movmi	r3, #32
 801a500:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a504:	0711      	lsls	r1, r2, #28
 801a506:	bf44      	itt	mi
 801a508:	232b      	movmi	r3, #43	; 0x2b
 801a50a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a50e:	f89a 3000 	ldrb.w	r3, [sl]
 801a512:	2b2a      	cmp	r3, #42	; 0x2a
 801a514:	d015      	beq.n	801a542 <_svfiprintf_r+0xf6>
 801a516:	9a07      	ldr	r2, [sp, #28]
 801a518:	4654      	mov	r4, sl
 801a51a:	2000      	movs	r0, #0
 801a51c:	f04f 0c0a 	mov.w	ip, #10
 801a520:	4621      	mov	r1, r4
 801a522:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a526:	3b30      	subs	r3, #48	; 0x30
 801a528:	2b09      	cmp	r3, #9
 801a52a:	d94e      	bls.n	801a5ca <_svfiprintf_r+0x17e>
 801a52c:	b1b0      	cbz	r0, 801a55c <_svfiprintf_r+0x110>
 801a52e:	9207      	str	r2, [sp, #28]
 801a530:	e014      	b.n	801a55c <_svfiprintf_r+0x110>
 801a532:	eba0 0308 	sub.w	r3, r0, r8
 801a536:	fa09 f303 	lsl.w	r3, r9, r3
 801a53a:	4313      	orrs	r3, r2
 801a53c:	9304      	str	r3, [sp, #16]
 801a53e:	46a2      	mov	sl, r4
 801a540:	e7d2      	b.n	801a4e8 <_svfiprintf_r+0x9c>
 801a542:	9b03      	ldr	r3, [sp, #12]
 801a544:	1d19      	adds	r1, r3, #4
 801a546:	681b      	ldr	r3, [r3, #0]
 801a548:	9103      	str	r1, [sp, #12]
 801a54a:	2b00      	cmp	r3, #0
 801a54c:	bfbb      	ittet	lt
 801a54e:	425b      	neglt	r3, r3
 801a550:	f042 0202 	orrlt.w	r2, r2, #2
 801a554:	9307      	strge	r3, [sp, #28]
 801a556:	9307      	strlt	r3, [sp, #28]
 801a558:	bfb8      	it	lt
 801a55a:	9204      	strlt	r2, [sp, #16]
 801a55c:	7823      	ldrb	r3, [r4, #0]
 801a55e:	2b2e      	cmp	r3, #46	; 0x2e
 801a560:	d10c      	bne.n	801a57c <_svfiprintf_r+0x130>
 801a562:	7863      	ldrb	r3, [r4, #1]
 801a564:	2b2a      	cmp	r3, #42	; 0x2a
 801a566:	d135      	bne.n	801a5d4 <_svfiprintf_r+0x188>
 801a568:	9b03      	ldr	r3, [sp, #12]
 801a56a:	1d1a      	adds	r2, r3, #4
 801a56c:	681b      	ldr	r3, [r3, #0]
 801a56e:	9203      	str	r2, [sp, #12]
 801a570:	2b00      	cmp	r3, #0
 801a572:	bfb8      	it	lt
 801a574:	f04f 33ff 	movlt.w	r3, #4294967295
 801a578:	3402      	adds	r4, #2
 801a57a:	9305      	str	r3, [sp, #20]
 801a57c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801a648 <_svfiprintf_r+0x1fc>
 801a580:	7821      	ldrb	r1, [r4, #0]
 801a582:	2203      	movs	r2, #3
 801a584:	4650      	mov	r0, sl
 801a586:	f7e5 fe3b 	bl	8000200 <memchr>
 801a58a:	b140      	cbz	r0, 801a59e <_svfiprintf_r+0x152>
 801a58c:	2340      	movs	r3, #64	; 0x40
 801a58e:	eba0 000a 	sub.w	r0, r0, sl
 801a592:	fa03 f000 	lsl.w	r0, r3, r0
 801a596:	9b04      	ldr	r3, [sp, #16]
 801a598:	4303      	orrs	r3, r0
 801a59a:	3401      	adds	r4, #1
 801a59c:	9304      	str	r3, [sp, #16]
 801a59e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a5a2:	4826      	ldr	r0, [pc, #152]	; (801a63c <_svfiprintf_r+0x1f0>)
 801a5a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a5a8:	2206      	movs	r2, #6
 801a5aa:	f7e5 fe29 	bl	8000200 <memchr>
 801a5ae:	2800      	cmp	r0, #0
 801a5b0:	d038      	beq.n	801a624 <_svfiprintf_r+0x1d8>
 801a5b2:	4b23      	ldr	r3, [pc, #140]	; (801a640 <_svfiprintf_r+0x1f4>)
 801a5b4:	bb1b      	cbnz	r3, 801a5fe <_svfiprintf_r+0x1b2>
 801a5b6:	9b03      	ldr	r3, [sp, #12]
 801a5b8:	3307      	adds	r3, #7
 801a5ba:	f023 0307 	bic.w	r3, r3, #7
 801a5be:	3308      	adds	r3, #8
 801a5c0:	9303      	str	r3, [sp, #12]
 801a5c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a5c4:	4433      	add	r3, r6
 801a5c6:	9309      	str	r3, [sp, #36]	; 0x24
 801a5c8:	e767      	b.n	801a49a <_svfiprintf_r+0x4e>
 801a5ca:	fb0c 3202 	mla	r2, ip, r2, r3
 801a5ce:	460c      	mov	r4, r1
 801a5d0:	2001      	movs	r0, #1
 801a5d2:	e7a5      	b.n	801a520 <_svfiprintf_r+0xd4>
 801a5d4:	2300      	movs	r3, #0
 801a5d6:	3401      	adds	r4, #1
 801a5d8:	9305      	str	r3, [sp, #20]
 801a5da:	4619      	mov	r1, r3
 801a5dc:	f04f 0c0a 	mov.w	ip, #10
 801a5e0:	4620      	mov	r0, r4
 801a5e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a5e6:	3a30      	subs	r2, #48	; 0x30
 801a5e8:	2a09      	cmp	r2, #9
 801a5ea:	d903      	bls.n	801a5f4 <_svfiprintf_r+0x1a8>
 801a5ec:	2b00      	cmp	r3, #0
 801a5ee:	d0c5      	beq.n	801a57c <_svfiprintf_r+0x130>
 801a5f0:	9105      	str	r1, [sp, #20]
 801a5f2:	e7c3      	b.n	801a57c <_svfiprintf_r+0x130>
 801a5f4:	fb0c 2101 	mla	r1, ip, r1, r2
 801a5f8:	4604      	mov	r4, r0
 801a5fa:	2301      	movs	r3, #1
 801a5fc:	e7f0      	b.n	801a5e0 <_svfiprintf_r+0x194>
 801a5fe:	ab03      	add	r3, sp, #12
 801a600:	9300      	str	r3, [sp, #0]
 801a602:	462a      	mov	r2, r5
 801a604:	4b0f      	ldr	r3, [pc, #60]	; (801a644 <_svfiprintf_r+0x1f8>)
 801a606:	a904      	add	r1, sp, #16
 801a608:	4638      	mov	r0, r7
 801a60a:	f3af 8000 	nop.w
 801a60e:	1c42      	adds	r2, r0, #1
 801a610:	4606      	mov	r6, r0
 801a612:	d1d6      	bne.n	801a5c2 <_svfiprintf_r+0x176>
 801a614:	89ab      	ldrh	r3, [r5, #12]
 801a616:	065b      	lsls	r3, r3, #25
 801a618:	f53f af2c 	bmi.w	801a474 <_svfiprintf_r+0x28>
 801a61c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a61e:	b01d      	add	sp, #116	; 0x74
 801a620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a624:	ab03      	add	r3, sp, #12
 801a626:	9300      	str	r3, [sp, #0]
 801a628:	462a      	mov	r2, r5
 801a62a:	4b06      	ldr	r3, [pc, #24]	; (801a644 <_svfiprintf_r+0x1f8>)
 801a62c:	a904      	add	r1, sp, #16
 801a62e:	4638      	mov	r0, r7
 801a630:	f000 f9d4 	bl	801a9dc <_printf_i>
 801a634:	e7eb      	b.n	801a60e <_svfiprintf_r+0x1c2>
 801a636:	bf00      	nop
 801a638:	0801e30c 	.word	0x0801e30c
 801a63c:	0801e316 	.word	0x0801e316
 801a640:	00000000 	.word	0x00000000
 801a644:	0801a395 	.word	0x0801a395
 801a648:	0801e312 	.word	0x0801e312

0801a64c <__sfputc_r>:
 801a64c:	6893      	ldr	r3, [r2, #8]
 801a64e:	3b01      	subs	r3, #1
 801a650:	2b00      	cmp	r3, #0
 801a652:	b410      	push	{r4}
 801a654:	6093      	str	r3, [r2, #8]
 801a656:	da08      	bge.n	801a66a <__sfputc_r+0x1e>
 801a658:	6994      	ldr	r4, [r2, #24]
 801a65a:	42a3      	cmp	r3, r4
 801a65c:	db01      	blt.n	801a662 <__sfputc_r+0x16>
 801a65e:	290a      	cmp	r1, #10
 801a660:	d103      	bne.n	801a66a <__sfputc_r+0x1e>
 801a662:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a666:	f7fe bcf1 	b.w	801904c <__swbuf_r>
 801a66a:	6813      	ldr	r3, [r2, #0]
 801a66c:	1c58      	adds	r0, r3, #1
 801a66e:	6010      	str	r0, [r2, #0]
 801a670:	7019      	strb	r1, [r3, #0]
 801a672:	4608      	mov	r0, r1
 801a674:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a678:	4770      	bx	lr

0801a67a <__sfputs_r>:
 801a67a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a67c:	4606      	mov	r6, r0
 801a67e:	460f      	mov	r7, r1
 801a680:	4614      	mov	r4, r2
 801a682:	18d5      	adds	r5, r2, r3
 801a684:	42ac      	cmp	r4, r5
 801a686:	d101      	bne.n	801a68c <__sfputs_r+0x12>
 801a688:	2000      	movs	r0, #0
 801a68a:	e007      	b.n	801a69c <__sfputs_r+0x22>
 801a68c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a690:	463a      	mov	r2, r7
 801a692:	4630      	mov	r0, r6
 801a694:	f7ff ffda 	bl	801a64c <__sfputc_r>
 801a698:	1c43      	adds	r3, r0, #1
 801a69a:	d1f3      	bne.n	801a684 <__sfputs_r+0xa>
 801a69c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a6a0 <_vfiprintf_r>:
 801a6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6a4:	460d      	mov	r5, r1
 801a6a6:	b09d      	sub	sp, #116	; 0x74
 801a6a8:	4614      	mov	r4, r2
 801a6aa:	4698      	mov	r8, r3
 801a6ac:	4606      	mov	r6, r0
 801a6ae:	b118      	cbz	r0, 801a6b8 <_vfiprintf_r+0x18>
 801a6b0:	6983      	ldr	r3, [r0, #24]
 801a6b2:	b90b      	cbnz	r3, 801a6b8 <_vfiprintf_r+0x18>
 801a6b4:	f7fd fa3e 	bl	8017b34 <__sinit>
 801a6b8:	4b89      	ldr	r3, [pc, #548]	; (801a8e0 <_vfiprintf_r+0x240>)
 801a6ba:	429d      	cmp	r5, r3
 801a6bc:	d11b      	bne.n	801a6f6 <_vfiprintf_r+0x56>
 801a6be:	6875      	ldr	r5, [r6, #4]
 801a6c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a6c2:	07d9      	lsls	r1, r3, #31
 801a6c4:	d405      	bmi.n	801a6d2 <_vfiprintf_r+0x32>
 801a6c6:	89ab      	ldrh	r3, [r5, #12]
 801a6c8:	059a      	lsls	r2, r3, #22
 801a6ca:	d402      	bmi.n	801a6d2 <_vfiprintf_r+0x32>
 801a6cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a6ce:	f7fd fb0e 	bl	8017cee <__retarget_lock_acquire_recursive>
 801a6d2:	89ab      	ldrh	r3, [r5, #12]
 801a6d4:	071b      	lsls	r3, r3, #28
 801a6d6:	d501      	bpl.n	801a6dc <_vfiprintf_r+0x3c>
 801a6d8:	692b      	ldr	r3, [r5, #16]
 801a6da:	b9eb      	cbnz	r3, 801a718 <_vfiprintf_r+0x78>
 801a6dc:	4629      	mov	r1, r5
 801a6de:	4630      	mov	r0, r6
 801a6e0:	f7fe fd18 	bl	8019114 <__swsetup_r>
 801a6e4:	b1c0      	cbz	r0, 801a718 <_vfiprintf_r+0x78>
 801a6e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a6e8:	07dc      	lsls	r4, r3, #31
 801a6ea:	d50e      	bpl.n	801a70a <_vfiprintf_r+0x6a>
 801a6ec:	f04f 30ff 	mov.w	r0, #4294967295
 801a6f0:	b01d      	add	sp, #116	; 0x74
 801a6f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a6f6:	4b7b      	ldr	r3, [pc, #492]	; (801a8e4 <_vfiprintf_r+0x244>)
 801a6f8:	429d      	cmp	r5, r3
 801a6fa:	d101      	bne.n	801a700 <_vfiprintf_r+0x60>
 801a6fc:	68b5      	ldr	r5, [r6, #8]
 801a6fe:	e7df      	b.n	801a6c0 <_vfiprintf_r+0x20>
 801a700:	4b79      	ldr	r3, [pc, #484]	; (801a8e8 <_vfiprintf_r+0x248>)
 801a702:	429d      	cmp	r5, r3
 801a704:	bf08      	it	eq
 801a706:	68f5      	ldreq	r5, [r6, #12]
 801a708:	e7da      	b.n	801a6c0 <_vfiprintf_r+0x20>
 801a70a:	89ab      	ldrh	r3, [r5, #12]
 801a70c:	0598      	lsls	r0, r3, #22
 801a70e:	d4ed      	bmi.n	801a6ec <_vfiprintf_r+0x4c>
 801a710:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a712:	f7fd faed 	bl	8017cf0 <__retarget_lock_release_recursive>
 801a716:	e7e9      	b.n	801a6ec <_vfiprintf_r+0x4c>
 801a718:	2300      	movs	r3, #0
 801a71a:	9309      	str	r3, [sp, #36]	; 0x24
 801a71c:	2320      	movs	r3, #32
 801a71e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a722:	f8cd 800c 	str.w	r8, [sp, #12]
 801a726:	2330      	movs	r3, #48	; 0x30
 801a728:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a8ec <_vfiprintf_r+0x24c>
 801a72c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a730:	f04f 0901 	mov.w	r9, #1
 801a734:	4623      	mov	r3, r4
 801a736:	469a      	mov	sl, r3
 801a738:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a73c:	b10a      	cbz	r2, 801a742 <_vfiprintf_r+0xa2>
 801a73e:	2a25      	cmp	r2, #37	; 0x25
 801a740:	d1f9      	bne.n	801a736 <_vfiprintf_r+0x96>
 801a742:	ebba 0b04 	subs.w	fp, sl, r4
 801a746:	d00b      	beq.n	801a760 <_vfiprintf_r+0xc0>
 801a748:	465b      	mov	r3, fp
 801a74a:	4622      	mov	r2, r4
 801a74c:	4629      	mov	r1, r5
 801a74e:	4630      	mov	r0, r6
 801a750:	f7ff ff93 	bl	801a67a <__sfputs_r>
 801a754:	3001      	adds	r0, #1
 801a756:	f000 80aa 	beq.w	801a8ae <_vfiprintf_r+0x20e>
 801a75a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a75c:	445a      	add	r2, fp
 801a75e:	9209      	str	r2, [sp, #36]	; 0x24
 801a760:	f89a 3000 	ldrb.w	r3, [sl]
 801a764:	2b00      	cmp	r3, #0
 801a766:	f000 80a2 	beq.w	801a8ae <_vfiprintf_r+0x20e>
 801a76a:	2300      	movs	r3, #0
 801a76c:	f04f 32ff 	mov.w	r2, #4294967295
 801a770:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a774:	f10a 0a01 	add.w	sl, sl, #1
 801a778:	9304      	str	r3, [sp, #16]
 801a77a:	9307      	str	r3, [sp, #28]
 801a77c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a780:	931a      	str	r3, [sp, #104]	; 0x68
 801a782:	4654      	mov	r4, sl
 801a784:	2205      	movs	r2, #5
 801a786:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a78a:	4858      	ldr	r0, [pc, #352]	; (801a8ec <_vfiprintf_r+0x24c>)
 801a78c:	f7e5 fd38 	bl	8000200 <memchr>
 801a790:	9a04      	ldr	r2, [sp, #16]
 801a792:	b9d8      	cbnz	r0, 801a7cc <_vfiprintf_r+0x12c>
 801a794:	06d1      	lsls	r1, r2, #27
 801a796:	bf44      	itt	mi
 801a798:	2320      	movmi	r3, #32
 801a79a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a79e:	0713      	lsls	r3, r2, #28
 801a7a0:	bf44      	itt	mi
 801a7a2:	232b      	movmi	r3, #43	; 0x2b
 801a7a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a7a8:	f89a 3000 	ldrb.w	r3, [sl]
 801a7ac:	2b2a      	cmp	r3, #42	; 0x2a
 801a7ae:	d015      	beq.n	801a7dc <_vfiprintf_r+0x13c>
 801a7b0:	9a07      	ldr	r2, [sp, #28]
 801a7b2:	4654      	mov	r4, sl
 801a7b4:	2000      	movs	r0, #0
 801a7b6:	f04f 0c0a 	mov.w	ip, #10
 801a7ba:	4621      	mov	r1, r4
 801a7bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a7c0:	3b30      	subs	r3, #48	; 0x30
 801a7c2:	2b09      	cmp	r3, #9
 801a7c4:	d94e      	bls.n	801a864 <_vfiprintf_r+0x1c4>
 801a7c6:	b1b0      	cbz	r0, 801a7f6 <_vfiprintf_r+0x156>
 801a7c8:	9207      	str	r2, [sp, #28]
 801a7ca:	e014      	b.n	801a7f6 <_vfiprintf_r+0x156>
 801a7cc:	eba0 0308 	sub.w	r3, r0, r8
 801a7d0:	fa09 f303 	lsl.w	r3, r9, r3
 801a7d4:	4313      	orrs	r3, r2
 801a7d6:	9304      	str	r3, [sp, #16]
 801a7d8:	46a2      	mov	sl, r4
 801a7da:	e7d2      	b.n	801a782 <_vfiprintf_r+0xe2>
 801a7dc:	9b03      	ldr	r3, [sp, #12]
 801a7de:	1d19      	adds	r1, r3, #4
 801a7e0:	681b      	ldr	r3, [r3, #0]
 801a7e2:	9103      	str	r1, [sp, #12]
 801a7e4:	2b00      	cmp	r3, #0
 801a7e6:	bfbb      	ittet	lt
 801a7e8:	425b      	neglt	r3, r3
 801a7ea:	f042 0202 	orrlt.w	r2, r2, #2
 801a7ee:	9307      	strge	r3, [sp, #28]
 801a7f0:	9307      	strlt	r3, [sp, #28]
 801a7f2:	bfb8      	it	lt
 801a7f4:	9204      	strlt	r2, [sp, #16]
 801a7f6:	7823      	ldrb	r3, [r4, #0]
 801a7f8:	2b2e      	cmp	r3, #46	; 0x2e
 801a7fa:	d10c      	bne.n	801a816 <_vfiprintf_r+0x176>
 801a7fc:	7863      	ldrb	r3, [r4, #1]
 801a7fe:	2b2a      	cmp	r3, #42	; 0x2a
 801a800:	d135      	bne.n	801a86e <_vfiprintf_r+0x1ce>
 801a802:	9b03      	ldr	r3, [sp, #12]
 801a804:	1d1a      	adds	r2, r3, #4
 801a806:	681b      	ldr	r3, [r3, #0]
 801a808:	9203      	str	r2, [sp, #12]
 801a80a:	2b00      	cmp	r3, #0
 801a80c:	bfb8      	it	lt
 801a80e:	f04f 33ff 	movlt.w	r3, #4294967295
 801a812:	3402      	adds	r4, #2
 801a814:	9305      	str	r3, [sp, #20]
 801a816:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a8fc <_vfiprintf_r+0x25c>
 801a81a:	7821      	ldrb	r1, [r4, #0]
 801a81c:	2203      	movs	r2, #3
 801a81e:	4650      	mov	r0, sl
 801a820:	f7e5 fcee 	bl	8000200 <memchr>
 801a824:	b140      	cbz	r0, 801a838 <_vfiprintf_r+0x198>
 801a826:	2340      	movs	r3, #64	; 0x40
 801a828:	eba0 000a 	sub.w	r0, r0, sl
 801a82c:	fa03 f000 	lsl.w	r0, r3, r0
 801a830:	9b04      	ldr	r3, [sp, #16]
 801a832:	4303      	orrs	r3, r0
 801a834:	3401      	adds	r4, #1
 801a836:	9304      	str	r3, [sp, #16]
 801a838:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a83c:	482c      	ldr	r0, [pc, #176]	; (801a8f0 <_vfiprintf_r+0x250>)
 801a83e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a842:	2206      	movs	r2, #6
 801a844:	f7e5 fcdc 	bl	8000200 <memchr>
 801a848:	2800      	cmp	r0, #0
 801a84a:	d03f      	beq.n	801a8cc <_vfiprintf_r+0x22c>
 801a84c:	4b29      	ldr	r3, [pc, #164]	; (801a8f4 <_vfiprintf_r+0x254>)
 801a84e:	bb1b      	cbnz	r3, 801a898 <_vfiprintf_r+0x1f8>
 801a850:	9b03      	ldr	r3, [sp, #12]
 801a852:	3307      	adds	r3, #7
 801a854:	f023 0307 	bic.w	r3, r3, #7
 801a858:	3308      	adds	r3, #8
 801a85a:	9303      	str	r3, [sp, #12]
 801a85c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a85e:	443b      	add	r3, r7
 801a860:	9309      	str	r3, [sp, #36]	; 0x24
 801a862:	e767      	b.n	801a734 <_vfiprintf_r+0x94>
 801a864:	fb0c 3202 	mla	r2, ip, r2, r3
 801a868:	460c      	mov	r4, r1
 801a86a:	2001      	movs	r0, #1
 801a86c:	e7a5      	b.n	801a7ba <_vfiprintf_r+0x11a>
 801a86e:	2300      	movs	r3, #0
 801a870:	3401      	adds	r4, #1
 801a872:	9305      	str	r3, [sp, #20]
 801a874:	4619      	mov	r1, r3
 801a876:	f04f 0c0a 	mov.w	ip, #10
 801a87a:	4620      	mov	r0, r4
 801a87c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a880:	3a30      	subs	r2, #48	; 0x30
 801a882:	2a09      	cmp	r2, #9
 801a884:	d903      	bls.n	801a88e <_vfiprintf_r+0x1ee>
 801a886:	2b00      	cmp	r3, #0
 801a888:	d0c5      	beq.n	801a816 <_vfiprintf_r+0x176>
 801a88a:	9105      	str	r1, [sp, #20]
 801a88c:	e7c3      	b.n	801a816 <_vfiprintf_r+0x176>
 801a88e:	fb0c 2101 	mla	r1, ip, r1, r2
 801a892:	4604      	mov	r4, r0
 801a894:	2301      	movs	r3, #1
 801a896:	e7f0      	b.n	801a87a <_vfiprintf_r+0x1da>
 801a898:	ab03      	add	r3, sp, #12
 801a89a:	9300      	str	r3, [sp, #0]
 801a89c:	462a      	mov	r2, r5
 801a89e:	4b16      	ldr	r3, [pc, #88]	; (801a8f8 <_vfiprintf_r+0x258>)
 801a8a0:	a904      	add	r1, sp, #16
 801a8a2:	4630      	mov	r0, r6
 801a8a4:	f3af 8000 	nop.w
 801a8a8:	4607      	mov	r7, r0
 801a8aa:	1c78      	adds	r0, r7, #1
 801a8ac:	d1d6      	bne.n	801a85c <_vfiprintf_r+0x1bc>
 801a8ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a8b0:	07d9      	lsls	r1, r3, #31
 801a8b2:	d405      	bmi.n	801a8c0 <_vfiprintf_r+0x220>
 801a8b4:	89ab      	ldrh	r3, [r5, #12]
 801a8b6:	059a      	lsls	r2, r3, #22
 801a8b8:	d402      	bmi.n	801a8c0 <_vfiprintf_r+0x220>
 801a8ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a8bc:	f7fd fa18 	bl	8017cf0 <__retarget_lock_release_recursive>
 801a8c0:	89ab      	ldrh	r3, [r5, #12]
 801a8c2:	065b      	lsls	r3, r3, #25
 801a8c4:	f53f af12 	bmi.w	801a6ec <_vfiprintf_r+0x4c>
 801a8c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a8ca:	e711      	b.n	801a6f0 <_vfiprintf_r+0x50>
 801a8cc:	ab03      	add	r3, sp, #12
 801a8ce:	9300      	str	r3, [sp, #0]
 801a8d0:	462a      	mov	r2, r5
 801a8d2:	4b09      	ldr	r3, [pc, #36]	; (801a8f8 <_vfiprintf_r+0x258>)
 801a8d4:	a904      	add	r1, sp, #16
 801a8d6:	4630      	mov	r0, r6
 801a8d8:	f000 f880 	bl	801a9dc <_printf_i>
 801a8dc:	e7e4      	b.n	801a8a8 <_vfiprintf_r+0x208>
 801a8de:	bf00      	nop
 801a8e0:	0801dfa4 	.word	0x0801dfa4
 801a8e4:	0801dfc4 	.word	0x0801dfc4
 801a8e8:	0801df84 	.word	0x0801df84
 801a8ec:	0801e30c 	.word	0x0801e30c
 801a8f0:	0801e316 	.word	0x0801e316
 801a8f4:	00000000 	.word	0x00000000
 801a8f8:	0801a67b 	.word	0x0801a67b
 801a8fc:	0801e312 	.word	0x0801e312

0801a900 <_printf_common>:
 801a900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a904:	4616      	mov	r6, r2
 801a906:	4699      	mov	r9, r3
 801a908:	688a      	ldr	r2, [r1, #8]
 801a90a:	690b      	ldr	r3, [r1, #16]
 801a90c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a910:	4293      	cmp	r3, r2
 801a912:	bfb8      	it	lt
 801a914:	4613      	movlt	r3, r2
 801a916:	6033      	str	r3, [r6, #0]
 801a918:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a91c:	4607      	mov	r7, r0
 801a91e:	460c      	mov	r4, r1
 801a920:	b10a      	cbz	r2, 801a926 <_printf_common+0x26>
 801a922:	3301      	adds	r3, #1
 801a924:	6033      	str	r3, [r6, #0]
 801a926:	6823      	ldr	r3, [r4, #0]
 801a928:	0699      	lsls	r1, r3, #26
 801a92a:	bf42      	ittt	mi
 801a92c:	6833      	ldrmi	r3, [r6, #0]
 801a92e:	3302      	addmi	r3, #2
 801a930:	6033      	strmi	r3, [r6, #0]
 801a932:	6825      	ldr	r5, [r4, #0]
 801a934:	f015 0506 	ands.w	r5, r5, #6
 801a938:	d106      	bne.n	801a948 <_printf_common+0x48>
 801a93a:	f104 0a19 	add.w	sl, r4, #25
 801a93e:	68e3      	ldr	r3, [r4, #12]
 801a940:	6832      	ldr	r2, [r6, #0]
 801a942:	1a9b      	subs	r3, r3, r2
 801a944:	42ab      	cmp	r3, r5
 801a946:	dc26      	bgt.n	801a996 <_printf_common+0x96>
 801a948:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a94c:	1e13      	subs	r3, r2, #0
 801a94e:	6822      	ldr	r2, [r4, #0]
 801a950:	bf18      	it	ne
 801a952:	2301      	movne	r3, #1
 801a954:	0692      	lsls	r2, r2, #26
 801a956:	d42b      	bmi.n	801a9b0 <_printf_common+0xb0>
 801a958:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a95c:	4649      	mov	r1, r9
 801a95e:	4638      	mov	r0, r7
 801a960:	47c0      	blx	r8
 801a962:	3001      	adds	r0, #1
 801a964:	d01e      	beq.n	801a9a4 <_printf_common+0xa4>
 801a966:	6823      	ldr	r3, [r4, #0]
 801a968:	68e5      	ldr	r5, [r4, #12]
 801a96a:	6832      	ldr	r2, [r6, #0]
 801a96c:	f003 0306 	and.w	r3, r3, #6
 801a970:	2b04      	cmp	r3, #4
 801a972:	bf08      	it	eq
 801a974:	1aad      	subeq	r5, r5, r2
 801a976:	68a3      	ldr	r3, [r4, #8]
 801a978:	6922      	ldr	r2, [r4, #16]
 801a97a:	bf0c      	ite	eq
 801a97c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a980:	2500      	movne	r5, #0
 801a982:	4293      	cmp	r3, r2
 801a984:	bfc4      	itt	gt
 801a986:	1a9b      	subgt	r3, r3, r2
 801a988:	18ed      	addgt	r5, r5, r3
 801a98a:	2600      	movs	r6, #0
 801a98c:	341a      	adds	r4, #26
 801a98e:	42b5      	cmp	r5, r6
 801a990:	d11a      	bne.n	801a9c8 <_printf_common+0xc8>
 801a992:	2000      	movs	r0, #0
 801a994:	e008      	b.n	801a9a8 <_printf_common+0xa8>
 801a996:	2301      	movs	r3, #1
 801a998:	4652      	mov	r2, sl
 801a99a:	4649      	mov	r1, r9
 801a99c:	4638      	mov	r0, r7
 801a99e:	47c0      	blx	r8
 801a9a0:	3001      	adds	r0, #1
 801a9a2:	d103      	bne.n	801a9ac <_printf_common+0xac>
 801a9a4:	f04f 30ff 	mov.w	r0, #4294967295
 801a9a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a9ac:	3501      	adds	r5, #1
 801a9ae:	e7c6      	b.n	801a93e <_printf_common+0x3e>
 801a9b0:	18e1      	adds	r1, r4, r3
 801a9b2:	1c5a      	adds	r2, r3, #1
 801a9b4:	2030      	movs	r0, #48	; 0x30
 801a9b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a9ba:	4422      	add	r2, r4
 801a9bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a9c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a9c4:	3302      	adds	r3, #2
 801a9c6:	e7c7      	b.n	801a958 <_printf_common+0x58>
 801a9c8:	2301      	movs	r3, #1
 801a9ca:	4622      	mov	r2, r4
 801a9cc:	4649      	mov	r1, r9
 801a9ce:	4638      	mov	r0, r7
 801a9d0:	47c0      	blx	r8
 801a9d2:	3001      	adds	r0, #1
 801a9d4:	d0e6      	beq.n	801a9a4 <_printf_common+0xa4>
 801a9d6:	3601      	adds	r6, #1
 801a9d8:	e7d9      	b.n	801a98e <_printf_common+0x8e>
	...

0801a9dc <_printf_i>:
 801a9dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a9e0:	460c      	mov	r4, r1
 801a9e2:	4691      	mov	r9, r2
 801a9e4:	7e27      	ldrb	r7, [r4, #24]
 801a9e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a9e8:	2f78      	cmp	r7, #120	; 0x78
 801a9ea:	4680      	mov	r8, r0
 801a9ec:	469a      	mov	sl, r3
 801a9ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a9f2:	d807      	bhi.n	801aa04 <_printf_i+0x28>
 801a9f4:	2f62      	cmp	r7, #98	; 0x62
 801a9f6:	d80a      	bhi.n	801aa0e <_printf_i+0x32>
 801a9f8:	2f00      	cmp	r7, #0
 801a9fa:	f000 80d8 	beq.w	801abae <_printf_i+0x1d2>
 801a9fe:	2f58      	cmp	r7, #88	; 0x58
 801aa00:	f000 80a3 	beq.w	801ab4a <_printf_i+0x16e>
 801aa04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801aa08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801aa0c:	e03a      	b.n	801aa84 <_printf_i+0xa8>
 801aa0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801aa12:	2b15      	cmp	r3, #21
 801aa14:	d8f6      	bhi.n	801aa04 <_printf_i+0x28>
 801aa16:	a001      	add	r0, pc, #4	; (adr r0, 801aa1c <_printf_i+0x40>)
 801aa18:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801aa1c:	0801aa75 	.word	0x0801aa75
 801aa20:	0801aa89 	.word	0x0801aa89
 801aa24:	0801aa05 	.word	0x0801aa05
 801aa28:	0801aa05 	.word	0x0801aa05
 801aa2c:	0801aa05 	.word	0x0801aa05
 801aa30:	0801aa05 	.word	0x0801aa05
 801aa34:	0801aa89 	.word	0x0801aa89
 801aa38:	0801aa05 	.word	0x0801aa05
 801aa3c:	0801aa05 	.word	0x0801aa05
 801aa40:	0801aa05 	.word	0x0801aa05
 801aa44:	0801aa05 	.word	0x0801aa05
 801aa48:	0801ab95 	.word	0x0801ab95
 801aa4c:	0801aab9 	.word	0x0801aab9
 801aa50:	0801ab77 	.word	0x0801ab77
 801aa54:	0801aa05 	.word	0x0801aa05
 801aa58:	0801aa05 	.word	0x0801aa05
 801aa5c:	0801abb7 	.word	0x0801abb7
 801aa60:	0801aa05 	.word	0x0801aa05
 801aa64:	0801aab9 	.word	0x0801aab9
 801aa68:	0801aa05 	.word	0x0801aa05
 801aa6c:	0801aa05 	.word	0x0801aa05
 801aa70:	0801ab7f 	.word	0x0801ab7f
 801aa74:	680b      	ldr	r3, [r1, #0]
 801aa76:	1d1a      	adds	r2, r3, #4
 801aa78:	681b      	ldr	r3, [r3, #0]
 801aa7a:	600a      	str	r2, [r1, #0]
 801aa7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801aa80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801aa84:	2301      	movs	r3, #1
 801aa86:	e0a3      	b.n	801abd0 <_printf_i+0x1f4>
 801aa88:	6825      	ldr	r5, [r4, #0]
 801aa8a:	6808      	ldr	r0, [r1, #0]
 801aa8c:	062e      	lsls	r6, r5, #24
 801aa8e:	f100 0304 	add.w	r3, r0, #4
 801aa92:	d50a      	bpl.n	801aaaa <_printf_i+0xce>
 801aa94:	6805      	ldr	r5, [r0, #0]
 801aa96:	600b      	str	r3, [r1, #0]
 801aa98:	2d00      	cmp	r5, #0
 801aa9a:	da03      	bge.n	801aaa4 <_printf_i+0xc8>
 801aa9c:	232d      	movs	r3, #45	; 0x2d
 801aa9e:	426d      	negs	r5, r5
 801aaa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801aaa4:	485e      	ldr	r0, [pc, #376]	; (801ac20 <_printf_i+0x244>)
 801aaa6:	230a      	movs	r3, #10
 801aaa8:	e019      	b.n	801aade <_printf_i+0x102>
 801aaaa:	f015 0f40 	tst.w	r5, #64	; 0x40
 801aaae:	6805      	ldr	r5, [r0, #0]
 801aab0:	600b      	str	r3, [r1, #0]
 801aab2:	bf18      	it	ne
 801aab4:	b22d      	sxthne	r5, r5
 801aab6:	e7ef      	b.n	801aa98 <_printf_i+0xbc>
 801aab8:	680b      	ldr	r3, [r1, #0]
 801aaba:	6825      	ldr	r5, [r4, #0]
 801aabc:	1d18      	adds	r0, r3, #4
 801aabe:	6008      	str	r0, [r1, #0]
 801aac0:	0628      	lsls	r0, r5, #24
 801aac2:	d501      	bpl.n	801aac8 <_printf_i+0xec>
 801aac4:	681d      	ldr	r5, [r3, #0]
 801aac6:	e002      	b.n	801aace <_printf_i+0xf2>
 801aac8:	0669      	lsls	r1, r5, #25
 801aaca:	d5fb      	bpl.n	801aac4 <_printf_i+0xe8>
 801aacc:	881d      	ldrh	r5, [r3, #0]
 801aace:	4854      	ldr	r0, [pc, #336]	; (801ac20 <_printf_i+0x244>)
 801aad0:	2f6f      	cmp	r7, #111	; 0x6f
 801aad2:	bf0c      	ite	eq
 801aad4:	2308      	moveq	r3, #8
 801aad6:	230a      	movne	r3, #10
 801aad8:	2100      	movs	r1, #0
 801aada:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801aade:	6866      	ldr	r6, [r4, #4]
 801aae0:	60a6      	str	r6, [r4, #8]
 801aae2:	2e00      	cmp	r6, #0
 801aae4:	bfa2      	ittt	ge
 801aae6:	6821      	ldrge	r1, [r4, #0]
 801aae8:	f021 0104 	bicge.w	r1, r1, #4
 801aaec:	6021      	strge	r1, [r4, #0]
 801aaee:	b90d      	cbnz	r5, 801aaf4 <_printf_i+0x118>
 801aaf0:	2e00      	cmp	r6, #0
 801aaf2:	d04d      	beq.n	801ab90 <_printf_i+0x1b4>
 801aaf4:	4616      	mov	r6, r2
 801aaf6:	fbb5 f1f3 	udiv	r1, r5, r3
 801aafa:	fb03 5711 	mls	r7, r3, r1, r5
 801aafe:	5dc7      	ldrb	r7, [r0, r7]
 801ab00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ab04:	462f      	mov	r7, r5
 801ab06:	42bb      	cmp	r3, r7
 801ab08:	460d      	mov	r5, r1
 801ab0a:	d9f4      	bls.n	801aaf6 <_printf_i+0x11a>
 801ab0c:	2b08      	cmp	r3, #8
 801ab0e:	d10b      	bne.n	801ab28 <_printf_i+0x14c>
 801ab10:	6823      	ldr	r3, [r4, #0]
 801ab12:	07df      	lsls	r7, r3, #31
 801ab14:	d508      	bpl.n	801ab28 <_printf_i+0x14c>
 801ab16:	6923      	ldr	r3, [r4, #16]
 801ab18:	6861      	ldr	r1, [r4, #4]
 801ab1a:	4299      	cmp	r1, r3
 801ab1c:	bfde      	ittt	le
 801ab1e:	2330      	movle	r3, #48	; 0x30
 801ab20:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ab24:	f106 36ff 	addle.w	r6, r6, #4294967295
 801ab28:	1b92      	subs	r2, r2, r6
 801ab2a:	6122      	str	r2, [r4, #16]
 801ab2c:	f8cd a000 	str.w	sl, [sp]
 801ab30:	464b      	mov	r3, r9
 801ab32:	aa03      	add	r2, sp, #12
 801ab34:	4621      	mov	r1, r4
 801ab36:	4640      	mov	r0, r8
 801ab38:	f7ff fee2 	bl	801a900 <_printf_common>
 801ab3c:	3001      	adds	r0, #1
 801ab3e:	d14c      	bne.n	801abda <_printf_i+0x1fe>
 801ab40:	f04f 30ff 	mov.w	r0, #4294967295
 801ab44:	b004      	add	sp, #16
 801ab46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ab4a:	4835      	ldr	r0, [pc, #212]	; (801ac20 <_printf_i+0x244>)
 801ab4c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801ab50:	6823      	ldr	r3, [r4, #0]
 801ab52:	680e      	ldr	r6, [r1, #0]
 801ab54:	061f      	lsls	r7, r3, #24
 801ab56:	f856 5b04 	ldr.w	r5, [r6], #4
 801ab5a:	600e      	str	r6, [r1, #0]
 801ab5c:	d514      	bpl.n	801ab88 <_printf_i+0x1ac>
 801ab5e:	07d9      	lsls	r1, r3, #31
 801ab60:	bf44      	itt	mi
 801ab62:	f043 0320 	orrmi.w	r3, r3, #32
 801ab66:	6023      	strmi	r3, [r4, #0]
 801ab68:	b91d      	cbnz	r5, 801ab72 <_printf_i+0x196>
 801ab6a:	6823      	ldr	r3, [r4, #0]
 801ab6c:	f023 0320 	bic.w	r3, r3, #32
 801ab70:	6023      	str	r3, [r4, #0]
 801ab72:	2310      	movs	r3, #16
 801ab74:	e7b0      	b.n	801aad8 <_printf_i+0xfc>
 801ab76:	6823      	ldr	r3, [r4, #0]
 801ab78:	f043 0320 	orr.w	r3, r3, #32
 801ab7c:	6023      	str	r3, [r4, #0]
 801ab7e:	2378      	movs	r3, #120	; 0x78
 801ab80:	4828      	ldr	r0, [pc, #160]	; (801ac24 <_printf_i+0x248>)
 801ab82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801ab86:	e7e3      	b.n	801ab50 <_printf_i+0x174>
 801ab88:	065e      	lsls	r6, r3, #25
 801ab8a:	bf48      	it	mi
 801ab8c:	b2ad      	uxthmi	r5, r5
 801ab8e:	e7e6      	b.n	801ab5e <_printf_i+0x182>
 801ab90:	4616      	mov	r6, r2
 801ab92:	e7bb      	b.n	801ab0c <_printf_i+0x130>
 801ab94:	680b      	ldr	r3, [r1, #0]
 801ab96:	6826      	ldr	r6, [r4, #0]
 801ab98:	6960      	ldr	r0, [r4, #20]
 801ab9a:	1d1d      	adds	r5, r3, #4
 801ab9c:	600d      	str	r5, [r1, #0]
 801ab9e:	0635      	lsls	r5, r6, #24
 801aba0:	681b      	ldr	r3, [r3, #0]
 801aba2:	d501      	bpl.n	801aba8 <_printf_i+0x1cc>
 801aba4:	6018      	str	r0, [r3, #0]
 801aba6:	e002      	b.n	801abae <_printf_i+0x1d2>
 801aba8:	0671      	lsls	r1, r6, #25
 801abaa:	d5fb      	bpl.n	801aba4 <_printf_i+0x1c8>
 801abac:	8018      	strh	r0, [r3, #0]
 801abae:	2300      	movs	r3, #0
 801abb0:	6123      	str	r3, [r4, #16]
 801abb2:	4616      	mov	r6, r2
 801abb4:	e7ba      	b.n	801ab2c <_printf_i+0x150>
 801abb6:	680b      	ldr	r3, [r1, #0]
 801abb8:	1d1a      	adds	r2, r3, #4
 801abba:	600a      	str	r2, [r1, #0]
 801abbc:	681e      	ldr	r6, [r3, #0]
 801abbe:	6862      	ldr	r2, [r4, #4]
 801abc0:	2100      	movs	r1, #0
 801abc2:	4630      	mov	r0, r6
 801abc4:	f7e5 fb1c 	bl	8000200 <memchr>
 801abc8:	b108      	cbz	r0, 801abce <_printf_i+0x1f2>
 801abca:	1b80      	subs	r0, r0, r6
 801abcc:	6060      	str	r0, [r4, #4]
 801abce:	6863      	ldr	r3, [r4, #4]
 801abd0:	6123      	str	r3, [r4, #16]
 801abd2:	2300      	movs	r3, #0
 801abd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801abd8:	e7a8      	b.n	801ab2c <_printf_i+0x150>
 801abda:	6923      	ldr	r3, [r4, #16]
 801abdc:	4632      	mov	r2, r6
 801abde:	4649      	mov	r1, r9
 801abe0:	4640      	mov	r0, r8
 801abe2:	47d0      	blx	sl
 801abe4:	3001      	adds	r0, #1
 801abe6:	d0ab      	beq.n	801ab40 <_printf_i+0x164>
 801abe8:	6823      	ldr	r3, [r4, #0]
 801abea:	079b      	lsls	r3, r3, #30
 801abec:	d413      	bmi.n	801ac16 <_printf_i+0x23a>
 801abee:	68e0      	ldr	r0, [r4, #12]
 801abf0:	9b03      	ldr	r3, [sp, #12]
 801abf2:	4298      	cmp	r0, r3
 801abf4:	bfb8      	it	lt
 801abf6:	4618      	movlt	r0, r3
 801abf8:	e7a4      	b.n	801ab44 <_printf_i+0x168>
 801abfa:	2301      	movs	r3, #1
 801abfc:	4632      	mov	r2, r6
 801abfe:	4649      	mov	r1, r9
 801ac00:	4640      	mov	r0, r8
 801ac02:	47d0      	blx	sl
 801ac04:	3001      	adds	r0, #1
 801ac06:	d09b      	beq.n	801ab40 <_printf_i+0x164>
 801ac08:	3501      	adds	r5, #1
 801ac0a:	68e3      	ldr	r3, [r4, #12]
 801ac0c:	9903      	ldr	r1, [sp, #12]
 801ac0e:	1a5b      	subs	r3, r3, r1
 801ac10:	42ab      	cmp	r3, r5
 801ac12:	dcf2      	bgt.n	801abfa <_printf_i+0x21e>
 801ac14:	e7eb      	b.n	801abee <_printf_i+0x212>
 801ac16:	2500      	movs	r5, #0
 801ac18:	f104 0619 	add.w	r6, r4, #25
 801ac1c:	e7f5      	b.n	801ac0a <_printf_i+0x22e>
 801ac1e:	bf00      	nop
 801ac20:	0801e31d 	.word	0x0801e31d
 801ac24:	0801e32e 	.word	0x0801e32e

0801ac28 <_read_r>:
 801ac28:	b538      	push	{r3, r4, r5, lr}
 801ac2a:	4d07      	ldr	r5, [pc, #28]	; (801ac48 <_read_r+0x20>)
 801ac2c:	4604      	mov	r4, r0
 801ac2e:	4608      	mov	r0, r1
 801ac30:	4611      	mov	r1, r2
 801ac32:	2200      	movs	r2, #0
 801ac34:	602a      	str	r2, [r5, #0]
 801ac36:	461a      	mov	r2, r3
 801ac38:	f7e9 fa80 	bl	800413c <_read>
 801ac3c:	1c43      	adds	r3, r0, #1
 801ac3e:	d102      	bne.n	801ac46 <_read_r+0x1e>
 801ac40:	682b      	ldr	r3, [r5, #0]
 801ac42:	b103      	cbz	r3, 801ac46 <_read_r+0x1e>
 801ac44:	6023      	str	r3, [r4, #0]
 801ac46:	bd38      	pop	{r3, r4, r5, pc}
 801ac48:	2000952c 	.word	0x2000952c
 801ac4c:	00000000 	.word	0x00000000

0801ac50 <nan>:
 801ac50:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801ac58 <nan+0x8>
 801ac54:	4770      	bx	lr
 801ac56:	bf00      	nop
 801ac58:	00000000 	.word	0x00000000
 801ac5c:	7ff80000 	.word	0x7ff80000

0801ac60 <__ascii_wctomb>:
 801ac60:	b149      	cbz	r1, 801ac76 <__ascii_wctomb+0x16>
 801ac62:	2aff      	cmp	r2, #255	; 0xff
 801ac64:	bf85      	ittet	hi
 801ac66:	238a      	movhi	r3, #138	; 0x8a
 801ac68:	6003      	strhi	r3, [r0, #0]
 801ac6a:	700a      	strbls	r2, [r1, #0]
 801ac6c:	f04f 30ff 	movhi.w	r0, #4294967295
 801ac70:	bf98      	it	ls
 801ac72:	2001      	movls	r0, #1
 801ac74:	4770      	bx	lr
 801ac76:	4608      	mov	r0, r1
 801ac78:	4770      	bx	lr

0801ac7a <_realloc_r>:
 801ac7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac7c:	4607      	mov	r7, r0
 801ac7e:	4614      	mov	r4, r2
 801ac80:	460e      	mov	r6, r1
 801ac82:	b921      	cbnz	r1, 801ac8e <_realloc_r+0x14>
 801ac84:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801ac88:	4611      	mov	r1, r2
 801ac8a:	f7fd b935 	b.w	8017ef8 <_malloc_r>
 801ac8e:	b922      	cbnz	r2, 801ac9a <_realloc_r+0x20>
 801ac90:	f7fd f8e2 	bl	8017e58 <_free_r>
 801ac94:	4625      	mov	r5, r4
 801ac96:	4628      	mov	r0, r5
 801ac98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ac9a:	f000 f814 	bl	801acc6 <_malloc_usable_size_r>
 801ac9e:	42a0      	cmp	r0, r4
 801aca0:	d20f      	bcs.n	801acc2 <_realloc_r+0x48>
 801aca2:	4621      	mov	r1, r4
 801aca4:	4638      	mov	r0, r7
 801aca6:	f7fd f927 	bl	8017ef8 <_malloc_r>
 801acaa:	4605      	mov	r5, r0
 801acac:	2800      	cmp	r0, #0
 801acae:	d0f2      	beq.n	801ac96 <_realloc_r+0x1c>
 801acb0:	4631      	mov	r1, r6
 801acb2:	4622      	mov	r2, r4
 801acb4:	f7fd f8a0 	bl	8017df8 <memcpy>
 801acb8:	4631      	mov	r1, r6
 801acba:	4638      	mov	r0, r7
 801acbc:	f7fd f8cc 	bl	8017e58 <_free_r>
 801acc0:	e7e9      	b.n	801ac96 <_realloc_r+0x1c>
 801acc2:	4635      	mov	r5, r6
 801acc4:	e7e7      	b.n	801ac96 <_realloc_r+0x1c>

0801acc6 <_malloc_usable_size_r>:
 801acc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801acca:	1f18      	subs	r0, r3, #4
 801accc:	2b00      	cmp	r3, #0
 801acce:	bfbc      	itt	lt
 801acd0:	580b      	ldrlt	r3, [r1, r0]
 801acd2:	18c0      	addlt	r0, r0, r3
 801acd4:	4770      	bx	lr
	...

0801acd8 <_init>:
 801acd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801acda:	bf00      	nop
 801acdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801acde:	bc08      	pop	{r3}
 801ace0:	469e      	mov	lr, r3
 801ace2:	4770      	bx	lr

0801ace4 <_fini>:
 801ace4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ace6:	bf00      	nop
 801ace8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801acea:	bc08      	pop	{r3}
 801acec:	469e      	mov	lr, r3
 801acee:	4770      	bx	lr
